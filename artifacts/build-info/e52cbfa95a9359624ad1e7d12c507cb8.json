{
	"id": "e52cbfa95a9359624ad1e7d12c507cb8",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.9",
	"solcLongVersion": "0.8.9+commit.e5eed63a",
	"input": {
		"language": "Solidity",
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		},
		"sources": {
			"PAXX.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable@4.9.2/security/PausableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/UUPSUpgradeable.sol\";\n\n/// @custom:security-contact sec@arcadia.global\ncontract PRAXXIS is Initializable, ERC20Upgradeable, ERC20BurnableUpgradeable, PausableUpgradeable, AccessControlUpgradeable, UUPSUpgradeable {\n    bytes32 public constant PAUSER_ROLE = keccak256(\"PAUSER_ROLE\");\n    bytes32 public constant UPGRADER_ROLE = keccak256(\"UPGRADER_ROLE\");\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() {\n        _disableInitializers();\n    }\n    /// \"In Ancient Greek the word praxis (πρᾶξις) referred to activity engaged in by free people.\"\n    function initialize() initializer public {\n        __ERC20_init(\"PRAXXIS\", \"PAXX\");\n        __ERC20Burnable_init();\n        __Pausable_init();\n        __AccessControl_init();\n        __UUPSUpgradeable_init();\n\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        _grantRole(PAUSER_ROLE, msg.sender);\n        _mint(msg.sender, 1000000000 * 10 ** decimals());\n        _grantRole(UPGRADER_ROLE, msg.sender);\n    }\n\n    function pause() public onlyRole(PAUSER_ROLE) {\n        _pause();\n    }\n\n    function unpause() public onlyRole(PAUSER_ROLE) {\n        _unpause();\n    }\n\n    function _beforeTokenTransfer(address from, address to, uint256 amount)\n        internal\n        whenNotPaused\n        override\n    {\n        super._beforeTokenTransfer(from, to, amount);\n    }\n\n    function _authorizeUpgrade(address newImplementation)\n        internal\n        onlyRole(UPGRADER_ROLE)\n        override\n    {}\n}"
			},
			"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/UUPSUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/UUPSUpgradeable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../interfaces/draft-IERC1822Upgradeable.sol\";\nimport \"../ERC1967/ERC1967UpgradeUpgradeable.sol\";\nimport \"./Initializable.sol\";\n\n/**\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\n *\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\n * `UUPSUpgradeable` with a custom implementation of upgrades.\n *\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\n *\n * _Available since v4.1._\n */\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\n    function __UUPSUpgradeable_init() internal onlyInitializing {\n    }\n\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\n    }\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\n    address private immutable __self = address(this);\n\n    /**\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\n     * fail.\n     */\n    modifier onlyProxy() {\n        require(address(this) != __self, \"Function must be called through delegatecall\");\n        require(_getImplementation() == __self, \"Function must be called through active proxy\");\n        _;\n    }\n\n    /**\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\n     * callable on the implementing contract but not through proxies.\n     */\n    modifier notDelegated() {\n        require(address(this) == __self, \"UUPSUpgradeable: must not be called through delegatecall\");\n        _;\n    }\n\n    /**\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\n     */\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\n        return _IMPLEMENTATION_SLOT;\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     *\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\n     */\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\n     * encoded in `data`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     *\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\n     */\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, data, true);\n    }\n\n    /**\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\n     * {upgradeTo} and {upgradeToAndCall}.\n     *\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\n     *\n     * ```solidity\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\n     * ```\n     */\n    function _authorizeUpgrade(address newImplementation) internal virtual;\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
			},
			"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/Initializable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized != type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"
			},
			"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlUpgradeable.sol\";\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../utils/StringsUpgradeable.sol\";\nimport \"../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\n    function __AccessControl_init() internal onlyInitializing {\n    }\n\n    function __AccessControl_init_unchained() internal onlyInitializing {\n    }\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        StringsUpgradeable.toHexString(account),\n                        \" is missing role \",\n                        StringsUpgradeable.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
			},
			"@openzeppelin/contracts-upgradeable@4.9.2/security/PausableUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    function __Pausable_init() internal onlyInitializing {\n        __Pausable_init_unchained();\n    }\n\n    function __Pausable_init_unchained() internal onlyInitializing {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
			},
			"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/extensions/ERC20BurnableUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20Upgradeable.sol\";\nimport \"../../../utils/ContextUpgradeable.sol\";\nimport \"../../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\nabstract contract ERC20BurnableUpgradeable is Initializable, ContextUpgradeable, ERC20Upgradeable {\n    function __ERC20Burnable_init() internal onlyInitializing {\n    }\n\n    function __ERC20Burnable_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev Destroys `amount` tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 amount) public virtual {\n        _burn(_msgSender(), amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\n     * allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `amount`.\n     */\n    function burnFrom(address account, uint256 amount) public virtual {\n        _spendAllowance(account, _msgSender(), amount);\n        _burn(account, amount);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
			},
			"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20Upgradeable.sol\";\nimport \"./extensions/IERC20MetadataUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(address from, address to, uint256 amount) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[45] private __gap;\n}\n"
			},
			"@openzeppelin/contracts-upgradeable@4.9.2/utils/ContextUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
			},
			"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/extensions/IERC20MetadataUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
			},
			"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/IERC20Upgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
			},
			"@openzeppelin/contracts-upgradeable@4.9.2/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeaconUpgradeable.sol\";\nimport \"../../interfaces/IERC1967Upgradeable.sol\";\nimport \"../../interfaces/draft-IERC1822Upgradeable.sol\";\nimport \"../../utils/AddressUpgradeable.sol\";\nimport \"../../utils/StorageSlotUpgradeable.sol\";\nimport \"../utils/Initializable.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n */\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\n    function __ERC1967Upgrade_init() internal onlyInitializing {\n    }\n\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\n    }\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(AddressUpgradeable.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            AddressUpgradeable.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\n            } catch {\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(AddressUpgradeable.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            AddressUpgradeable.functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\n        }\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
			},
			"@openzeppelin/contracts-upgradeable@4.9.2/interfaces/draft-IERC1822Upgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822ProxiableUpgradeable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"
			},
			"@openzeppelin/contracts-upgradeable@4.9.2/utils/AddressUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts-upgradeable@4.9.2/utils/introspection/ERC165Upgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\n    function __ERC165_init() internal onlyInitializing {\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
			},
			"@openzeppelin/contracts-upgradeable@4.9.2/utils/StringsUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/MathUpgradeable.sol\";\nimport \"./math/SignedMathUpgradeable.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = MathUpgradeable.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMathUpgradeable.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"
			},
			"@openzeppelin/contracts-upgradeable@4.9.2/access/IAccessControlUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControlUpgradeable {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
			},
			"@openzeppelin/contracts-upgradeable@4.9.2/utils/introspection/IERC165Upgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
			},
			"@openzeppelin/contracts-upgradeable@4.9.2/utils/math/SignedMathUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMathUpgradeable {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts-upgradeable@4.9.2/utils/math/MathUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary MathUpgradeable {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts-upgradeable@4.9.2/utils/StorageSlotUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\n * _Available since v4.9 for `string`, `bytes`._\n */\nlibrary StorageSlotUpgradeable {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts-upgradeable@4.9.2/interfaces/IERC1967Upgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\n *\n * _Available since v4.8.3._\n */\ninterface IERC1967Upgradeable {\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Emitted when the beacon is changed.\n     */\n    event BeaconUpgraded(address indexed beacon);\n}\n"
			},
			"@openzeppelin/contracts-upgradeable@4.9.2/proxy/beacon/IBeaconUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeaconUpgradeable {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
			}
		}
	},
	"output": {
		"contracts": {
			"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol": {
				"AccessControlUpgradeable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "version",
									"type": "uint8"
								}
							],
							"name": "Initialized",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "previousAdminRole",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "newAdminRole",
									"type": "bytes32"
								}
							],
							"name": "RoleAdminChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "RoleGranted",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "RoleRevoked",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "DEFAULT_ADMIN_ROLE",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								}
							],
							"name": "getRoleAdmin",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "grantRole",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "hasRole",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "renounceRole",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "revokeRole",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Contract module that allows children to implement role-based access control mechanisms. This is a lightweight version that doesn't allow enumerating role members except through off-chain means by accessing the contract event logs. Some applications may benefit from on-chain enumerability, for those cases see {AccessControlEnumerable}. Roles are referred to by their `bytes32` identifier. These should be exposed in the external API and be unique. The best way to achieve this is by using `public constant` hash digests: ```solidity bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\"); ``` Roles can be used to represent a set of permissions. To restrict access to a function call, use {hasRole}: ```solidity function foo() public {     require(hasRole(MY_ROLE, msg.sender));     ... } ``` Roles can be granted and revoked dynamically via the {grantRole} and {revokeRole} functions. Each role has an associated admin role, and only accounts that have a role's admin role can call {grantRole} and {revokeRole}. By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means that only accounts with this role will be able to grant or revoke other roles. More complex role relationships can be created by using {_setRoleAdmin}. WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to grant and revoke this role. Extra precautions should be taken to secure accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules} to enforce additional security measures for this role.",
						"kind": "dev",
						"methods": {
							"getRoleAdmin(bytes32)": {
								"details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
							},
							"grantRole(bytes32,address)": {
								"details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
							},
							"hasRole(bytes32,address)": {
								"details": "Returns `true` if `account` has been granted `role`."
							},
							"renounceRole(bytes32,address)": {
								"details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
							},
							"revokeRole(bytes32,address)": {
								"details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
							},
							"supportsInterface(bytes4)": {
								"details": "See {IERC165-supportsInterface}."
							}
						},
						"stateVariables": {
							"__gap": {
								"details": "This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"DEFAULT_ADMIN_ROLE()": "a217fddf",
							"getRoleAdmin(bytes32)": "248a9ca3",
							"grantRole(bytes32,address)": "2f2ff15d",
							"hasRole(bytes32,address)": "91d14854",
							"renounceRole(bytes32,address)": "36568abe",
							"revokeRole(bytes32,address)": "d547741f",
							"supportsInterface(bytes4)": "01ffc9a7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module that allows children to implement role-based access control mechanisms. This is a lightweight version that doesn't allow enumerating role members except through off-chain means by accessing the contract event logs. Some applications may benefit from on-chain enumerability, for those cases see {AccessControlEnumerable}. Roles are referred to by their `bytes32` identifier. These should be exposed in the external API and be unique. The best way to achieve this is by using `public constant` hash digests: ```solidity bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\"); ``` Roles can be used to represent a set of permissions. To restrict access to a function call, use {hasRole}: ```solidity function foo() public {     require(hasRole(MY_ROLE, msg.sender));     ... } ``` Roles can be granted and revoked dynamically via the {grantRole} and {revokeRole} functions. Each role has an associated admin role, and only accounts that have a role's admin role can call {grantRole} and {revokeRole}. By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means that only accounts with this role will be able to grant or revoke other roles. More complex role relationships can be created by using {_setRoleAdmin}. WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to grant and revoke this role. Extra precautions should be taken to secure accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules} to enforce additional security measures for this role.\",\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":\"AccessControlUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":{\"keccak256\":\"0xfeefb24d068524440e1ba885efdf105d91f83504af3c2d745ffacc4595396831\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3df5f6a75f86411cb20df54362ed4ec9b4c270720be20da7095f169932fa2709\",\"dweb:/ipfs/QmTThfuAwFYAvtHgZbmp6ZAbN2MVGSabAnhAbsB6JQxJCF\"]},\"@openzeppelin/contracts-upgradeable@4.9.2/access/IAccessControlUpgradeable.sol\":{\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://740cf4dc535e3082560cf5a031473029f322690fc8037fe9d5e3a8bef42e757c\",\"dweb:/ipfs/QmTQxFdfxcaueQa23VX34wAPqzruZbkzyeN58tZK2yav2b\"]},\"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f103ee2e4aecd37aac6ceefe670709cdd7613dee25fa2d4d9feaf7fc0aaa155e\",\"dweb:/ipfs/QmRiNZLoJk5k3HPMYGPGjZFd2ke1ZxjhJZkM45Ec9GH9hv\"]},\"@openzeppelin/contracts-upgradeable@4.9.2/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://310136ad60820af4177a11a61d77a3686faf5fca4942b600e08fc940db38396b\",\"dweb:/ipfs/QmbCzMNSTL7Zi7M4UCSqBrkHtp4jjxUnGbkneCZKdR1qeq\"]},\"@openzeppelin/contracts-upgradeable@4.9.2/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d6520943ea55fdf5f0bafb39ed909f64de17051bc954ff3e88c9e5621412c79c\",\"dweb:/ipfs/QmWZ4rAKTQbNG2HxGs46AcTXShsVytKeLs7CUCdCSv5N7a\"]},\"@openzeppelin/contracts-upgradeable@4.9.2/utils/StringsUpgradeable.sol\":{\"keccak256\":\"0xb96dc79b65b7c37937919dcdb356a969ce0aa2e8338322bf4dc027a3c9c9a7eb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f8613145881436fc0480fff22da4868d611e2b0c0c3da083334eb4362ce1945a\",\"dweb:/ipfs/QmPqpP3YeRbBdTJRe6Gv2eGsUaANf4J6RwTNRW36iYahfV\"]},\"@openzeppelin/contracts-upgradeable@4.9.2/utils/introspection/ERC165Upgradeable.sol\":{\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0895399d170daab2d69b4c43a0202e5a07f2e67a93b26e3354dcbedb062232f7\",\"dweb:/ipfs/QmUM1VH3XDk559Dsgh4QPvupr3YVKjz87HrSyYzzVFZbxw\"]},\"@openzeppelin/contracts-upgradeable@4.9.2/utils/introspection/IERC165Upgradeable.sol\":{\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://92ad7e572cf44e6b4b37631b44b62f9eb9fb1cf14d9ce51c1504d5dc7ccaf758\",\"dweb:/ipfs/QmcnbqX85tsWnUXPmtuPLE4SczME2sJaTfmqEFkuAJvWhy\"]},\"@openzeppelin/contracts-upgradeable@4.9.2/utils/math/MathUpgradeable.sol\":{\"keccak256\":\"0x2bc0007987c229ae7624eb29be6a9b84f6a6a5872f76248b15208b131ea41c4e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2b2835c737d073ef8b82a4cc246495a9740f43e7ff2cf130906b2449ff9bfb91\",\"dweb:/ipfs/QmSCWfNoSvvTN57ic7o1RW6NqSxxGAqbBTnLKc7QHe27qB\"]},\"@openzeppelin/contracts-upgradeable@4.9.2/utils/math/SignedMathUpgradeable.sol\":{\"keccak256\":\"0x88f6b7bba3ee33eeb741f9a0f5bc98b6e6e352d0fe4905377bb328590f84095a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://88ace2d60f265752f18903d839910be4e4e104340b2957678585b812447825d4\",\"dweb:/ipfs/QmXFkNxMc3AAGzhs2wUEZyErWQjsvoTGyYjuU5oZkFki5Z\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 780,
								"contract": "@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
								"label": "_initialized",
								"offset": 0,
								"slot": "0",
								"type": "t_uint8"
							},
							{
								"astId": 783,
								"contract": "@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
								"label": "_initializing",
								"offset": 1,
								"slot": "0",
								"type": "t_bool"
							},
							{
								"astId": 2355,
								"contract": "@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
								"label": "__gap",
								"offset": 0,
								"slot": "1",
								"type": "t_array(t_uint256)50_storage"
							},
							{
								"astId": 2738,
								"contract": "@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
								"label": "__gap",
								"offset": 0,
								"slot": "51",
								"type": "t_array(t_uint256)50_storage"
							},
							{
								"astId": 39,
								"contract": "@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
								"label": "_roles",
								"offset": 0,
								"slot": "101",
								"type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)"
							},
							{
								"astId": 334,
								"contract": "@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
								"label": "__gap",
								"offset": 0,
								"slot": "102",
								"type": "t_array(t_uint256)49_storage"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_array(t_uint256)49_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[49]",
								"numberOfBytes": "1568"
							},
							"t_array(t_uint256)50_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[50]",
								"numberOfBytes": "1600"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_bytes32": {
								"encoding": "inplace",
								"label": "bytes32",
								"numberOfBytes": "32"
							},
							"t_mapping(t_address,t_bool)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => bool)",
								"numberOfBytes": "32",
								"value": "t_bool"
							},
							"t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
								"encoding": "mapping",
								"key": "t_bytes32",
								"label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
								"numberOfBytes": "32",
								"value": "t_struct(RoleData)34_storage"
							},
							"t_struct(RoleData)34_storage": {
								"encoding": "inplace",
								"label": "struct AccessControlUpgradeable.RoleData",
								"members": [
									{
										"astId": 31,
										"contract": "@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
										"label": "members",
										"offset": 0,
										"slot": "0",
										"type": "t_mapping(t_address,t_bool)"
									},
									{
										"astId": 33,
										"contract": "@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
										"label": "adminRole",
										"offset": 0,
										"slot": "1",
										"type": "t_bytes32"
									}
								],
								"numberOfBytes": "64"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							},
							"t_uint8": {
								"encoding": "inplace",
								"label": "uint8",
								"numberOfBytes": "1"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts-upgradeable@4.9.2/access/IAccessControlUpgradeable.sol": {
				"IAccessControlUpgradeable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "previousAdminRole",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "newAdminRole",
									"type": "bytes32"
								}
							],
							"name": "RoleAdminChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "RoleGranted",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "RoleRevoked",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								}
							],
							"name": "getRoleAdmin",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "grantRole",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "hasRole",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "renounceRole",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "revokeRole",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "External interface of AccessControl declared to support ERC165 detection.",
						"events": {
							"RoleAdminChanged(bytes32,bytes32,bytes32)": {
								"details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
							},
							"RoleGranted(bytes32,address,address)": {
								"details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
							},
							"RoleRevoked(bytes32,address,address)": {
								"details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
							}
						},
						"kind": "dev",
						"methods": {
							"getRoleAdmin(bytes32)": {
								"details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {AccessControl-_setRoleAdmin}."
							},
							"grantRole(bytes32,address)": {
								"details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
							},
							"hasRole(bytes32,address)": {
								"details": "Returns `true` if `account` has been granted `role`."
							},
							"renounceRole(bytes32,address)": {
								"details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
							},
							"revokeRole(bytes32,address)": {
								"details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"getRoleAdmin(bytes32)": "248a9ca3",
							"grantRole(bytes32,address)": "2f2ff15d",
							"hasRole(bytes32,address)": "91d14854",
							"renounceRole(bytes32,address)": "36568abe",
							"revokeRole(bytes32,address)": "d547741f"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"External interface of AccessControl declared to support ERC165 detection.\",\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {AccessControl-_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable@4.9.2/access/IAccessControlUpgradeable.sol\":\"IAccessControlUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable@4.9.2/access/IAccessControlUpgradeable.sol\":{\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://740cf4dc535e3082560cf5a031473029f322690fc8037fe9d5e3a8bef42e757c\",\"dweb:/ipfs/QmTQxFdfxcaueQa23VX34wAPqzruZbkzyeN58tZK2yav2b\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts-upgradeable@4.9.2/interfaces/IERC1967Upgradeable.sol": {
				"IERC1967Upgradeable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "previousAdmin",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "newAdmin",
									"type": "address"
								}
							],
							"name": "AdminChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "beacon",
									"type": "address"
								}
							],
							"name": "BeaconUpgraded",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "implementation",
									"type": "address"
								}
							],
							"name": "Upgraded",
							"type": "event"
						}
					],
					"devdoc": {
						"details": "ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC. _Available since v4.8.3._",
						"events": {
							"AdminChanged(address,address)": {
								"details": "Emitted when the admin account has changed."
							},
							"BeaconUpgraded(address)": {
								"details": "Emitted when the beacon is changed."
							},
							"Upgraded(address)": {
								"details": "Emitted when the implementation is upgraded."
							}
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC. _Available since v4.8.3._\",\"events\":{\"AdminChanged(address,address)\":{\"details\":\"Emitted when the admin account has changed.\"},\"BeaconUpgraded(address)\":{\"details\":\"Emitted when the beacon is changed.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable@4.9.2/interfaces/IERC1967Upgradeable.sol\":\"IERC1967Upgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable@4.9.2/interfaces/IERC1967Upgradeable.sol\":{\"keccak256\":\"0x47d6e06872b12e72c79d1b5eb55842f860b5fb1207b2317c2358d2766b950a7b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ac55bf6f92fc7b90c6d79d346163a0a02bd5c648c7fede08b20e5da96d4ae2a0\",\"dweb:/ipfs/QmQoSrHhka35iKDK5iyNt8cuXXS5ANXVPjLhfsJjktB8V9\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts-upgradeable@4.9.2/interfaces/draft-IERC1822Upgradeable.sol": {
				"IERC1822ProxiableUpgradeable": {
					"abi": [
						{
							"inputs": [],
							"name": "proxiableUUID",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified proxy whose upgrades are fully controlled by the current implementation.",
						"kind": "dev",
						"methods": {
							"proxiableUUID()": {
								"details": "Returns the storage slot that the proxiable contract assumes is being used to store the implementation address. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"proxiableUUID()": "52d1902d"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified proxy whose upgrades are fully controlled by the current implementation.\",\"kind\":\"dev\",\"methods\":{\"proxiableUUID()\":{\"details\":\"Returns the storage slot that the proxiable contract assumes is being used to store the implementation address. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable@4.9.2/interfaces/draft-IERC1822Upgradeable.sol\":\"IERC1822ProxiableUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable@4.9.2/interfaces/draft-IERC1822Upgradeable.sol\":{\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://496bd9b3df2455d571018c09f0c6badd29713fdeb907c6aa09d8d28cb603f053\",\"dweb:/ipfs/QmXdJDyYs6WMwMh21dez2BYPxhSUaUYFMDtVNcn2cgFR79\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts-upgradeable@4.9.2/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol": {
				"ERC1967UpgradeUpgradeable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "previousAdmin",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "newAdmin",
									"type": "address"
								}
							],
							"name": "AdminChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "beacon",
									"type": "address"
								}
							],
							"name": "BeaconUpgraded",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "version",
									"type": "uint8"
								}
							],
							"name": "Initialized",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "implementation",
									"type": "address"
								}
							],
							"name": "Upgraded",
							"type": "event"
						}
					],
					"devdoc": {
						"details": "This abstract contract provides getters and event emitting update functions for https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots. _Available since v4.1._",
						"kind": "dev",
						"methods": {},
						"stateVariables": {
							"_ADMIN_SLOT": {
								"details": "Storage slot with the admin of the contract. This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is validated in the constructor."
							},
							"_BEACON_SLOT": {
								"details": "The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy. This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor."
							},
							"_IMPLEMENTATION_SLOT": {
								"details": "Storage slot with the address of the current implementation. This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is validated in the constructor."
							},
							"__gap": {
								"details": "This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"This abstract contract provides getters and event emitting update functions for https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots. _Available since v4.1._\",\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"_ADMIN_SLOT\":{\"details\":\"Storage slot with the admin of the contract. This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is validated in the constructor.\"},\"_BEACON_SLOT\":{\"details\":\"The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy. This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\"},\"_IMPLEMENTATION_SLOT\":{\"details\":\"Storage slot with the address of the current implementation. This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is validated in the constructor.\"},\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable@4.9.2/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":\"ERC1967UpgradeUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable@4.9.2/interfaces/IERC1967Upgradeable.sol\":{\"keccak256\":\"0x47d6e06872b12e72c79d1b5eb55842f860b5fb1207b2317c2358d2766b950a7b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ac55bf6f92fc7b90c6d79d346163a0a02bd5c648c7fede08b20e5da96d4ae2a0\",\"dweb:/ipfs/QmQoSrHhka35iKDK5iyNt8cuXXS5ANXVPjLhfsJjktB8V9\"]},\"@openzeppelin/contracts-upgradeable@4.9.2/interfaces/draft-IERC1822Upgradeable.sol\":{\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://496bd9b3df2455d571018c09f0c6badd29713fdeb907c6aa09d8d28cb603f053\",\"dweb:/ipfs/QmXdJDyYs6WMwMh21dez2BYPxhSUaUYFMDtVNcn2cgFR79\"]},\"@openzeppelin/contracts-upgradeable@4.9.2/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"keccak256\":\"0x584ebdf9c1118a7c773f98788e3f3ede01982bdf8932aa06f5acc7d54876e161\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9826c7edf276ff48b99ee217358393097c30448a71d345d287c2f6961bb1f159\",\"dweb:/ipfs/QmYXBTY9wDvffGU47yMRFJ1NFyKwpbj94VHzRzhsm6R7Gz\"]},\"@openzeppelin/contracts-upgradeable@4.9.2/proxy/beacon/IBeaconUpgradeable.sol\":{\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4dbfe1a3b3b3fb64294ce41fd2ad362e7b7012208117864f42c1a67620a6d5c1\",\"dweb:/ipfs/QmVMU5tWt7zBQMmf5cpMX8UMHV86T3kFeTxBTBjFqVWfoJ\"]},\"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f103ee2e4aecd37aac6ceefe670709cdd7613dee25fa2d4d9feaf7fc0aaa155e\",\"dweb:/ipfs/QmRiNZLoJk5k3HPMYGPGjZFd2ke1ZxjhJZkM45Ec9GH9hv\"]},\"@openzeppelin/contracts-upgradeable@4.9.2/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://310136ad60820af4177a11a61d77a3686faf5fca4942b600e08fc940db38396b\",\"dweb:/ipfs/QmbCzMNSTL7Zi7M4UCSqBrkHtp4jjxUnGbkneCZKdR1qeq\"]},\"@openzeppelin/contracts-upgradeable@4.9.2/utils/StorageSlotUpgradeable.sol\":{\"keccak256\":\"0x07ac95acad040f1fb1f6120dd0aa5f702db69446e95f82613721879d30de0908\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a9df9de7b5da1d1bd3d4b6c073d0174bc4211db60e794a321c8cb5d4eae34685\",\"dweb:/ipfs/QmWe49zj65jayrCe9jZpoWhYUZ1RiwSxyU2s7SBZnMztVy\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 780,
								"contract": "@openzeppelin/contracts-upgradeable@4.9.2/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
								"label": "_initialized",
								"offset": 0,
								"slot": "0",
								"type": "t_uint8"
							},
							{
								"astId": 783,
								"contract": "@openzeppelin/contracts-upgradeable@4.9.2/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
								"label": "_initializing",
								"offset": 1,
								"slot": "0",
								"type": "t_bool"
							},
							{
								"astId": 762,
								"contract": "@openzeppelin/contracts-upgradeable@4.9.2/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
								"label": "__gap",
								"offset": 0,
								"slot": "1",
								"type": "t_array(t_uint256)50_storage"
							}
						],
						"types": {
							"t_array(t_uint256)50_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[50]",
								"numberOfBytes": "1600"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							},
							"t_uint8": {
								"encoding": "inplace",
								"label": "uint8",
								"numberOfBytes": "1"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts-upgradeable@4.9.2/proxy/beacon/IBeaconUpgradeable.sol": {
				"IBeaconUpgradeable": {
					"abi": [
						{
							"inputs": [],
							"name": "implementation",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "This is the interface that {BeaconProxy} expects of its beacon.",
						"kind": "dev",
						"methods": {
							"implementation()": {
								"details": "Must return an address that can be used as a delegate call target. {BeaconProxy} will check that this address is a contract."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"implementation()": "5c60da1b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This is the interface that {BeaconProxy} expects of its beacon.\",\"kind\":\"dev\",\"methods\":{\"implementation()\":{\"details\":\"Must return an address that can be used as a delegate call target. {BeaconProxy} will check that this address is a contract.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable@4.9.2/proxy/beacon/IBeaconUpgradeable.sol\":\"IBeaconUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable@4.9.2/proxy/beacon/IBeaconUpgradeable.sol\":{\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4dbfe1a3b3b3fb64294ce41fd2ad362e7b7012208117864f42c1a67620a6d5c1\",\"dweb:/ipfs/QmVMU5tWt7zBQMmf5cpMX8UMHV86T3kFeTxBTBjFqVWfoJ\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/Initializable.sol": {
				"Initializable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "version",
									"type": "uint8"
								}
							],
							"name": "Initialized",
							"type": "event"
						}
					],
					"devdoc": {
						"custom:oz-upgrades-unsafe-allow": "constructor constructor() {     _disableInitializers(); } ``` ====",
						"details": "This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ```solidity contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\"MyToken\", \"MTK\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\"MyToken\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```",
						"events": {
							"Initialized(uint8)": {
								"details": "Triggered when the contract has been initialized or reinitialized."
							}
						},
						"kind": "dev",
						"methods": {},
						"stateVariables": {
							"_initialized": {
								"custom:oz-retyped-from": "bool",
								"details": "Indicates that the contract has been initialized."
							},
							"_initializing": {
								"details": "Indicates that the contract is in the process of being initialized."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor constructor() {     _disableInitializers(); } ``` ====\",\"details\":\"This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ```solidity contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\\\"MyToken\\\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"_initialized\":{\"custom:oz-retyped-from\":\"bool\",\"details\":\"Indicates that the contract has been initialized.\"},\"_initializing\":{\"details\":\"Indicates that the contract is in the process of being initialized.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/Initializable.sol\":\"Initializable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f103ee2e4aecd37aac6ceefe670709cdd7613dee25fa2d4d9feaf7fc0aaa155e\",\"dweb:/ipfs/QmRiNZLoJk5k3HPMYGPGjZFd2ke1ZxjhJZkM45Ec9GH9hv\"]},\"@openzeppelin/contracts-upgradeable@4.9.2/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://310136ad60820af4177a11a61d77a3686faf5fca4942b600e08fc940db38396b\",\"dweb:/ipfs/QmbCzMNSTL7Zi7M4UCSqBrkHtp4jjxUnGbkneCZKdR1qeq\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 780,
								"contract": "@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/Initializable.sol:Initializable",
								"label": "_initialized",
								"offset": 0,
								"slot": "0",
								"type": "t_uint8"
							},
							{
								"astId": 783,
								"contract": "@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/Initializable.sol:Initializable",
								"label": "_initializing",
								"offset": 1,
								"slot": "0",
								"type": "t_bool"
							}
						],
						"types": {
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_uint8": {
								"encoding": "inplace",
								"label": "uint8",
								"numberOfBytes": "1"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/UUPSUpgradeable.sol": {
				"UUPSUpgradeable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "previousAdmin",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "newAdmin",
									"type": "address"
								}
							],
							"name": "AdminChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "beacon",
									"type": "address"
								}
							],
							"name": "BeaconUpgraded",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "version",
									"type": "uint8"
								}
							],
							"name": "Initialized",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "implementation",
									"type": "address"
								}
							],
							"name": "Upgraded",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "proxiableUUID",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newImplementation",
									"type": "address"
								}
							],
							"name": "upgradeTo",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newImplementation",
									"type": "address"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "upgradeToAndCall",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy. A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing `UUPSUpgradeable` with a custom implementation of upgrades. The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism. _Available since v4.1._",
						"kind": "dev",
						"methods": {
							"proxiableUUID()": {
								"details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
							},
							"upgradeTo(address)": {
								"custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
								"details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
							},
							"upgradeToAndCall(address,bytes)": {
								"custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
								"details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
							}
						},
						"stateVariables": {
							"__gap": {
								"details": "This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
							},
							"__self": {
								"custom:oz-upgrades-unsafe-allow": "state-variable-immutable state-variable-assignment"
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"proxiableUUID()": "52d1902d",
							"upgradeTo(address)": "3659cfe6",
							"upgradeToAndCall(address,bytes)": "4f1ef286"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy. A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing `UUPSUpgradeable` with a custom implementation of upgrades. The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism. _Available since v4.1._\",\"kind\":\"dev\",\"methods\":{\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"upgradeTo(address)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"},\"__self\":{\"custom:oz-upgrades-unsafe-allow\":\"state-variable-immutable state-variable-assignment\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/UUPSUpgradeable.sol\":\"UUPSUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable@4.9.2/interfaces/IERC1967Upgradeable.sol\":{\"keccak256\":\"0x47d6e06872b12e72c79d1b5eb55842f860b5fb1207b2317c2358d2766b950a7b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ac55bf6f92fc7b90c6d79d346163a0a02bd5c648c7fede08b20e5da96d4ae2a0\",\"dweb:/ipfs/QmQoSrHhka35iKDK5iyNt8cuXXS5ANXVPjLhfsJjktB8V9\"]},\"@openzeppelin/contracts-upgradeable@4.9.2/interfaces/draft-IERC1822Upgradeable.sol\":{\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://496bd9b3df2455d571018c09f0c6badd29713fdeb907c6aa09d8d28cb603f053\",\"dweb:/ipfs/QmXdJDyYs6WMwMh21dez2BYPxhSUaUYFMDtVNcn2cgFR79\"]},\"@openzeppelin/contracts-upgradeable@4.9.2/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"keccak256\":\"0x584ebdf9c1118a7c773f98788e3f3ede01982bdf8932aa06f5acc7d54876e161\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9826c7edf276ff48b99ee217358393097c30448a71d345d287c2f6961bb1f159\",\"dweb:/ipfs/QmYXBTY9wDvffGU47yMRFJ1NFyKwpbj94VHzRzhsm6R7Gz\"]},\"@openzeppelin/contracts-upgradeable@4.9.2/proxy/beacon/IBeaconUpgradeable.sol\":{\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4dbfe1a3b3b3fb64294ce41fd2ad362e7b7012208117864f42c1a67620a6d5c1\",\"dweb:/ipfs/QmVMU5tWt7zBQMmf5cpMX8UMHV86T3kFeTxBTBjFqVWfoJ\"]},\"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f103ee2e4aecd37aac6ceefe670709cdd7613dee25fa2d4d9feaf7fc0aaa155e\",\"dweb:/ipfs/QmRiNZLoJk5k3HPMYGPGjZFd2ke1ZxjhJZkM45Ec9GH9hv\"]},\"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/UUPSUpgradeable.sol\":{\"keccak256\":\"0xb607cb94c27e89750f5ae2ccebcb94e654e926f6125f4fd4c6262c89875118ad\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://33e8f8d863c6943ea046fcf4972b4e815c04ab06bad195dba1d93f8ebeb8420d\",\"dweb:/ipfs/QmTQzxQTuuzPDk3eqVmYy7hv2RCXM1yt1NtubXpRbzYjaj\"]},\"@openzeppelin/contracts-upgradeable@4.9.2/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://310136ad60820af4177a11a61d77a3686faf5fca4942b600e08fc940db38396b\",\"dweb:/ipfs/QmbCzMNSTL7Zi7M4UCSqBrkHtp4jjxUnGbkneCZKdR1qeq\"]},\"@openzeppelin/contracts-upgradeable@4.9.2/utils/StorageSlotUpgradeable.sol\":{\"keccak256\":\"0x07ac95acad040f1fb1f6120dd0aa5f702db69446e95f82613721879d30de0908\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a9df9de7b5da1d1bd3d4b6c073d0174bc4211db60e794a321c8cb5d4eae34685\",\"dweb:/ipfs/QmWe49zj65jayrCe9jZpoWhYUZ1RiwSxyU2s7SBZnMztVy\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 780,
								"contract": "@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
								"label": "_initialized",
								"offset": 0,
								"slot": "0",
								"type": "t_uint8"
							},
							{
								"astId": 783,
								"contract": "@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
								"label": "_initializing",
								"offset": 1,
								"slot": "0",
								"type": "t_bool"
							},
							{
								"astId": 762,
								"contract": "@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
								"label": "__gap",
								"offset": 0,
								"slot": "1",
								"type": "t_array(t_uint256)50_storage"
							},
							{
								"astId": 1077,
								"contract": "@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
								"label": "__gap",
								"offset": 0,
								"slot": "51",
								"type": "t_array(t_uint256)50_storage"
							}
						],
						"types": {
							"t_array(t_uint256)50_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[50]",
								"numberOfBytes": "1600"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							},
							"t_uint8": {
								"encoding": "inplace",
								"label": "uint8",
								"numberOfBytes": "1"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts-upgradeable@4.9.2/security/PausableUpgradeable.sol": {
				"PausableUpgradeable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "version",
									"type": "uint8"
								}
							],
							"name": "Initialized",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "Paused",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "Unpaused",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "paused",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Contract module which allows children to implement an emergency stop mechanism that can be triggered by an authorized account. This module is used through inheritance. It will make available the modifiers `whenNotPaused` and `whenPaused`, which can be applied to the functions of your contract. Note that they will not be pausable by simply including this module, only once the modifiers are put in place.",
						"events": {
							"Paused(address)": {
								"details": "Emitted when the pause is triggered by `account`."
							},
							"Unpaused(address)": {
								"details": "Emitted when the pause is lifted by `account`."
							}
						},
						"kind": "dev",
						"methods": {
							"paused()": {
								"details": "Returns true if the contract is paused, and false otherwise."
							}
						},
						"stateVariables": {
							"__gap": {
								"details": "This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"paused()": "5c975abb"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which allows children to implement an emergency stop mechanism that can be triggered by an authorized account. This module is used through inheritance. It will make available the modifiers `whenNotPaused` and `whenPaused`, which can be applied to the functions of your contract. Note that they will not be pausable by simply including this module, only once the modifiers are put in place.\",\"events\":{\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable@4.9.2/security/PausableUpgradeable.sol\":\"PausableUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f103ee2e4aecd37aac6ceefe670709cdd7613dee25fa2d4d9feaf7fc0aaa155e\",\"dweb:/ipfs/QmRiNZLoJk5k3HPMYGPGjZFd2ke1ZxjhJZkM45Ec9GH9hv\"]},\"@openzeppelin/contracts-upgradeable@4.9.2/security/PausableUpgradeable.sol\":{\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9c7d1f5e15633ab912b74c2f57e24559e66b03232300d4b27ff0f25bc452ecad\",\"dweb:/ipfs/QmYTJkc1cntYkKQ1Tu11nBcJLakiy93Tjytc4XHELo4GmR\"]},\"@openzeppelin/contracts-upgradeable@4.9.2/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://310136ad60820af4177a11a61d77a3686faf5fca4942b600e08fc940db38396b\",\"dweb:/ipfs/QmbCzMNSTL7Zi7M4UCSqBrkHtp4jjxUnGbkneCZKdR1qeq\"]},\"@openzeppelin/contracts-upgradeable@4.9.2/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d6520943ea55fdf5f0bafb39ed909f64de17051bc954ff3e88c9e5621412c79c\",\"dweb:/ipfs/QmWZ4rAKTQbNG2HxGs46AcTXShsVytKeLs7CUCdCSv5N7a\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 780,
								"contract": "@openzeppelin/contracts-upgradeable@4.9.2/security/PausableUpgradeable.sol:PausableUpgradeable",
								"label": "_initialized",
								"offset": 0,
								"slot": "0",
								"type": "t_uint8"
							},
							{
								"astId": 783,
								"contract": "@openzeppelin/contracts-upgradeable@4.9.2/security/PausableUpgradeable.sol:PausableUpgradeable",
								"label": "_initializing",
								"offset": 1,
								"slot": "0",
								"type": "t_bool"
							},
							{
								"astId": 2355,
								"contract": "@openzeppelin/contracts-upgradeable@4.9.2/security/PausableUpgradeable.sol:PausableUpgradeable",
								"label": "__gap",
								"offset": 0,
								"slot": "1",
								"type": "t_array(t_uint256)50_storage"
							},
							{
								"astId": 1099,
								"contract": "@openzeppelin/contracts-upgradeable@4.9.2/security/PausableUpgradeable.sol:PausableUpgradeable",
								"label": "_paused",
								"offset": 0,
								"slot": "51",
								"type": "t_bool"
							},
							{
								"astId": 1204,
								"contract": "@openzeppelin/contracts-upgradeable@4.9.2/security/PausableUpgradeable.sol:PausableUpgradeable",
								"label": "__gap",
								"offset": 0,
								"slot": "52",
								"type": "t_array(t_uint256)49_storage"
							}
						],
						"types": {
							"t_array(t_uint256)49_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[49]",
								"numberOfBytes": "1568"
							},
							"t_array(t_uint256)50_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[50]",
								"numberOfBytes": "1600"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							},
							"t_uint8": {
								"encoding": "inplace",
								"label": "uint8",
								"numberOfBytes": "1"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol": {
				"ERC20Upgradeable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "version",
									"type": "uint8"
								}
							],
							"name": "Initialized",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "subtractedValue",
									"type": "uint256"
								}
							],
							"name": "decreaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "addedValue",
									"type": "uint256"
								}
							],
							"name": "increaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. For a generic mechanism see {ERC20PresetMinterPauser}. TIP: For a detailed writeup see our guide https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. The default value of {decimals} is 18. To change this, you should override this function so it returns a different value. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification. Finally, the non-standard {decreaseAllowance} and {increaseAllowance} functions have been added to mitigate the well-known issues around setting allowances. See {IERC20-approve}.",
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"decreaseAllowance(address,uint256)": {
								"details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
							},
							"increaseAllowance(address,uint256)": {
								"details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
							}
						},
						"stateVariables": {
							"__gap": {
								"details": "This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":1611:13472  contract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {... */\n  mstore(0x40, 0x80)\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":1611:13472  contract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x39509351\n      gt\n      tag_14\n      jumpi\n      dup1\n      0x39509351\n      eq\n      tag_8\n      jumpi\n      dup1\n      0x70a08231\n      eq\n      tag_9\n      jumpi\n      dup1\n      0x95d89b41\n      eq\n      tag_10\n      jumpi\n      dup1\n      0xa457c2d7\n      eq\n      tag_11\n      jumpi\n      dup1\n      0xa9059cbb\n      eq\n      tag_12\n      jumpi\n      dup1\n      0xdd62ed3e\n      eq\n      tag_13\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_14:\n      dup1\n      0x06fdde03\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x095ea7b3\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x18160ddd\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x23b872dd\n      eq\n      tag_6\n      jumpi\n      dup1\n      0x313ce567\n      eq\n      tag_7\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":2495:2593  function name() public view virtual override returns (string memory) {... */\n    tag_3:\n      tag_15\n      tag_16\n      jump\t// in\n    tag_15:\n      mload(0x40)\n      tag_17\n      swap2\n      swap1\n      tag_18\n      jump\t// in\n    tag_17:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":4781:4978  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n    tag_4:\n      tag_19\n      tag_20\n      calldatasize\n      0x04\n      tag_21\n      jump\t// in\n    tag_20:\n      tag_22\n      jump\t// in\n    tag_19:\n      mload(0x40)\n        /* \"#utility.yul\":1218:1232   */\n      swap1\n      iszero\n        /* \"#utility.yul\":1211:1233   */\n      iszero\n        /* \"#utility.yul\":1193:1234   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1181:1183   */\n      0x20\n        /* \"#utility.yul\":1166:1184   */\n      add\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":4781:4978  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n      tag_17\n        /* \"#utility.yul\":1053:1240   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":3592:3698  function totalSupply() public view virtual override returns (uint256) {... */\n    tag_5:\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":3679:3691  _totalSupply */\n      sload(0x35)\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":3592:3698  function totalSupply() public view virtual override returns (uint256) {... */\n    tag_25:\n      mload(0x40)\n        /* \"#utility.yul\":1391:1416   */\n      swap1\n      dup2\n      mstore\n        /* \"#utility.yul\":1379:1381   */\n      0x20\n        /* \"#utility.yul\":1364:1382   */\n      add\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":3592:3698  function totalSupply() public view virtual override returns (uint256) {... */\n      tag_17\n        /* \"#utility.yul\":1245:1422   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":5540:5796  function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {... */\n    tag_6:\n      tag_19\n      tag_30\n      calldatasize\n      0x04\n      tag_31\n      jump\t// in\n    tag_30:\n      tag_32\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":3441:3532  function decimals() public view virtual override returns (uint8) {... */\n    tag_7:\n      mload(0x40)\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":3523:3525  18 */\n      0x12\n        /* \"#utility.yul\":1902:1938   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1890:1892   */\n      0x20\n        /* \"#utility.yul\":1875:1893   */\n      add\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":3441:3532  function decimals() public view virtual override returns (uint8) {... */\n      tag_17\n        /* \"#utility.yul\":1760:1944   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":6191:6425  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {... */\n    tag_8:\n      tag_19\n      tag_39\n      calldatasize\n      0x04\n      tag_21\n      jump\t// in\n    tag_39:\n      tag_40\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":3756:3881  function balanceOf(address account) public view virtual override returns (uint256) {... */\n    tag_9:\n      tag_25\n      tag_43\n      calldatasize\n      0x04\n      tag_44\n      jump\t// in\n    tag_43:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":3856:3874  _balances[account] */\n      and\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":3830:3837  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":3856:3874  _balances[account] */\n      swap1\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":3856:3865  _balances */\n      0x33\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":3856:3874  _balances[account] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":3756:3881  function balanceOf(address account) public view virtual override returns (uint256) {... */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":2706:2808  function symbol() public view virtual override returns (string memory) {... */\n    tag_10:\n      tag_15\n      tag_48\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":6912:7339  function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {... */\n    tag_11:\n      tag_19\n      tag_51\n      calldatasize\n      0x04\n      tag_21\n      jump\t// in\n    tag_51:\n      tag_52\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":4077:4266  function transfer(address to, uint256 amount) public virtual override returns (bool) {... */\n    tag_12:\n      tag_19\n      tag_55\n      calldatasize\n      0x04\n      tag_21\n      jump\t// in\n    tag_55:\n      tag_56\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":4324:4473  function allowance(address owner, address spender) public view virtual override returns (uint256) {... */\n    tag_13:\n      tag_25\n      tag_59\n      calldatasize\n      0x04\n      tag_60\n      jump\t// in\n    tag_59:\n      tag_61\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":2495:2593  function name() public view virtual override returns (string memory) {... */\n    tag_16:\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":2549:2562  string memory */\n      0x60\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":2581:2586  _name */\n      0x36\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":2574:2586  return _name */\n      dup1\n      sload\n      tag_64\n      swap1\n      tag_65\n      jump\t// in\n    tag_64:\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      tag_66\n      swap1\n      tag_65\n      jump\t// in\n    tag_66:\n      dup1\n      iszero\n      tag_67\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_68\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_67)\n    tag_68:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_69:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_69\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_67:\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":2495:2593  function name() public view virtual override returns (string memory) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":4781:4978  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n    tag_22:\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":4864:4868  bool */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":4918:4950  _approve(owner, spender, amount) */\n      tag_73\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":4934:4941  spender */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":4943:4949  amount */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":4918:4926  _approve */\n      tag_74\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":4918:4950  _approve(owner, spender, amount) */\n      jump\t// in\n    tag_73:\n      pop\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":4967:4971  true */\n      0x01\n      swap4\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":4781:4978  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":5540:5796  function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {... */\n    tag_32:\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":5637:5641  bool */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":5693:5731  _spendAllowance(from, spender, amount) */\n      tag_78\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":5709:5713  from */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":5724:5730  amount */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":5693:5708  _spendAllowance */\n      tag_79\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":5693:5731  _spendAllowance(from, spender, amount) */\n      jump\t// in\n    tag_78:\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":5741:5768  _transfer(from, to, amount) */\n      tag_80\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":5751:5755  from */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":5757:5759  to */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":5761:5767  amount */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":5741:5750  _transfer */\n      tag_81\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":5741:5768  _transfer(from, to, amount) */\n      jump\t// in\n    tag_80:\n      pop\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":5785:5789  true */\n      0x01\n      swap5\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":5540:5796  function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {... */\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":6191:6425  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {... */\n    tag_40:\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":6279:6283  bool */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":6333:6397  _approve(owner, spender, allowance(owner, spender) + addedValue) */\n      tag_73\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":6349:6356  spender */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":6386:6396  addedValue */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":6358:6383  allowance(owner, spender) */\n      tag_86\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":6349:6356  spender */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":6358:6367  allowance */\n      tag_61\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":6358:6383  allowance(owner, spender) */\n      jump\t// in\n    tag_86:\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":6358:6396  allowance(owner, spender) + addedValue */\n      tag_87\n      swap2\n      swap1\n      tag_88\n      jump\t// in\n    tag_87:\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":6333:6341  _approve */\n      tag_74\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":6333:6397  _approve(owner, spender, allowance(owner, spender) + addedValue) */\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":2706:2808  function symbol() public view virtual override returns (string memory) {... */\n    tag_48:\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":2762:2775  string memory */\n      0x60\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":2794:2801  _symbol */\n      0x37\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":2787:2801  return _symbol */\n      dup1\n      sload\n      tag_64\n      swap1\n      tag_65\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":6912:7339  function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {... */\n    tag_52:\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":7005:7009  bool */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":7005:7009  bool */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":7086:7111  allowance(owner, spender) */\n      tag_98\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":7103:7110  spender */\n      dup7\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":7086:7095  allowance */\n      tag_61\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":7086:7111  allowance(owner, spender) */\n      jump\t// in\n    tag_98:\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":7059:7111  uint256 currentAllowance = allowance(owner, spender) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":7149:7164  subtractedValue */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":7129:7145  currentAllowance */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":7129:7164  currentAllowance >= subtractedValue */\n      lt\n      iszero\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":7121:7206  require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\") */\n      tag_99\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":3222:3224   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":7121:7206  require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":3204:3225   */\n      mstore\n        /* \"#utility.yul\":3261:3263   */\n      0x25\n        /* \"#utility.yul\":3241:3259   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":3234:3264   */\n      mstore\n        /* \"#utility.yul\":3300:3334   */\n      0x45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77\n        /* \"#utility.yul\":3280:3298   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":3273:3335   */\n      mstore\n      shl(0xd8, 0x207a65726f)\n        /* \"#utility.yul\":3351:3369   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":3344:3379   */\n      mstore\n        /* \"#utility.yul\":3396:3415   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":7121:7206  require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\") */\n    tag_100:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_99:\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":7240:7300  _approve(owner, spender, currentAllowance - subtractedValue) */\n      tag_80\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":7249:7254  owner */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":7256:7263  spender */\n      dup7\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":7284:7299  subtractedValue */\n      dup7\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":7265:7281  currentAllowance */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":7265:7299  currentAllowance - subtractedValue */\n      sub\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":7240:7248  _approve */\n      tag_74\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":7240:7300  _approve(owner, spender, currentAllowance - subtractedValue) */\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":4077:4266  function transfer(address to, uint256 amount) public virtual override returns (bool) {... */\n    tag_56:\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":4156:4160  bool */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":4210:4238  _transfer(owner, to, amount) */\n      tag_73\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":4227:4229  to */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":4231:4237  amount */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":4210:4219  _transfer */\n      tag_81\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":4210:4238  _transfer(owner, to, amount) */\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":4324:4473  function allowance(address owner, address spender) public view virtual override returns (uint256) {... */\n    tag_61:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":4439:4457  _allowances[owner] */\n      swap2\n      dup3\n      and\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":4413:4420  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":4439:4457  _allowances[owner] */\n      swap1\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":4439:4450  _allowances */\n      0x34\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":4439:4457  _allowances[owner] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":4439:4466  _allowances[owner][spender] */\n      swap4\n      swap1\n      swap5\n      and\n      dup3\n      mstore\n      swap2\n      swap1\n      swap2\n      mstore\n      keccak256\n      sload\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":4324:4473  function allowance(address owner, address spender) public view virtual override returns (uint256) {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":10794:11134  function _approve(address owner, address spender, uint256 amount) internal virtual {... */\n    tag_74:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":10895:10914  owner != address(0) */\n      dup4\n      and\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":10887:10955  require(owner != address(0), \"ERC20: approve from the zero address\") */\n      tag_109\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":3628:3630   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":10887:10955  require(owner != address(0), \"ERC20: approve from the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":3610:3631   */\n      mstore\n        /* \"#utility.yul\":3667:3669   */\n      0x24\n        /* \"#utility.yul\":3647:3665   */\n      dup1\n      dup3\n      add\n        /* \"#utility.yul\":3640:3670   */\n      mstore\n        /* \"#utility.yul\":3706:3740   */\n      0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464\n        /* \"#utility.yul\":3686:3704   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":3679:3741   */\n      mstore\n      shl(0xe0, 0x72657373)\n        /* \"#utility.yul\":3757:3775   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":3750:3784   */\n      mstore\n        /* \"#utility.yul\":3801:3820   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":10887:10955  require(owner != address(0), \"ERC20: approve from the zero address\") */\n      tag_100\n        /* \"#utility.yul\":3426:3826   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":10887:10955  require(owner != address(0), \"ERC20: approve from the zero address\") */\n    tag_109:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":10973:10994  spender != address(0) */\n      dup3\n      and\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":10965:11033  require(spender != address(0), \"ERC20: approve to the zero address\") */\n      tag_112\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":4033:4035   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":10965:11033  require(spender != address(0), \"ERC20: approve to the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":4015:4036   */\n      mstore\n        /* \"#utility.yul\":4072:4074   */\n      0x22\n        /* \"#utility.yul\":4052:4070   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":4045:4075   */\n      mstore\n        /* \"#utility.yul\":4111:4145   */\n      0x45524332303a20617070726f766520746f20746865207a65726f206164647265\n        /* \"#utility.yul\":4091:4109   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":4084:4146   */\n      mstore\n      shl(0xf0, 0x7373)\n        /* \"#utility.yul\":4162:4180   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":4155:4187   */\n      mstore\n        /* \"#utility.yul\":4204:4223   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":10965:11033  require(spender != address(0), \"ERC20: approve to the zero address\") */\n      tag_100\n        /* \"#utility.yul\":3831:4229   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":10965:11033  require(spender != address(0), \"ERC20: approve to the zero address\") */\n    tag_112:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":11044:11062  _allowances[owner] */\n      dup4\n      dup2\n      and\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":11044:11055  _allowances */\n      0x34\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":11044:11062  _allowances[owner] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":11044:11071  _allowances[owner][spender] */\n      swap5\n      dup8\n      and\n      dup1\n      dup5\n      mstore\n      swap5\n      dup3\n      mstore\n      swap2\n      dup3\n      swap1\n      keccak256\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":11044:11080  _allowances[owner][spender] = amount */\n      dup6\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":11095:11127  Approval(owner, spender, amount) */\n      swap1\n      mload\n        /* \"#utility.yul\":1391:1416   */\n      dup5\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":11095:11127  Approval(owner, spender, amount) */\n      0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925\n      swap2\n        /* \"#utility.yul\":1364:1382   */\n      add\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":11095:11127  Approval(owner, spender, amount) */\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":10794:11134  function _approve(address owner, address spender, uint256 amount) internal virtual {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":11415:11826  function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {... */\n    tag_79:\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":11515:11539  uint256 currentAllowance */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":11542:11567  allowance(owner, spender) */\n      tag_117\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":11552:11557  owner */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":11559:11566  spender */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":11542:11551  allowance */\n      tag_61\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":11542:11567  allowance(owner, spender) */\n      jump\t// in\n    tag_117:\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":11515:11567  uint256 currentAllowance = allowance(owner, spender) */\n      swap1\n      pop\n      not(0x00)\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":11581:11597  currentAllowance */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":11581:11618  currentAllowance != type(uint256).max */\n      eq\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":11577:11820  if (currentAllowance != type(uint256).max) {... */\n      tag_122\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":11662:11668  amount */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":11642:11658  currentAllowance */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":11642:11668  currentAllowance >= amount */\n      lt\n      iszero\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":11634:11702  require(currentAllowance >= amount, \"ERC20: insufficient allowance\") */\n      tag_119\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":4436:4438   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":11634:11702  require(currentAllowance >= amount, \"ERC20: insufficient allowance\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":4418:4439   */\n      mstore\n        /* \"#utility.yul\":4475:4477   */\n      0x1d\n        /* \"#utility.yul\":4455:4473   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":4448:4478   */\n      mstore\n        /* \"#utility.yul\":4514:4545   */\n      0x45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000\n        /* \"#utility.yul\":4494:4512   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":4487:4546   */\n      mstore\n        /* \"#utility.yul\":4563:4581   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":11634:11702  require(currentAllowance >= amount, \"ERC20: insufficient allowance\") */\n      tag_100\n        /* \"#utility.yul\":4234:4587   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":11634:11702  require(currentAllowance >= amount, \"ERC20: insufficient allowance\") */\n    tag_119:\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":11744:11795  _approve(owner, spender, currentAllowance - amount) */\n      tag_122\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":11753:11758  owner */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":11760:11767  spender */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":11788:11794  amount */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":11769:11785  currentAllowance */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":11769:11794  currentAllowance - amount */\n      sub\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":11744:11752  _approve */\n      tag_74\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":11744:11795  _approve(owner, spender, currentAllowance - amount) */\n      jump\t// in\n    tag_122:\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":11505:11826  {... */\n      pop\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":11415:11826  function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":7793:8581  function _transfer(address from, address to, uint256 amount) internal virtual {... */\n    tag_81:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":7889:7907  from != address(0) */\n      dup4\n      and\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":7881:7949  require(from != address(0), \"ERC20: transfer from the zero address\") */\n      tag_124\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":4794:4796   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":7881:7949  require(from != address(0), \"ERC20: transfer from the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":4776:4797   */\n      mstore\n        /* \"#utility.yul\":4833:4835   */\n      0x25\n        /* \"#utility.yul\":4813:4831   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":4806:4836   */\n      mstore\n        /* \"#utility.yul\":4872:4906   */\n      0x45524332303a207472616e736665722066726f6d20746865207a65726f206164\n        /* \"#utility.yul\":4852:4870   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":4845:4907   */\n      mstore\n      shl(0xd8, 0x6472657373)\n        /* \"#utility.yul\":4923:4941   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":4916:4951   */\n      mstore\n        /* \"#utility.yul\":4968:4987   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":7881:7949  require(from != address(0), \"ERC20: transfer from the zero address\") */\n      tag_100\n        /* \"#utility.yul\":4592:4993   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":7881:7949  require(from != address(0), \"ERC20: transfer from the zero address\") */\n    tag_124:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":7967:7983  to != address(0) */\n      dup3\n      and\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":7959:8023  require(to != address(0), \"ERC20: transfer to the zero address\") */\n      tag_127\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":5200:5202   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":7959:8023  require(to != address(0), \"ERC20: transfer to the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":5182:5203   */\n      mstore\n        /* \"#utility.yul\":5239:5241   */\n      0x23\n        /* \"#utility.yul\":5219:5237   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":5212:5242   */\n      mstore\n        /* \"#utility.yul\":5278:5312   */\n      0x45524332303a207472616e7366657220746f20746865207a65726f2061646472\n        /* \"#utility.yul\":5258:5276   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":5251:5313   */\n      mstore\n      shl(0xe8, 0x657373)\n        /* \"#utility.yul\":5329:5347   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":5322:5355   */\n      mstore\n        /* \"#utility.yul\":5372:5391   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":7959:8023  require(to != address(0), \"ERC20: transfer to the zero address\") */\n      tag_100\n        /* \"#utility.yul\":4998:5397   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":7959:8023  require(to != address(0), \"ERC20: transfer to the zero address\") */\n    tag_127:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":8105:8120  _balances[from] */\n      dup4\n      and\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":8083:8102  uint256 fromBalance */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":8105:8120  _balances[from] */\n      swap1\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":8105:8114  _balances */\n      0x33\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":8105:8120  _balances[from] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":8138:8159  fromBalance >= amount */\n      dup2\n      dup2\n      lt\n      iszero\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":8130:8202  require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\") */\n      tag_132\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":5604:5606   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":8130:8202  require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":5586:5607   */\n      mstore\n        /* \"#utility.yul\":5643:5645   */\n      0x26\n        /* \"#utility.yul\":5623:5641   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":5616:5646   */\n      mstore\n        /* \"#utility.yul\":5682:5716   */\n      0x45524332303a207472616e7366657220616d6f756e7420657863656564732062\n        /* \"#utility.yul\":5662:5680   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":5655:5717   */\n      mstore\n      shl(0xd0, 0x616c616e6365)\n        /* \"#utility.yul\":5733:5751   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":5726:5762   */\n      mstore\n        /* \"#utility.yul\":5779:5798   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":8130:8202  require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\") */\n      tag_100\n        /* \"#utility.yul\":5402:5804   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":8130:8202  require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\") */\n    tag_132:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":8236:8251  _balances[from] */\n      dup1\n      dup6\n      and\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":8236:8245  _balances */\n      0x33\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":8236:8251  _balances[from] */\n      0x20\n      mstore\n      0x40\n      dup1\n      dup3\n      keccak256\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":8254:8274  fromBalance - amount */\n      dup7\n      dup7\n      sub\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":8236:8274  _balances[from] = fromBalance - amount */\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":8451:8464  _balances[to] */\n      swap3\n      dup7\n      and\n      dup1\n      dup3\n      mstore\n      swap1\n      dup4\n      swap1\n      keccak256\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":8451:8474  _balances[to] += amount */\n      dup1\n      sload\n      dup7\n      add\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":8500:8526  Transfer(from, to, amount) */\n      swap2\n      mload\n      0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n      swap1\n      tag_135\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":8268:8274  amount */\n      dup7\n        /* \"#utility.yul\":1391:1416   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1379:1381   */\n      0x20\n        /* \"#utility.yul\":1364:1382   */\n      add\n      swap1\n        /* \"#utility.yul\":1245:1422   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":8500:8526  Transfer(from, to, amount) */\n    tag_135:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":8537:8574  _afterTokenTransfer(from, to, amount) */\n      tag_122\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":12410:12501  function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {} */\n      jump\n        /* \"#utility.yul\":14:611   */\n    tag_18:\n        /* \"#utility.yul\":126:130   */\n      0x00\n        /* \"#utility.yul\":155:157   */\n      0x20\n        /* \"#utility.yul\":184:186   */\n      dup1\n        /* \"#utility.yul\":173:182   */\n      dup4\n        /* \"#utility.yul\":166:187   */\n      mstore\n        /* \"#utility.yul\":216:222   */\n      dup4\n        /* \"#utility.yul\":210:223   */\n      mload\n        /* \"#utility.yul\":259:265   */\n      dup1\n        /* \"#utility.yul\":254:256   */\n      dup3\n        /* \"#utility.yul\":243:252   */\n      dup6\n        /* \"#utility.yul\":239:257   */\n      add\n        /* \"#utility.yul\":232:266   */\n      mstore\n        /* \"#utility.yul\":284:285   */\n      0x00\n        /* \"#utility.yul\":294:434   */\n    tag_143:\n        /* \"#utility.yul\":308:314   */\n      dup2\n        /* \"#utility.yul\":305:306   */\n      dup2\n        /* \"#utility.yul\":302:315   */\n      lt\n        /* \"#utility.yul\":294:434   */\n      iszero\n      tag_145\n      jumpi\n        /* \"#utility.yul\":403:417   */\n      dup6\n      dup2\n      add\n        /* \"#utility.yul\":399:422   */\n      dup4\n      add\n        /* \"#utility.yul\":393:423   */\n      mload\n        /* \"#utility.yul\":369:386   */\n      dup6\n      dup3\n      add\n        /* \"#utility.yul\":388:390   */\n      0x40\n        /* \"#utility.yul\":365:391   */\n      add\n        /* \"#utility.yul\":358:424   */\n      mstore\n        /* \"#utility.yul\":323:333   */\n      dup3\n      add\n        /* \"#utility.yul\":294:434   */\n      jump(tag_143)\n    tag_145:\n        /* \"#utility.yul\":452:458   */\n      dup2\n        /* \"#utility.yul\":449:450   */\n      dup2\n        /* \"#utility.yul\":446:459   */\n      gt\n        /* \"#utility.yul\":443:534   */\n      iszero\n      tag_146\n      jumpi\n        /* \"#utility.yul\":522:523   */\n      0x00\n        /* \"#utility.yul\":517:519   */\n      0x40\n        /* \"#utility.yul\":508:514   */\n      dup4\n        /* \"#utility.yul\":497:506   */\n      dup8\n        /* \"#utility.yul\":493:515   */\n      add\n        /* \"#utility.yul\":489:520   */\n      add\n        /* \"#utility.yul\":482:524   */\n      mstore\n        /* \"#utility.yul\":443:534   */\n    tag_146:\n      pop\n        /* \"#utility.yul\":595:597   */\n      0x1f\n        /* \"#utility.yul\":574:589   */\n      add\n      not(0x1f)\n        /* \"#utility.yul\":570:599   */\n      and\n        /* \"#utility.yul\":555:600   */\n      swap3\n      swap1\n      swap3\n      add\n        /* \"#utility.yul\":602:604   */\n      0x40\n        /* \"#utility.yul\":551:605   */\n      add\n      swap4\n        /* \"#utility.yul\":14:611   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":616:789   */\n    tag_140:\n        /* \"#utility.yul\":684:704   */\n      dup1\n      calldataload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":733:764   */\n      dup2\n      and\n        /* \"#utility.yul\":723:765   */\n      dup2\n      eq\n        /* \"#utility.yul\":713:783   */\n      tag_148\n      jumpi\n        /* \"#utility.yul\":779:780   */\n      0x00\n        /* \"#utility.yul\":776:777   */\n      dup1\n        /* \"#utility.yul\":769:781   */\n      revert\n        /* \"#utility.yul\":713:783   */\n    tag_148:\n        /* \"#utility.yul\":616:789   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":794:1048   */\n    tag_21:\n        /* \"#utility.yul\":862:868   */\n      0x00\n        /* \"#utility.yul\":870:876   */\n      dup1\n        /* \"#utility.yul\":923:925   */\n      0x40\n        /* \"#utility.yul\":911:920   */\n      dup4\n        /* \"#utility.yul\":902:909   */\n      dup6\n        /* \"#utility.yul\":898:921   */\n      sub\n        /* \"#utility.yul\":894:926   */\n      slt\n        /* \"#utility.yul\":891:943   */\n      iszero\n      tag_150\n      jumpi\n        /* \"#utility.yul\":939:940   */\n      0x00\n        /* \"#utility.yul\":936:937   */\n      dup1\n        /* \"#utility.yul\":929:941   */\n      revert\n        /* \"#utility.yul\":891:943   */\n    tag_150:\n        /* \"#utility.yul\":962:991   */\n      tag_151\n        /* \"#utility.yul\":981:990   */\n      dup4\n        /* \"#utility.yul\":962:991   */\n      tag_140\n      jump\t// in\n    tag_151:\n        /* \"#utility.yul\":952:991   */\n      swap5\n        /* \"#utility.yul\":1038:1040   */\n      0x20\n        /* \"#utility.yul\":1023:1041   */\n      swap4\n      swap1\n      swap4\n      add\n        /* \"#utility.yul\":1010:1042   */\n      calldataload\n      swap4\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":794:1048   */\n      jump\t// out\n        /* \"#utility.yul\":1427:1755   */\n    tag_31:\n        /* \"#utility.yul\":1504:1510   */\n      0x00\n        /* \"#utility.yul\":1512:1518   */\n      dup1\n        /* \"#utility.yul\":1520:1526   */\n      0x00\n        /* \"#utility.yul\":1573:1575   */\n      0x60\n        /* \"#utility.yul\":1561:1570   */\n      dup5\n        /* \"#utility.yul\":1552:1559   */\n      dup7\n        /* \"#utility.yul\":1548:1571   */\n      sub\n        /* \"#utility.yul\":1544:1576   */\n      slt\n        /* \"#utility.yul\":1541:1593   */\n      iszero\n      tag_155\n      jumpi\n        /* \"#utility.yul\":1589:1590   */\n      0x00\n        /* \"#utility.yul\":1586:1587   */\n      dup1\n        /* \"#utility.yul\":1579:1591   */\n      revert\n        /* \"#utility.yul\":1541:1593   */\n    tag_155:\n        /* \"#utility.yul\":1612:1641   */\n      tag_156\n        /* \"#utility.yul\":1631:1640   */\n      dup5\n        /* \"#utility.yul\":1612:1641   */\n      tag_140\n      jump\t// in\n    tag_156:\n        /* \"#utility.yul\":1602:1641   */\n      swap3\n      pop\n        /* \"#utility.yul\":1660:1698   */\n      tag_157\n        /* \"#utility.yul\":1694:1696   */\n      0x20\n        /* \"#utility.yul\":1683:1692   */\n      dup6\n        /* \"#utility.yul\":1679:1697   */\n      add\n        /* \"#utility.yul\":1660:1698   */\n      tag_140\n      jump\t// in\n    tag_157:\n        /* \"#utility.yul\":1650:1698   */\n      swap2\n      pop\n        /* \"#utility.yul\":1745:1747   */\n      0x40\n        /* \"#utility.yul\":1734:1743   */\n      dup5\n        /* \"#utility.yul\":1730:1748   */\n      add\n        /* \"#utility.yul\":1717:1749   */\n      calldataload\n        /* \"#utility.yul\":1707:1749   */\n      swap1\n      pop\n        /* \"#utility.yul\":1427:1755   */\n      swap3\n      pop\n      swap3\n      pop\n      swap3\n      jump\t// out\n        /* \"#utility.yul\":1949:2135   */\n    tag_44:\n        /* \"#utility.yul\":2008:2014   */\n      0x00\n        /* \"#utility.yul\":2061:2063   */\n      0x20\n        /* \"#utility.yul\":2049:2058   */\n      dup3\n        /* \"#utility.yul\":2040:2047   */\n      dup5\n        /* \"#utility.yul\":2036:2059   */\n      sub\n        /* \"#utility.yul\":2032:2064   */\n      slt\n        /* \"#utility.yul\":2029:2081   */\n      iszero\n      tag_160\n      jumpi\n        /* \"#utility.yul\":2077:2078   */\n      0x00\n        /* \"#utility.yul\":2074:2075   */\n      dup1\n        /* \"#utility.yul\":2067:2079   */\n      revert\n        /* \"#utility.yul\":2029:2081   */\n    tag_160:\n        /* \"#utility.yul\":2100:2129   */\n      tag_161\n        /* \"#utility.yul\":2119:2128   */\n      dup3\n        /* \"#utility.yul\":2100:2129   */\n      tag_140\n      jump\t// in\n    tag_161:\n        /* \"#utility.yul\":2090:2129   */\n      swap4\n        /* \"#utility.yul\":1949:2135   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2140:2400   */\n    tag_60:\n        /* \"#utility.yul\":2208:2214   */\n      0x00\n        /* \"#utility.yul\":2216:2222   */\n      dup1\n        /* \"#utility.yul\":2269:2271   */\n      0x40\n        /* \"#utility.yul\":2257:2266   */\n      dup4\n        /* \"#utility.yul\":2248:2255   */\n      dup6\n        /* \"#utility.yul\":2244:2267   */\n      sub\n        /* \"#utility.yul\":2240:2272   */\n      slt\n        /* \"#utility.yul\":2237:2289   */\n      iszero\n      tag_163\n      jumpi\n        /* \"#utility.yul\":2285:2286   */\n      0x00\n        /* \"#utility.yul\":2282:2283   */\n      dup1\n        /* \"#utility.yul\":2275:2287   */\n      revert\n        /* \"#utility.yul\":2237:2289   */\n    tag_163:\n        /* \"#utility.yul\":2308:2337   */\n      tag_164\n        /* \"#utility.yul\":2327:2336   */\n      dup4\n        /* \"#utility.yul\":2308:2337   */\n      tag_140\n      jump\t// in\n    tag_164:\n        /* \"#utility.yul\":2298:2337   */\n      swap2\n      pop\n        /* \"#utility.yul\":2356:2394   */\n      tag_165\n        /* \"#utility.yul\":2390:2392   */\n      0x20\n        /* \"#utility.yul\":2379:2388   */\n      dup5\n        /* \"#utility.yul\":2375:2393   */\n      add\n        /* \"#utility.yul\":2356:2394   */\n      tag_140\n      jump\t// in\n    tag_165:\n        /* \"#utility.yul\":2346:2394   */\n      swap1\n      pop\n        /* \"#utility.yul\":2140:2400   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2405:2785   */\n    tag_65:\n        /* \"#utility.yul\":2484:2485   */\n      0x01\n        /* \"#utility.yul\":2480:2492   */\n      dup2\n      dup2\n      shr\n      swap1\n        /* \"#utility.yul\":2527:2539   */\n      dup3\n      and\n      dup1\n        /* \"#utility.yul\":2548:2609   */\n      tag_167\n      jumpi\n        /* \"#utility.yul\":2602:2606   */\n      0x7f\n        /* \"#utility.yul\":2594:2600   */\n      dup3\n        /* \"#utility.yul\":2590:2607   */\n      and\n        /* \"#utility.yul\":2580:2607   */\n      swap2\n      pop\n        /* \"#utility.yul\":2548:2609   */\n    tag_167:\n        /* \"#utility.yul\":2655:2657   */\n      0x20\n        /* \"#utility.yul\":2647:2653   */\n      dup3\n        /* \"#utility.yul\":2644:2658   */\n      lt\n        /* \"#utility.yul\":2624:2642   */\n      dup2\n        /* \"#utility.yul\":2621:2659   */\n      eq\n        /* \"#utility.yul\":2618:2779   */\n      iszero\n      tag_168\n      jumpi\n        /* \"#utility.yul\":2701:2711   */\n      0x4e487b71\n        /* \"#utility.yul\":2696:2699   */\n      0xe0\n        /* \"#utility.yul\":2692:2712   */\n      shl\n        /* \"#utility.yul\":2689:2690   */\n      0x00\n        /* \"#utility.yul\":2682:2713   */\n      mstore\n        /* \"#utility.yul\":2736:2740   */\n      0x22\n        /* \"#utility.yul\":2733:2734   */\n      0x04\n        /* \"#utility.yul\":2726:2741   */\n      mstore\n        /* \"#utility.yul\":2764:2768   */\n      0x24\n        /* \"#utility.yul\":2761:2762   */\n      0x00\n        /* \"#utility.yul\":2754:2769   */\n      revert\n        /* \"#utility.yul\":2618:2779   */\n    tag_168:\n      pop\n        /* \"#utility.yul\":2405:2785   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2790:3015   */\n    tag_88:\n        /* \"#utility.yul\":2830:2833   */\n      0x00\n        /* \"#utility.yul\":2861:2862   */\n      dup3\n        /* \"#utility.yul\":2857:2863   */\n      not\n        /* \"#utility.yul\":2854:2855   */\n      dup3\n        /* \"#utility.yul\":2851:2864   */\n      gt\n        /* \"#utility.yul\":2848:2984   */\n      iszero\n      tag_170\n      jumpi\n        /* \"#utility.yul\":2906:2916   */\n      0x4e487b71\n        /* \"#utility.yul\":2901:2904   */\n      0xe0\n        /* \"#utility.yul\":2897:2917   */\n      shl\n        /* \"#utility.yul\":2894:2895   */\n      0x00\n        /* \"#utility.yul\":2887:2918   */\n      mstore\n        /* \"#utility.yul\":2941:2945   */\n      0x11\n        /* \"#utility.yul\":2938:2939   */\n      0x04\n        /* \"#utility.yul\":2931:2946   */\n      mstore\n        /* \"#utility.yul\":2969:2973   */\n      0x24\n        /* \"#utility.yul\":2966:2967   */\n      0x00\n        /* \"#utility.yul\":2959:2974   */\n      revert\n        /* \"#utility.yul\":2848:2984   */\n    tag_170:\n      pop\n        /* \"#utility.yul\":3000:3009   */\n      add\n      swap1\n        /* \"#utility.yul\":2790:3015   */\n      jump\t// out\n\n    auxdata: 0xa26469706673582212206e6a76470e34d807b0fb19aedbca6156b1871fc1e64408036a7b7b07cac9226264736f6c63430008090033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50610864806100206000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461012357806370a082311461013657806395d89b411461015f578063a457c2d714610167578063a9059cbb1461017a578063dd62ed3e1461018d57600080fd5b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100ef57806323b872dd14610101578063313ce56714610114575b600080fd5b6100b66101a0565b6040516100c391906106a1565b60405180910390f35b6100df6100da366004610712565b610232565b60405190151581526020016100c3565b6035545b6040519081526020016100c3565b6100df61010f36600461073c565b61024a565b604051601281526020016100c3565b6100df610131366004610712565b61026e565b6100f3610144366004610778565b6001600160a01b031660009081526033602052604090205490565b6100b6610290565b6100df610175366004610712565b61029f565b6100df610188366004610712565b61031f565b6100f361019b36600461079a565b61032d565b6060603680546101af906107cd565b80601f01602080910402602001604051908101604052809291908181526020018280546101db906107cd565b80156102285780601f106101fd57610100808354040283529160200191610228565b820191906000526020600020905b81548152906001019060200180831161020b57829003601f168201915b5050505050905090565b600033610240818585610358565b5060019392505050565b60003361025885828561047c565b6102638585856104f6565b506001949350505050565b600033610240818585610281838361032d565b61028b9190610808565b610358565b6060603780546101af906107cd565b600033816102ad828661032d565b9050838110156103125760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084015b60405180910390fd5b6102638286868403610358565b6000336102408185856104f6565b6001600160a01b03918216600090815260346020908152604080832093909416825291909152205490565b6001600160a01b0383166103ba5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610309565b6001600160a01b03821661041b5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610309565b6001600160a01b0383811660008181526034602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6000610488848461032d565b905060001981146104f057818110156104e35760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610309565b6104f08484848403610358565b50505050565b6001600160a01b03831661055a5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610309565b6001600160a01b0382166105bc5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610309565b6001600160a01b038316600090815260336020526040902054818110156106345760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610309565b6001600160a01b0380851660008181526033602052604080822086860390559286168082529083902080548601905591517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906106949086815260200190565b60405180910390a36104f0565b600060208083528351808285015260005b818110156106ce578581018301518582016040015282016106b2565b818111156106e0576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b038116811461070d57600080fd5b919050565b6000806040838503121561072557600080fd5b61072e836106f6565b946020939093013593505050565b60008060006060848603121561075157600080fd5b61075a846106f6565b9250610768602085016106f6565b9150604084013590509250925092565b60006020828403121561078a57600080fd5b610793826106f6565b9392505050565b600080604083850312156107ad57600080fd5b6107b6836106f6565b91506107c4602084016106f6565b90509250929050565b600181811c908216806107e157607f821691505b6020821081141561080257634e487b7160e01b600052602260045260246000fd5b50919050565b6000821982111561082957634e487b7160e01b600052601160045260246000fd5b50019056fea26469706673582212206e6a76470e34d807b0fb19aedbca6156b1871fc1e64408036a7b7b07cac9226264736f6c63430008090033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x864 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x39509351 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x123 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x136 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x15F JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x167 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x17A JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x18D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xAE JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xCC JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0xEF JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x101 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x114 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB6 PUSH2 0x1A0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC3 SWAP2 SWAP1 PUSH2 0x6A1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xDF PUSH2 0xDA CALLDATASIZE PUSH1 0x4 PUSH2 0x712 JUMP JUMPDEST PUSH2 0x232 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC3 JUMP JUMPDEST PUSH1 0x35 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC3 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x10F CALLDATASIZE PUSH1 0x4 PUSH2 0x73C JUMP JUMPDEST PUSH2 0x24A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC3 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x131 CALLDATASIZE PUSH1 0x4 PUSH2 0x712 JUMP JUMPDEST PUSH2 0x26E JUMP JUMPDEST PUSH2 0xF3 PUSH2 0x144 CALLDATASIZE PUSH1 0x4 PUSH2 0x778 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0xB6 PUSH2 0x290 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x175 CALLDATASIZE PUSH1 0x4 PUSH2 0x712 JUMP JUMPDEST PUSH2 0x29F JUMP JUMPDEST PUSH2 0xDF PUSH2 0x188 CALLDATASIZE PUSH1 0x4 PUSH2 0x712 JUMP JUMPDEST PUSH2 0x31F JUMP JUMPDEST PUSH2 0xF3 PUSH2 0x19B CALLDATASIZE PUSH1 0x4 PUSH2 0x79A JUMP JUMPDEST PUSH2 0x32D JUMP JUMPDEST PUSH1 0x60 PUSH1 0x36 DUP1 SLOAD PUSH2 0x1AF SWAP1 PUSH2 0x7CD JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1DB SWAP1 PUSH2 0x7CD JUMP JUMPDEST DUP1 ISZERO PUSH2 0x228 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1FD JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x228 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x20B JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x240 DUP2 DUP6 DUP6 PUSH2 0x358 JUMP JUMPDEST POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x258 DUP6 DUP3 DUP6 PUSH2 0x47C JUMP JUMPDEST PUSH2 0x263 DUP6 DUP6 DUP6 PUSH2 0x4F6 JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x240 DUP2 DUP6 DUP6 PUSH2 0x281 DUP4 DUP4 PUSH2 0x32D JUMP JUMPDEST PUSH2 0x28B SWAP2 SWAP1 PUSH2 0x808 JUMP JUMPDEST PUSH2 0x358 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x37 DUP1 SLOAD PUSH2 0x1AF SWAP1 PUSH2 0x7CD JUMP JUMPDEST PUSH1 0x0 CALLER DUP2 PUSH2 0x2AD DUP3 DUP7 PUSH2 0x32D JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x312 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x207A65726F PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x263 DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0x358 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x240 DUP2 DUP6 DUP6 PUSH2 0x4F6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x34 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x3BA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x309 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x41B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x309 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x34 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x488 DUP5 DUP5 PUSH2 0x32D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 NOT DUP2 EQ PUSH2 0x4F0 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x4E3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x309 JUMP JUMPDEST PUSH2 0x4F0 DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0x358 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x55A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x309 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x5BC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x309 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x634 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x616C616E6365 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x309 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP7 DUP7 SUB SWAP1 SSTORE SWAP3 DUP7 AND DUP1 DUP3 MSTORE SWAP1 DUP4 SWAP1 KECCAK256 DUP1 SLOAD DUP7 ADD SWAP1 SSTORE SWAP2 MLOAD PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 PUSH2 0x694 SWAP1 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x4F0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x6CE JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x6B2 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x6E0 JUMPI PUSH1 0x0 PUSH1 0x40 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x40 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x70D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x725 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x72E DUP4 PUSH2 0x6F6 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x751 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x75A DUP5 PUSH2 0x6F6 JUMP JUMPDEST SWAP3 POP PUSH2 0x768 PUSH1 0x20 DUP6 ADD PUSH2 0x6F6 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x78A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x793 DUP3 PUSH2 0x6F6 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x7AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x7B6 DUP4 PUSH2 0x6F6 JUMP JUMPDEST SWAP2 POP PUSH2 0x7C4 PUSH1 0x20 DUP5 ADD PUSH2 0x6F6 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x7E1 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x802 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x829 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH15 0x6A76470E34D807B0FB19AEDBCA6156 0xB1 DUP8 0x1F 0xC1 0xE6 DIFFICULTY ADDMOD SUB PUSH11 0x7B7B07CAC9226264736F6C PUSH4 0x43000809 STOP CALLER ",
							"sourceMap": "1611:11861:9:-:0;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@_afterTokenTransfer_1811": {
									"entryPoint": null,
									"id": 1811,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_approve_1746": {
									"entryPoint": 856,
									"id": 1746,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_beforeTokenTransfer_1800": {
									"entryPoint": null,
									"id": 1800,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_msgSender_2341": {
									"entryPoint": null,
									"id": 2341,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_spendAllowance_1789": {
									"entryPoint": 1148,
									"id": 1789,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_transfer_1572": {
									"entryPoint": 1270,
									"id": 1572,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@allowance_1367": {
									"entryPoint": 813,
									"id": 1367,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@approve_1392": {
									"entryPoint": 562,
									"id": 1392,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@balanceOf_1324": {
									"entryPoint": null,
									"id": 1324,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@decimals_1300": {
									"entryPoint": null,
									"id": 1300,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@decreaseAllowance_1495": {
									"entryPoint": 671,
									"id": 1495,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@increaseAllowance_1454": {
									"entryPoint": 622,
									"id": 1454,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@name_1280": {
									"entryPoint": 416,
									"id": 1280,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@symbol_1290": {
									"entryPoint": 656,
									"id": 1290,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@totalSupply_1310": {
									"entryPoint": null,
									"id": 1310,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@transferFrom_1425": {
									"entryPoint": 586,
									"id": 1425,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"@transfer_1349": {
									"entryPoint": 799,
									"id": 1349,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_address": {
									"entryPoint": 1782,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_address": {
									"entryPoint": 1912,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_addresst_address": {
									"entryPoint": 1946,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_addresst_addresst_uint256": {
									"entryPoint": 1852,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 3
								},
								"abi_decode_tuple_t_addresst_uint256": {
									"entryPoint": 1810,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 1697,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_add_t_uint256": {
									"entryPoint": 2056,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"extract_byte_array_length": {
									"entryPoint": 1997,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:5806:22",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:22",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "135:476:22",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "145:12:22",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "155:2:22",
																"type": "",
																"value": "32"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "149:2:22",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "173:9:22"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "184:2:22"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "166:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "166:21:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "166:21:22"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "196:27:22",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "216:6:22"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "210:5:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "210:13:22"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "200:6:22",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "243:9:22"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "254:2:22"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "239:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "239:18:22"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "259:6:22"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "232:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "232:34:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "232:34:22"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "275:10:22",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "284:1:22",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "279:1:22",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "344:90:22",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "headStart",
																									"nodeType": "YulIdentifier",
																									"src": "373:9:22"
																								},
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "384:1:22"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "369:3:22"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "369:17:22"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "388:2:22",
																							"type": "",
																							"value": "64"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "365:3:22"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "365:26:22"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"name": "value0",
																											"nodeType": "YulIdentifier",
																											"src": "407:6:22"
																										},
																										{
																											"name": "i",
																											"nodeType": "YulIdentifier",
																											"src": "415:1:22"
																										}
																									],
																									"functionName": {
																										"name": "add",
																										"nodeType": "YulIdentifier",
																										"src": "403:3:22"
																									},
																									"nodeType": "YulFunctionCall",
																									"src": "403:14:22"
																								},
																								{
																									"name": "_1",
																									"nodeType": "YulIdentifier",
																									"src": "419:2:22"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "399:3:22"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "399:23:22"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "393:5:22"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "393:30:22"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "358:6:22"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "358:66:22"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "358:66:22"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "305:1:22"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "308:6:22"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "302:2:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "302:13:22"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "316:19:22",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "318:15:22",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "327:1:22"
																				},
																				{
																					"name": "_1",
																					"nodeType": "YulIdentifier",
																					"src": "330:2:22"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "323:3:22"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "323:10:22"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "318:1:22"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "298:3:22",
																"statements": []
															},
															"src": "294:140:22"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "468:66:22",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "headStart",
																									"nodeType": "YulIdentifier",
																									"src": "497:9:22"
																								},
																								{
																									"name": "length",
																									"nodeType": "YulIdentifier",
																									"src": "508:6:22"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "493:3:22"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "493:22:22"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "517:2:22",
																							"type": "",
																							"value": "64"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "489:3:22"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "489:31:22"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "522:1:22",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "482:6:22"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "482:42:22"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "482:42:22"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "449:1:22"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "452:6:22"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "446:2:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "446:13:22"
															},
															"nodeType": "YulIf",
															"src": "443:91:22"
														},
														{
															"nodeType": "YulAssignment",
															"src": "543:62:22",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "559:9:22"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "length",
																								"nodeType": "YulIdentifier",
																								"src": "578:6:22"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "586:2:22",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nodeType": "YulIdentifier",
																							"src": "574:3:22"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "574:15:22"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "595:2:22",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nodeType": "YulIdentifier",
																							"src": "591:3:22"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "591:7:22"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "570:3:22"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "570:29:22"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "555:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "555:45:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "602:2:22",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "551:3:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "551:54:22"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "543:4:22"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "104:9:22",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "115:6:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "126:4:22",
														"type": ""
													}
												],
												"src": "14:597:22"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "665:124:22",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "675:29:22",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "697:6:22"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "684:12:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "684:20:22"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "675:5:22"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "767:16:22",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "776:1:22",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "779:1:22",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "769:6:22"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "769:12:22"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "769:12:22"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "726:5:22"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "737:5:22"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "752:3:22",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "757:1:22",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nodeType": "YulIdentifier",
																									"src": "748:3:22"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "748:11:22"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "761:1:22",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "744:3:22"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "744:19:22"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "733:3:22"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "733:31:22"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "723:2:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "723:42:22"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "716:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "716:50:22"
															},
															"nodeType": "YulIf",
															"src": "713:70:22"
														}
													]
												},
												"name": "abi_decode_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "644:6:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "655:5:22",
														"type": ""
													}
												],
												"src": "616:173:22"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "881:167:22",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "927:16:22",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "936:1:22",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "939:1:22",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "929:6:22"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "929:12:22"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "929:12:22"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "902:7:22"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "911:9:22"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "898:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "898:23:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "923:2:22",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "894:3:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "894:32:22"
															},
															"nodeType": "YulIf",
															"src": "891:52:22"
														},
														{
															"nodeType": "YulAssignment",
															"src": "952:39:22",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "981:9:22"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "962:18:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "962:29:22"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "952:6:22"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1000:42:22",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1027:9:22"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1038:2:22",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1023:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1023:18:22"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1010:12:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "1010:32:22"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "1000:6:22"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "839:9:22",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "850:7:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "862:6:22",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "870:6:22",
														"type": ""
													}
												],
												"src": "794:254:22"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1148:92:22",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1158:26:22",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1170:9:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1181:2:22",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1166:3:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "1166:18:22"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1158:4:22"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1200:9:22"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value0",
																						"nodeType": "YulIdentifier",
																						"src": "1225:6:22"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "1218:6:22"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1218:14:22"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "1211:6:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1211:22:22"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1193:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "1193:41:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1193:41:22"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1117:9:22",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1128:6:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1139:4:22",
														"type": ""
													}
												],
												"src": "1053:187:22"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1346:76:22",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1356:26:22",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1368:9:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1379:2:22",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1364:3:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "1364:18:22"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1356:4:22"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1398:9:22"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "1409:6:22"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1391:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "1391:25:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1391:25:22"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1315:9:22",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1326:6:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1337:4:22",
														"type": ""
													}
												],
												"src": "1245:177:22"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1531:224:22",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1577:16:22",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1586:1:22",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1589:1:22",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1579:6:22"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1579:12:22"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1579:12:22"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1552:7:22"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1561:9:22"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1548:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1548:23:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1573:2:22",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1544:3:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "1544:32:22"
															},
															"nodeType": "YulIf",
															"src": "1541:52:22"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1602:39:22",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1631:9:22"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "1612:18:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "1612:29:22"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1602:6:22"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1650:48:22",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1683:9:22"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1694:2:22",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1679:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1679:18:22"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "1660:18:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "1660:38:22"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "1650:6:22"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1707:42:22",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1734:9:22"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1745:2:22",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1730:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1730:18:22"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1717:12:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "1717:32:22"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "1707:6:22"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_addresst_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1481:9:22",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1492:7:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1504:6:22",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1512:6:22",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "1520:6:22",
														"type": ""
													}
												],
												"src": "1427:328:22"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1857:87:22",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1867:26:22",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1879:9:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1890:2:22",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1875:3:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "1875:18:22"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1867:4:22"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1909:9:22"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "1924:6:22"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1932:4:22",
																				"type": "",
																				"value": "0xff"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "1920:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1920:17:22"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1902:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "1902:36:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1902:36:22"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1826:9:22",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1837:6:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1848:4:22",
														"type": ""
													}
												],
												"src": "1760:184:22"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2019:116:22",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2065:16:22",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2074:1:22",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2077:1:22",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2067:6:22"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2067:12:22"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2067:12:22"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2040:7:22"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2049:9:22"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2036:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2036:23:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2061:2:22",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2032:3:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "2032:32:22"
															},
															"nodeType": "YulIf",
															"src": "2029:52:22"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2090:39:22",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2119:9:22"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "2100:18:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "2100:29:22"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "2090:6:22"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1985:9:22",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1996:7:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2008:6:22",
														"type": ""
													}
												],
												"src": "1949:186:22"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2227:173:22",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2273:16:22",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2282:1:22",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2285:1:22",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2275:6:22"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2275:12:22"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2275:12:22"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2248:7:22"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2257:9:22"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2244:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2244:23:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2269:2:22",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2240:3:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "2240:32:22"
															},
															"nodeType": "YulIf",
															"src": "2237:52:22"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2298:39:22",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2327:9:22"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "2308:18:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "2308:29:22"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "2298:6:22"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2346:48:22",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2379:9:22"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2390:2:22",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2375:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2375:18:22"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "2356:18:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "2356:38:22"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "2346:6:22"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2185:9:22",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "2196:7:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2208:6:22",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "2216:6:22",
														"type": ""
													}
												],
												"src": "2140:260:22"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2460:325:22",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2470:22:22",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2484:1:22",
																		"type": "",
																		"value": "1"
																	},
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "2487:4:22"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "2480:3:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "2480:12:22"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "2470:6:22"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2501:38:22",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "2531:4:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2537:1:22",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "2527:3:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "2527:12:22"
															},
															"variables": [
																{
																	"name": "outOfPlaceEncoding",
																	"nodeType": "YulTypedName",
																	"src": "2505:18:22",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2578:31:22",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "2580:27:22",
																		"value": {
																			"arguments": [
																				{
																					"name": "length",
																					"nodeType": "YulIdentifier",
																					"src": "2594:6:22"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2602:4:22",
																					"type": "",
																					"value": "0x7f"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nodeType": "YulIdentifier",
																				"src": "2590:3:22"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2590:17:22"
																		},
																		"variableNames": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "2580:6:22"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "2558:18:22"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "2551:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "2551:26:22"
															},
															"nodeType": "YulIf",
															"src": "2548:61:22"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2668:111:22",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2689:1:22",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "2696:3:22",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "2701:10:22",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "2692:3:22"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "2692:20:22"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "2682:6:22"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2682:31:22"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2682:31:22"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2733:1:22",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2736:4:22",
																					"type": "",
																					"value": "0x22"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "2726:6:22"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2726:15:22"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2726:15:22"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2761:1:22",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2764:4:22",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2754:6:22"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2754:15:22"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2754:15:22"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "2624:18:22"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "2647:6:22"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2655:2:22",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "2644:2:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2644:14:22"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "2621:2:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "2621:38:22"
															},
															"nodeType": "YulIf",
															"src": "2618:161:22"
														}
													]
												},
												"name": "extract_byte_array_length",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "2440:4:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "2449:6:22",
														"type": ""
													}
												],
												"src": "2405:380:22"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2838:177:22",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2873:111:22",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2894:1:22",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "2901:3:22",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "2906:10:22",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "2897:3:22"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "2897:20:22"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "2887:6:22"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2887:31:22"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2887:31:22"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2938:1:22",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2941:4:22",
																					"type": "",
																					"value": "0x11"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "2931:6:22"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2931:15:22"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2931:15:22"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2966:1:22",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2969:4:22",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2959:6:22"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2959:15:22"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2959:15:22"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "2854:1:22"
																	},
																	{
																		"arguments": [
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "2861:1:22"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "2857:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2857:6:22"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "2851:2:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "2851:13:22"
															},
															"nodeType": "YulIf",
															"src": "2848:136:22"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2993:16:22",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "3004:1:22"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "3007:1:22"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3000:3:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "3000:9:22"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nodeType": "YulIdentifier",
																	"src": "2993:3:22"
																}
															]
														}
													]
												},
												"name": "checked_add_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "2821:1:22",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "2824:1:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nodeType": "YulTypedName",
														"src": "2830:3:22",
														"type": ""
													}
												],
												"src": "2790:225:22"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3194:227:22",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3211:9:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3222:2:22",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3204:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "3204:21:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3204:21:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3245:9:22"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3256:2:22",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3241:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3241:18:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3261:2:22",
																		"type": "",
																		"value": "37"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3234:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "3234:30:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3234:30:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3284:9:22"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3295:2:22",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3280:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3280:18:22"
																	},
																	{
																		"hexValue": "45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3300:34:22",
																		"type": "",
																		"value": "ERC20: decreased allowance below"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3273:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "3273:62:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3273:62:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3355:9:22"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3366:2:22",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3351:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3351:18:22"
																	},
																	{
																		"hexValue": "207a65726f",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3371:7:22",
																		"type": "",
																		"value": " zero"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3344:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "3344:35:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3344:35:22"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3388:27:22",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3400:9:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3411:3:22",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3396:3:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "3396:19:22"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3388:4:22"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3171:9:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3185:4:22",
														"type": ""
													}
												],
												"src": "3020:401:22"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3600:226:22",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3617:9:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3628:2:22",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3610:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "3610:21:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3610:21:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3651:9:22"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3662:2:22",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3647:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3647:18:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3667:2:22",
																		"type": "",
																		"value": "36"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3640:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "3640:30:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3640:30:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3690:9:22"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3701:2:22",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3686:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3686:18:22"
																	},
																	{
																		"hexValue": "45524332303a20617070726f76652066726f6d20746865207a65726f20616464",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3706:34:22",
																		"type": "",
																		"value": "ERC20: approve from the zero add"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3679:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "3679:62:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3679:62:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3761:9:22"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3772:2:22",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3757:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3757:18:22"
																	},
																	{
																		"hexValue": "72657373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3777:6:22",
																		"type": "",
																		"value": "ress"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3750:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "3750:34:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3750:34:22"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3793:27:22",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3805:9:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3816:3:22",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3801:3:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "3801:19:22"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3793:4:22"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3577:9:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3591:4:22",
														"type": ""
													}
												],
												"src": "3426:400:22"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4005:224:22",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4022:9:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4033:2:22",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4015:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "4015:21:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4015:21:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4056:9:22"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4067:2:22",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4052:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4052:18:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4072:2:22",
																		"type": "",
																		"value": "34"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4045:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "4045:30:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4045:30:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4095:9:22"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4106:2:22",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4091:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4091:18:22"
																	},
																	{
																		"hexValue": "45524332303a20617070726f766520746f20746865207a65726f206164647265",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4111:34:22",
																		"type": "",
																		"value": "ERC20: approve to the zero addre"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4084:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "4084:62:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4084:62:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4166:9:22"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4177:2:22",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4162:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4162:18:22"
																	},
																	{
																		"hexValue": "7373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4182:4:22",
																		"type": "",
																		"value": "ss"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4155:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "4155:32:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4155:32:22"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4196:27:22",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4208:9:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4219:3:22",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4204:3:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "4204:19:22"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4196:4:22"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3982:9:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3996:4:22",
														"type": ""
													}
												],
												"src": "3831:398:22"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4408:179:22",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4425:9:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4436:2:22",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4418:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "4418:21:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4418:21:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4459:9:22"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4470:2:22",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4455:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4455:18:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4475:2:22",
																		"type": "",
																		"value": "29"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4448:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "4448:30:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4448:30:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4498:9:22"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4509:2:22",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4494:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4494:18:22"
																	},
																	{
																		"hexValue": "45524332303a20696e73756666696369656e7420616c6c6f77616e6365",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4514:31:22",
																		"type": "",
																		"value": "ERC20: insufficient allowance"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4487:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "4487:59:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4487:59:22"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4555:26:22",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4567:9:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4578:2:22",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4563:3:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "4563:18:22"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4555:4:22"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4385:9:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4399:4:22",
														"type": ""
													}
												],
												"src": "4234:353:22"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4766:227:22",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4783:9:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4794:2:22",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4776:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "4776:21:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4776:21:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4817:9:22"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4828:2:22",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4813:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4813:18:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4833:2:22",
																		"type": "",
																		"value": "37"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4806:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "4806:30:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4806:30:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4856:9:22"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4867:2:22",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4852:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4852:18:22"
																	},
																	{
																		"hexValue": "45524332303a207472616e736665722066726f6d20746865207a65726f206164",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4872:34:22",
																		"type": "",
																		"value": "ERC20: transfer from the zero ad"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4845:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "4845:62:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4845:62:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4927:9:22"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4938:2:22",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4923:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4923:18:22"
																	},
																	{
																		"hexValue": "6472657373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4943:7:22",
																		"type": "",
																		"value": "dress"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4916:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "4916:35:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4916:35:22"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4960:27:22",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4972:9:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4983:3:22",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4968:3:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "4968:19:22"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4960:4:22"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4743:9:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4757:4:22",
														"type": ""
													}
												],
												"src": "4592:401:22"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5172:225:22",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5189:9:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5200:2:22",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5182:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "5182:21:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5182:21:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5223:9:22"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5234:2:22",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5219:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5219:18:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5239:2:22",
																		"type": "",
																		"value": "35"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5212:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "5212:30:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5212:30:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5262:9:22"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5273:2:22",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5258:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5258:18:22"
																	},
																	{
																		"hexValue": "45524332303a207472616e7366657220746f20746865207a65726f2061646472",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5278:34:22",
																		"type": "",
																		"value": "ERC20: transfer to the zero addr"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5251:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "5251:62:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5251:62:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5333:9:22"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5344:2:22",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5329:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5329:18:22"
																	},
																	{
																		"hexValue": "657373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5349:5:22",
																		"type": "",
																		"value": "ess"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5322:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "5322:33:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5322:33:22"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5364:27:22",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5376:9:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5387:3:22",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5372:3:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "5372:19:22"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5364:4:22"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5149:9:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5163:4:22",
														"type": ""
													}
												],
												"src": "4998:399:22"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5576:228:22",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5593:9:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5604:2:22",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5586:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "5586:21:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5586:21:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5627:9:22"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5638:2:22",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5623:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5623:18:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5643:2:22",
																		"type": "",
																		"value": "38"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5616:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "5616:30:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5616:30:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5666:9:22"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5677:2:22",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5662:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5662:18:22"
																	},
																	{
																		"hexValue": "45524332303a207472616e7366657220616d6f756e7420657863656564732062",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5682:34:22",
																		"type": "",
																		"value": "ERC20: transfer amount exceeds b"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5655:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "5655:62:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5655:62:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5737:9:22"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5748:2:22",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5733:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5733:18:22"
																	},
																	{
																		"hexValue": "616c616e6365",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5753:8:22",
																		"type": "",
																		"value": "alance"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5726:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "5726:36:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5726:36:22"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5771:27:22",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5783:9:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5794:3:22",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5779:3:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "5779:19:22"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5771:4:22"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5553:9:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5567:4:22",
														"type": ""
													}
												],
												"src": "5402:402:22"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        mstore(headStart, _1)\n        let length := mload(value0)\n        mstore(add(headStart, _1), length)\n        let i := 0\n        for { } lt(i, length) { i := add(i, _1) }\n        {\n            mstore(add(add(headStart, i), 64), mload(add(add(value0, i), _1)))\n        }\n        if gt(i, length)\n        {\n            mstore(add(add(headStart, length), 64), 0)\n        }\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n        sum := add(x, y)\n    }\n    function abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC20: decreased allowance below\")\n        mstore(add(headStart, 96), \" zero\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 36)\n        mstore(add(headStart, 64), \"ERC20: approve from the zero add\")\n        mstore(add(headStart, 96), \"ress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 34)\n        mstore(add(headStart, 64), \"ERC20: approve to the zero addre\")\n        mstore(add(headStart, 96), \"ss\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"ERC20: insufficient allowance\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC20: transfer from the zero ad\")\n        mstore(add(headStart, 96), \"dress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 35)\n        mstore(add(headStart, 64), \"ERC20: transfer to the zero addr\")\n        mstore(add(headStart, 96), \"ess\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"ERC20: transfer amount exceeds b\")\n        mstore(add(headStart, 96), \"alance\")\n        tail := add(headStart, 128)\n    }\n}",
									"id": 22,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461012357806370a082311461013657806395d89b411461015f578063a457c2d714610167578063a9059cbb1461017a578063dd62ed3e1461018d57600080fd5b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100ef57806323b872dd14610101578063313ce56714610114575b600080fd5b6100b66101a0565b6040516100c391906106a1565b60405180910390f35b6100df6100da366004610712565b610232565b60405190151581526020016100c3565b6035545b6040519081526020016100c3565b6100df61010f36600461073c565b61024a565b604051601281526020016100c3565b6100df610131366004610712565b61026e565b6100f3610144366004610778565b6001600160a01b031660009081526033602052604090205490565b6100b6610290565b6100df610175366004610712565b61029f565b6100df610188366004610712565b61031f565b6100f361019b36600461079a565b61032d565b6060603680546101af906107cd565b80601f01602080910402602001604051908101604052809291908181526020018280546101db906107cd565b80156102285780601f106101fd57610100808354040283529160200191610228565b820191906000526020600020905b81548152906001019060200180831161020b57829003601f168201915b5050505050905090565b600033610240818585610358565b5060019392505050565b60003361025885828561047c565b6102638585856104f6565b506001949350505050565b600033610240818585610281838361032d565b61028b9190610808565b610358565b6060603780546101af906107cd565b600033816102ad828661032d565b9050838110156103125760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084015b60405180910390fd5b6102638286868403610358565b6000336102408185856104f6565b6001600160a01b03918216600090815260346020908152604080832093909416825291909152205490565b6001600160a01b0383166103ba5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610309565b6001600160a01b03821661041b5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610309565b6001600160a01b0383811660008181526034602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6000610488848461032d565b905060001981146104f057818110156104e35760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610309565b6104f08484848403610358565b50505050565b6001600160a01b03831661055a5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610309565b6001600160a01b0382166105bc5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610309565b6001600160a01b038316600090815260336020526040902054818110156106345760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610309565b6001600160a01b0380851660008181526033602052604080822086860390559286168082529083902080548601905591517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906106949086815260200190565b60405180910390a36104f0565b600060208083528351808285015260005b818110156106ce578581018301518582016040015282016106b2565b818111156106e0576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b038116811461070d57600080fd5b919050565b6000806040838503121561072557600080fd5b61072e836106f6565b946020939093013593505050565b60008060006060848603121561075157600080fd5b61075a846106f6565b9250610768602085016106f6565b9150604084013590509250925092565b60006020828403121561078a57600080fd5b610793826106f6565b9392505050565b600080604083850312156107ad57600080fd5b6107b6836106f6565b91506107c4602084016106f6565b90509250929050565b600181811c908216806107e157607f821691505b6020821081141561080257634e487b7160e01b600052602260045260246000fd5b50919050565b6000821982111561082957634e487b7160e01b600052601160045260246000fd5b50019056fea26469706673582212206e6a76470e34d807b0fb19aedbca6156b1871fc1e64408036a7b7b07cac9226264736f6c63430008090033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x39509351 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x123 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x136 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x15F JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x167 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x17A JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x18D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xAE JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xCC JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0xEF JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x101 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x114 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB6 PUSH2 0x1A0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC3 SWAP2 SWAP1 PUSH2 0x6A1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xDF PUSH2 0xDA CALLDATASIZE PUSH1 0x4 PUSH2 0x712 JUMP JUMPDEST PUSH2 0x232 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC3 JUMP JUMPDEST PUSH1 0x35 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC3 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x10F CALLDATASIZE PUSH1 0x4 PUSH2 0x73C JUMP JUMPDEST PUSH2 0x24A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC3 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x131 CALLDATASIZE PUSH1 0x4 PUSH2 0x712 JUMP JUMPDEST PUSH2 0x26E JUMP JUMPDEST PUSH2 0xF3 PUSH2 0x144 CALLDATASIZE PUSH1 0x4 PUSH2 0x778 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0xB6 PUSH2 0x290 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x175 CALLDATASIZE PUSH1 0x4 PUSH2 0x712 JUMP JUMPDEST PUSH2 0x29F JUMP JUMPDEST PUSH2 0xDF PUSH2 0x188 CALLDATASIZE PUSH1 0x4 PUSH2 0x712 JUMP JUMPDEST PUSH2 0x31F JUMP JUMPDEST PUSH2 0xF3 PUSH2 0x19B CALLDATASIZE PUSH1 0x4 PUSH2 0x79A JUMP JUMPDEST PUSH2 0x32D JUMP JUMPDEST PUSH1 0x60 PUSH1 0x36 DUP1 SLOAD PUSH2 0x1AF SWAP1 PUSH2 0x7CD JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1DB SWAP1 PUSH2 0x7CD JUMP JUMPDEST DUP1 ISZERO PUSH2 0x228 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1FD JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x228 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x20B JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x240 DUP2 DUP6 DUP6 PUSH2 0x358 JUMP JUMPDEST POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x258 DUP6 DUP3 DUP6 PUSH2 0x47C JUMP JUMPDEST PUSH2 0x263 DUP6 DUP6 DUP6 PUSH2 0x4F6 JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x240 DUP2 DUP6 DUP6 PUSH2 0x281 DUP4 DUP4 PUSH2 0x32D JUMP JUMPDEST PUSH2 0x28B SWAP2 SWAP1 PUSH2 0x808 JUMP JUMPDEST PUSH2 0x358 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x37 DUP1 SLOAD PUSH2 0x1AF SWAP1 PUSH2 0x7CD JUMP JUMPDEST PUSH1 0x0 CALLER DUP2 PUSH2 0x2AD DUP3 DUP7 PUSH2 0x32D JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x312 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x207A65726F PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x263 DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0x358 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x240 DUP2 DUP6 DUP6 PUSH2 0x4F6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x34 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x3BA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x309 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x41B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x309 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x34 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x488 DUP5 DUP5 PUSH2 0x32D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 NOT DUP2 EQ PUSH2 0x4F0 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x4E3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x309 JUMP JUMPDEST PUSH2 0x4F0 DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0x358 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x55A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x309 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x5BC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x309 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x634 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x616C616E6365 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x309 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP7 DUP7 SUB SWAP1 SSTORE SWAP3 DUP7 AND DUP1 DUP3 MSTORE SWAP1 DUP4 SWAP1 KECCAK256 DUP1 SLOAD DUP7 ADD SWAP1 SSTORE SWAP2 MLOAD PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 PUSH2 0x694 SWAP1 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x4F0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x6CE JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x6B2 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x6E0 JUMPI PUSH1 0x0 PUSH1 0x40 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x40 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x70D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x725 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x72E DUP4 PUSH2 0x6F6 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x751 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x75A DUP5 PUSH2 0x6F6 JUMP JUMPDEST SWAP3 POP PUSH2 0x768 PUSH1 0x20 DUP6 ADD PUSH2 0x6F6 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x78A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x793 DUP3 PUSH2 0x6F6 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x7AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x7B6 DUP4 PUSH2 0x6F6 JUMP JUMPDEST SWAP2 POP PUSH2 0x7C4 PUSH1 0x20 DUP5 ADD PUSH2 0x6F6 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x7E1 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x802 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x829 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH15 0x6A76470E34D807B0FB19AEDBCA6156 0xB1 DUP8 0x1F 0xC1 0xE6 DIFFICULTY ADDMOD SUB PUSH11 0x7B7B07CAC9226264736F6C PUSH4 0x43000809 STOP CALLER ",
							"sourceMap": "1611:11861:9:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2495:98;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4781:197;;;;;;:::i;:::-;;:::i;:::-;;;1218:14:22;;1211:22;1193:41;;1181:2;1166:18;4781:197:9;1053:187:22;3592:106:9;3679:12;;3592:106;;;1391:25:22;;;1379:2;1364:18;3592:106:9;1245:177:22;5540:256:9;;;;;;:::i;:::-;;:::i;3441:91::-;;;3523:2;1902:36:22;;1890:2;1875:18;3441:91:9;1760:184:22;6191:234:9;;;;;;:::i;:::-;;:::i;3756:125::-;;;;;;:::i;:::-;-1:-1:-1;;;;;3856:18:9;3830:7;3856:18;;;:9;:18;;;;;;;3756:125;2706:102;;;:::i;6912:427::-;;;;;;:::i;:::-;;:::i;4077:189::-;;;;;;:::i;:::-;;:::i;4324:149::-;;;;;;:::i;:::-;;:::i;2495:98::-;2549:13;2581:5;2574:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2495:98;:::o;4781:197::-;4864:4;929:10:14;4918:32:9;929:10:14;4934:7:9;4943:6;4918:8;:32::i;:::-;-1:-1:-1;4967:4:9;;4781:197;-1:-1:-1;;;4781:197:9:o;5540:256::-;5637:4;929:10:14;5693:38:9;5709:4;929:10:14;5724:6:9;5693:15;:38::i;:::-;5741:27;5751:4;5757:2;5761:6;5741:9;:27::i;:::-;-1:-1:-1;5785:4:9;;5540:256;-1:-1:-1;;;;5540:256:9:o;6191:234::-;6279:4;929:10:14;6333:64:9;929:10:14;6349:7:9;6386:10;6358:25;929:10:14;6349:7:9;6358:9;:25::i;:::-;:38;;;;:::i;:::-;6333:8;:64::i;2706:102::-;2762:13;2794:7;2787:14;;;;;:::i;6912:427::-;7005:4;929:10:14;7005:4:9;7086:25;929:10:14;7103:7:9;7086:9;:25::i;:::-;7059:52;;7149:15;7129:16;:35;;7121:85;;;;-1:-1:-1;;;7121:85:9;;3222:2:22;7121:85:9;;;3204:21:22;3261:2;3241:18;;;3234:30;3300:34;3280:18;;;3273:62;-1:-1:-1;;;3351:18:22;;;3344:35;3396:19;;7121:85:9;;;;;;;;;7240:60;7249:5;7256:7;7284:15;7265:16;:34;7240:8;:60::i;4077:189::-;4156:4;929:10:14;4210:28:9;929:10:14;4227:2:9;4231:6;4210:9;:28::i;4324:149::-;-1:-1:-1;;;;;4439:18:9;;;4413:7;4439:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;4324:149::o;10794:340::-;-1:-1:-1;;;;;10895:19:9;;10887:68;;;;-1:-1:-1;;;10887:68:9;;3628:2:22;10887:68:9;;;3610:21:22;3667:2;3647:18;;;3640:30;3706:34;3686:18;;;3679:62;-1:-1:-1;;;3757:18:22;;;3750:34;3801:19;;10887:68:9;3426:400:22;10887:68:9;-1:-1:-1;;;;;10973:21:9;;10965:68;;;;-1:-1:-1;;;10965:68:9;;4033:2:22;10965:68:9;;;4015:21:22;4072:2;4052:18;;;4045:30;4111:34;4091:18;;;4084:62;-1:-1:-1;;;4162:18:22;;;4155:32;4204:19;;10965:68:9;3831:398:22;10965:68:9;-1:-1:-1;;;;;11044:18:9;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;:36;;;11095:32;;1391:25:22;;;11095:32:9;;1364:18:22;11095:32:9;;;;;;;10794:340;;;:::o;11415:411::-;11515:24;11542:25;11552:5;11559:7;11542:9;:25::i;:::-;11515:52;;-1:-1:-1;;11581:16:9;:37;11577:243;;11662:6;11642:16;:26;;11634:68;;;;-1:-1:-1;;;11634:68:9;;4436:2:22;11634:68:9;;;4418:21:22;4475:2;4455:18;;;4448:30;4514:31;4494:18;;;4487:59;4563:18;;11634:68:9;4234:353:22;11634:68:9;11744:51;11753:5;11760:7;11788:6;11769:16;:25;11744:8;:51::i;:::-;11505:321;11415:411;;;:::o;7793:788::-;-1:-1:-1;;;;;7889:18:9;;7881:68;;;;-1:-1:-1;;;7881:68:9;;4794:2:22;7881:68:9;;;4776:21:22;4833:2;4813:18;;;4806:30;4872:34;4852:18;;;4845:62;-1:-1:-1;;;4923:18:22;;;4916:35;4968:19;;7881:68:9;4592:401:22;7881:68:9;-1:-1:-1;;;;;7967:16:9;;7959:64;;;;-1:-1:-1;;;7959:64:9;;5200:2:22;7959:64:9;;;5182:21:22;5239:2;5219:18;;;5212:30;5278:34;5258:18;;;5251:62;-1:-1:-1;;;5329:18:22;;;5322:33;5372:19;;7959:64:9;4998:399:22;7959:64:9;-1:-1:-1;;;;;8105:15:9;;8083:19;8105:15;;;:9;:15;;;;;;8138:21;;;;8130:72;;;;-1:-1:-1;;;8130:72:9;;5604:2:22;8130:72:9;;;5586:21:22;5643:2;5623:18;;;5616:30;5682:34;5662:18;;;5655:62;-1:-1:-1;;;5733:18:22;;;5726:36;5779:19;;8130:72:9;5402:402:22;8130:72:9;-1:-1:-1;;;;;8236:15:9;;;;;;;:9;:15;;;;;;8254:20;;;8236:38;;8451:13;;;;;;;;;;:23;;;;;;8500:26;;;;;;8268:6;1391:25:22;;1379:2;1364:18;;1245:177;8500:26:9;;;;;;;;8537:37;12410:91;14:597:22;126:4;155:2;184;173:9;166:21;216:6;210:13;259:6;254:2;243:9;239:18;232:34;284:1;294:140;308:6;305:1;302:13;294:140;;;403:14;;;399:23;;393:30;369:17;;;388:2;365:26;358:66;323:10;;294:140;;;452:6;449:1;446:13;443:91;;;522:1;517:2;508:6;497:9;493:22;489:31;482:42;443:91;-1:-1:-1;595:2:22;574:15;-1:-1:-1;;570:29:22;555:45;;;;602:2;551:54;;14:597;-1:-1:-1;;;14:597:22:o;616:173::-;684:20;;-1:-1:-1;;;;;733:31:22;;723:42;;713:70;;779:1;776;769:12;713:70;616:173;;;:::o;794:254::-;862:6;870;923:2;911:9;902:7;898:23;894:32;891:52;;;939:1;936;929:12;891:52;962:29;981:9;962:29;:::i;:::-;952:39;1038:2;1023:18;;;;1010:32;;-1:-1:-1;;;794:254:22:o;1427:328::-;1504:6;1512;1520;1573:2;1561:9;1552:7;1548:23;1544:32;1541:52;;;1589:1;1586;1579:12;1541:52;1612:29;1631:9;1612:29;:::i;:::-;1602:39;;1660:38;1694:2;1683:9;1679:18;1660:38;:::i;:::-;1650:48;;1745:2;1734:9;1730:18;1717:32;1707:42;;1427:328;;;;;:::o;1949:186::-;2008:6;2061:2;2049:9;2040:7;2036:23;2032:32;2029:52;;;2077:1;2074;2067:12;2029:52;2100:29;2119:9;2100:29;:::i;:::-;2090:39;1949:186;-1:-1:-1;;;1949:186:22:o;2140:260::-;2208:6;2216;2269:2;2257:9;2248:7;2244:23;2240:32;2237:52;;;2285:1;2282;2275:12;2237:52;2308:29;2327:9;2308:29;:::i;:::-;2298:39;;2356:38;2390:2;2379:9;2375:18;2356:38;:::i;:::-;2346:48;;2140:260;;;;;:::o;2405:380::-;2484:1;2480:12;;;;2527;;;2548:61;;2602:4;2594:6;2590:17;2580:27;;2548:61;2655:2;2647:6;2644:14;2624:18;2621:38;2618:161;;;2701:10;2696:3;2692:20;2689:1;2682:31;2736:4;2733:1;2726:15;2764:4;2761:1;2754:15;2618:161;;2405:380;;;:::o;2790:225::-;2830:3;2861:1;2857:6;2854:1;2851:13;2848:136;;;2906:10;2901:3;2897:20;2894:1;2887:31;2941:4;2938:1;2931:15;2969:4;2966:1;2959:15;2848:136;-1:-1:-1;3000:9:22;;2790:225::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "429600",
								"executionCost": "468",
								"totalCost": "430068"
							},
							"external": {
								"allowance(address,address)": "infinite",
								"approve(address,uint256)": "24624",
								"balanceOf(address)": "2559",
								"decimals()": "266",
								"decreaseAllowance(address,uint256)": "27016",
								"increaseAllowance(address,uint256)": "26978",
								"name()": "infinite",
								"symbol()": "infinite",
								"totalSupply()": "2326",
								"transfer(address,uint256)": "51143",
								"transferFrom(address,address,uint256)": "infinite"
							},
							"internal": {
								"__ERC20_init(string memory,string memory)": "infinite",
								"__ERC20_init_unchained(string memory,string memory)": "infinite",
								"_afterTokenTransfer(address,address,uint256)": "infinite",
								"_approve(address,address,uint256)": "infinite",
								"_beforeTokenTransfer(address,address,uint256)": "infinite",
								"_burn(address,uint256)": "infinite",
								"_mint(address,uint256)": "infinite",
								"_spendAllowance(address,address,uint256)": "infinite",
								"_transfer(address,address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 1611,
									"end": 13472,
									"name": "PUSH",
									"source": 9,
									"value": "80"
								},
								{
									"begin": 1611,
									"end": 13472,
									"name": "PUSH",
									"source": 9,
									"value": "40"
								},
								{
									"begin": 1611,
									"end": 13472,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 1611,
									"end": 13472,
									"name": "CALLVALUE",
									"source": 9
								},
								{
									"begin": 1611,
									"end": 13472,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 1611,
									"end": 13472,
									"name": "ISZERO",
									"source": 9
								},
								{
									"begin": 1611,
									"end": 13472,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 1611,
									"end": 13472,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 1611,
									"end": 13472,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 1611,
									"end": 13472,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 1611,
									"end": 13472,
									"name": "REVERT",
									"source": 9
								},
								{
									"begin": 1611,
									"end": 13472,
									"name": "tag",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 1611,
									"end": 13472,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 1611,
									"end": 13472,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 1611,
									"end": 13472,
									"name": "PUSH #[$]",
									"source": 9,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1611,
									"end": 13472,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 1611,
									"end": 13472,
									"name": "PUSH [$]",
									"source": 9,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1611,
									"end": 13472,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 1611,
									"end": 13472,
									"name": "CODECOPY",
									"source": 9
								},
								{
									"begin": 1611,
									"end": 13472,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 1611,
									"end": 13472,
									"name": "RETURN",
									"source": 9
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212206e6a76470e34d807b0fb19aedbca6156b1871fc1e64408036a7b7b07cac9226264736f6c63430008090033",
									".code": [
										{
											"begin": 1611,
											"end": 13472,
											"name": "PUSH",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "CALLVALUE",
											"source": 9
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "tag",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "CALLDATALOAD",
											"source": 9
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "PUSH",
											"source": 9,
											"value": "E0"
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "SHR",
											"source": 9
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "PUSH",
											"source": 9,
											"value": "39509351"
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "14"
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "PUSH",
											"source": 9,
											"value": "39509351"
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "8"
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "PUSH",
											"source": 9,
											"value": "70A08231"
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "9"
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "PUSH",
											"source": 9,
											"value": "95D89B41"
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "10"
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "PUSH",
											"source": 9,
											"value": "A457C2D7"
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "11"
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "PUSH",
											"source": 9,
											"value": "A9059CBB"
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "12"
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "PUSH",
											"source": 9,
											"value": "DD62ED3E"
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "13"
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "tag",
											"source": 9,
											"value": "14"
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "PUSH",
											"source": 9,
											"value": "6FDDE03"
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "3"
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "PUSH",
											"source": 9,
											"value": "95EA7B3"
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "PUSH",
											"source": 9,
											"value": "18160DDD"
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "5"
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "PUSH",
											"source": 9,
											"value": "23B872DD"
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "6"
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "PUSH",
											"source": 9,
											"value": "313CE567"
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "7"
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "tag",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "tag",
											"source": 9,
											"value": "3"
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "15"
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "16"
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "tag",
											"source": 9,
											"value": "15"
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "17"
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "18"
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "tag",
											"source": 9,
											"value": "17"
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "RETURN",
											"source": 9
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "tag",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "19"
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "21"
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "tag",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "22"
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "tag",
											"source": 9,
											"value": "19"
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 1218,
											"end": 1232,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 1218,
											"end": 1232,
											"name": "ISZERO",
											"source": 22
										},
										{
											"begin": 1211,
											"end": 1233,
											"name": "ISZERO",
											"source": 22
										},
										{
											"begin": 1193,
											"end": 1234,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 1193,
											"end": 1234,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 1181,
											"end": 1183,
											"name": "PUSH",
											"source": 22,
											"value": "20"
										},
										{
											"begin": 1166,
											"end": 1184,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "17"
										},
										{
											"begin": 1053,
											"end": 1240,
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 3592,
											"end": 3698,
											"name": "tag",
											"source": 9,
											"value": "5"
										},
										{
											"begin": 3592,
											"end": 3698,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3679,
											"end": 3691,
											"name": "PUSH",
											"source": 9,
											"value": "35"
										},
										{
											"begin": 3679,
											"end": 3691,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 3592,
											"end": 3698,
											"name": "tag",
											"source": 9,
											"value": "25"
										},
										{
											"begin": 3592,
											"end": 3698,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3592,
											"end": 3698,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 3592,
											"end": 3698,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 1391,
											"end": 1416,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 1391,
											"end": 1416,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 1391,
											"end": 1416,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 1379,
											"end": 1381,
											"name": "PUSH",
											"source": 22,
											"value": "20"
										},
										{
											"begin": 1364,
											"end": 1382,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 3592,
											"end": 3698,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "17"
										},
										{
											"begin": 1245,
											"end": 1422,
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 5540,
											"end": 5796,
											"name": "tag",
											"source": 9,
											"value": "6"
										},
										{
											"begin": 5540,
											"end": 5796,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5540,
											"end": 5796,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "19"
										},
										{
											"begin": 5540,
											"end": 5796,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "30"
										},
										{
											"begin": 5540,
											"end": 5796,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 5540,
											"end": 5796,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 5540,
											"end": 5796,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "31"
										},
										{
											"begin": 5540,
											"end": 5796,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 5540,
											"end": 5796,
											"name": "tag",
											"source": 9,
											"value": "30"
										},
										{
											"begin": 5540,
											"end": 5796,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5540,
											"end": 5796,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "32"
										},
										{
											"begin": 5540,
											"end": 5796,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 3441,
											"end": 3532,
											"name": "tag",
											"source": 9,
											"value": "7"
										},
										{
											"begin": 3441,
											"end": 3532,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3441,
											"end": 3532,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 3441,
											"end": 3532,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 3523,
											"end": 3525,
											"name": "PUSH",
											"source": 9,
											"value": "12"
										},
										{
											"begin": 1902,
											"end": 1938,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 1902,
											"end": 1938,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 1890,
											"end": 1892,
											"name": "PUSH",
											"source": 22,
											"value": "20"
										},
										{
											"begin": 1875,
											"end": 1893,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 3441,
											"end": 3532,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "17"
										},
										{
											"begin": 1760,
											"end": 1944,
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 6191,
											"end": 6425,
											"name": "tag",
											"source": 9,
											"value": "8"
										},
										{
											"begin": 6191,
											"end": 6425,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 6191,
											"end": 6425,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "19"
										},
										{
											"begin": 6191,
											"end": 6425,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "39"
										},
										{
											"begin": 6191,
											"end": 6425,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 6191,
											"end": 6425,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 6191,
											"end": 6425,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "21"
										},
										{
											"begin": 6191,
											"end": 6425,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 6191,
											"end": 6425,
											"name": "tag",
											"source": 9,
											"value": "39"
										},
										{
											"begin": 6191,
											"end": 6425,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 6191,
											"end": 6425,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 6191,
											"end": 6425,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 3756,
											"end": 3881,
											"name": "tag",
											"source": 9,
											"value": "9"
										},
										{
											"begin": 3756,
											"end": 3881,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3756,
											"end": 3881,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "25"
										},
										{
											"begin": 3756,
											"end": 3881,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "43"
										},
										{
											"begin": 3756,
											"end": 3881,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 3756,
											"end": 3881,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 3756,
											"end": 3881,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "44"
										},
										{
											"begin": 3756,
											"end": 3881,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 3756,
											"end": 3881,
											"name": "tag",
											"source": 9,
											"value": "43"
										},
										{
											"begin": 3756,
											"end": 3881,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3856,
											"end": 3874,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 3830,
											"end": 3837,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3856,
											"end": 3874,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3856,
											"end": 3874,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3856,
											"end": 3874,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3856,
											"end": 3865,
											"name": "PUSH",
											"source": 9,
											"value": "33"
										},
										{
											"begin": 3856,
											"end": 3874,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 3856,
											"end": 3874,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3856,
											"end": 3874,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 3856,
											"end": 3874,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3856,
											"end": 3874,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 3856,
											"end": 3874,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 3856,
											"end": 3874,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3756,
											"end": 3881,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2706,
											"end": 2808,
											"name": "tag",
											"source": 9,
											"value": "10"
										},
										{
											"begin": 2706,
											"end": 2808,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2706,
											"end": 2808,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "15"
										},
										{
											"begin": 2706,
											"end": 2808,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "48"
										},
										{
											"begin": 2706,
											"end": 2808,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 6912,
											"end": 7339,
											"name": "tag",
											"source": 9,
											"value": "11"
										},
										{
											"begin": 6912,
											"end": 7339,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 6912,
											"end": 7339,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "19"
										},
										{
											"begin": 6912,
											"end": 7339,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "51"
										},
										{
											"begin": 6912,
											"end": 7339,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 6912,
											"end": 7339,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 6912,
											"end": 7339,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "21"
										},
										{
											"begin": 6912,
											"end": 7339,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 6912,
											"end": 7339,
											"name": "tag",
											"source": 9,
											"value": "51"
										},
										{
											"begin": 6912,
											"end": 7339,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 6912,
											"end": 7339,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "52"
										},
										{
											"begin": 6912,
											"end": 7339,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 4077,
											"end": 4266,
											"name": "tag",
											"source": 9,
											"value": "12"
										},
										{
											"begin": 4077,
											"end": 4266,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4077,
											"end": 4266,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "19"
										},
										{
											"begin": 4077,
											"end": 4266,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "55"
										},
										{
											"begin": 4077,
											"end": 4266,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 4077,
											"end": 4266,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 4077,
											"end": 4266,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "21"
										},
										{
											"begin": 4077,
											"end": 4266,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 4077,
											"end": 4266,
											"name": "tag",
											"source": 9,
											"value": "55"
										},
										{
											"begin": 4077,
											"end": 4266,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4077,
											"end": 4266,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "56"
										},
										{
											"begin": 4077,
											"end": 4266,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 4324,
											"end": 4473,
											"name": "tag",
											"source": 9,
											"value": "13"
										},
										{
											"begin": 4324,
											"end": 4473,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4324,
											"end": 4473,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "25"
										},
										{
											"begin": 4324,
											"end": 4473,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "59"
										},
										{
											"begin": 4324,
											"end": 4473,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 4324,
											"end": 4473,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 4324,
											"end": 4473,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "60"
										},
										{
											"begin": 4324,
											"end": 4473,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 4324,
											"end": 4473,
											"name": "tag",
											"source": 9,
											"value": "59"
										},
										{
											"begin": 4324,
											"end": 4473,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4324,
											"end": 4473,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "61"
										},
										{
											"begin": 4324,
											"end": 4473,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "tag",
											"source": 9,
											"value": "16"
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2549,
											"end": 2562,
											"name": "PUSH",
											"source": 9,
											"value": "60"
										},
										{
											"begin": 2581,
											"end": 2586,
											"name": "PUSH",
											"source": 9,
											"value": "36"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "65"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "tag",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "DIV",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "66"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "65"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "tag",
											"source": 9,
											"value": "66"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "67"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "68"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "PUSH",
											"source": 9,
											"value": "100"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "DIV",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "67"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "tag",
											"source": 9,
											"value": "68"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "tag",
											"source": 9,
											"value": "69"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "69"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "tag",
											"source": 9,
											"value": "67"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "tag",
											"source": 9,
											"value": "22"
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4864,
											"end": 4868,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 929,
											"end": 939,
											"name": "CALLER",
											"source": 14
										},
										{
											"begin": 4918,
											"end": 4950,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "73"
										},
										{
											"begin": 929,
											"end": 939,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 4934,
											"end": 4941,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 4943,
											"end": 4949,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 4918,
											"end": 4926,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "74"
										},
										{
											"begin": 4918,
											"end": 4950,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 4918,
											"end": 4950,
											"name": "tag",
											"source": 9,
											"value": "73"
										},
										{
											"begin": 4918,
											"end": 4950,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4967,
											"end": 4971,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 4967,
											"end": 4971,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 5540,
											"end": 5796,
											"name": "tag",
											"source": 9,
											"value": "32"
										},
										{
											"begin": 5540,
											"end": 5796,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5637,
											"end": 5641,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 929,
											"end": 939,
											"name": "CALLER",
											"source": 14
										},
										{
											"begin": 5693,
											"end": 5731,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "78"
										},
										{
											"begin": 5709,
											"end": 5713,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 929,
											"end": 939,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 5724,
											"end": 5730,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 5693,
											"end": 5708,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "79"
										},
										{
											"begin": 5693,
											"end": 5731,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 5693,
											"end": 5731,
											"name": "tag",
											"source": 9,
											"value": "78"
										},
										{
											"begin": 5693,
											"end": 5731,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5741,
											"end": 5768,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 5751,
											"end": 5755,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 5757,
											"end": 5759,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 5761,
											"end": 5767,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 5741,
											"end": 5750,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "81"
										},
										{
											"begin": 5741,
											"end": 5768,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 5741,
											"end": 5768,
											"name": "tag",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 5741,
											"end": 5768,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5785,
											"end": 5789,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 5785,
											"end": 5789,
											"name": "SWAP5",
											"source": 9
										},
										{
											"begin": 5540,
											"end": 5796,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5540,
											"end": 5796,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 6191,
											"end": 6425,
											"name": "tag",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 6191,
											"end": 6425,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 6279,
											"end": 6283,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 929,
											"end": 939,
											"name": "CALLER",
											"source": 14
										},
										{
											"begin": 6333,
											"end": 6397,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "73"
										},
										{
											"begin": 929,
											"end": 939,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 6349,
											"end": 6356,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 6386,
											"end": 6396,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 6358,
											"end": 6383,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "86"
										},
										{
											"begin": 929,
											"end": 939,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 6349,
											"end": 6356,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 6358,
											"end": 6367,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "61"
										},
										{
											"begin": 6358,
											"end": 6383,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 6358,
											"end": 6383,
											"name": "tag",
											"source": 9,
											"value": "86"
										},
										{
											"begin": 6358,
											"end": 6383,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 6358,
											"end": 6396,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "87"
										},
										{
											"begin": 6358,
											"end": 6396,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 6358,
											"end": 6396,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 6358,
											"end": 6396,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "88"
										},
										{
											"begin": 6358,
											"end": 6396,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 6358,
											"end": 6396,
											"name": "tag",
											"source": 9,
											"value": "87"
										},
										{
											"begin": 6358,
											"end": 6396,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 6333,
											"end": 6341,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "74"
										},
										{
											"begin": 6333,
											"end": 6397,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 2706,
											"end": 2808,
											"name": "tag",
											"source": 9,
											"value": "48"
										},
										{
											"begin": 2706,
											"end": 2808,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2762,
											"end": 2775,
											"name": "PUSH",
											"source": 9,
											"value": "60"
										},
										{
											"begin": 2794,
											"end": 2801,
											"name": "PUSH",
											"source": 9,
											"value": "37"
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "65"
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 6912,
											"end": 7339,
											"name": "tag",
											"source": 9,
											"value": "52"
										},
										{
											"begin": 6912,
											"end": 7339,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 7005,
											"end": 7009,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 929,
											"end": 939,
											"name": "CALLER",
											"source": 14
										},
										{
											"begin": 7005,
											"end": 7009,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 7086,
											"end": 7111,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "98"
										},
										{
											"begin": 929,
											"end": 939,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 7103,
											"end": 7110,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 7086,
											"end": 7095,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "61"
										},
										{
											"begin": 7086,
											"end": 7111,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 7086,
											"end": 7111,
											"name": "tag",
											"source": 9,
											"value": "98"
										},
										{
											"begin": 7086,
											"end": 7111,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 7059,
											"end": 7111,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 7059,
											"end": 7111,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 7149,
											"end": 7164,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 7129,
											"end": 7145,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 7129,
											"end": 7164,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 7129,
											"end": 7164,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 7121,
											"end": 7206,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "99"
										},
										{
											"begin": 7121,
											"end": 7206,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 7121,
											"end": 7206,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 7121,
											"end": 7206,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7121,
											"end": 7206,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 7121,
											"end": 7206,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3222,
											"end": 3224,
											"name": "PUSH",
											"source": 22,
											"value": "20"
										},
										{
											"begin": 7121,
											"end": 7206,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 7121,
											"end": 7206,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 7121,
											"end": 7206,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3204,
											"end": 3225,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 3261,
											"end": 3263,
											"name": "PUSH",
											"source": 22,
											"value": "25"
										},
										{
											"begin": 3241,
											"end": 3259,
											"name": "PUSH",
											"source": 22,
											"value": "24"
										},
										{
											"begin": 3241,
											"end": 3259,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 3241,
											"end": 3259,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 3234,
											"end": 3264,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 3300,
											"end": 3334,
											"name": "PUSH",
											"source": 22,
											"value": "45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77"
										},
										{
											"begin": 3280,
											"end": 3298,
											"name": "PUSH",
											"source": 22,
											"value": "44"
										},
										{
											"begin": 3280,
											"end": 3298,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 3280,
											"end": 3298,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 3273,
											"end": 3335,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "207A65726F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3351,
											"end": 3369,
											"name": "PUSH",
											"source": 22,
											"value": "64"
										},
										{
											"begin": 3351,
											"end": 3369,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 3351,
											"end": 3369,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 3344,
											"end": 3379,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 3396,
											"end": 3415,
											"name": "PUSH",
											"source": 22,
											"value": "84"
										},
										{
											"begin": 3396,
											"end": 3415,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 7121,
											"end": 7206,
											"name": "tag",
											"source": 9,
											"value": "100"
										},
										{
											"begin": 7121,
											"end": 7206,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 7121,
											"end": 7206,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 7121,
											"end": 7206,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 7121,
											"end": 7206,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 7121,
											"end": 7206,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 7121,
											"end": 7206,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 7121,
											"end": 7206,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 7121,
											"end": 7206,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 7121,
											"end": 7206,
											"name": "tag",
											"source": 9,
											"value": "99"
										},
										{
											"begin": 7121,
											"end": 7206,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 7240,
											"end": 7300,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 7249,
											"end": 7254,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 7256,
											"end": 7263,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 7284,
											"end": 7299,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 7265,
											"end": 7281,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 7265,
											"end": 7299,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 7240,
											"end": 7248,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "74"
										},
										{
											"begin": 7240,
											"end": 7300,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 4077,
											"end": 4266,
											"name": "tag",
											"source": 9,
											"value": "56"
										},
										{
											"begin": 4077,
											"end": 4266,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4156,
											"end": 4160,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 929,
											"end": 939,
											"name": "CALLER",
											"source": 14
										},
										{
											"begin": 4210,
											"end": 4238,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "73"
										},
										{
											"begin": 929,
											"end": 939,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 4227,
											"end": 4229,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 4231,
											"end": 4237,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 4210,
											"end": 4219,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "81"
										},
										{
											"begin": 4210,
											"end": 4238,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 4324,
											"end": 4473,
											"name": "tag",
											"source": 9,
											"value": "61"
										},
										{
											"begin": 4324,
											"end": 4473,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4439,
											"end": 4457,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 4439,
											"end": 4457,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 4439,
											"end": 4457,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 4413,
											"end": 4420,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 4439,
											"end": 4457,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4439,
											"end": 4457,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 4439,
											"end": 4457,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 4439,
											"end": 4450,
											"name": "PUSH",
											"source": 9,
											"value": "34"
										},
										{
											"begin": 4439,
											"end": 4457,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 4439,
											"end": 4457,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4439,
											"end": 4457,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 4439,
											"end": 4457,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 4439,
											"end": 4457,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 4439,
											"end": 4457,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 4439,
											"end": 4457,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 4439,
											"end": 4457,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 4439,
											"end": 4466,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": 4439,
											"end": 4466,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4439,
											"end": 4466,
											"name": "SWAP5",
											"source": 9
										},
										{
											"begin": 4439,
											"end": 4466,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 4439,
											"end": 4466,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 4439,
											"end": 4466,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 4439,
											"end": 4466,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 4439,
											"end": 4466,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4439,
											"end": 4466,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 4439,
											"end": 4466,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 4439,
											"end": 4466,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 4439,
											"end": 4466,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 4439,
											"end": 4466,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4324,
											"end": 4473,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 10794,
											"end": 11134,
											"name": "tag",
											"source": 9,
											"value": "74"
										},
										{
											"begin": 10794,
											"end": 11134,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10895,
											"end": 10914,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 10895,
											"end": 10914,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 10887,
											"end": 10955,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "109"
										},
										{
											"begin": 10887,
											"end": 10955,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 10887,
											"end": 10955,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 10887,
											"end": 10955,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10887,
											"end": 10955,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 10887,
											"end": 10955,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3628,
											"end": 3630,
											"name": "PUSH",
											"source": 22,
											"value": "20"
										},
										{
											"begin": 10887,
											"end": 10955,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 10887,
											"end": 10955,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 10887,
											"end": 10955,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3610,
											"end": 3631,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 3667,
											"end": 3669,
											"name": "PUSH",
											"source": 22,
											"value": "24"
										},
										{
											"begin": 3647,
											"end": 3665,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 3647,
											"end": 3665,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 3647,
											"end": 3665,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 3640,
											"end": 3670,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 3706,
											"end": 3740,
											"name": "PUSH",
											"source": 22,
											"value": "45524332303A20617070726F76652066726F6D20746865207A65726F20616464"
										},
										{
											"begin": 3686,
											"end": 3704,
											"name": "PUSH",
											"source": 22,
											"value": "44"
										},
										{
											"begin": 3686,
											"end": 3704,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 3686,
											"end": 3704,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 3679,
											"end": 3741,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "72657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3757,
											"end": 3775,
											"name": "PUSH",
											"source": 22,
											"value": "64"
										},
										{
											"begin": 3757,
											"end": 3775,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 3757,
											"end": 3775,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 3750,
											"end": 3784,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 3801,
											"end": 3820,
											"name": "PUSH",
											"source": 22,
											"value": "84"
										},
										{
											"begin": 3801,
											"end": 3820,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 10887,
											"end": 10955,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "100"
										},
										{
											"begin": 3426,
											"end": 3826,
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 10887,
											"end": 10955,
											"name": "tag",
											"source": 9,
											"value": "109"
										},
										{
											"begin": 10887,
											"end": 10955,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10973,
											"end": 10994,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 10973,
											"end": 10994,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 10965,
											"end": 11033,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "112"
										},
										{
											"begin": 10965,
											"end": 11033,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 10965,
											"end": 11033,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 10965,
											"end": 11033,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10965,
											"end": 11033,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 10965,
											"end": 11033,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 4033,
											"end": 4035,
											"name": "PUSH",
											"source": 22,
											"value": "20"
										},
										{
											"begin": 10965,
											"end": 11033,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 10965,
											"end": 11033,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 10965,
											"end": 11033,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 4015,
											"end": 4036,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 4072,
											"end": 4074,
											"name": "PUSH",
											"source": 22,
											"value": "22"
										},
										{
											"begin": 4052,
											"end": 4070,
											"name": "PUSH",
											"source": 22,
											"value": "24"
										},
										{
											"begin": 4052,
											"end": 4070,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 4052,
											"end": 4070,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 4045,
											"end": 4075,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 4111,
											"end": 4145,
											"name": "PUSH",
											"source": 22,
											"value": "45524332303A20617070726F766520746F20746865207A65726F206164647265"
										},
										{
											"begin": 4091,
											"end": 4109,
											"name": "PUSH",
											"source": 22,
											"value": "44"
										},
										{
											"begin": 4091,
											"end": 4109,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 4091,
											"end": 4109,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 4084,
											"end": 4146,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "7373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4162,
											"end": 4180,
											"name": "PUSH",
											"source": 22,
											"value": "64"
										},
										{
											"begin": 4162,
											"end": 4180,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 4162,
											"end": 4180,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 4155,
											"end": 4187,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 4204,
											"end": 4223,
											"name": "PUSH",
											"source": 22,
											"value": "84"
										},
										{
											"begin": 4204,
											"end": 4223,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 10965,
											"end": 11033,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "100"
										},
										{
											"begin": 3831,
											"end": 4229,
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 10965,
											"end": 11033,
											"name": "tag",
											"source": 9,
											"value": "112"
										},
										{
											"begin": 10965,
											"end": 11033,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 11044,
											"end": 11062,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 11044,
											"end": 11062,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 11044,
											"end": 11062,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 11044,
											"end": 11062,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 11044,
											"end": 11062,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 11044,
											"end": 11062,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 11044,
											"end": 11062,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 11044,
											"end": 11055,
											"name": "PUSH",
											"source": 9,
											"value": "34"
										},
										{
											"begin": 11044,
											"end": 11062,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 11044,
											"end": 11062,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 11044,
											"end": 11062,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 11044,
											"end": 11062,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 11044,
											"end": 11062,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 11044,
											"end": 11062,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 11044,
											"end": 11062,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 11044,
											"end": 11062,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 11044,
											"end": 11071,
											"name": "SWAP5",
											"source": 9
										},
										{
											"begin": 11044,
											"end": 11071,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 11044,
											"end": 11071,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 11044,
											"end": 11071,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 11044,
											"end": 11071,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 11044,
											"end": 11071,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 11044,
											"end": 11071,
											"name": "SWAP5",
											"source": 9
										},
										{
											"begin": 11044,
											"end": 11071,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 11044,
											"end": 11071,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 11044,
											"end": 11071,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 11044,
											"end": 11071,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 11044,
											"end": 11071,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 11044,
											"end": 11071,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 11044,
											"end": 11080,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 11044,
											"end": 11080,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 11044,
											"end": 11080,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 11095,
											"end": 11127,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 11095,
											"end": 11127,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 1391,
											"end": 1416,
											"name": "DUP5",
											"source": 22
										},
										{
											"begin": 1391,
											"end": 1416,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 1391,
											"end": 1416,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 11095,
											"end": 11127,
											"name": "PUSH",
											"source": 9,
											"value": "8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925"
										},
										{
											"begin": 11095,
											"end": 11127,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 1364,
											"end": 1382,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 11095,
											"end": 11127,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 11095,
											"end": 11127,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 11095,
											"end": 11127,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 11095,
											"end": 11127,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 11095,
											"end": 11127,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 11095,
											"end": 11127,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 11095,
											"end": 11127,
											"name": "LOG3",
											"source": 9
										},
										{
											"begin": 10794,
											"end": 11134,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 10794,
											"end": 11134,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 10794,
											"end": 11134,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 10794,
											"end": 11134,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 11415,
											"end": 11826,
											"name": "tag",
											"source": 9,
											"value": "79"
										},
										{
											"begin": 11415,
											"end": 11826,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 11515,
											"end": 11539,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 11542,
											"end": 11567,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "117"
										},
										{
											"begin": 11552,
											"end": 11557,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 11559,
											"end": 11566,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 11542,
											"end": 11551,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "61"
										},
										{
											"begin": 11542,
											"end": 11567,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 11542,
											"end": 11567,
											"name": "tag",
											"source": 9,
											"value": "117"
										},
										{
											"begin": 11542,
											"end": 11567,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 11515,
											"end": 11567,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 11515,
											"end": 11567,
											"name": "POP",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 11581,
											"end": 11597,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 11581,
											"end": 11618,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 11577,
											"end": 11820,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "122"
										},
										{
											"begin": 11577,
											"end": 11820,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 11662,
											"end": 11668,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 11642,
											"end": 11658,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 11642,
											"end": 11668,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 11642,
											"end": 11668,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 11634,
											"end": 11702,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "119"
										},
										{
											"begin": 11634,
											"end": 11702,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 11634,
											"end": 11702,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 11634,
											"end": 11702,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 11634,
											"end": 11702,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 11634,
											"end": 11702,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 4436,
											"end": 4438,
											"name": "PUSH",
											"source": 22,
											"value": "20"
										},
										{
											"begin": 11634,
											"end": 11702,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 11634,
											"end": 11702,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 11634,
											"end": 11702,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 4418,
											"end": 4439,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 4475,
											"end": 4477,
											"name": "PUSH",
											"source": 22,
											"value": "1D"
										},
										{
											"begin": 4455,
											"end": 4473,
											"name": "PUSH",
											"source": 22,
											"value": "24"
										},
										{
											"begin": 4455,
											"end": 4473,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 4455,
											"end": 4473,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 4448,
											"end": 4478,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 4514,
											"end": 4545,
											"name": "PUSH",
											"source": 22,
											"value": "45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000"
										},
										{
											"begin": 4494,
											"end": 4512,
											"name": "PUSH",
											"source": 22,
											"value": "44"
										},
										{
											"begin": 4494,
											"end": 4512,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 4494,
											"end": 4512,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 4487,
											"end": 4546,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 4563,
											"end": 4581,
											"name": "PUSH",
											"source": 22,
											"value": "64"
										},
										{
											"begin": 4563,
											"end": 4581,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 11634,
											"end": 11702,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "100"
										},
										{
											"begin": 4234,
											"end": 4587,
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 11634,
											"end": 11702,
											"name": "tag",
											"source": 9,
											"value": "119"
										},
										{
											"begin": 11634,
											"end": 11702,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 11744,
											"end": 11795,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "122"
										},
										{
											"begin": 11753,
											"end": 11758,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 11760,
											"end": 11767,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 11788,
											"end": 11794,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 11769,
											"end": 11785,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 11769,
											"end": 11794,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 11744,
											"end": 11752,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "74"
										},
										{
											"begin": 11744,
											"end": 11795,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 11744,
											"end": 11795,
											"name": "tag",
											"source": 9,
											"value": "122"
										},
										{
											"begin": 11744,
											"end": 11795,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 11505,
											"end": 11826,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 11415,
											"end": 11826,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 11415,
											"end": 11826,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 11415,
											"end": 11826,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 11415,
											"end": 11826,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 7793,
											"end": 8581,
											"name": "tag",
											"source": 9,
											"value": "81"
										},
										{
											"begin": 7793,
											"end": 8581,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7889,
											"end": 7907,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 7889,
											"end": 7907,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 7881,
											"end": 7949,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "124"
										},
										{
											"begin": 7881,
											"end": 7949,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 7881,
											"end": 7949,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 7881,
											"end": 7949,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7881,
											"end": 7949,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 7881,
											"end": 7949,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 4794,
											"end": 4796,
											"name": "PUSH",
											"source": 22,
											"value": "20"
										},
										{
											"begin": 7881,
											"end": 7949,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 7881,
											"end": 7949,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 7881,
											"end": 7949,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 4776,
											"end": 4797,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 4833,
											"end": 4835,
											"name": "PUSH",
											"source": 22,
											"value": "25"
										},
										{
											"begin": 4813,
											"end": 4831,
											"name": "PUSH",
											"source": 22,
											"value": "24"
										},
										{
											"begin": 4813,
											"end": 4831,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 4813,
											"end": 4831,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 4806,
											"end": 4836,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 4872,
											"end": 4906,
											"name": "PUSH",
											"source": 22,
											"value": "45524332303A207472616E736665722066726F6D20746865207A65726F206164"
										},
										{
											"begin": 4852,
											"end": 4870,
											"name": "PUSH",
											"source": 22,
											"value": "44"
										},
										{
											"begin": 4852,
											"end": 4870,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 4852,
											"end": 4870,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 4845,
											"end": 4907,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "6472657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4923,
											"end": 4941,
											"name": "PUSH",
											"source": 22,
											"value": "64"
										},
										{
											"begin": 4923,
											"end": 4941,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 4923,
											"end": 4941,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 4916,
											"end": 4951,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 4968,
											"end": 4987,
											"name": "PUSH",
											"source": 22,
											"value": "84"
										},
										{
											"begin": 4968,
											"end": 4987,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 7881,
											"end": 7949,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "100"
										},
										{
											"begin": 4592,
											"end": 4993,
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 7881,
											"end": 7949,
											"name": "tag",
											"source": 9,
											"value": "124"
										},
										{
											"begin": 7881,
											"end": 7949,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7967,
											"end": 7983,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 7967,
											"end": 7983,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 7959,
											"end": 8023,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "127"
										},
										{
											"begin": 7959,
											"end": 8023,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 7959,
											"end": 8023,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 7959,
											"end": 8023,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7959,
											"end": 8023,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 7959,
											"end": 8023,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 5200,
											"end": 5202,
											"name": "PUSH",
											"source": 22,
											"value": "20"
										},
										{
											"begin": 7959,
											"end": 8023,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 7959,
											"end": 8023,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 7959,
											"end": 8023,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 5182,
											"end": 5203,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 5239,
											"end": 5241,
											"name": "PUSH",
											"source": 22,
											"value": "23"
										},
										{
											"begin": 5219,
											"end": 5237,
											"name": "PUSH",
											"source": 22,
											"value": "24"
										},
										{
											"begin": 5219,
											"end": 5237,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 5219,
											"end": 5237,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 5212,
											"end": 5242,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 5278,
											"end": 5312,
											"name": "PUSH",
											"source": 22,
											"value": "45524332303A207472616E7366657220746F20746865207A65726F2061646472"
										},
										{
											"begin": 5258,
											"end": 5276,
											"name": "PUSH",
											"source": 22,
											"value": "44"
										},
										{
											"begin": 5258,
											"end": 5276,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 5258,
											"end": 5276,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 5251,
											"end": 5313,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5329,
											"end": 5347,
											"name": "PUSH",
											"source": 22,
											"value": "64"
										},
										{
											"begin": 5329,
											"end": 5347,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 5329,
											"end": 5347,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 5322,
											"end": 5355,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 5372,
											"end": 5391,
											"name": "PUSH",
											"source": 22,
											"value": "84"
										},
										{
											"begin": 5372,
											"end": 5391,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 7959,
											"end": 8023,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "100"
										},
										{
											"begin": 4998,
											"end": 5397,
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 7959,
											"end": 8023,
											"name": "tag",
											"source": 9,
											"value": "127"
										},
										{
											"begin": 7959,
											"end": 8023,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8105,
											"end": 8120,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 8105,
											"end": 8120,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 8083,
											"end": 8102,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 8105,
											"end": 8120,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 8105,
											"end": 8120,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 8105,
											"end": 8120,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 8105,
											"end": 8114,
											"name": "PUSH",
											"source": 9,
											"value": "33"
										},
										{
											"begin": 8105,
											"end": 8120,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 8105,
											"end": 8120,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 8105,
											"end": 8120,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 8105,
											"end": 8120,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 8105,
											"end": 8120,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 8105,
											"end": 8120,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 8138,
											"end": 8159,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 8138,
											"end": 8159,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 8138,
											"end": 8159,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 8138,
											"end": 8159,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 8130,
											"end": 8202,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "132"
										},
										{
											"begin": 8130,
											"end": 8202,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 8130,
											"end": 8202,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 8130,
											"end": 8202,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8130,
											"end": 8202,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 8130,
											"end": 8202,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 5604,
											"end": 5606,
											"name": "PUSH",
											"source": 22,
											"value": "20"
										},
										{
											"begin": 8130,
											"end": 8202,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 8130,
											"end": 8202,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 8130,
											"end": 8202,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 5586,
											"end": 5607,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 5643,
											"end": 5645,
											"name": "PUSH",
											"source": 22,
											"value": "26"
										},
										{
											"begin": 5623,
											"end": 5641,
											"name": "PUSH",
											"source": 22,
											"value": "24"
										},
										{
											"begin": 5623,
											"end": 5641,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 5623,
											"end": 5641,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 5616,
											"end": 5646,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 5682,
											"end": 5716,
											"name": "PUSH",
											"source": 22,
											"value": "45524332303A207472616E7366657220616D6F756E7420657863656564732062"
										},
										{
											"begin": 5662,
											"end": 5680,
											"name": "PUSH",
											"source": 22,
											"value": "44"
										},
										{
											"begin": 5662,
											"end": 5680,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 5662,
											"end": 5680,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 5655,
											"end": 5717,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "616C616E6365"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5733,
											"end": 5751,
											"name": "PUSH",
											"source": 22,
											"value": "64"
										},
										{
											"begin": 5733,
											"end": 5751,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 5733,
											"end": 5751,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 5726,
											"end": 5762,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 5779,
											"end": 5798,
											"name": "PUSH",
											"source": 22,
											"value": "84"
										},
										{
											"begin": 5779,
											"end": 5798,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 8130,
											"end": 8202,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "100"
										},
										{
											"begin": 5402,
											"end": 5804,
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 8130,
											"end": 8202,
											"name": "tag",
											"source": 9,
											"value": "132"
										},
										{
											"begin": 8130,
											"end": 8202,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8236,
											"end": 8251,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 8236,
											"end": 8251,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 8236,
											"end": 8251,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 8236,
											"end": 8251,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 8236,
											"end": 8251,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 8236,
											"end": 8251,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 8236,
											"end": 8251,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 8236,
											"end": 8245,
											"name": "PUSH",
											"source": 9,
											"value": "33"
										},
										{
											"begin": 8236,
											"end": 8251,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 8236,
											"end": 8251,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 8236,
											"end": 8251,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 8236,
											"end": 8251,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 8236,
											"end": 8251,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 8236,
											"end": 8251,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 8254,
											"end": 8274,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 8254,
											"end": 8274,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 8254,
											"end": 8274,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 8236,
											"end": 8274,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 8236,
											"end": 8274,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 8451,
											"end": 8464,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 8451,
											"end": 8464,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 8451,
											"end": 8464,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 8451,
											"end": 8464,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 8451,
											"end": 8464,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 8451,
											"end": 8464,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 8451,
											"end": 8464,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 8451,
											"end": 8464,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 8451,
											"end": 8464,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 8451,
											"end": 8464,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 8451,
											"end": 8474,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 8451,
											"end": 8474,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 8451,
											"end": 8474,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 8451,
											"end": 8474,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 8451,
											"end": 8474,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 8451,
											"end": 8474,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 8500,
											"end": 8526,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 8500,
											"end": 8526,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 8500,
											"end": 8526,
											"name": "PUSH",
											"source": 9,
											"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
										},
										{
											"begin": 8500,
											"end": 8526,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 8500,
											"end": 8526,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "135"
										},
										{
											"begin": 8500,
											"end": 8526,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 8268,
											"end": 8274,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 1391,
											"end": 1416,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 1391,
											"end": 1416,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 1379,
											"end": 1381,
											"name": "PUSH",
											"source": 22,
											"value": "20"
										},
										{
											"begin": 1364,
											"end": 1382,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 1364,
											"end": 1382,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 1245,
											"end": 1422,
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 8500,
											"end": 8526,
											"name": "tag",
											"source": 9,
											"value": "135"
										},
										{
											"begin": 8500,
											"end": 8526,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 8500,
											"end": 8526,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 8500,
											"end": 8526,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 8500,
											"end": 8526,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 8500,
											"end": 8526,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 8500,
											"end": 8526,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 8500,
											"end": 8526,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 8500,
											"end": 8526,
											"name": "LOG3",
											"source": 9
										},
										{
											"begin": 8537,
											"end": 8574,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "122"
										},
										{
											"begin": 12410,
											"end": 12501,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 14,
											"end": 611,
											"name": "tag",
											"source": 22,
											"value": "18"
										},
										{
											"begin": 14,
											"end": 611,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 126,
											"end": 130,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 155,
											"end": 157,
											"name": "PUSH",
											"source": 22,
											"value": "20"
										},
										{
											"begin": 184,
											"end": 186,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 173,
											"end": 182,
											"name": "DUP4",
											"source": 22
										},
										{
											"begin": 166,
											"end": 187,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 216,
											"end": 222,
											"name": "DUP4",
											"source": 22
										},
										{
											"begin": 210,
											"end": 223,
											"name": "MLOAD",
											"source": 22
										},
										{
											"begin": 259,
											"end": 265,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 254,
											"end": 256,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 243,
											"end": 252,
											"name": "DUP6",
											"source": 22
										},
										{
											"begin": 239,
											"end": 257,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 232,
											"end": 266,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 284,
											"end": 285,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 294,
											"end": 434,
											"name": "tag",
											"source": 22,
											"value": "143"
										},
										{
											"begin": 294,
											"end": 434,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 308,
											"end": 314,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 305,
											"end": 306,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 302,
											"end": 315,
											"name": "LT",
											"source": 22
										},
										{
											"begin": 294,
											"end": 434,
											"name": "ISZERO",
											"source": 22
										},
										{
											"begin": 294,
											"end": 434,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "145"
										},
										{
											"begin": 294,
											"end": 434,
											"name": "JUMPI",
											"source": 22
										},
										{
											"begin": 403,
											"end": 417,
											"name": "DUP6",
											"source": 22
										},
										{
											"begin": 403,
											"end": 417,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 403,
											"end": 417,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 399,
											"end": 422,
											"name": "DUP4",
											"source": 22
										},
										{
											"begin": 399,
											"end": 422,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 393,
											"end": 423,
											"name": "MLOAD",
											"source": 22
										},
										{
											"begin": 369,
											"end": 386,
											"name": "DUP6",
											"source": 22
										},
										{
											"begin": 369,
											"end": 386,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 369,
											"end": 386,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 388,
											"end": 390,
											"name": "PUSH",
											"source": 22,
											"value": "40"
										},
										{
											"begin": 365,
											"end": 391,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 358,
											"end": 424,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 323,
											"end": 333,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 323,
											"end": 333,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 294,
											"end": 434,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "143"
										},
										{
											"begin": 294,
											"end": 434,
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 294,
											"end": 434,
											"name": "tag",
											"source": 22,
											"value": "145"
										},
										{
											"begin": 294,
											"end": 434,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 452,
											"end": 458,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 449,
											"end": 450,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 446,
											"end": 459,
											"name": "GT",
											"source": 22
										},
										{
											"begin": 443,
											"end": 534,
											"name": "ISZERO",
											"source": 22
										},
										{
											"begin": 443,
											"end": 534,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "146"
										},
										{
											"begin": 443,
											"end": 534,
											"name": "JUMPI",
											"source": 22
										},
										{
											"begin": 522,
											"end": 523,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 517,
											"end": 519,
											"name": "PUSH",
											"source": 22,
											"value": "40"
										},
										{
											"begin": 508,
											"end": 514,
											"name": "DUP4",
											"source": 22
										},
										{
											"begin": 497,
											"end": 506,
											"name": "DUP8",
											"source": 22
										},
										{
											"begin": 493,
											"end": 515,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 489,
											"end": 520,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 482,
											"end": 524,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 443,
											"end": 534,
											"name": "tag",
											"source": 22,
											"value": "146"
										},
										{
											"begin": 443,
											"end": 534,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 595,
											"end": 597,
											"name": "PUSH",
											"source": 22,
											"value": "1F"
										},
										{
											"begin": 574,
											"end": 589,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 570,
											"end": 599,
											"name": "AND",
											"source": 22
										},
										{
											"begin": 555,
											"end": 600,
											"name": "SWAP3",
											"source": 22
										},
										{
											"begin": 555,
											"end": 600,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 555,
											"end": 600,
											"name": "SWAP3",
											"source": 22
										},
										{
											"begin": 555,
											"end": 600,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 602,
											"end": 604,
											"name": "PUSH",
											"source": 22,
											"value": "40"
										},
										{
											"begin": 551,
											"end": 605,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 551,
											"end": 605,
											"name": "SWAP4",
											"source": 22
										},
										{
											"begin": 14,
											"end": 611,
											"name": "SWAP3",
											"source": 22
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 14,
											"end": 611,
											"name": "JUMP",
											"source": 22,
											"value": "[out]"
										},
										{
											"begin": 616,
											"end": 789,
											"name": "tag",
											"source": 22,
											"value": "140"
										},
										{
											"begin": 616,
											"end": 789,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 684,
											"end": 704,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 684,
											"end": 704,
											"name": "CALLDATALOAD",
											"source": 22
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 733,
											"end": 764,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 733,
											"end": 764,
											"name": "AND",
											"source": 22
										},
										{
											"begin": 723,
											"end": 765,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 723,
											"end": 765,
											"name": "EQ",
											"source": 22
										},
										{
											"begin": 713,
											"end": 783,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "148"
										},
										{
											"begin": 713,
											"end": 783,
											"name": "JUMPI",
											"source": 22
										},
										{
											"begin": 779,
											"end": 780,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 776,
											"end": 777,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 769,
											"end": 781,
											"name": "REVERT",
											"source": 22
										},
										{
											"begin": 713,
											"end": 783,
											"name": "tag",
											"source": 22,
											"value": "148"
										},
										{
											"begin": 713,
											"end": 783,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 616,
											"end": 789,
											"name": "SWAP2",
											"source": 22
										},
										{
											"begin": 616,
											"end": 789,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 616,
											"end": 789,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 616,
											"end": 789,
											"name": "JUMP",
											"source": 22,
											"value": "[out]"
										},
										{
											"begin": 794,
											"end": 1048,
											"name": "tag",
											"source": 22,
											"value": "21"
										},
										{
											"begin": 794,
											"end": 1048,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 862,
											"end": 868,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 870,
											"end": 876,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 923,
											"end": 925,
											"name": "PUSH",
											"source": 22,
											"value": "40"
										},
										{
											"begin": 911,
											"end": 920,
											"name": "DUP4",
											"source": 22
										},
										{
											"begin": 902,
											"end": 909,
											"name": "DUP6",
											"source": 22
										},
										{
											"begin": 898,
											"end": 921,
											"name": "SUB",
											"source": 22
										},
										{
											"begin": 894,
											"end": 926,
											"name": "SLT",
											"source": 22
										},
										{
											"begin": 891,
											"end": 943,
											"name": "ISZERO",
											"source": 22
										},
										{
											"begin": 891,
											"end": 943,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "150"
										},
										{
											"begin": 891,
											"end": 943,
											"name": "JUMPI",
											"source": 22
										},
										{
											"begin": 939,
											"end": 940,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 936,
											"end": 937,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 929,
											"end": 941,
											"name": "REVERT",
											"source": 22
										},
										{
											"begin": 891,
											"end": 943,
											"name": "tag",
											"source": 22,
											"value": "150"
										},
										{
											"begin": 891,
											"end": 943,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 962,
											"end": 991,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "151"
										},
										{
											"begin": 981,
											"end": 990,
											"name": "DUP4",
											"source": 22
										},
										{
											"begin": 962,
											"end": 991,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "140"
										},
										{
											"begin": 962,
											"end": 991,
											"name": "JUMP",
											"source": 22,
											"value": "[in]"
										},
										{
											"begin": 962,
											"end": 991,
											"name": "tag",
											"source": 22,
											"value": "151"
										},
										{
											"begin": 962,
											"end": 991,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 952,
											"end": 991,
											"name": "SWAP5",
											"source": 22
										},
										{
											"begin": 1038,
											"end": 1040,
											"name": "PUSH",
											"source": 22,
											"value": "20"
										},
										{
											"begin": 1023,
											"end": 1041,
											"name": "SWAP4",
											"source": 22
										},
										{
											"begin": 1023,
											"end": 1041,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 1023,
											"end": 1041,
											"name": "SWAP4",
											"source": 22
										},
										{
											"begin": 1023,
											"end": 1041,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 1010,
											"end": 1042,
											"name": "CALLDATALOAD",
											"source": 22
										},
										{
											"begin": 1010,
											"end": 1042,
											"name": "SWAP4",
											"source": 22
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 794,
											"end": 1048,
											"name": "JUMP",
											"source": 22,
											"value": "[out]"
										},
										{
											"begin": 1427,
											"end": 1755,
											"name": "tag",
											"source": 22,
											"value": "31"
										},
										{
											"begin": 1427,
											"end": 1755,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 1504,
											"end": 1510,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 1512,
											"end": 1518,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 1520,
											"end": 1526,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 1573,
											"end": 1575,
											"name": "PUSH",
											"source": 22,
											"value": "60"
										},
										{
											"begin": 1561,
											"end": 1570,
											"name": "DUP5",
											"source": 22
										},
										{
											"begin": 1552,
											"end": 1559,
											"name": "DUP7",
											"source": 22
										},
										{
											"begin": 1548,
											"end": 1571,
											"name": "SUB",
											"source": 22
										},
										{
											"begin": 1544,
											"end": 1576,
											"name": "SLT",
											"source": 22
										},
										{
											"begin": 1541,
											"end": 1593,
											"name": "ISZERO",
											"source": 22
										},
										{
											"begin": 1541,
											"end": 1593,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "155"
										},
										{
											"begin": 1541,
											"end": 1593,
											"name": "JUMPI",
											"source": 22
										},
										{
											"begin": 1589,
											"end": 1590,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 1586,
											"end": 1587,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 1579,
											"end": 1591,
											"name": "REVERT",
											"source": 22
										},
										{
											"begin": 1541,
											"end": 1593,
											"name": "tag",
											"source": 22,
											"value": "155"
										},
										{
											"begin": 1541,
											"end": 1593,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 1612,
											"end": 1641,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "156"
										},
										{
											"begin": 1631,
											"end": 1640,
											"name": "DUP5",
											"source": 22
										},
										{
											"begin": 1612,
											"end": 1641,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "140"
										},
										{
											"begin": 1612,
											"end": 1641,
											"name": "JUMP",
											"source": 22,
											"value": "[in]"
										},
										{
											"begin": 1612,
											"end": 1641,
											"name": "tag",
											"source": 22,
											"value": "156"
										},
										{
											"begin": 1612,
											"end": 1641,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 1602,
											"end": 1641,
											"name": "SWAP3",
											"source": 22
										},
										{
											"begin": 1602,
											"end": 1641,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 1660,
											"end": 1698,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "157"
										},
										{
											"begin": 1694,
											"end": 1696,
											"name": "PUSH",
											"source": 22,
											"value": "20"
										},
										{
											"begin": 1683,
											"end": 1692,
											"name": "DUP6",
											"source": 22
										},
										{
											"begin": 1679,
											"end": 1697,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 1660,
											"end": 1698,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "140"
										},
										{
											"begin": 1660,
											"end": 1698,
											"name": "JUMP",
											"source": 22,
											"value": "[in]"
										},
										{
											"begin": 1660,
											"end": 1698,
											"name": "tag",
											"source": 22,
											"value": "157"
										},
										{
											"begin": 1660,
											"end": 1698,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 1650,
											"end": 1698,
											"name": "SWAP2",
											"source": 22
										},
										{
											"begin": 1650,
											"end": 1698,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 1745,
											"end": 1747,
											"name": "PUSH",
											"source": 22,
											"value": "40"
										},
										{
											"begin": 1734,
											"end": 1743,
											"name": "DUP5",
											"source": 22
										},
										{
											"begin": 1730,
											"end": 1748,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 1717,
											"end": 1749,
											"name": "CALLDATALOAD",
											"source": 22
										},
										{
											"begin": 1707,
											"end": 1749,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 1707,
											"end": 1749,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 1427,
											"end": 1755,
											"name": "SWAP3",
											"source": 22
										},
										{
											"begin": 1427,
											"end": 1755,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 1427,
											"end": 1755,
											"name": "SWAP3",
											"source": 22
										},
										{
											"begin": 1427,
											"end": 1755,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 1427,
											"end": 1755,
											"name": "SWAP3",
											"source": 22
										},
										{
											"begin": 1427,
											"end": 1755,
											"name": "JUMP",
											"source": 22,
											"value": "[out]"
										},
										{
											"begin": 1949,
											"end": 2135,
											"name": "tag",
											"source": 22,
											"value": "44"
										},
										{
											"begin": 1949,
											"end": 2135,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 2008,
											"end": 2014,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 2061,
											"end": 2063,
											"name": "PUSH",
											"source": 22,
											"value": "20"
										},
										{
											"begin": 2049,
											"end": 2058,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 2040,
											"end": 2047,
											"name": "DUP5",
											"source": 22
										},
										{
											"begin": 2036,
											"end": 2059,
											"name": "SUB",
											"source": 22
										},
										{
											"begin": 2032,
											"end": 2064,
											"name": "SLT",
											"source": 22
										},
										{
											"begin": 2029,
											"end": 2081,
											"name": "ISZERO",
											"source": 22
										},
										{
											"begin": 2029,
											"end": 2081,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "160"
										},
										{
											"begin": 2029,
											"end": 2081,
											"name": "JUMPI",
											"source": 22
										},
										{
											"begin": 2077,
											"end": 2078,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 2074,
											"end": 2075,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 2067,
											"end": 2079,
											"name": "REVERT",
											"source": 22
										},
										{
											"begin": 2029,
											"end": 2081,
											"name": "tag",
											"source": 22,
											"value": "160"
										},
										{
											"begin": 2029,
											"end": 2081,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 2100,
											"end": 2129,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "161"
										},
										{
											"begin": 2119,
											"end": 2128,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 2100,
											"end": 2129,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "140"
										},
										{
											"begin": 2100,
											"end": 2129,
											"name": "JUMP",
											"source": 22,
											"value": "[in]"
										},
										{
											"begin": 2100,
											"end": 2129,
											"name": "tag",
											"source": 22,
											"value": "161"
										},
										{
											"begin": 2100,
											"end": 2129,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 2090,
											"end": 2129,
											"name": "SWAP4",
											"source": 22
										},
										{
											"begin": 1949,
											"end": 2135,
											"name": "SWAP3",
											"source": 22
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1949,
											"end": 2135,
											"name": "JUMP",
											"source": 22,
											"value": "[out]"
										},
										{
											"begin": 2140,
											"end": 2400,
											"name": "tag",
											"source": 22,
											"value": "60"
										},
										{
											"begin": 2140,
											"end": 2400,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 2208,
											"end": 2214,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 2216,
											"end": 2222,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 2269,
											"end": 2271,
											"name": "PUSH",
											"source": 22,
											"value": "40"
										},
										{
											"begin": 2257,
											"end": 2266,
											"name": "DUP4",
											"source": 22
										},
										{
											"begin": 2248,
											"end": 2255,
											"name": "DUP6",
											"source": 22
										},
										{
											"begin": 2244,
											"end": 2267,
											"name": "SUB",
											"source": 22
										},
										{
											"begin": 2240,
											"end": 2272,
											"name": "SLT",
											"source": 22
										},
										{
											"begin": 2237,
											"end": 2289,
											"name": "ISZERO",
											"source": 22
										},
										{
											"begin": 2237,
											"end": 2289,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "163"
										},
										{
											"begin": 2237,
											"end": 2289,
											"name": "JUMPI",
											"source": 22
										},
										{
											"begin": 2285,
											"end": 2286,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 2282,
											"end": 2283,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 2275,
											"end": 2287,
											"name": "REVERT",
											"source": 22
										},
										{
											"begin": 2237,
											"end": 2289,
											"name": "tag",
											"source": 22,
											"value": "163"
										},
										{
											"begin": 2237,
											"end": 2289,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 2308,
											"end": 2337,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "164"
										},
										{
											"begin": 2327,
											"end": 2336,
											"name": "DUP4",
											"source": 22
										},
										{
											"begin": 2308,
											"end": 2337,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "140"
										},
										{
											"begin": 2308,
											"end": 2337,
											"name": "JUMP",
											"source": 22,
											"value": "[in]"
										},
										{
											"begin": 2308,
											"end": 2337,
											"name": "tag",
											"source": 22,
											"value": "164"
										},
										{
											"begin": 2308,
											"end": 2337,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 2298,
											"end": 2337,
											"name": "SWAP2",
											"source": 22
										},
										{
											"begin": 2298,
											"end": 2337,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 2356,
											"end": 2394,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "165"
										},
										{
											"begin": 2390,
											"end": 2392,
											"name": "PUSH",
											"source": 22,
											"value": "20"
										},
										{
											"begin": 2379,
											"end": 2388,
											"name": "DUP5",
											"source": 22
										},
										{
											"begin": 2375,
											"end": 2393,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 2356,
											"end": 2394,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "140"
										},
										{
											"begin": 2356,
											"end": 2394,
											"name": "JUMP",
											"source": 22,
											"value": "[in]"
										},
										{
											"begin": 2356,
											"end": 2394,
											"name": "tag",
											"source": 22,
											"value": "165"
										},
										{
											"begin": 2356,
											"end": 2394,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 2346,
											"end": 2394,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 2346,
											"end": 2394,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 2140,
											"end": 2400,
											"name": "SWAP3",
											"source": 22
										},
										{
											"begin": 2140,
											"end": 2400,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 2140,
											"end": 2400,
											"name": "SWAP3",
											"source": 22
										},
										{
											"begin": 2140,
											"end": 2400,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 2140,
											"end": 2400,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 2140,
											"end": 2400,
											"name": "JUMP",
											"source": 22,
											"value": "[out]"
										},
										{
											"begin": 2405,
											"end": 2785,
											"name": "tag",
											"source": 22,
											"value": "65"
										},
										{
											"begin": 2405,
											"end": 2785,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 2484,
											"end": 2485,
											"name": "PUSH",
											"source": 22,
											"value": "1"
										},
										{
											"begin": 2480,
											"end": 2492,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 2480,
											"end": 2492,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 2480,
											"end": 2492,
											"name": "SHR",
											"source": 22
										},
										{
											"begin": 2480,
											"end": 2492,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 2527,
											"end": 2539,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 2527,
											"end": 2539,
											"name": "AND",
											"source": 22
										},
										{
											"begin": 2527,
											"end": 2539,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 2548,
											"end": 2609,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "167"
										},
										{
											"begin": 2548,
											"end": 2609,
											"name": "JUMPI",
											"source": 22
										},
										{
											"begin": 2602,
											"end": 2606,
											"name": "PUSH",
											"source": 22,
											"value": "7F"
										},
										{
											"begin": 2594,
											"end": 2600,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 2590,
											"end": 2607,
											"name": "AND",
											"source": 22
										},
										{
											"begin": 2580,
											"end": 2607,
											"name": "SWAP2",
											"source": 22
										},
										{
											"begin": 2580,
											"end": 2607,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 2548,
											"end": 2609,
											"name": "tag",
											"source": 22,
											"value": "167"
										},
										{
											"begin": 2548,
											"end": 2609,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 2655,
											"end": 2657,
											"name": "PUSH",
											"source": 22,
											"value": "20"
										},
										{
											"begin": 2647,
											"end": 2653,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 2644,
											"end": 2658,
											"name": "LT",
											"source": 22
										},
										{
											"begin": 2624,
											"end": 2642,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 2621,
											"end": 2659,
											"name": "EQ",
											"source": 22
										},
										{
											"begin": 2618,
											"end": 2779,
											"name": "ISZERO",
											"source": 22
										},
										{
											"begin": 2618,
											"end": 2779,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "168"
										},
										{
											"begin": 2618,
											"end": 2779,
											"name": "JUMPI",
											"source": 22
										},
										{
											"begin": 2701,
											"end": 2711,
											"name": "PUSH",
											"source": 22,
											"value": "4E487B71"
										},
										{
											"begin": 2696,
											"end": 2699,
											"name": "PUSH",
											"source": 22,
											"value": "E0"
										},
										{
											"begin": 2692,
											"end": 2712,
											"name": "SHL",
											"source": 22
										},
										{
											"begin": 2689,
											"end": 2690,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 2682,
											"end": 2713,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 2736,
											"end": 2740,
											"name": "PUSH",
											"source": 22,
											"value": "22"
										},
										{
											"begin": 2733,
											"end": 2734,
											"name": "PUSH",
											"source": 22,
											"value": "4"
										},
										{
											"begin": 2726,
											"end": 2741,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 2764,
											"end": 2768,
											"name": "PUSH",
											"source": 22,
											"value": "24"
										},
										{
											"begin": 2761,
											"end": 2762,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 2754,
											"end": 2769,
											"name": "REVERT",
											"source": 22
										},
										{
											"begin": 2618,
											"end": 2779,
											"name": "tag",
											"source": 22,
											"value": "168"
										},
										{
											"begin": 2618,
											"end": 2779,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 2618,
											"end": 2779,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 2405,
											"end": 2785,
											"name": "SWAP2",
											"source": 22
										},
										{
											"begin": 2405,
											"end": 2785,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 2405,
											"end": 2785,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 2405,
											"end": 2785,
											"name": "JUMP",
											"source": 22,
											"value": "[out]"
										},
										{
											"begin": 2790,
											"end": 3015,
											"name": "tag",
											"source": 22,
											"value": "88"
										},
										{
											"begin": 2790,
											"end": 3015,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 2830,
											"end": 2833,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 2861,
											"end": 2862,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 2857,
											"end": 2863,
											"name": "NOT",
											"source": 22
										},
										{
											"begin": 2854,
											"end": 2855,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 2851,
											"end": 2864,
											"name": "GT",
											"source": 22
										},
										{
											"begin": 2848,
											"end": 2984,
											"name": "ISZERO",
											"source": 22
										},
										{
											"begin": 2848,
											"end": 2984,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "170"
										},
										{
											"begin": 2848,
											"end": 2984,
											"name": "JUMPI",
											"source": 22
										},
										{
											"begin": 2906,
											"end": 2916,
											"name": "PUSH",
											"source": 22,
											"value": "4E487B71"
										},
										{
											"begin": 2901,
											"end": 2904,
											"name": "PUSH",
											"source": 22,
											"value": "E0"
										},
										{
											"begin": 2897,
											"end": 2917,
											"name": "SHL",
											"source": 22
										},
										{
											"begin": 2894,
											"end": 2895,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 2887,
											"end": 2918,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 2941,
											"end": 2945,
											"name": "PUSH",
											"source": 22,
											"value": "11"
										},
										{
											"begin": 2938,
											"end": 2939,
											"name": "PUSH",
											"source": 22,
											"value": "4"
										},
										{
											"begin": 2931,
											"end": 2946,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 2969,
											"end": 2973,
											"name": "PUSH",
											"source": 22,
											"value": "24"
										},
										{
											"begin": 2966,
											"end": 2967,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 2959,
											"end": 2974,
											"name": "REVERT",
											"source": 22
										},
										{
											"begin": 2848,
											"end": 2984,
											"name": "tag",
											"source": 22,
											"value": "170"
										},
										{
											"begin": 2848,
											"end": 2984,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3000,
											"end": 3009,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 3000,
											"end": 3009,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 2790,
											"end": 3015,
											"name": "JUMP",
											"source": 22,
											"value": "[out]"
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"decreaseAllowance(address,uint256)": "a457c2d7",
							"increaseAllowance(address,uint256)": "39509351",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. For a generic mechanism see {ERC20PresetMinterPauser}. TIP: For a detailed writeup see our guide https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. The default value of {decimals} is 18. To change this, you should override this function so it returns a different value. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification. Finally, the non-standard {decreaseAllowance} and {increaseAllowance} functions have been added to mitigate the well-known issues around setting allowances. See {IERC20-approve}.\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":\"ERC20Upgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f103ee2e4aecd37aac6ceefe670709cdd7613dee25fa2d4d9feaf7fc0aaa155e\",\"dweb:/ipfs/QmRiNZLoJk5k3HPMYGPGjZFd2ke1ZxjhJZkM45Ec9GH9hv\"]},\"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":{\"keccak256\":\"0xd14a627157b9a411d2410713e5dd3a377e9064bd5c194a90748bbf27ea625784\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://29d6a502187e88fdb4ac51319b6cfc82e7ba886a435480e229e5f838d2da55ee\",\"dweb:/ipfs/QmQNWKr3axXvQowZi31ydXRdeZ7UnE7oN8XAz9FCkx1JhN\"]},\"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/IERC20Upgradeable.sol\":{\"keccak256\":\"0x0e1f0f5f62f67a881cd1a9597acbc0a5e4071f3c2c10449a183b922ae7272e3f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c25f742ff154998d19a669e2508c3597b363e123ce9144cd0fcf6521229f401f\",\"dweb:/ipfs/QmQXRuFzStEWqeEPbhQU6cAg9PaSowxJVo4PDKyRod7dco\"]},\"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4c9c634f99dd02d73ce7498b03a6305e251c05eeebb71457306561c1fab0fa7d\",\"dweb:/ipfs/QmbYRBbZHy8YoaQKXdPryiL3CSS7uUaRfRYi1TUj9cTqJQ\"]},\"@openzeppelin/contracts-upgradeable@4.9.2/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://310136ad60820af4177a11a61d77a3686faf5fca4942b600e08fc940db38396b\",\"dweb:/ipfs/QmbCzMNSTL7Zi7M4UCSqBrkHtp4jjxUnGbkneCZKdR1qeq\"]},\"@openzeppelin/contracts-upgradeable@4.9.2/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d6520943ea55fdf5f0bafb39ed909f64de17051bc954ff3e88c9e5621412c79c\",\"dweb:/ipfs/QmWZ4rAKTQbNG2HxGs46AcTXShsVytKeLs7CUCdCSv5N7a\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 780,
								"contract": "@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
								"label": "_initialized",
								"offset": 0,
								"slot": "0",
								"type": "t_uint8"
							},
							{
								"astId": 783,
								"contract": "@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
								"label": "_initializing",
								"offset": 1,
								"slot": "0",
								"type": "t_bool"
							},
							{
								"astId": 2355,
								"contract": "@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
								"label": "__gap",
								"offset": 0,
								"slot": "1",
								"type": "t_array(t_uint256)50_storage"
							},
							{
								"astId": 1224,
								"contract": "@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
								"label": "_balances",
								"offset": 0,
								"slot": "51",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 1230,
								"contract": "@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
								"label": "_allowances",
								"offset": 0,
								"slot": "52",
								"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
							},
							{
								"astId": 1232,
								"contract": "@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
								"label": "_totalSupply",
								"offset": 0,
								"slot": "53",
								"type": "t_uint256"
							},
							{
								"astId": 1234,
								"contract": "@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
								"label": "_name",
								"offset": 0,
								"slot": "54",
								"type": "t_string_storage"
							},
							{
								"astId": 1236,
								"contract": "@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
								"label": "_symbol",
								"offset": 0,
								"slot": "55",
								"type": "t_string_storage"
							},
							{
								"astId": 1816,
								"contract": "@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
								"label": "__gap",
								"offset": 0,
								"slot": "56",
								"type": "t_array(t_uint256)45_storage"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_array(t_uint256)45_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[45]",
								"numberOfBytes": "1440"
							},
							"t_array(t_uint256)50_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[50]",
								"numberOfBytes": "1600"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_uint256)"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							},
							"t_uint8": {
								"encoding": "inplace",
								"label": "uint8",
								"numberOfBytes": "1"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/IERC20Upgradeable.sol": {
				"IERC20Upgradeable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 standard as defined in the EIP.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/IERC20Upgradeable.sol\":\"IERC20Upgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/IERC20Upgradeable.sol\":{\"keccak256\":\"0x0e1f0f5f62f67a881cd1a9597acbc0a5e4071f3c2c10449a183b922ae7272e3f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c25f742ff154998d19a669e2508c3597b363e123ce9144cd0fcf6521229f401f\",\"dweb:/ipfs/QmQXRuFzStEWqeEPbhQU6cAg9PaSowxJVo4PDKyRod7dco\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/extensions/ERC20BurnableUpgradeable.sol": {
				"ERC20BurnableUpgradeable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "version",
									"type": "uint8"
								}
							],
							"name": "Initialized",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "burn",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "burnFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "subtractedValue",
									"type": "uint256"
								}
							],
							"name": "decreaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "addedValue",
									"type": "uint256"
								}
							],
							"name": "increaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Extension of {ERC20} that allows token holders to destroy both their own tokens and those that they have an allowance for, in a way that can be recognized off-chain (via event analysis).",
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"burn(uint256)": {
								"details": "Destroys `amount` tokens from the caller. See {ERC20-_burn}."
							},
							"burnFrom(address,uint256)": {
								"details": "Destroys `amount` tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `amount`."
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"decreaseAllowance(address,uint256)": {
								"details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
							},
							"increaseAllowance(address,uint256)": {
								"details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
							}
						},
						"stateVariables": {
							"__gap": {
								"details": "This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"burn(uint256)": "42966c68",
							"burnFrom(address,uint256)": "79cc6790",
							"decimals()": "313ce567",
							"decreaseAllowance(address,uint256)": "a457c2d7",
							"increaseAllowance(address,uint256)": "39509351",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Extension of {ERC20} that allows token holders to destroy both their own tokens and those that they have an allowance for, in a way that can be recognized off-chain (via event analysis).\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"burn(uint256)\":{\"details\":\"Destroys `amount` tokens from the caller. See {ERC20-_burn}.\"},\"burnFrom(address,uint256)\":{\"details\":\"Destroys `amount` tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `amount`.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\":\"ERC20BurnableUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f103ee2e4aecd37aac6ceefe670709cdd7613dee25fa2d4d9feaf7fc0aaa155e\",\"dweb:/ipfs/QmRiNZLoJk5k3HPMYGPGjZFd2ke1ZxjhJZkM45Ec9GH9hv\"]},\"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":{\"keccak256\":\"0xd14a627157b9a411d2410713e5dd3a377e9064bd5c194a90748bbf27ea625784\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://29d6a502187e88fdb4ac51319b6cfc82e7ba886a435480e229e5f838d2da55ee\",\"dweb:/ipfs/QmQNWKr3axXvQowZi31ydXRdeZ7UnE7oN8XAz9FCkx1JhN\"]},\"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/IERC20Upgradeable.sol\":{\"keccak256\":\"0x0e1f0f5f62f67a881cd1a9597acbc0a5e4071f3c2c10449a183b922ae7272e3f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c25f742ff154998d19a669e2508c3597b363e123ce9144cd0fcf6521229f401f\",\"dweb:/ipfs/QmQXRuFzStEWqeEPbhQU6cAg9PaSowxJVo4PDKyRod7dco\"]},\"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\":{\"keccak256\":\"0xea2c6f9d434127bf36b1e3e5ebaaf6d28a64dbaeea560508e570014e905a5ad2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3483370aa549810a946ace621a225616bb6d0b9ed22c3a99bbcf80dc4866ec39\",\"dweb:/ipfs/QmdgFnm6X2oQ574eJFLghVXVckwyC3SbiAUxXs934N1qvf\"]},\"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4c9c634f99dd02d73ce7498b03a6305e251c05eeebb71457306561c1fab0fa7d\",\"dweb:/ipfs/QmbYRBbZHy8YoaQKXdPryiL3CSS7uUaRfRYi1TUj9cTqJQ\"]},\"@openzeppelin/contracts-upgradeable@4.9.2/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://310136ad60820af4177a11a61d77a3686faf5fca4942b600e08fc940db38396b\",\"dweb:/ipfs/QmbCzMNSTL7Zi7M4UCSqBrkHtp4jjxUnGbkneCZKdR1qeq\"]},\"@openzeppelin/contracts-upgradeable@4.9.2/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d6520943ea55fdf5f0bafb39ed909f64de17051bc954ff3e88c9e5621412c79c\",\"dweb:/ipfs/QmWZ4rAKTQbNG2HxGs46AcTXShsVytKeLs7CUCdCSv5N7a\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 780,
								"contract": "@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable",
								"label": "_initialized",
								"offset": 0,
								"slot": "0",
								"type": "t_uint8"
							},
							{
								"astId": 783,
								"contract": "@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable",
								"label": "_initializing",
								"offset": 1,
								"slot": "0",
								"type": "t_bool"
							},
							{
								"astId": 2355,
								"contract": "@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable",
								"label": "__gap",
								"offset": 0,
								"slot": "1",
								"type": "t_array(t_uint256)50_storage"
							},
							{
								"astId": 1224,
								"contract": "@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable",
								"label": "_balances",
								"offset": 0,
								"slot": "51",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 1230,
								"contract": "@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable",
								"label": "_allowances",
								"offset": 0,
								"slot": "52",
								"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
							},
							{
								"astId": 1232,
								"contract": "@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable",
								"label": "_totalSupply",
								"offset": 0,
								"slot": "53",
								"type": "t_uint256"
							},
							{
								"astId": 1234,
								"contract": "@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable",
								"label": "_name",
								"offset": 0,
								"slot": "54",
								"type": "t_string_storage"
							},
							{
								"astId": 1236,
								"contract": "@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable",
								"label": "_symbol",
								"offset": 0,
								"slot": "55",
								"type": "t_string_storage"
							},
							{
								"astId": 1816,
								"contract": "@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable",
								"label": "__gap",
								"offset": 0,
								"slot": "56",
								"type": "t_array(t_uint256)45_storage"
							},
							{
								"astId": 1958,
								"contract": "@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable",
								"label": "__gap",
								"offset": 0,
								"slot": "101",
								"type": "t_array(t_uint256)50_storage"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_array(t_uint256)45_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[45]",
								"numberOfBytes": "1440"
							},
							"t_array(t_uint256)50_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[50]",
								"numberOfBytes": "1600"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_uint256)"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							},
							"t_uint8": {
								"encoding": "inplace",
								"label": "uint8",
								"numberOfBytes": "1"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/extensions/IERC20MetadataUpgradeable.sol": {
				"IERC20MetadataUpgradeable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface for the optional metadata functions from the ERC20 standard. _Available since v4.1._",
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by `account`."
							},
							"decimals()": {
								"details": "Returns the decimals places of the token."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for the optional metadata functions from the ERC20 standard. _Available since v4.1._\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"decimals()\":{\"details\":\"Returns the decimals places of the token.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":\"IERC20MetadataUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/IERC20Upgradeable.sol\":{\"keccak256\":\"0x0e1f0f5f62f67a881cd1a9597acbc0a5e4071f3c2c10449a183b922ae7272e3f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c25f742ff154998d19a669e2508c3597b363e123ce9144cd0fcf6521229f401f\",\"dweb:/ipfs/QmQXRuFzStEWqeEPbhQU6cAg9PaSowxJVo4PDKyRod7dco\"]},\"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4c9c634f99dd02d73ce7498b03a6305e251c05eeebb71457306561c1fab0fa7d\",\"dweb:/ipfs/QmbYRBbZHy8YoaQKXdPryiL3CSS7uUaRfRYi1TUj9cTqJQ\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts-upgradeable@4.9.2/utils/AddressUpgradeable.sol": {
				"AddressUpgradeable": {
					"abi": [],
					"devdoc": {
						"details": "Collection of functions related to the address type",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/AddressUpgradeable.sol\":194:9374  library AddressUpgradeable {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/AddressUpgradeable.sol\":194:9374  library AddressUpgradeable {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212204641b7d05d9411363780eade16edb7a8c3c0512242226cb42d8239fb8fb6ff2b64736f6c63430008090033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212204641b7d05d9411363780eade16edb7a8c3c0512242226cb42d8239fb8fb6ff2b64736f6c63430008090033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CHAINID COINBASE 0xB7 0xD0 0x5D SWAP5 GT CALLDATASIZE CALLDATACOPY DUP1 0xEA 0xDE AND 0xED 0xB7 0xA8 0xC3 0xC0 MLOAD 0x22 TIMESTAMP 0x22 PUSH13 0xB42D8239FB8FB6FF2B64736F6C PUSH4 0x43000809 STOP CALLER ",
							"sourceMap": "194:9180:13:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;194:9180:13;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212204641b7d05d9411363780eade16edb7a8c3c0512242226cb42d8239fb8fb6ff2b64736f6c63430008090033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CHAINID COINBASE 0xB7 0xD0 0x5D SWAP5 GT CALLDATASIZE CALLDATACOPY DUP1 0xEA 0xDE AND 0xED 0xB7 0xA8 0xC3 0xC0 MLOAD 0x22 TIMESTAMP 0x22 PUSH13 0xB42D8239FB8FB6FF2B64736F6C PUSH4 0x43000809 STOP CALLER ",
							"sourceMap": "194:9180:13:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"_revert(bytes memory,string memory)": "infinite",
								"functionCall(address,bytes memory)": "infinite",
								"functionCall(address,bytes memory,string memory)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256,string memory)": "infinite",
								"functionDelegateCall(address,bytes memory)": "infinite",
								"functionDelegateCall(address,bytes memory,string memory)": "infinite",
								"functionStaticCall(address,bytes memory)": "infinite",
								"functionStaticCall(address,bytes memory,string memory)": "infinite",
								"isContract(address)": "infinite",
								"sendValue(address payable,uint256)": "infinite",
								"verifyCallResult(bool,bytes memory,string memory)": "infinite",
								"verifyCallResultFromTarget(address,bool,bytes memory,string memory)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 194,
									"end": 9374,
									"name": "PUSH #[$]",
									"source": 13,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 194,
									"end": 9374,
									"name": "PUSH [$]",
									"source": 13,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 194,
									"end": 9374,
									"name": "PUSH",
									"source": 13,
									"value": "B"
								},
								{
									"begin": 194,
									"end": 9374,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 194,
									"end": 9374,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 194,
									"end": 9374,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 194,
									"end": 9374,
									"name": "CODECOPY",
									"source": 13
								},
								{
									"begin": 194,
									"end": 9374,
									"name": "DUP1",
									"source": 13
								},
								{
									"begin": 194,
									"end": 9374,
									"name": "MLOAD",
									"source": 13
								},
								{
									"begin": 194,
									"end": 9374,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 9374,
									"name": "BYTE",
									"source": 13
								},
								{
									"begin": 194,
									"end": 9374,
									"name": "PUSH",
									"source": 13,
									"value": "73"
								},
								{
									"begin": 194,
									"end": 9374,
									"name": "EQ",
									"source": 13
								},
								{
									"begin": 194,
									"end": 9374,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "1"
								},
								{
									"begin": 194,
									"end": 9374,
									"name": "JUMPI",
									"source": 13
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 194,
									"end": 9374,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 9374,
									"name": "MSTORE",
									"source": 13
								},
								{
									"begin": 194,
									"end": 9374,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 9374,
									"name": "PUSH",
									"source": 13,
									"value": "4"
								},
								{
									"begin": 194,
									"end": 9374,
									"name": "MSTORE",
									"source": 13
								},
								{
									"begin": 194,
									"end": 9374,
									"name": "PUSH",
									"source": 13,
									"value": "24"
								},
								{
									"begin": 194,
									"end": 9374,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 9374,
									"name": "REVERT",
									"source": 13
								},
								{
									"begin": 194,
									"end": 9374,
									"name": "tag",
									"source": 13,
									"value": "1"
								},
								{
									"begin": 194,
									"end": 9374,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 194,
									"end": 9374,
									"name": "ADDRESS",
									"source": 13
								},
								{
									"begin": 194,
									"end": 9374,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 9374,
									"name": "MSTORE",
									"source": 13
								},
								{
									"begin": 194,
									"end": 9374,
									"name": "PUSH",
									"source": 13,
									"value": "73"
								},
								{
									"begin": 194,
									"end": 9374,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 194,
									"end": 9374,
									"name": "MSTORE8",
									"source": 13
								},
								{
									"begin": 194,
									"end": 9374,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 194,
									"end": 9374,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 194,
									"end": 9374,
									"name": "RETURN",
									"source": 13
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212204641b7d05d9411363780eade16edb7a8c3c0512242226cb42d8239fb8fb6ff2b64736f6c63430008090033",
									".code": [
										{
											"begin": 194,
											"end": 9374,
											"name": "PUSHDEPLOYADDRESS",
											"source": 13
										},
										{
											"begin": 194,
											"end": 9374,
											"name": "ADDRESS",
											"source": 13
										},
										{
											"begin": 194,
											"end": 9374,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 194,
											"end": 9374,
											"name": "PUSH",
											"source": 13,
											"value": "80"
										},
										{
											"begin": 194,
											"end": 9374,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 194,
											"end": 9374,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 194,
											"end": 9374,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 194,
											"end": 9374,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 194,
											"end": 9374,
											"name": "REVERT",
											"source": 13
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable@4.9.2/utils/AddressUpgradeable.sol\":\"AddressUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable@4.9.2/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://310136ad60820af4177a11a61d77a3686faf5fca4942b600e08fc940db38396b\",\"dweb:/ipfs/QmbCzMNSTL7Zi7M4UCSqBrkHtp4jjxUnGbkneCZKdR1qeq\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts-upgradeable@4.9.2/utils/ContextUpgradeable.sol": {
				"ContextUpgradeable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "version",
									"type": "uint8"
								}
							],
							"name": "Initialized",
							"type": "event"
						}
					],
					"devdoc": {
						"details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
						"kind": "dev",
						"methods": {},
						"stateVariables": {
							"__gap": {
								"details": "This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable@4.9.2/utils/ContextUpgradeable.sol\":\"ContextUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f103ee2e4aecd37aac6ceefe670709cdd7613dee25fa2d4d9feaf7fc0aaa155e\",\"dweb:/ipfs/QmRiNZLoJk5k3HPMYGPGjZFd2ke1ZxjhJZkM45Ec9GH9hv\"]},\"@openzeppelin/contracts-upgradeable@4.9.2/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://310136ad60820af4177a11a61d77a3686faf5fca4942b600e08fc940db38396b\",\"dweb:/ipfs/QmbCzMNSTL7Zi7M4UCSqBrkHtp4jjxUnGbkneCZKdR1qeq\"]},\"@openzeppelin/contracts-upgradeable@4.9.2/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d6520943ea55fdf5f0bafb39ed909f64de17051bc954ff3e88c9e5621412c79c\",\"dweb:/ipfs/QmWZ4rAKTQbNG2HxGs46AcTXShsVytKeLs7CUCdCSv5N7a\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 780,
								"contract": "@openzeppelin/contracts-upgradeable@4.9.2/utils/ContextUpgradeable.sol:ContextUpgradeable",
								"label": "_initialized",
								"offset": 0,
								"slot": "0",
								"type": "t_uint8"
							},
							{
								"astId": 783,
								"contract": "@openzeppelin/contracts-upgradeable@4.9.2/utils/ContextUpgradeable.sol:ContextUpgradeable",
								"label": "_initializing",
								"offset": 1,
								"slot": "0",
								"type": "t_bool"
							},
							{
								"astId": 2355,
								"contract": "@openzeppelin/contracts-upgradeable@4.9.2/utils/ContextUpgradeable.sol:ContextUpgradeable",
								"label": "__gap",
								"offset": 0,
								"slot": "1",
								"type": "t_array(t_uint256)50_storage"
							}
						],
						"types": {
							"t_array(t_uint256)50_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[50]",
								"numberOfBytes": "1600"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							},
							"t_uint8": {
								"encoding": "inplace",
								"label": "uint8",
								"numberOfBytes": "1"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts-upgradeable@4.9.2/utils/StorageSlotUpgradeable.sol": {
				"StorageSlotUpgradeable": {
					"abi": [],
					"devdoc": {
						"details": "Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC1967 implementation slot: ```solidity contract ERC1967 {     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ``` _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._ _Available since v4.9 for `string`, `bytes`._",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/StorageSlotUpgradeable.sol\":1420:4116  library StorageSlotUpgradeable {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/StorageSlotUpgradeable.sol\":1420:4116  library StorageSlotUpgradeable {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212202d355502d8e1210f4fcbc00b7b79b0d6114f8ff38f07d8d583518391edd96e7164736f6c63430008090033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212202d355502d8e1210f4fcbc00b7b79b0d6114f8ff38f07d8d583518391edd96e7164736f6c63430008090033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x2D CALLDATALOAD SSTORE MUL 0xD8 0xE1 0x21 0xF 0x4F 0xCB 0xC0 SIGNEXTEND PUSH28 0x79B0D6114F8FF38F07D8D583518391EDD96E7164736F6C6343000809 STOP CALLER ",
							"sourceMap": "1420:2696:15:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;1420:2696:15;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212202d355502d8e1210f4fcbc00b7b79b0d6114f8ff38f07d8d583518391edd96e7164736f6c63430008090033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x2D CALLDATALOAD SSTORE MUL 0xD8 0xE1 0x21 0xF 0x4F 0xCB 0xC0 SIGNEXTEND PUSH28 0x79B0D6114F8FF38F07D8D583518391EDD96E7164736F6C6343000809 STOP CALLER ",
							"sourceMap": "1420:2696:15:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"getAddressSlot(bytes32)": "infinite",
								"getBooleanSlot(bytes32)": "infinite",
								"getBytes32Slot(bytes32)": "infinite",
								"getBytesSlot(bytes storage pointer)": "infinite",
								"getBytesSlot(bytes32)": "infinite",
								"getStringSlot(bytes32)": "infinite",
								"getStringSlot(string storage pointer)": "infinite",
								"getUint256Slot(bytes32)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 1420,
									"end": 4116,
									"name": "PUSH #[$]",
									"source": 15,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1420,
									"end": 4116,
									"name": "PUSH [$]",
									"source": 15,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1420,
									"end": 4116,
									"name": "PUSH",
									"source": 15,
									"value": "B"
								},
								{
									"begin": 1420,
									"end": 4116,
									"name": "DUP3",
									"source": 15
								},
								{
									"begin": 1420,
									"end": 4116,
									"name": "DUP3",
									"source": 15
								},
								{
									"begin": 1420,
									"end": 4116,
									"name": "DUP3",
									"source": 15
								},
								{
									"begin": 1420,
									"end": 4116,
									"name": "CODECOPY",
									"source": 15
								},
								{
									"begin": 1420,
									"end": 4116,
									"name": "DUP1",
									"source": 15
								},
								{
									"begin": 1420,
									"end": 4116,
									"name": "MLOAD",
									"source": 15
								},
								{
									"begin": 1420,
									"end": 4116,
									"name": "PUSH",
									"source": 15,
									"value": "0"
								},
								{
									"begin": 1420,
									"end": 4116,
									"name": "BYTE",
									"source": 15
								},
								{
									"begin": 1420,
									"end": 4116,
									"name": "PUSH",
									"source": 15,
									"value": "73"
								},
								{
									"begin": 1420,
									"end": 4116,
									"name": "EQ",
									"source": 15
								},
								{
									"begin": 1420,
									"end": 4116,
									"name": "PUSH [tag]",
									"source": 15,
									"value": "1"
								},
								{
									"begin": 1420,
									"end": 4116,
									"name": "JUMPI",
									"source": 15
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 1420,
									"end": 4116,
									"name": "PUSH",
									"source": 15,
									"value": "0"
								},
								{
									"begin": 1420,
									"end": 4116,
									"name": "MSTORE",
									"source": 15
								},
								{
									"begin": 1420,
									"end": 4116,
									"name": "PUSH",
									"source": 15,
									"value": "0"
								},
								{
									"begin": 1420,
									"end": 4116,
									"name": "PUSH",
									"source": 15,
									"value": "4"
								},
								{
									"begin": 1420,
									"end": 4116,
									"name": "MSTORE",
									"source": 15
								},
								{
									"begin": 1420,
									"end": 4116,
									"name": "PUSH",
									"source": 15,
									"value": "24"
								},
								{
									"begin": 1420,
									"end": 4116,
									"name": "PUSH",
									"source": 15,
									"value": "0"
								},
								{
									"begin": 1420,
									"end": 4116,
									"name": "REVERT",
									"source": 15
								},
								{
									"begin": 1420,
									"end": 4116,
									"name": "tag",
									"source": 15,
									"value": "1"
								},
								{
									"begin": 1420,
									"end": 4116,
									"name": "JUMPDEST",
									"source": 15
								},
								{
									"begin": 1420,
									"end": 4116,
									"name": "ADDRESS",
									"source": 15
								},
								{
									"begin": 1420,
									"end": 4116,
									"name": "PUSH",
									"source": 15,
									"value": "0"
								},
								{
									"begin": 1420,
									"end": 4116,
									"name": "MSTORE",
									"source": 15
								},
								{
									"begin": 1420,
									"end": 4116,
									"name": "PUSH",
									"source": 15,
									"value": "73"
								},
								{
									"begin": 1420,
									"end": 4116,
									"name": "DUP2",
									"source": 15
								},
								{
									"begin": 1420,
									"end": 4116,
									"name": "MSTORE8",
									"source": 15
								},
								{
									"begin": 1420,
									"end": 4116,
									"name": "DUP3",
									"source": 15
								},
								{
									"begin": 1420,
									"end": 4116,
									"name": "DUP2",
									"source": 15
								},
								{
									"begin": 1420,
									"end": 4116,
									"name": "RETURN",
									"source": 15
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212202d355502d8e1210f4fcbc00b7b79b0d6114f8ff38f07d8d583518391edd96e7164736f6c63430008090033",
									".code": [
										{
											"begin": 1420,
											"end": 4116,
											"name": "PUSHDEPLOYADDRESS",
											"source": 15
										},
										{
											"begin": 1420,
											"end": 4116,
											"name": "ADDRESS",
											"source": 15
										},
										{
											"begin": 1420,
											"end": 4116,
											"name": "EQ",
											"source": 15
										},
										{
											"begin": 1420,
											"end": 4116,
											"name": "PUSH",
											"source": 15,
											"value": "80"
										},
										{
											"begin": 1420,
											"end": 4116,
											"name": "PUSH",
											"source": 15,
											"value": "40"
										},
										{
											"begin": 1420,
											"end": 4116,
											"name": "MSTORE",
											"source": 15
										},
										{
											"begin": 1420,
											"end": 4116,
											"name": "PUSH",
											"source": 15,
											"value": "0"
										},
										{
											"begin": 1420,
											"end": 4116,
											"name": "DUP1",
											"source": 15
										},
										{
											"begin": 1420,
											"end": 4116,
											"name": "REVERT",
											"source": 15
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC1967 implementation slot: ```solidity contract ERC1967 {     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ``` _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._ _Available since v4.9 for `string`, `bytes`._\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable@4.9.2/utils/StorageSlotUpgradeable.sol\":\"StorageSlotUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable@4.9.2/utils/StorageSlotUpgradeable.sol\":{\"keccak256\":\"0x07ac95acad040f1fb1f6120dd0aa5f702db69446e95f82613721879d30de0908\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a9df9de7b5da1d1bd3d4b6c073d0174bc4211db60e794a321c8cb5d4eae34685\",\"dweb:/ipfs/QmWe49zj65jayrCe9jZpoWhYUZ1RiwSxyU2s7SBZnMztVy\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts-upgradeable@4.9.2/utils/StringsUpgradeable.sol": {
				"StringsUpgradeable": {
					"abi": [],
					"devdoc": {
						"details": "String operations.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/StringsUpgradeable.sol\":242:2845  library StringsUpgradeable {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/StringsUpgradeable.sol\":242:2845  library StringsUpgradeable {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220663c571517db60567f7441fb38dbc2227265b4742347926a538300c4736cab3664736f6c63430008090033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220663c571517db60567f7441fb38dbc2227265b4742347926a538300c4736cab3664736f6c63430008090033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH7 0x3C571517DB6056 PUSH32 0x7441FB38DBC2227265B4742347926A538300C4736CAB3664736F6C6343000809 STOP CALLER ",
							"sourceMap": "242:2603:16:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;242:2603:16;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220663c571517db60567f7441fb38dbc2227265b4742347926a538300c4736cab3664736f6c63430008090033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH7 0x3C571517DB6056 PUSH32 0x7441FB38DBC2227265B4742347926A538300C4736CAB3664736F6C6343000809 STOP CALLER ",
							"sourceMap": "242:2603:16:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"equal(string memory,string memory)": "infinite",
								"toHexString(address)": "infinite",
								"toHexString(uint256)": "infinite",
								"toHexString(uint256,uint256)": "infinite",
								"toString(int256)": "infinite",
								"toString(uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 242,
									"end": 2845,
									"name": "PUSH #[$]",
									"source": 16,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 242,
									"end": 2845,
									"name": "PUSH [$]",
									"source": 16,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 242,
									"end": 2845,
									"name": "PUSH",
									"source": 16,
									"value": "B"
								},
								{
									"begin": 242,
									"end": 2845,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 242,
									"end": 2845,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 242,
									"end": 2845,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 242,
									"end": 2845,
									"name": "CODECOPY",
									"source": 16
								},
								{
									"begin": 242,
									"end": 2845,
									"name": "DUP1",
									"source": 16
								},
								{
									"begin": 242,
									"end": 2845,
									"name": "MLOAD",
									"source": 16
								},
								{
									"begin": 242,
									"end": 2845,
									"name": "PUSH",
									"source": 16,
									"value": "0"
								},
								{
									"begin": 242,
									"end": 2845,
									"name": "BYTE",
									"source": 16
								},
								{
									"begin": 242,
									"end": 2845,
									"name": "PUSH",
									"source": 16,
									"value": "73"
								},
								{
									"begin": 242,
									"end": 2845,
									"name": "EQ",
									"source": 16
								},
								{
									"begin": 242,
									"end": 2845,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "1"
								},
								{
									"begin": 242,
									"end": 2845,
									"name": "JUMPI",
									"source": 16
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 242,
									"end": 2845,
									"name": "PUSH",
									"source": 16,
									"value": "0"
								},
								{
									"begin": 242,
									"end": 2845,
									"name": "MSTORE",
									"source": 16
								},
								{
									"begin": 242,
									"end": 2845,
									"name": "PUSH",
									"source": 16,
									"value": "0"
								},
								{
									"begin": 242,
									"end": 2845,
									"name": "PUSH",
									"source": 16,
									"value": "4"
								},
								{
									"begin": 242,
									"end": 2845,
									"name": "MSTORE",
									"source": 16
								},
								{
									"begin": 242,
									"end": 2845,
									"name": "PUSH",
									"source": 16,
									"value": "24"
								},
								{
									"begin": 242,
									"end": 2845,
									"name": "PUSH",
									"source": 16,
									"value": "0"
								},
								{
									"begin": 242,
									"end": 2845,
									"name": "REVERT",
									"source": 16
								},
								{
									"begin": 242,
									"end": 2845,
									"name": "tag",
									"source": 16,
									"value": "1"
								},
								{
									"begin": 242,
									"end": 2845,
									"name": "JUMPDEST",
									"source": 16
								},
								{
									"begin": 242,
									"end": 2845,
									"name": "ADDRESS",
									"source": 16
								},
								{
									"begin": 242,
									"end": 2845,
									"name": "PUSH",
									"source": 16,
									"value": "0"
								},
								{
									"begin": 242,
									"end": 2845,
									"name": "MSTORE",
									"source": 16
								},
								{
									"begin": 242,
									"end": 2845,
									"name": "PUSH",
									"source": 16,
									"value": "73"
								},
								{
									"begin": 242,
									"end": 2845,
									"name": "DUP2",
									"source": 16
								},
								{
									"begin": 242,
									"end": 2845,
									"name": "MSTORE8",
									"source": 16
								},
								{
									"begin": 242,
									"end": 2845,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 242,
									"end": 2845,
									"name": "DUP2",
									"source": 16
								},
								{
									"begin": 242,
									"end": 2845,
									"name": "RETURN",
									"source": 16
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220663c571517db60567f7441fb38dbc2227265b4742347926a538300c4736cab3664736f6c63430008090033",
									".code": [
										{
											"begin": 242,
											"end": 2845,
											"name": "PUSHDEPLOYADDRESS",
											"source": 16
										},
										{
											"begin": 242,
											"end": 2845,
											"name": "ADDRESS",
											"source": 16
										},
										{
											"begin": 242,
											"end": 2845,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 242,
											"end": 2845,
											"name": "PUSH",
											"source": 16,
											"value": "80"
										},
										{
											"begin": 242,
											"end": 2845,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 242,
											"end": 2845,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 242,
											"end": 2845,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 242,
											"end": 2845,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 242,
											"end": 2845,
											"name": "REVERT",
											"source": 16
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"String operations.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable@4.9.2/utils/StringsUpgradeable.sol\":\"StringsUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable@4.9.2/utils/StringsUpgradeable.sol\":{\"keccak256\":\"0xb96dc79b65b7c37937919dcdb356a969ce0aa2e8338322bf4dc027a3c9c9a7eb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f8613145881436fc0480fff22da4868d611e2b0c0c3da083334eb4362ce1945a\",\"dweb:/ipfs/QmPqpP3YeRbBdTJRe6Gv2eGsUaANf4J6RwTNRW36iYahfV\"]},\"@openzeppelin/contracts-upgradeable@4.9.2/utils/math/MathUpgradeable.sol\":{\"keccak256\":\"0x2bc0007987c229ae7624eb29be6a9b84f6a6a5872f76248b15208b131ea41c4e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2b2835c737d073ef8b82a4cc246495a9740f43e7ff2cf130906b2449ff9bfb91\",\"dweb:/ipfs/QmSCWfNoSvvTN57ic7o1RW6NqSxxGAqbBTnLKc7QHe27qB\"]},\"@openzeppelin/contracts-upgradeable@4.9.2/utils/math/SignedMathUpgradeable.sol\":{\"keccak256\":\"0x88f6b7bba3ee33eeb741f9a0f5bc98b6e6e352d0fe4905377bb328590f84095a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://88ace2d60f265752f18903d839910be4e4e104340b2957678585b812447825d4\",\"dweb:/ipfs/QmXFkNxMc3AAGzhs2wUEZyErWQjsvoTGyYjuU5oZkFki5Z\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts-upgradeable@4.9.2/utils/introspection/ERC165Upgradeable.sol": {
				"ERC165Upgradeable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "version",
									"type": "uint8"
								}
							],
							"name": "Initialized",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.",
						"kind": "dev",
						"methods": {
							"supportsInterface(bytes4)": {
								"details": "See {IERC165-supportsInterface}."
							}
						},
						"stateVariables": {
							"__gap": {
								"details": "This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"supportsInterface(bytes4)": "01ffc9a7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable@4.9.2/utils/introspection/ERC165Upgradeable.sol\":\"ERC165Upgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f103ee2e4aecd37aac6ceefe670709cdd7613dee25fa2d4d9feaf7fc0aaa155e\",\"dweb:/ipfs/QmRiNZLoJk5k3HPMYGPGjZFd2ke1ZxjhJZkM45Ec9GH9hv\"]},\"@openzeppelin/contracts-upgradeable@4.9.2/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://310136ad60820af4177a11a61d77a3686faf5fca4942b600e08fc940db38396b\",\"dweb:/ipfs/QmbCzMNSTL7Zi7M4UCSqBrkHtp4jjxUnGbkneCZKdR1qeq\"]},\"@openzeppelin/contracts-upgradeable@4.9.2/utils/introspection/ERC165Upgradeable.sol\":{\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0895399d170daab2d69b4c43a0202e5a07f2e67a93b26e3354dcbedb062232f7\",\"dweb:/ipfs/QmUM1VH3XDk559Dsgh4QPvupr3YVKjz87HrSyYzzVFZbxw\"]},\"@openzeppelin/contracts-upgradeable@4.9.2/utils/introspection/IERC165Upgradeable.sol\":{\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://92ad7e572cf44e6b4b37631b44b62f9eb9fb1cf14d9ce51c1504d5dc7ccaf758\",\"dweb:/ipfs/QmcnbqX85tsWnUXPmtuPLE4SczME2sJaTfmqEFkuAJvWhy\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 780,
								"contract": "@openzeppelin/contracts-upgradeable@4.9.2/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
								"label": "_initialized",
								"offset": 0,
								"slot": "0",
								"type": "t_uint8"
							},
							{
								"astId": 783,
								"contract": "@openzeppelin/contracts-upgradeable@4.9.2/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
								"label": "_initializing",
								"offset": 1,
								"slot": "0",
								"type": "t_bool"
							},
							{
								"astId": 2738,
								"contract": "@openzeppelin/contracts-upgradeable@4.9.2/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
								"label": "__gap",
								"offset": 0,
								"slot": "1",
								"type": "t_array(t_uint256)50_storage"
							}
						],
						"types": {
							"t_array(t_uint256)50_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[50]",
								"numberOfBytes": "1600"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							},
							"t_uint8": {
								"encoding": "inplace",
								"label": "uint8",
								"numberOfBytes": "1"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts-upgradeable@4.9.2/utils/introspection/IERC165Upgradeable.sol": {
				"IERC165Upgradeable": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.",
						"kind": "dev",
						"methods": {
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"supportsInterface(bytes4)": "01ffc9a7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable@4.9.2/utils/introspection/IERC165Upgradeable.sol\":\"IERC165Upgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable@4.9.2/utils/introspection/IERC165Upgradeable.sol\":{\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://92ad7e572cf44e6b4b37631b44b62f9eb9fb1cf14d9ce51c1504d5dc7ccaf758\",\"dweb:/ipfs/QmcnbqX85tsWnUXPmtuPLE4SczME2sJaTfmqEFkuAJvWhy\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts-upgradeable@4.9.2/utils/math/MathUpgradeable.sol": {
				"MathUpgradeable": {
					"abi": [],
					"devdoc": {
						"details": "Standard math utilities missing in the Solidity language.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/math/MathUpgradeable.sol\":202:12795  library MathUpgradeable {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/math/MathUpgradeable.sol\":202:12795  library MathUpgradeable {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212202fdf2a7da2f6e43d0a1e53f4ec10c64de77c968d5c4eefd4b1bd3079b18519f564736f6c63430008090033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212202fdf2a7da2f6e43d0a1e53f4ec10c64de77c968d5c4eefd4b1bd3079b18519f564736f6c63430008090033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x2F 0xDF 0x2A PUSH30 0xA2F6E43D0A1E53F4EC10C64DE77C968D5C4EEFD4B1BD3079B18519F56473 PUSH16 0x6C634300080900330000000000000000 ",
							"sourceMap": "202:12593:19:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;202:12593:19;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212202fdf2a7da2f6e43d0a1e53f4ec10c64de77c968d5c4eefd4b1bd3079b18519f564736f6c63430008090033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x2F 0xDF 0x2A PUSH30 0xA2F6E43D0A1E53F4EC10C64DE77C968D5C4EEFD4B1BD3079B18519F56473 PUSH16 0x6C634300080900330000000000000000 ",
							"sourceMap": "202:12593:19:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"average(uint256,uint256)": "infinite",
								"ceilDiv(uint256,uint256)": "infinite",
								"log10(uint256)": "infinite",
								"log10(uint256,enum MathUpgradeable.Rounding)": "infinite",
								"log2(uint256)": "infinite",
								"log2(uint256,enum MathUpgradeable.Rounding)": "infinite",
								"log256(uint256)": "infinite",
								"log256(uint256,enum MathUpgradeable.Rounding)": "infinite",
								"max(uint256,uint256)": "infinite",
								"min(uint256,uint256)": "infinite",
								"mulDiv(uint256,uint256,uint256)": "infinite",
								"mulDiv(uint256,uint256,uint256,enum MathUpgradeable.Rounding)": "infinite",
								"sqrt(uint256)": "infinite",
								"sqrt(uint256,enum MathUpgradeable.Rounding)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 202,
									"end": 12795,
									"name": "PUSH #[$]",
									"source": 19,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 202,
									"end": 12795,
									"name": "PUSH [$]",
									"source": 19,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 202,
									"end": 12795,
									"name": "PUSH",
									"source": 19,
									"value": "B"
								},
								{
									"begin": 202,
									"end": 12795,
									"name": "DUP3",
									"source": 19
								},
								{
									"begin": 202,
									"end": 12795,
									"name": "DUP3",
									"source": 19
								},
								{
									"begin": 202,
									"end": 12795,
									"name": "DUP3",
									"source": 19
								},
								{
									"begin": 202,
									"end": 12795,
									"name": "CODECOPY",
									"source": 19
								},
								{
									"begin": 202,
									"end": 12795,
									"name": "DUP1",
									"source": 19
								},
								{
									"begin": 202,
									"end": 12795,
									"name": "MLOAD",
									"source": 19
								},
								{
									"begin": 202,
									"end": 12795,
									"name": "PUSH",
									"source": 19,
									"value": "0"
								},
								{
									"begin": 202,
									"end": 12795,
									"name": "BYTE",
									"source": 19
								},
								{
									"begin": 202,
									"end": 12795,
									"name": "PUSH",
									"source": 19,
									"value": "73"
								},
								{
									"begin": 202,
									"end": 12795,
									"name": "EQ",
									"source": 19
								},
								{
									"begin": 202,
									"end": 12795,
									"name": "PUSH [tag]",
									"source": 19,
									"value": "1"
								},
								{
									"begin": 202,
									"end": 12795,
									"name": "JUMPI",
									"source": 19
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 202,
									"end": 12795,
									"name": "PUSH",
									"source": 19,
									"value": "0"
								},
								{
									"begin": 202,
									"end": 12795,
									"name": "MSTORE",
									"source": 19
								},
								{
									"begin": 202,
									"end": 12795,
									"name": "PUSH",
									"source": 19,
									"value": "0"
								},
								{
									"begin": 202,
									"end": 12795,
									"name": "PUSH",
									"source": 19,
									"value": "4"
								},
								{
									"begin": 202,
									"end": 12795,
									"name": "MSTORE",
									"source": 19
								},
								{
									"begin": 202,
									"end": 12795,
									"name": "PUSH",
									"source": 19,
									"value": "24"
								},
								{
									"begin": 202,
									"end": 12795,
									"name": "PUSH",
									"source": 19,
									"value": "0"
								},
								{
									"begin": 202,
									"end": 12795,
									"name": "REVERT",
									"source": 19
								},
								{
									"begin": 202,
									"end": 12795,
									"name": "tag",
									"source": 19,
									"value": "1"
								},
								{
									"begin": 202,
									"end": 12795,
									"name": "JUMPDEST",
									"source": 19
								},
								{
									"begin": 202,
									"end": 12795,
									"name": "ADDRESS",
									"source": 19
								},
								{
									"begin": 202,
									"end": 12795,
									"name": "PUSH",
									"source": 19,
									"value": "0"
								},
								{
									"begin": 202,
									"end": 12795,
									"name": "MSTORE",
									"source": 19
								},
								{
									"begin": 202,
									"end": 12795,
									"name": "PUSH",
									"source": 19,
									"value": "73"
								},
								{
									"begin": 202,
									"end": 12795,
									"name": "DUP2",
									"source": 19
								},
								{
									"begin": 202,
									"end": 12795,
									"name": "MSTORE8",
									"source": 19
								},
								{
									"begin": 202,
									"end": 12795,
									"name": "DUP3",
									"source": 19
								},
								{
									"begin": 202,
									"end": 12795,
									"name": "DUP2",
									"source": 19
								},
								{
									"begin": 202,
									"end": 12795,
									"name": "RETURN",
									"source": 19
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212202fdf2a7da2f6e43d0a1e53f4ec10c64de77c968d5c4eefd4b1bd3079b18519f564736f6c63430008090033",
									".code": [
										{
											"begin": 202,
											"end": 12795,
											"name": "PUSHDEPLOYADDRESS",
											"source": 19
										},
										{
											"begin": 202,
											"end": 12795,
											"name": "ADDRESS",
											"source": 19
										},
										{
											"begin": 202,
											"end": 12795,
											"name": "EQ",
											"source": 19
										},
										{
											"begin": 202,
											"end": 12795,
											"name": "PUSH",
											"source": 19,
											"value": "80"
										},
										{
											"begin": 202,
											"end": 12795,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 202,
											"end": 12795,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 202,
											"end": 12795,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 202,
											"end": 12795,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 202,
											"end": 12795,
											"name": "REVERT",
											"source": 19
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable@4.9.2/utils/math/MathUpgradeable.sol\":\"MathUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable@4.9.2/utils/math/MathUpgradeable.sol\":{\"keccak256\":\"0x2bc0007987c229ae7624eb29be6a9b84f6a6a5872f76248b15208b131ea41c4e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2b2835c737d073ef8b82a4cc246495a9740f43e7ff2cf130906b2449ff9bfb91\",\"dweb:/ipfs/QmSCWfNoSvvTN57ic7o1RW6NqSxxGAqbBTnLKc7QHe27qB\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts-upgradeable@4.9.2/utils/math/SignedMathUpgradeable.sol": {
				"SignedMathUpgradeable": {
					"abi": [],
					"devdoc": {
						"details": "Standard signed math utilities missing in the Solidity language.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/math/SignedMathUpgradeable.sol\":215:1273  library SignedMathUpgradeable {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/math/SignedMathUpgradeable.sol\":215:1273  library SignedMathUpgradeable {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220f85c0a45998ade398f001a9b14e533f3a5f0ab55538c80d3eee5ab135a49e3f864736f6c63430008090033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f85c0a45998ade398f001a9b14e533f3a5f0ab55538c80d3eee5ab135a49e3f864736f6c63430008090033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xF8 0x5C EXP GASLIMIT SWAP10 DUP11 0xDE CODECOPY DUP16 STOP BYTE SWAP12 EQ 0xE5 CALLER RETURN 0xA5 CREATE 0xAB SSTORE MSTORE8 DUP13 DUP1 0xD3 0xEE 0xE5 0xAB SGT GAS 0x49 0xE3 0xF8 PUSH5 0x736F6C6343 STOP ADDMOD MULMOD STOP CALLER ",
							"sourceMap": "215:1058:20:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;215:1058:20;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f85c0a45998ade398f001a9b14e533f3a5f0ab55538c80d3eee5ab135a49e3f864736f6c63430008090033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xF8 0x5C EXP GASLIMIT SWAP10 DUP11 0xDE CODECOPY DUP16 STOP BYTE SWAP12 EQ 0xE5 CALLER RETURN 0xA5 CREATE 0xAB SSTORE MSTORE8 DUP13 DUP1 0xD3 0xEE 0xE5 0xAB SGT GAS 0x49 0xE3 0xF8 PUSH5 0x736F6C6343 STOP ADDMOD MULMOD STOP CALLER ",
							"sourceMap": "215:1058:20:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"abs(int256)": "infinite",
								"average(int256,int256)": "infinite",
								"max(int256,int256)": "infinite",
								"min(int256,int256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 215,
									"end": 1273,
									"name": "PUSH #[$]",
									"source": 20,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 215,
									"end": 1273,
									"name": "PUSH [$]",
									"source": 20,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 215,
									"end": 1273,
									"name": "PUSH",
									"source": 20,
									"value": "B"
								},
								{
									"begin": 215,
									"end": 1273,
									"name": "DUP3",
									"source": 20
								},
								{
									"begin": 215,
									"end": 1273,
									"name": "DUP3",
									"source": 20
								},
								{
									"begin": 215,
									"end": 1273,
									"name": "DUP3",
									"source": 20
								},
								{
									"begin": 215,
									"end": 1273,
									"name": "CODECOPY",
									"source": 20
								},
								{
									"begin": 215,
									"end": 1273,
									"name": "DUP1",
									"source": 20
								},
								{
									"begin": 215,
									"end": 1273,
									"name": "MLOAD",
									"source": 20
								},
								{
									"begin": 215,
									"end": 1273,
									"name": "PUSH",
									"source": 20,
									"value": "0"
								},
								{
									"begin": 215,
									"end": 1273,
									"name": "BYTE",
									"source": 20
								},
								{
									"begin": 215,
									"end": 1273,
									"name": "PUSH",
									"source": 20,
									"value": "73"
								},
								{
									"begin": 215,
									"end": 1273,
									"name": "EQ",
									"source": 20
								},
								{
									"begin": 215,
									"end": 1273,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "1"
								},
								{
									"begin": 215,
									"end": 1273,
									"name": "JUMPI",
									"source": 20
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 215,
									"end": 1273,
									"name": "PUSH",
									"source": 20,
									"value": "0"
								},
								{
									"begin": 215,
									"end": 1273,
									"name": "MSTORE",
									"source": 20
								},
								{
									"begin": 215,
									"end": 1273,
									"name": "PUSH",
									"source": 20,
									"value": "0"
								},
								{
									"begin": 215,
									"end": 1273,
									"name": "PUSH",
									"source": 20,
									"value": "4"
								},
								{
									"begin": 215,
									"end": 1273,
									"name": "MSTORE",
									"source": 20
								},
								{
									"begin": 215,
									"end": 1273,
									"name": "PUSH",
									"source": 20,
									"value": "24"
								},
								{
									"begin": 215,
									"end": 1273,
									"name": "PUSH",
									"source": 20,
									"value": "0"
								},
								{
									"begin": 215,
									"end": 1273,
									"name": "REVERT",
									"source": 20
								},
								{
									"begin": 215,
									"end": 1273,
									"name": "tag",
									"source": 20,
									"value": "1"
								},
								{
									"begin": 215,
									"end": 1273,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 215,
									"end": 1273,
									"name": "ADDRESS",
									"source": 20
								},
								{
									"begin": 215,
									"end": 1273,
									"name": "PUSH",
									"source": 20,
									"value": "0"
								},
								{
									"begin": 215,
									"end": 1273,
									"name": "MSTORE",
									"source": 20
								},
								{
									"begin": 215,
									"end": 1273,
									"name": "PUSH",
									"source": 20,
									"value": "73"
								},
								{
									"begin": 215,
									"end": 1273,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 215,
									"end": 1273,
									"name": "MSTORE8",
									"source": 20
								},
								{
									"begin": 215,
									"end": 1273,
									"name": "DUP3",
									"source": 20
								},
								{
									"begin": 215,
									"end": 1273,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 215,
									"end": 1273,
									"name": "RETURN",
									"source": 20
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220f85c0a45998ade398f001a9b14e533f3a5f0ab55538c80d3eee5ab135a49e3f864736f6c63430008090033",
									".code": [
										{
											"begin": 215,
											"end": 1273,
											"name": "PUSHDEPLOYADDRESS",
											"source": 20
										},
										{
											"begin": 215,
											"end": 1273,
											"name": "ADDRESS",
											"source": 20
										},
										{
											"begin": 215,
											"end": 1273,
											"name": "EQ",
											"source": 20
										},
										{
											"begin": 215,
											"end": 1273,
											"name": "PUSH",
											"source": 20,
											"value": "80"
										},
										{
											"begin": 215,
											"end": 1273,
											"name": "PUSH",
											"source": 20,
											"value": "40"
										},
										{
											"begin": 215,
											"end": 1273,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 215,
											"end": 1273,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 215,
											"end": 1273,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 215,
											"end": 1273,
											"name": "REVERT",
											"source": 20
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard signed math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable@4.9.2/utils/math/SignedMathUpgradeable.sol\":\"SignedMathUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable@4.9.2/utils/math/SignedMathUpgradeable.sol\":{\"keccak256\":\"0x88f6b7bba3ee33eeb741f9a0f5bc98b6e6e352d0fe4905377bb328590f84095a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://88ace2d60f265752f18903d839910be4e4e104340b2957678585b812447825d4\",\"dweb:/ipfs/QmXFkNxMc3AAGzhs2wUEZyErWQjsvoTGyYjuU5oZkFki5Z\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"PAXX.sol": {
				"PRAXXIS": {
					"abi": [
						{
							"inputs": [],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "previousAdmin",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "newAdmin",
									"type": "address"
								}
							],
							"name": "AdminChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "beacon",
									"type": "address"
								}
							],
							"name": "BeaconUpgraded",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "version",
									"type": "uint8"
								}
							],
							"name": "Initialized",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "Paused",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "previousAdminRole",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "newAdminRole",
									"type": "bytes32"
								}
							],
							"name": "RoleAdminChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "RoleGranted",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "RoleRevoked",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "Unpaused",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "implementation",
									"type": "address"
								}
							],
							"name": "Upgraded",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "DEFAULT_ADMIN_ROLE",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "PAUSER_ROLE",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "UPGRADER_ROLE",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "burn",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "burnFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "subtractedValue",
									"type": "uint256"
								}
							],
							"name": "decreaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								}
							],
							"name": "getRoleAdmin",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "grantRole",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "hasRole",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "addedValue",
									"type": "uint256"
								}
							],
							"name": "increaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "initialize",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "pause",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "paused",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "proxiableUUID",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "renounceRole",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "revokeRole",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "unpause",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newImplementation",
									"type": "address"
								}
							],
							"name": "upgradeTo",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newImplementation",
									"type": "address"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "upgradeToAndCall",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						}
					],
					"devdoc": {
						"custom:security-contact": "sec@arcadia.global",
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"burn(uint256)": {
								"details": "Destroys `amount` tokens from the caller. See {ERC20-_burn}."
							},
							"burnFrom(address,uint256)": {
								"details": "Destroys `amount` tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `amount`."
							},
							"constructor": {
								"custom:oz-upgrades-unsafe-allow": "constructor"
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"decreaseAllowance(address,uint256)": {
								"details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
							},
							"getRoleAdmin(bytes32)": {
								"details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
							},
							"grantRole(bytes32,address)": {
								"details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
							},
							"hasRole(bytes32,address)": {
								"details": "Returns `true` if `account` has been granted `role`."
							},
							"increaseAllowance(address,uint256)": {
								"details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"paused()": {
								"details": "Returns true if the contract is paused, and false otherwise."
							},
							"proxiableUUID()": {
								"details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
							},
							"renounceRole(bytes32,address)": {
								"details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
							},
							"revokeRole(bytes32,address)": {
								"details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
							},
							"supportsInterface(bytes4)": {
								"details": "See {IERC165-supportsInterface}."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
							},
							"upgradeTo(address)": {
								"custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
								"details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
							},
							"upgradeToAndCall(address,bytes)": {
								"custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
								"details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"PAXX.sol\":634:2048  contract PRAXXIS is Initializable, ERC20Upgradeable, ERC20BurnableUpgradeable, PausableUpgradeable, AccessControlUpgradeable, UUPSUpgradeable {... */\n  mstore(0x40, 0xa0)\n    /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/UUPSUpgradeable.sol\":1332:1336  this */\n  address\n    /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/UUPSUpgradeable.sol\":1289:1337  address private immutable __self = address(this) */\n  0x80\n  mstore\n    /* \"PAXX.sol\":975:1028  constructor() {... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n    /* \"PAXX.sol\":999:1021  _disableInitializers() */\n  tag_4\n    /* \"PAXX.sol\":999:1019  _disableInitializers */\n  tag_5\n    /* \"PAXX.sol\":999:1021  _disableInitializers() */\n  jump\t// in\ntag_4:\n    /* \"PAXX.sol\":634:2048  contract PRAXXIS is Initializable, ERC20Upgradeable, ERC20BurnableUpgradeable, PausableUpgradeable, AccessControlUpgradeable, UUPSUpgradeable {... */\n  jump(tag_14)\n    /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/Initializable.sol\":5939:6219  function _disableInitializers() internal virtual {... */\ntag_5:\n    /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/Initializable.sol\":6007:6020  _initializing */\n  sload(0x00)\n  0x0100\n  swap1\n  div\n  0xff\n  and\n    /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/Initializable.sol\":6006:6020  !_initializing */\n  iszero\n    /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/Initializable.sol\":5998:6064  require(!_initializing, \"Initializable: contract is initializing\") */\n  tag_8\n  jumpi\n  mload(0x40)\n  shl(0xe5, 0x461bcd)\n  dup2\n  mstore\n    /* \"#utility.yul\":216:218   */\n  0x20\n    /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/Initializable.sol\":5998:6064  require(!_initializing, \"Initializable: contract is initializing\") */\n  0x04\n  dup3\n  add\n    /* \"#utility.yul\":198:219   */\n  mstore\n    /* \"#utility.yul\":255:257   */\n  0x27\n    /* \"#utility.yul\":235:253   */\n  0x24\n  dup3\n  add\n    /* \"#utility.yul\":228:258   */\n  mstore\n    /* \"#utility.yul\":294:328   */\n  0x496e697469616c697a61626c653a20636f6e747261637420697320696e697469\n    /* \"#utility.yul\":274:292   */\n  0x44\n  dup3\n  add\n    /* \"#utility.yul\":267:329   */\n  mstore\n  shl(0xc8, 0x616c697a696e67)\n    /* \"#utility.yul\":345:363   */\n  0x64\n  dup3\n  add\n    /* \"#utility.yul\":338:375   */\n  mstore\n    /* \"#utility.yul\":392:411   */\n  0x84\n  add\n    /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/Initializable.sol\":5998:6064  require(!_initializing, \"Initializable: contract is initializing\") */\n  mload(0x40)\n  dup1\n  swap2\n  sub\n  swap1\n  revert\ntag_8:\n    /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/Initializable.sol\":6078:6090  _initialized */\n  sload(0x00)\n    /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/Initializable.sol\":6094:6109  type(uint8).max */\n  0xff\n    /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/Initializable.sol\":6078:6090  _initialized */\n  swap1\n  dup2\n  and\n    /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/Initializable.sol\":6078:6109  _initialized != type(uint8).max */\n  eq\n    /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/Initializable.sol\":6074:6213  if (_initialized != type(uint8).max) {... */\n  tag_11\n  jumpi\n    /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/Initializable.sol\":6125:6137  _initialized */\n  0x00\n    /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/Initializable.sol\":6125:6155  _initialized = type(uint8).max */\n  dup1\n  sload\n  not(0xff)\n  and\n    /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/Initializable.sol\":6140:6155  type(uint8).max */\n  0xff\n    /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/Initializable.sol\":6125:6155  _initialized = type(uint8).max */\n  swap1\n  dup2\n  or\n  swap1\n  swap2\n  sstore\n    /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/Initializable.sol\":6174:6202  Initialized(type(uint8).max) */\n  mload(0x40)\n    /* \"#utility.yul\":564:600   */\n  swap1\n  dup2\n  mstore\n    /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/Initializable.sol\":6174:6202  Initialized(type(uint8).max) */\n  0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498\n  swap1\n    /* \"#utility.yul\":552:554   */\n  0x20\n    /* \"#utility.yul\":537:555   */\n  add\n    /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/Initializable.sol\":6174:6202  Initialized(type(uint8).max) */\n  mload(0x40)\n  dup1\n  swap2\n  sub\n  swap1\n  log1\n    /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/Initializable.sol\":6074:6213  if (_initialized != type(uint8).max) {... */\ntag_11:\n    /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/Initializable.sol\":5939:6219  function _disableInitializers() internal virtual {... */\n  jump\t// out\n    /* \"#utility.yul\":422:606   */\ntag_14:\n    /* \"PAXX.sol\":634:2048  contract PRAXXIS is Initializable, ERC20Upgradeable, ERC20BurnableUpgradeable, PausableUpgradeable, AccessControlUpgradeable, UUPSUpgradeable {... */\n  mload(0x80)\n  codecopy(0x00, dataOffset(sub_0), dataSize(sub_0))\n  0x00\n  assignImmutable(\"0x3f2cb8b8a6f6ba8772056c1e4910fb442737deea593ec84e00cbccee66f6d0e1\")\n  return(0x00, dataSize(sub_0))\nstop\n\nsub_0: assembly {\n        /* \"PAXX.sol\":634:2048  contract PRAXXIS is Initializable, ERC20Upgradeable, ERC20BurnableUpgradeable, PausableUpgradeable, AccessControlUpgradeable, UUPSUpgradeable {... */\n      mstore(0x40, 0x80)\n      jumpi(tag_1, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x52d1902d\n      gt\n      tag_31\n      jumpi\n      dup1\n      0x95d89b41\n      gt\n      tag_32\n      jumpi\n      dup1\n      0xd547741f\n      gt\n      tag_33\n      jumpi\n      dup1\n      0xd547741f\n      eq\n      tag_27\n      jumpi\n      dup1\n      0xdd62ed3e\n      eq\n      tag_28\n      jumpi\n      dup1\n      0xe63ab1e9\n      eq\n      tag_29\n      jumpi\n      dup1\n      0xf72c0d8b\n      eq\n      tag_30\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_33:\n      dup1\n      0x95d89b41\n      eq\n      tag_23\n      jumpi\n      dup1\n      0xa217fddf\n      eq\n      tag_24\n      jumpi\n      dup1\n      0xa457c2d7\n      eq\n      tag_25\n      jumpi\n      dup1\n      0xa9059cbb\n      eq\n      tag_26\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_32:\n      dup1\n      0x79cc6790\n      gt\n      tag_34\n      jumpi\n      dup1\n      0x79cc6790\n      eq\n      tag_19\n      jumpi\n      dup1\n      0x8129fc1c\n      eq\n      tag_20\n      jumpi\n      dup1\n      0x8456cb59\n      eq\n      tag_21\n      jumpi\n      dup1\n      0x91d14854\n      eq\n      tag_22\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_34:\n      dup1\n      0x52d1902d\n      eq\n      tag_16\n      jumpi\n      dup1\n      0x5c975abb\n      eq\n      tag_17\n      jumpi\n      dup1\n      0x70a08231\n      eq\n      tag_18\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_31:\n      dup1\n      0x313ce567\n      gt\n      tag_35\n      jumpi\n      dup1\n      0x39509351\n      gt\n      tag_36\n      jumpi\n      dup1\n      0x39509351\n      eq\n      tag_12\n      jumpi\n      dup1\n      0x3f4ba83a\n      eq\n      tag_13\n      jumpi\n      dup1\n      0x42966c68\n      eq\n      tag_14\n      jumpi\n      dup1\n      0x4f1ef286\n      eq\n      tag_15\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_36:\n      dup1\n      0x313ce567\n      eq\n      tag_9\n      jumpi\n      dup1\n      0x36568abe\n      eq\n      tag_10\n      jumpi\n      dup1\n      0x3659cfe6\n      eq\n      tag_11\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_35:\n      dup1\n      0x18160ddd\n      gt\n      tag_37\n      jumpi\n      dup1\n      0x18160ddd\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x23b872dd\n      eq\n      tag_6\n      jumpi\n      dup1\n      0x248a9ca3\n      eq\n      tag_7\n      jumpi\n      dup1\n      0x2f2ff15d\n      eq\n      tag_8\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_37:\n      dup1\n      0x01ffc9a7\n      eq\n      tag_2\n      jumpi\n      dup1\n      0x06fdde03\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x095ea7b3\n      eq\n      tag_4\n      jumpi\n    tag_1:\n      0x00\n      dup1\n      revert\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":3029:3242  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {... */\n    tag_2:\n      callvalue\n      dup1\n      iszero\n      tag_38\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_38:\n      pop\n      tag_39\n      tag_40\n      calldatasize\n      0x04\n      tag_41\n      jump\t// in\n    tag_40:\n      tag_42\n      jump\t// in\n    tag_39:\n      mload(0x40)\n        /* \"#utility.yul\":470:484   */\n      swap1\n      iszero\n        /* \"#utility.yul\":463:485   */\n      iszero\n        /* \"#utility.yul\":445:486   */\n      dup2\n      mstore\n        /* \"#utility.yul\":433:435   */\n      0x20\n        /* \"#utility.yul\":418:436   */\n      add\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":3029:3242  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {... */\n    tag_43:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":2495:2593  function name() public view virtual override returns (string memory) {... */\n    tag_3:\n      callvalue\n      dup1\n      iszero\n      tag_45\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_45:\n      pop\n      tag_46\n      tag_47\n      jump\t// in\n    tag_46:\n      mload(0x40)\n      tag_43\n      swap2\n      swap1\n      tag_49\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":4781:4978  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n    tag_4:\n      callvalue\n      dup1\n      iszero\n      tag_50\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_50:\n      pop\n      tag_39\n      tag_52\n      calldatasize\n      0x04\n      tag_53\n      jump\t// in\n    tag_52:\n      tag_54\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":3592:3698  function totalSupply() public view virtual override returns (uint256) {... */\n    tag_5:\n      callvalue\n      dup1\n      iszero\n      tag_56\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_56:\n      pop\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":3679:3691  _totalSupply */\n      sload(0x35)\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":3592:3698  function totalSupply() public view virtual override returns (uint256) {... */\n    tag_57:\n      mload(0x40)\n        /* \"#utility.yul\":1731:1756   */\n      swap1\n      dup2\n      mstore\n        /* \"#utility.yul\":1719:1721   */\n      0x20\n        /* \"#utility.yul\":1704:1722   */\n      add\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":3592:3698  function totalSupply() public view virtual override returns (uint256) {... */\n      tag_43\n        /* \"#utility.yul\":1585:1762   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":5540:5796  function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {... */\n    tag_6:\n      callvalue\n      dup1\n      iszero\n      tag_61\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_61:\n      pop\n      tag_39\n      tag_63\n      calldatasize\n      0x04\n      tag_64\n      jump\t// in\n    tag_63:\n      tag_65\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":4834:4963  function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {... */\n    tag_7:\n      callvalue\n      dup1\n      iszero\n      tag_67\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_67:\n      pop\n      tag_57\n      tag_69\n      calldatasize\n      0x04\n      tag_70\n      jump\t// in\n    tag_69:\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":4908:4915  bytes32 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":4934:4946  _roles[role] */\n      swap1\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":4934:4940  _roles */\n      0xfb\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":4934:4946  _roles[role] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":4934:4956  _roles[role].adminRole */\n      0x01\n      add\n      sload\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":4834:4963  function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {... */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":5259:5404  function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {... */\n    tag_8:\n      callvalue\n      dup1\n      iszero\n      tag_74\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_74:\n      pop\n      tag_75\n      tag_76\n      calldatasize\n      0x04\n      tag_77\n      jump\t// in\n    tag_76:\n      tag_78\n      jump\t// in\n    tag_75:\n      stop\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":3441:3532  function decimals() public view virtual override returns (uint8) {... */\n    tag_9:\n      callvalue\n      dup1\n      iszero\n      tag_79\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_79:\n      pop\n      mload(0x40)\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":3523:3525  18 */\n      0x12\n        /* \"#utility.yul\":2868:2904   */\n      dup2\n      mstore\n        /* \"#utility.yul\":2856:2858   */\n      0x20\n        /* \"#utility.yul\":2841:2859   */\n      add\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":3441:3532  function decimals() public view virtual override returns (uint8) {... */\n      tag_43\n        /* \"#utility.yul\":2726:2910   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":6368:6582  function renounceRole(bytes32 role, address account) public virtual override {... */\n    tag_10:\n      callvalue\n      dup1\n      iszero\n      tag_84\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_84:\n      pop\n      tag_75\n      tag_86\n      calldatasize\n      0x04\n      tag_77\n      jump\t// in\n    tag_86:\n      tag_87\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/UUPSUpgradeable.sol\":3387:3582  function upgradeTo(address newImplementation) public virtual onlyProxy {... */\n    tag_11:\n      callvalue\n      dup1\n      iszero\n      tag_88\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_88:\n      pop\n      tag_75\n      tag_90\n      calldatasize\n      0x04\n      tag_91\n      jump\t// in\n    tag_90:\n      tag_92\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":6191:6425  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {... */\n    tag_12:\n      callvalue\n      dup1\n      iszero\n      tag_93\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_93:\n      pop\n      tag_39\n      tag_95\n      calldatasize\n      0x04\n      tag_53\n      jump\t// in\n    tag_95:\n      tag_96\n      jump\t// in\n        /* \"PAXX.sol\":1640:1715  function unpause() public onlyRole(PAUSER_ROLE) {... */\n    tag_13:\n      callvalue\n      dup1\n      iszero\n      tag_98\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_98:\n      pop\n      tag_75\n      tag_100\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\":848:937  function burn(uint256 amount) public virtual {... */\n    tag_14:\n      callvalue\n      dup1\n      iszero\n      tag_101\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_101:\n      pop\n      tag_75\n      tag_103\n      calldatasize\n      0x04\n      tag_70\n      jump\t// in\n    tag_103:\n      tag_105\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/UUPSUpgradeable.sol\":3901:4121  function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {... */\n    tag_15:\n      tag_75\n      tag_107\n      calldatasize\n      0x04\n      tag_108\n      jump\t// in\n    tag_107:\n      tag_109\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/UUPSUpgradeable.sol\":3006:3137  function proxiableUUID() external view virtual override notDelegated returns (bytes32) {... */\n    tag_16:\n      callvalue\n      dup1\n      iszero\n      tag_110\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_110:\n      pop\n      tag_57\n      tag_112\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/security/PausableUpgradeable.sol\":1858:1942  function paused() public view virtual returns (bool) {... */\n    tag_17:\n      callvalue\n      dup1\n      iszero\n      tag_114\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_114:\n      pop\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/security/PausableUpgradeable.sol\":1928:1935  _paused */\n      and(0xff, sload(0x97))\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/security/PausableUpgradeable.sol\":1858:1942  function paused() public view virtual returns (bool) {... */\n      jump(tag_39)\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":3756:3881  function balanceOf(address account) public view virtual override returns (uint256) {... */\n    tag_18:\n      callvalue\n      dup1\n      iszero\n      tag_118\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_118:\n      pop\n      tag_57\n      tag_120\n      calldatasize\n      0x04\n      tag_91\n      jump\t// in\n    tag_120:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":3856:3874  _balances[account] */\n      and\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":3830:3837  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":3856:3874  _balances[account] */\n      swap1\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":3856:3865  _balances */\n      0x33\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":3856:3874  _balances[account] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":3756:3881  function balanceOf(address account) public view virtual override returns (uint256) {... */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\":1243:1404  function burnFrom(address account, uint256 amount) public virtual {... */\n    tag_19:\n      callvalue\n      dup1\n      iszero\n      tag_123\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_123:\n      pop\n      tag_75\n      tag_125\n      calldatasize\n      0x04\n      tag_53\n      jump\t// in\n    tag_125:\n      tag_126\n      jump\t// in\n        /* \"PAXX.sol\":1140:1557  function initialize() initializer public {... */\n    tag_20:\n      callvalue\n      dup1\n      iszero\n      tag_127\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_127:\n      pop\n      tag_75\n      tag_129\n      jump\t// in\n        /* \"PAXX.sol\":1563:1634  function pause() public onlyRole(PAUSER_ROLE) {... */\n    tag_21:\n      callvalue\n      dup1\n      iszero\n      tag_130\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_130:\n      pop\n      tag_75\n      tag_132\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":3329:3474  function hasRole(bytes32 role, address account) public view virtual override returns (bool) {... */\n    tag_22:\n      callvalue\n      dup1\n      iszero\n      tag_133\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_133:\n      pop\n      tag_39\n      tag_135\n      calldatasize\n      0x04\n      tag_77\n      jump\t// in\n    tag_135:\n      tag_136\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":2706:2808  function symbol() public view virtual override returns (string memory) {... */\n    tag_23:\n      callvalue\n      dup1\n      iszero\n      tag_138\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_138:\n      pop\n      tag_46\n      tag_140\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":2450:2499  bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00 */\n    tag_24:\n      callvalue\n      dup1\n      iszero\n      tag_142\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_142:\n      pop\n      tag_57\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":2495:2499  0x00 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":2450:2499  bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00 */\n      dup2\n      jump\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":6912:7339  function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {... */\n    tag_25:\n      callvalue\n      dup1\n      iszero\n      tag_146\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_146:\n      pop\n      tag_39\n      tag_148\n      calldatasize\n      0x04\n      tag_53\n      jump\t// in\n    tag_148:\n      tag_149\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":4077:4266  function transfer(address to, uint256 amount) public virtual override returns (bool) {... */\n    tag_26:\n      callvalue\n      dup1\n      iszero\n      tag_151\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_151:\n      pop\n      tag_39\n      tag_153\n      calldatasize\n      0x04\n      tag_53\n      jump\t// in\n    tag_153:\n      tag_154\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":5684:5831  function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {... */\n    tag_27:\n      callvalue\n      dup1\n      iszero\n      tag_156\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_156:\n      pop\n      tag_75\n      tag_158\n      calldatasize\n      0x04\n      tag_77\n      jump\t// in\n    tag_158:\n      tag_159\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":4324:4473  function allowance(address owner, address spender) public view virtual override returns (uint256) {... */\n    tag_28:\n      callvalue\n      dup1\n      iszero\n      tag_160\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_160:\n      pop\n      tag_57\n      tag_162\n      calldatasize\n      0x04\n      tag_163\n      jump\t// in\n    tag_162:\n      tag_164\n      jump\t// in\n        /* \"PAXX.sol\":782:844  bytes32 public constant PAUSER_ROLE = keccak256(\"PAUSER_ROLE\") */\n    tag_29:\n      callvalue\n      dup1\n      iszero\n      tag_166\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_166:\n      pop\n      tag_57\n      0x00\n      dup1\n      mload\n      0x20\n      data_9b87106a812d214d41ad9b68a21119e2948eaaf1040375c939ec808b8862455c\n      dup4\n      codecopy\n      dup2\n      mload\n      swap2\n      mstore\n      dup2\n      jump\n        /* \"PAXX.sol\":850:916  bytes32 public constant UPGRADER_ROLE = keccak256(\"UPGRADER_ROLE\") */\n    tag_30:\n      callvalue\n      dup1\n      iszero\n      tag_170\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_170:\n      pop\n      tag_57\n        /* \"PAXX.sol\":890:916  keccak256(\"UPGRADER_ROLE\") */\n      0x189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e3\n        /* \"PAXX.sol\":850:916  bytes32 public constant UPGRADER_ROLE = keccak256(\"UPGRADER_ROLE\") */\n      dup2\n      jump\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":3029:3242  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {... */\n    tag_42:\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":3114:3118  bool */\n      0x00\n      not(sub(shl(0xe0, 0x01), 0x01))\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":3137:3195  interfaceId == type(IAccessControlUpgradeable).interfaceId */\n      dup3\n      and\n      shl(0xe0, 0x7965db0b)\n      eq\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":3137:3235  interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId) */\n      tag_176\n      jumpi\n      pop\n      shl(0xe0, 0x01ffc9a7)\n      not(sub(shl(0xe0, 0x01), 0x01))\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/introspection/ERC165Upgradeable.sol\":1168:1219  interfaceId == type(IERC165Upgradeable).interfaceId */\n      dup4\n      and\n      eq\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":3199:3235  super.supportsInterface(interfaceId) */\n    tag_176:\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":3130:3235  return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId) */\n      swap3\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":3029:3242  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {... */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":2495:2593  function name() public view virtual override returns (string memory) {... */\n    tag_47:\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":2549:2562  string memory */\n      0x60\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":2581:2586  _name */\n      0x36\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":2574:2586  return _name */\n      dup1\n      sload\n      tag_179\n      swap1\n      tag_180\n      jump\t// in\n    tag_179:\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      tag_181\n      swap1\n      tag_180\n      jump\t// in\n    tag_181:\n      dup1\n      iszero\n      tag_182\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_183\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_182)\n    tag_183:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_184:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_184\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_182:\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":2495:2593  function name() public view virtual override returns (string memory) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":4781:4978  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n    tag_54:\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":4864:4868  bool */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":4918:4950  _approve(owner, spender, amount) */\n      tag_188\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":4934:4941  spender */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":4943:4949  amount */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":4918:4926  _approve */\n      tag_189\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":4918:4950  _approve(owner, spender, amount) */\n      jump\t// in\n    tag_188:\n      pop\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":4967:4971  true */\n      0x01\n      swap4\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":4781:4978  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":5540:5796  function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {... */\n    tag_65:\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":5637:5641  bool */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":5693:5731  _spendAllowance(from, spender, amount) */\n      tag_193\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":5709:5713  from */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":5724:5730  amount */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":5693:5708  _spendAllowance */\n      tag_194\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":5693:5731  _spendAllowance(from, spender, amount) */\n      jump\t// in\n    tag_193:\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":5741:5768  _transfer(from, to, amount) */\n      tag_195\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":5751:5755  from */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":5757:5759  to */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":5761:5767  amount */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":5741:5750  _transfer */\n      tag_196\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":5741:5768  _transfer(from, to, amount) */\n      jump\t// in\n    tag_195:\n      pop\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":5785:5789  true */\n      0x01\n      swap5\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":5540:5796  function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {... */\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":5259:5404  function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {... */\n    tag_78:\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":4908:4915  bytes32 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":4934:4946  _roles[role] */\n      dup3\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":4934:4940  _roles */\n      0xfb\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":4934:4946  _roles[role] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":4934:4956  _roles[role].adminRole */\n      0x01\n      add\n      sload\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":2928:2944  _checkRole(role) */\n      tag_200\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":2939:2943  role */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":2928:2938  _checkRole */\n      tag_201\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":2928:2944  _checkRole(role) */\n      jump\t// in\n    tag_200:\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":5372:5397  _grantRole(role, account) */\n      tag_203\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":5383:5387  role */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":5389:5396  account */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":5372:5382  _grantRole */\n      tag_204\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":5372:5397  _grantRole(role, account) */\n      jump\t// in\n    tag_203:\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":5259:5404  function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":6368:6582  function renounceRole(bytes32 role, address account) public virtual override {... */\n    tag_87:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":6463:6486  account == _msgSender() */\n      dup2\n      and\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":6463:6486  account == _msgSender() */\n      eq\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":6455:6538  require(account == _msgSender(), \"AccessControl: can only renounce roles for self\") */\n      tag_208\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":5275:5277   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":6455:6538  require(account == _msgSender(), \"AccessControl: can only renounce roles for self\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":5257:5278   */\n      mstore\n        /* \"#utility.yul\":5314:5316   */\n      0x2f\n        /* \"#utility.yul\":5294:5312   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":5287:5317   */\n      mstore\n        /* \"#utility.yul\":5353:5387   */\n      0x416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e6365\n        /* \"#utility.yul\":5333:5351   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":5326:5388   */\n      mstore\n      shl(0x89, 0x103937b632b9903337b91039b2b633)\n        /* \"#utility.yul\":5404:5422   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":5397:5442   */\n      mstore\n        /* \"#utility.yul\":5459:5478   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":6455:6538  require(account == _msgSender(), \"AccessControl: can only renounce roles for self\") */\n    tag_209:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_208:\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":6549:6575  _revokeRole(role, account) */\n      tag_211\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":6561:6565  role */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":6567:6574  account */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":6549:6560  _revokeRole */\n      tag_212\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":6549:6575  _revokeRole(role, account) */\n      jump\t// in\n    tag_211:\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":6368:6582  function renounceRole(bytes32 role, address account) public virtual override {... */\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/UUPSUpgradeable.sol\":3387:3582  function upgradeTo(address newImplementation) public virtual onlyProxy {... */\n    tag_92:\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/UUPSUpgradeable.sol\":1889:1893  this */\n      address\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/UUPSUpgradeable.sol\":1898:1904  __self */\n      immutable(\"0x3f2cb8b8a6f6ba8772056c1e4910fb442737deea593ec84e00cbccee66f6d0e1\")\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/UUPSUpgradeable.sol\":1881:1904  address(this) != __self */\n      and\n      eq\n      iszero\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/UUPSUpgradeable.sol\":1873:1953  require(address(this) != __self, \"Function must be called through delegatecall\") */\n      tag_214\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_209\n      swap1\n      tag_216\n      jump\t// in\n    tag_214:\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/UUPSUpgradeable.sol\":1995:2001  __self */\n      immutable(\"0x3f2cb8b8a6f6ba8772056c1e4910fb442737deea593ec84e00cbccee66f6d0e1\")\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/UUPSUpgradeable.sol\":1971:2001  _getImplementation() == __self */\n      and\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/UUPSUpgradeable.sol\":1971:1991  _getImplementation() */\n      tag_217\n      0x00\n      dup1\n      mload\n      0x20\n      data_75b20eef8615de99c108b05f0dbda081c91897128caa336d75dffb97c4132b4d\n      dup4\n      codecopy\n      dup2\n      mload\n      swap2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":1536:1601  StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value */\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":1457:1608  function _getImplementation() internal view returns (address) {... */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/UUPSUpgradeable.sol\":1971:1991  _getImplementation() */\n    tag_217:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/UUPSUpgradeable.sol\":1971:2001  _getImplementation() == __self */\n      and\n      eq\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/UUPSUpgradeable.sol\":1963:2050  require(_getImplementation() == __self, \"Function must be called through active proxy\") */\n      tag_219\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_209\n      swap1\n      tag_221\n      jump\t// in\n    tag_219:\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/UUPSUpgradeable.sol\":3468:3504  _authorizeUpgrade(newImplementation) */\n      tag_223\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/UUPSUpgradeable.sol\":3486:3503  newImplementation */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/UUPSUpgradeable.sol\":3468:3485  _authorizeUpgrade */\n      tag_224\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/UUPSUpgradeable.sol\":3468:3504  _authorizeUpgrade(newImplementation) */\n      jump\t// in\n    tag_223:\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/UUPSUpgradeable.sol\":3555:3567  new bytes(0) */\n      0x40\n      dup1\n      mload\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/UUPSUpgradeable.sol\":3565:3566  0 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/UUPSUpgradeable.sol\":3555:3567  new bytes(0) */\n      dup1\n      dup3\n      mstore\n      0x20\n      dup3\n      add\n      swap1\n      swap3\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/UUPSUpgradeable.sol\":3514:3575  _upgradeToAndCallUUPS(newImplementation, new bytes(0), false) */\n      tag_225\n      swap2\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/UUPSUpgradeable.sol\":3536:3553  newImplementation */\n      dup4\n      swap2\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/UUPSUpgradeable.sol\":3555:3567  new bytes(0) */\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/UUPSUpgradeable.sol\":3514:3535  _upgradeToAndCallUUPS */\n      tag_230\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/UUPSUpgradeable.sol\":3514:3575  _upgradeToAndCallUUPS(newImplementation, new bytes(0), false) */\n      jump\t// in\n    tag_225:\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/UUPSUpgradeable.sol\":3387:3582  function upgradeTo(address newImplementation) public virtual onlyProxy {... */\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":6191:6425  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {... */\n    tag_96:\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":6279:6283  bool */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":6333:6397  _approve(owner, spender, allowance(owner, spender) + addedValue) */\n      tag_188\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":6349:6356  spender */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":6386:6396  addedValue */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":6358:6383  allowance(owner, spender) */\n      tag_234\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":6349:6356  spender */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":6358:6367  allowance */\n      tag_164\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":6358:6383  allowance(owner, spender) */\n      jump\t// in\n    tag_234:\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":6358:6396  allowance(owner, spender) + addedValue */\n      tag_235\n      swap2\n      swap1\n      tag_236\n      jump\t// in\n    tag_235:\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":6333:6341  _approve */\n      tag_189\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":6333:6397  _approve(owner, spender, allowance(owner, spender) + addedValue) */\n      jump\t// in\n        /* \"PAXX.sol\":1640:1715  function unpause() public onlyRole(PAUSER_ROLE) {... */\n    tag_100:\n      0x00\n      dup1\n      mload\n      0x20\n      data_9b87106a812d214d41ad9b68a21119e2948eaaf1040375c939ec808b8862455c\n      dup4\n      codecopy\n      dup2\n      mload\n      swap2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":2928:2944  _checkRole(role) */\n      tag_238\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":2939:2943  role */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":2928:2938  _checkRole */\n      tag_201\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":2928:2944  _checkRole(role) */\n      jump\t// in\n    tag_238:\n        /* \"PAXX.sol\":1698:1708  _unpause() */\n      tag_225\n        /* \"PAXX.sol\":1698:1706  _unpause */\n      tag_241\n        /* \"PAXX.sol\":1698:1708  _unpause() */\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\":848:937  function burn(uint256 amount) public virtual {... */\n    tag_105:\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\":903:930  _burn(_msgSender(), amount) */\n      tag_225\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\":923:929  amount */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\":903:908  _burn */\n      tag_245\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\":903:930  _burn(_msgSender(), amount) */\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/UUPSUpgradeable.sol\":3901:4121  function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {... */\n    tag_109:\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/UUPSUpgradeable.sol\":1889:1893  this */\n      address\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/UUPSUpgradeable.sol\":1898:1904  __self */\n      immutable(\"0x3f2cb8b8a6f6ba8772056c1e4910fb442737deea593ec84e00cbccee66f6d0e1\")\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/UUPSUpgradeable.sol\":1881:1904  address(this) != __self */\n      and\n      eq\n      iszero\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/UUPSUpgradeable.sol\":1873:1953  require(address(this) != __self, \"Function must be called through delegatecall\") */\n      tag_247\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_209\n      swap1\n      tag_216\n      jump\t// in\n    tag_247:\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/UUPSUpgradeable.sol\":1995:2001  __self */\n      immutable(\"0x3f2cb8b8a6f6ba8772056c1e4910fb442737deea593ec84e00cbccee66f6d0e1\")\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/UUPSUpgradeable.sol\":1971:2001  _getImplementation() == __self */\n      and\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/UUPSUpgradeable.sol\":1971:1991  _getImplementation() */\n      tag_249\n      0x00\n      dup1\n      mload\n      0x20\n      data_75b20eef8615de99c108b05f0dbda081c91897128caa336d75dffb97c4132b4d\n      dup4\n      codecopy\n      dup2\n      mload\n      swap2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":1536:1601  StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value */\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":1457:1608  function _getImplementation() internal view returns (address) {... */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/UUPSUpgradeable.sol\":1971:1991  _getImplementation() */\n    tag_249:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/UUPSUpgradeable.sol\":1971:2001  _getImplementation() == __self */\n      and\n      eq\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/UUPSUpgradeable.sol\":1963:2050  require(_getImplementation() == __self, \"Function must be called through active proxy\") */\n      tag_250\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_209\n      swap1\n      tag_221\n      jump\t// in\n    tag_250:\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/UUPSUpgradeable.sol\":4016:4052  _authorizeUpgrade(newImplementation) */\n      tag_253\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/UUPSUpgradeable.sol\":4034:4051  newImplementation */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/UUPSUpgradeable.sol\":4016:4033  _authorizeUpgrade */\n      tag_224\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/UUPSUpgradeable.sol\":4016:4052  _authorizeUpgrade(newImplementation) */\n      jump\t// in\n    tag_253:\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/UUPSUpgradeable.sol\":4062:4114  _upgradeToAndCallUUPS(newImplementation, data, true) */\n      tag_211\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/UUPSUpgradeable.sol\":4084:4101  newImplementation */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/UUPSUpgradeable.sol\":4103:4107  data */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/UUPSUpgradeable.sol\":4109:4113  true */\n      0x01\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/UUPSUpgradeable.sol\":4062:4083  _upgradeToAndCallUUPS */\n      tag_230\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/UUPSUpgradeable.sol\":4062:4114  _upgradeToAndCallUUPS(newImplementation, data, true) */\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/UUPSUpgradeable.sol\":3006:3137  function proxiableUUID() external view virtual override notDelegated returns (bytes32) {... */\n    tag_112:\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/UUPSUpgradeable.sol\":3084:3091  bytes32 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/UUPSUpgradeable.sol\":2324:2328  this */\n      address\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/UUPSUpgradeable.sol\":2333:2339  __self */\n      immutable(\"0x3f2cb8b8a6f6ba8772056c1e4910fb442737deea593ec84e00cbccee66f6d0e1\")\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/UUPSUpgradeable.sol\":2316:2339  address(this) == __self */\n      and\n      eq\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/UUPSUpgradeable.sol\":2308:2400  require(address(this) == __self, \"UUPSUpgradeable: must not be called through delegatecall\") */\n      tag_256\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":6782:6784   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/UUPSUpgradeable.sol\":2308:2400  require(address(this) == __self, \"UUPSUpgradeable: must not be called through delegatecall\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":6764:6785   */\n      mstore\n        /* \"#utility.yul\":6821:6823   */\n      0x38\n        /* \"#utility.yul\":6801:6819   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":6794:6824   */\n      mstore\n        /* \"#utility.yul\":6860:6894   */\n      0x555550535570677261646561626c653a206d757374206e6f742062652063616c\n        /* \"#utility.yul\":6840:6858   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":6833:6895   */\n      mstore\n        /* \"#utility.yul\":6931:6957   */\n      0x6c6564207468726f7567682064656c656761746563616c6c0000000000000000\n        /* \"#utility.yul\":6911:6929   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":6904:6958   */\n      mstore\n        /* \"#utility.yul\":6975:6994   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/UUPSUpgradeable.sol\":2308:2400  require(address(this) == __self, \"UUPSUpgradeable: must not be called through delegatecall\") */\n      tag_209\n        /* \"#utility.yul\":6580:7000   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/UUPSUpgradeable.sol\":2308:2400  require(address(this) == __self, \"UUPSUpgradeable: must not be called through delegatecall\") */\n    tag_256:\n      pop\n      0x00\n      dup1\n      mload\n      0x20\n      data_75b20eef8615de99c108b05f0dbda081c91897128caa336d75dffb97c4132b4d\n      dup4\n      codecopy\n      dup2\n      mload\n      swap2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/UUPSUpgradeable.sol\":3006:3137  function proxiableUUID() external view virtual override notDelegated returns (bytes32) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\":1243:1404  function burnFrom(address account, uint256 amount) public virtual {... */\n    tag_126:\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\":1319:1365  _spendAllowance(account, _msgSender(), amount) */\n      tag_263\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\":1335:1342  account */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\":1358:1364  amount */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\":1319:1334  _spendAllowance */\n      tag_194\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\":1319:1365  _spendAllowance(account, _msgSender(), amount) */\n      jump\t// in\n    tag_263:\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\":1375:1397  _burn(account, amount) */\n      tag_211\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\":1381:1388  account */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\":1390:1396  amount */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\":1375:1380  _burn */\n      tag_245\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\":1375:1397  _burn(account, amount) */\n      jump\t// in\n        /* \"PAXX.sol\":1140:1557  function initialize() initializer public {... */\n    tag_129:\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/Initializable.sol\":3279:3298  bool isTopLevelCall */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/Initializable.sol\":3302:3315  _initializing */\n      sload\n      0x0100\n      swap1\n      div\n      0xff\n      and\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/Initializable.sol\":3301:3315  !_initializing */\n      iszero\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/Initializable.sol\":3347:3381  isTopLevelCall && _initialized < 1 */\n      dup1\n      iszero\n      tag_267\n      jumpi\n      pop\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/Initializable.sol\":3365:3377  _initialized */\n      sload(0x00)\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/Initializable.sol\":3380:3381  1 */\n      0x01\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/Initializable.sol\":3365:3377  _initialized */\n      0xff\n      swap1\n      swap2\n      and\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/Initializable.sol\":3365:3381  _initialized < 1 */\n      lt\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/Initializable.sol\":3347:3381  isTopLevelCall && _initialized < 1 */\n    tag_267:\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/Initializable.sol\":3346:3454  (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1) */\n      dup1\n      tag_271\n      jumpi\n      pop\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/Initializable.sol\":3426:3430  this */\n      address\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/AddressUpgradeable.sol\":1713:1732  account.code.length */\n      extcodesize\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/AddressUpgradeable.sol\":1713:1736  account.code.length > 0 */\n      iszero\n      dup1\n      iszero\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/Initializable.sol\":3387:3453  !AddressUpgradeable.isContract(address(this)) && _initialized == 1 */\n      tag_271\n      jumpi\n      pop\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/Initializable.sol\":3436:3448  _initialized */\n      and(0xff, sload(0x00))\n      0x01\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/Initializable.sol\":3436:3453  _initialized == 1 */\n      eq\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/Initializable.sol\":3387:3453  !AddressUpgradeable.isContract(address(this)) && _initialized == 1 */\n    tag_271:\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/Initializable.sol\":3325:3526  require(... */\n      tag_272\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":7207:7209   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/Initializable.sol\":3325:3526  require(... */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":7189:7210   */\n      mstore\n        /* \"#utility.yul\":7246:7248   */\n      0x2e\n        /* \"#utility.yul\":7226:7244   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":7219:7249   */\n      mstore\n        /* \"#utility.yul\":7285:7319   */\n      0x496e697469616c697a61626c653a20636f6e747261637420697320616c726561\n        /* \"#utility.yul\":7265:7283   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":7258:7320   */\n      mstore\n      shl(0x92, 0x191e481a5b9a5d1a585b1a5e9959)\n        /* \"#utility.yul\":7336:7354   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":7329:7373   */\n      mstore\n        /* \"#utility.yul\":7390:7409   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/Initializable.sol\":3325:3526  require(... */\n      tag_209\n        /* \"#utility.yul\":7005:7415   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/Initializable.sol\":3325:3526  require(... */\n    tag_272:\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/Initializable.sol\":3536:3548  _initialized */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/Initializable.sol\":3536:3552  _initialized = 1 */\n      dup1\n      sload\n      not(0xff)\n      and\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/Initializable.sol\":3551:3552  1 */\n      0x01\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/Initializable.sol\":3536:3552  _initialized = 1 */\n      or\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/Initializable.sol\":3562:3627  if (isTopLevelCall) {... */\n      dup1\n      iszero\n      tag_275\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/Initializable.sol\":3596:3609  _initializing */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/Initializable.sol\":3596:3616  _initializing = true */\n      dup1\n      sload\n      not(0xff00)\n      and\n      0x0100\n      or\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/Initializable.sol\":3562:3627  if (isTopLevelCall) {... */\n    tag_275:\n        /* \"PAXX.sol\":1191:1222  __ERC20_init(\"PRAXXIS\", \"PAXX\") */\n      tag_277\n      mload(0x40)\n      dup1\n      0x40\n      add\n      0x40\n      mstore\n      dup1\n      0x07\n      dup2\n      mstore\n      0x20\n      add\n      shl(0xc8, 0x50524158584953)\n      dup2\n      mstore\n      pop\n      mload(0x40)\n      dup1\n      0x40\n      add\n      0x40\n      mstore\n      dup1\n      0x04\n      dup2\n      mstore\n      0x20\n      add\n      shl(0xe3, 0x0a082b0b)\n      dup2\n      mstore\n      pop\n        /* \"PAXX.sol\":1191:1203  __ERC20_init */\n      tag_278\n        /* \"PAXX.sol\":1191:1222  __ERC20_init(\"PRAXXIS\", \"PAXX\") */\n      jump\t// in\n    tag_277:\n        /* \"PAXX.sol\":1232:1254  __ERC20Burnable_init() */\n      tag_279\n        /* \"PAXX.sol\":1232:1252  __ERC20Burnable_init */\n      tag_280\n        /* \"PAXX.sol\":1232:1254  __ERC20Burnable_init() */\n      jump\t// in\n    tag_279:\n        /* \"PAXX.sol\":1264:1281  __Pausable_init() */\n      tag_281\n        /* \"PAXX.sol\":1264:1279  __Pausable_init */\n      tag_282\n        /* \"PAXX.sol\":1264:1281  __Pausable_init() */\n      jump\t// in\n    tag_281:\n        /* \"PAXX.sol\":1291:1313  __AccessControl_init() */\n      tag_283\n        /* \"PAXX.sol\":1291:1311  __AccessControl_init */\n      tag_280\n        /* \"PAXX.sol\":1291:1313  __AccessControl_init() */\n      jump\t// in\n    tag_283:\n        /* \"PAXX.sol\":1323:1347  __UUPSUpgradeable_init() */\n      tag_285\n        /* \"PAXX.sol\":1323:1345  __UUPSUpgradeable_init */\n      tag_280\n        /* \"PAXX.sol\":1323:1347  __UUPSUpgradeable_init() */\n      jump\t// in\n    tag_285:\n        /* \"PAXX.sol\":1358:1400  _grantRole(DEFAULT_ADMIN_ROLE, msg.sender) */\n      tag_287\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":2495:2499  0x00 */\n      0x00\n        /* \"PAXX.sol\":1389:1399  msg.sender */\n      caller\n        /* \"PAXX.sol\":1358:1368  _grantRole */\n      tag_204\n        /* \"PAXX.sol\":1358:1400  _grantRole(DEFAULT_ADMIN_ROLE, msg.sender) */\n      jump\t// in\n    tag_287:\n        /* \"PAXX.sol\":1410:1445  _grantRole(PAUSER_ROLE, msg.sender) */\n      tag_288\n      0x00\n      dup1\n      mload\n      0x20\n      data_9b87106a812d214d41ad9b68a21119e2948eaaf1040375c939ec808b8862455c\n      dup4\n      codecopy\n      dup2\n      mload\n      swap2\n      mstore\n        /* \"PAXX.sol\":1434:1444  msg.sender */\n      caller\n        /* \"PAXX.sol\":1410:1420  _grantRole */\n      tag_204\n        /* \"PAXX.sol\":1410:1445  _grantRole(PAUSER_ROLE, msg.sender) */\n      jump\t// in\n    tag_288:\n        /* \"PAXX.sol\":1455:1503  _mint(msg.sender, 1000000000 * 10 ** decimals()) */\n      tag_289\n        /* \"PAXX.sol\":1461:1471  msg.sender */\n      caller\n        /* \"PAXX.sol\":1486:1502  10 ** decimals() */\n      tag_291\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":3523:3525  18 */\n      0x12\n        /* \"PAXX.sol\":1486:1488  10 */\n      0x0a\n        /* \"PAXX.sol\":1486:1502  10 ** decimals() */\n      tag_292\n      jump\t// in\n    tag_291:\n        /* \"PAXX.sol\":1473:1502  1000000000 * 10 ** decimals() */\n      tag_293\n      swap1\n        /* \"PAXX.sol\":1473:1483  1000000000 */\n      0x3b9aca00\n        /* \"PAXX.sol\":1473:1502  1000000000 * 10 ** decimals() */\n      tag_294\n      jump\t// in\n    tag_293:\n        /* \"PAXX.sol\":1455:1460  _mint */\n      tag_295\n        /* \"PAXX.sol\":1455:1503  _mint(msg.sender, 1000000000 * 10 ** decimals()) */\n      jump\t// in\n    tag_289:\n        /* \"PAXX.sol\":1513:1550  _grantRole(UPGRADER_ROLE, msg.sender) */\n      tag_296\n        /* \"PAXX.sol\":890:916  keccak256(\"UPGRADER_ROLE\") */\n      0x189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e3\n        /* \"PAXX.sol\":1539:1549  msg.sender */\n      caller\n        /* \"PAXX.sol\":1513:1523  _grantRole */\n      tag_204\n        /* \"PAXX.sol\":1513:1550  _grantRole(UPGRADER_ROLE, msg.sender) */\n      jump\t// in\n    tag_296:\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/Initializable.sol\":3651:3665  isTopLevelCall */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/Initializable.sol\":3647:3746  if (isTopLevelCall) {... */\n      iszero\n      tag_225\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/Initializable.sol\":3697:3702  false */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/Initializable.sol\":3681:3702  _initializing = false */\n      dup1\n      sload\n      not(0xff00)\n      and\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/Initializable.sol\":3721:3735  Initialized(1) */\n      mload(0x40)\n      0x01\n        /* \"#utility.yul\":2868:2904   */\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/Initializable.sol\":3721:3735  Initialized(1) */\n      0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498\n      swap1\n        /* \"#utility.yul\":2856:2858   */\n      0x20\n        /* \"#utility.yul\":2841:2859   */\n      add\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/Initializable.sol\":3721:3735  Initialized(1) */\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log1\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/Initializable.sol\":3269:3752  {... */\n      pop\n        /* \"PAXX.sol\":1140:1557  function initialize() initializer public {... */\n      jump\t// out\n        /* \"PAXX.sol\":1563:1634  function pause() public onlyRole(PAUSER_ROLE) {... */\n    tag_132:\n      0x00\n      dup1\n      mload\n      0x20\n      data_9b87106a812d214d41ad9b68a21119e2948eaaf1040375c939ec808b8862455c\n      dup4\n      codecopy\n      dup2\n      mload\n      swap2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":2928:2944  _checkRole(role) */\n      tag_301\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":2939:2943  role */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":2928:2938  _checkRole */\n      tag_201\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":2928:2944  _checkRole(role) */\n      jump\t// in\n    tag_301:\n        /* \"PAXX.sol\":1619:1627  _pause() */\n      tag_225\n        /* \"PAXX.sol\":1619:1625  _pause */\n      tag_304\n        /* \"PAXX.sol\":1619:1627  _pause() */\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":3329:3474  function hasRole(bytes32 role, address account) public view virtual override returns (bool) {... */\n    tag_136:\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":3415:3419  bool */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":3438:3450  _roles[role] */\n      swap2\n      dup3\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":3438:3444  _roles */\n      0xfb\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":3438:3450  _roles[role] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup5\n      keccak256\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":3438:3467  _roles[role].members[account] */\n      swap4\n      swap1\n      swap4\n      and\n      dup5\n      mstore\n      swap2\n      swap1\n      mstore\n      swap1\n      keccak256\n      sload\n      0xff\n      and\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":3329:3474  function hasRole(bytes32 role, address account) public view virtual override returns (bool) {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":2706:2808  function symbol() public view virtual override returns (string memory) {... */\n    tag_140:\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":2762:2775  string memory */\n      0x60\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":2794:2801  _symbol */\n      0x37\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":2787:2801  return _symbol */\n      dup1\n      sload\n      tag_179\n      swap1\n      tag_180\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":6912:7339  function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {... */\n    tag_149:\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":7005:7009  bool */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":7005:7009  bool */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":7086:7111  allowance(owner, spender) */\n      tag_314\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":7103:7110  spender */\n      dup7\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":7086:7095  allowance */\n      tag_164\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":7086:7111  allowance(owner, spender) */\n      jump\t// in\n    tag_314:\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":7059:7111  uint256 currentAllowance = allowance(owner, spender) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":7149:7164  subtractedValue */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":7129:7145  currentAllowance */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":7129:7164  currentAllowance >= subtractedValue */\n      lt\n      iszero\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":7121:7206  require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\") */\n      tag_315\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":9377:9379   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":7121:7206  require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":9359:9380   */\n      mstore\n        /* \"#utility.yul\":9416:9418   */\n      0x25\n        /* \"#utility.yul\":9396:9414   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":9389:9419   */\n      mstore\n        /* \"#utility.yul\":9455:9489   */\n      0x45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77\n        /* \"#utility.yul\":9435:9453   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":9428:9490   */\n      mstore\n      shl(0xd8, 0x207a65726f)\n        /* \"#utility.yul\":9506:9524   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":9499:9534   */\n      mstore\n        /* \"#utility.yul\":9551:9570   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":7121:7206  require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\") */\n      tag_209\n        /* \"#utility.yul\":9175:9576   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":7121:7206  require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\") */\n    tag_315:\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":7240:7300  _approve(owner, spender, currentAllowance - subtractedValue) */\n      tag_195\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":7249:7254  owner */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":7256:7263  spender */\n      dup7\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":7284:7299  subtractedValue */\n      dup7\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":7265:7281  currentAllowance */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":7265:7299  currentAllowance - subtractedValue */\n      sub\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":7240:7248  _approve */\n      tag_189\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":7240:7300  _approve(owner, spender, currentAllowance - subtractedValue) */\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":4077:4266  function transfer(address to, uint256 amount) public virtual override returns (bool) {... */\n    tag_154:\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":4156:4160  bool */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":4210:4238  _transfer(owner, to, amount) */\n      tag_188\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":4227:4229  to */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":4231:4237  amount */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":4210:4219  _transfer */\n      tag_196\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":4210:4238  _transfer(owner, to, amount) */\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":5684:5831  function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {... */\n    tag_159:\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":4908:4915  bytes32 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":4934:4946  _roles[role] */\n      dup3\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":4934:4940  _roles */\n      0xfb\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":4934:4946  _roles[role] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":4934:4956  _roles[role].adminRole */\n      0x01\n      add\n      sload\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":2928:2944  _checkRole(role) */\n      tag_324\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":2939:2943  role */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":2928:2938  _checkRole */\n      tag_201\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":2928:2944  _checkRole(role) */\n      jump\t// in\n    tag_324:\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":5798:5824  _revokeRole(role, account) */\n      tag_203\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":5810:5814  role */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":5816:5823  account */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":5798:5809  _revokeRole */\n      tag_212\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":5798:5824  _revokeRole(role, account) */\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":4324:4473  function allowance(address owner, address spender) public view virtual override returns (uint256) {... */\n    tag_164:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":4439:4457  _allowances[owner] */\n      swap2\n      dup3\n      and\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":4413:4420  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":4439:4457  _allowances[owner] */\n      swap1\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":4439:4450  _allowances */\n      0x34\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":4439:4457  _allowances[owner] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":4439:4466  _allowances[owner][spender] */\n      swap4\n      swap1\n      swap5\n      and\n      dup3\n      mstore\n      swap2\n      swap1\n      swap2\n      mstore\n      keccak256\n      sload\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":4324:4473  function allowance(address owner, address spender) public view virtual override returns (uint256) {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":10794:11134  function _approve(address owner, address spender, uint256 amount) internal virtual {... */\n    tag_189:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":10895:10914  owner != address(0) */\n      dup4\n      and\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":10887:10955  require(owner != address(0), \"ERC20: approve from the zero address\") */\n      tag_331\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":9783:9785   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":10887:10955  require(owner != address(0), \"ERC20: approve from the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":9765:9786   */\n      mstore\n        /* \"#utility.yul\":9822:9824   */\n      0x24\n        /* \"#utility.yul\":9802:9820   */\n      dup1\n      dup3\n      add\n        /* \"#utility.yul\":9795:9825   */\n      mstore\n        /* \"#utility.yul\":9861:9895   */\n      0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464\n        /* \"#utility.yul\":9841:9859   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":9834:9896   */\n      mstore\n      shl(0xe0, 0x72657373)\n        /* \"#utility.yul\":9912:9930   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":9905:9939   */\n      mstore\n        /* \"#utility.yul\":9956:9975   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":10887:10955  require(owner != address(0), \"ERC20: approve from the zero address\") */\n      tag_209\n        /* \"#utility.yul\":9581:9981   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":10887:10955  require(owner != address(0), \"ERC20: approve from the zero address\") */\n    tag_331:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":10973:10994  spender != address(0) */\n      dup3\n      and\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":10965:11033  require(spender != address(0), \"ERC20: approve to the zero address\") */\n      tag_334\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":10188:10190   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":10965:11033  require(spender != address(0), \"ERC20: approve to the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":10170:10191   */\n      mstore\n        /* \"#utility.yul\":10227:10229   */\n      0x22\n        /* \"#utility.yul\":10207:10225   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":10200:10230   */\n      mstore\n        /* \"#utility.yul\":10266:10300   */\n      0x45524332303a20617070726f766520746f20746865207a65726f206164647265\n        /* \"#utility.yul\":10246:10264   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":10239:10301   */\n      mstore\n      shl(0xf0, 0x7373)\n        /* \"#utility.yul\":10317:10335   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":10310:10342   */\n      mstore\n        /* \"#utility.yul\":10359:10378   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":10965:11033  require(spender != address(0), \"ERC20: approve to the zero address\") */\n      tag_209\n        /* \"#utility.yul\":9986:10384   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":10965:11033  require(spender != address(0), \"ERC20: approve to the zero address\") */\n    tag_334:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":11044:11062  _allowances[owner] */\n      dup4\n      dup2\n      and\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":11044:11055  _allowances */\n      0x34\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":11044:11062  _allowances[owner] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":11044:11071  _allowances[owner][spender] */\n      swap5\n      dup8\n      and\n      dup1\n      dup5\n      mstore\n      swap5\n      dup3\n      mstore\n      swap2\n      dup3\n      swap1\n      keccak256\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":11044:11080  _allowances[owner][spender] = amount */\n      dup6\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":11095:11127  Approval(owner, spender, amount) */\n      swap1\n      mload\n        /* \"#utility.yul\":1731:1756   */\n      dup5\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":11095:11127  Approval(owner, spender, amount) */\n      0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925\n      swap2\n        /* \"#utility.yul\":1704:1722   */\n      add\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":11095:11127  Approval(owner, spender, amount) */\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":10794:11134  function _approve(address owner, address spender, uint256 amount) internal virtual {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":11415:11826  function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {... */\n    tag_194:\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":11515:11539  uint256 currentAllowance */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":11542:11567  allowance(owner, spender) */\n      tag_339\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":11552:11557  owner */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":11559:11566  spender */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":11542:11551  allowance */\n      tag_164\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":11542:11567  allowance(owner, spender) */\n      jump\t// in\n    tag_339:\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":11515:11567  uint256 currentAllowance = allowance(owner, spender) */\n      swap1\n      pop\n      not(0x00)\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":11581:11597  currentAllowance */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":11581:11618  currentAllowance != type(uint256).max */\n      eq\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":11577:11820  if (currentAllowance != type(uint256).max) {... */\n      tag_344\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":11662:11668  amount */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":11642:11658  currentAllowance */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":11642:11668  currentAllowance >= amount */\n      lt\n      iszero\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":11634:11702  require(currentAllowance >= amount, \"ERC20: insufficient allowance\") */\n      tag_341\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":10591:10593   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":11634:11702  require(currentAllowance >= amount, \"ERC20: insufficient allowance\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":10573:10594   */\n      mstore\n        /* \"#utility.yul\":10630:10632   */\n      0x1d\n        /* \"#utility.yul\":10610:10628   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":10603:10633   */\n      mstore\n        /* \"#utility.yul\":10669:10700   */\n      0x45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000\n        /* \"#utility.yul\":10649:10667   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":10642:10701   */\n      mstore\n        /* \"#utility.yul\":10718:10736   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":11634:11702  require(currentAllowance >= amount, \"ERC20: insufficient allowance\") */\n      tag_209\n        /* \"#utility.yul\":10389:10742   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":11634:11702  require(currentAllowance >= amount, \"ERC20: insufficient allowance\") */\n    tag_341:\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":11744:11795  _approve(owner, spender, currentAllowance - amount) */\n      tag_344\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":11753:11758  owner */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":11760:11767  spender */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":11788:11794  amount */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":11769:11785  currentAllowance */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":11769:11794  currentAllowance - amount */\n      sub\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":11744:11752  _approve */\n      tag_189\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":11744:11795  _approve(owner, spender, currentAllowance - amount) */\n      jump\t// in\n    tag_344:\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":11505:11826  {... */\n      pop\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":11415:11826  function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":7793:8581  function _transfer(address from, address to, uint256 amount) internal virtual {... */\n    tag_196:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":7889:7907  from != address(0) */\n      dup4\n      and\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":7881:7949  require(from != address(0), \"ERC20: transfer from the zero address\") */\n      tag_346\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":10949:10951   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":7881:7949  require(from != address(0), \"ERC20: transfer from the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":10931:10952   */\n      mstore\n        /* \"#utility.yul\":10988:10990   */\n      0x25\n        /* \"#utility.yul\":10968:10986   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":10961:10991   */\n      mstore\n        /* \"#utility.yul\":11027:11061   */\n      0x45524332303a207472616e736665722066726f6d20746865207a65726f206164\n        /* \"#utility.yul\":11007:11025   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":11000:11062   */\n      mstore\n      shl(0xd8, 0x6472657373)\n        /* \"#utility.yul\":11078:11096   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":11071:11106   */\n      mstore\n        /* \"#utility.yul\":11123:11142   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":7881:7949  require(from != address(0), \"ERC20: transfer from the zero address\") */\n      tag_209\n        /* \"#utility.yul\":10747:11148   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":7881:7949  require(from != address(0), \"ERC20: transfer from the zero address\") */\n    tag_346:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":7967:7983  to != address(0) */\n      dup3\n      and\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":7959:8023  require(to != address(0), \"ERC20: transfer to the zero address\") */\n      tag_349\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":11355:11357   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":7959:8023  require(to != address(0), \"ERC20: transfer to the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":11337:11358   */\n      mstore\n        /* \"#utility.yul\":11394:11396   */\n      0x23\n        /* \"#utility.yul\":11374:11392   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":11367:11397   */\n      mstore\n        /* \"#utility.yul\":11433:11467   */\n      0x45524332303a207472616e7366657220746f20746865207a65726f2061646472\n        /* \"#utility.yul\":11413:11431   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":11406:11468   */\n      mstore\n      shl(0xe8, 0x657373)\n        /* \"#utility.yul\":11484:11502   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":11477:11510   */\n      mstore\n        /* \"#utility.yul\":11527:11546   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":7959:8023  require(to != address(0), \"ERC20: transfer to the zero address\") */\n      tag_209\n        /* \"#utility.yul\":11153:11552   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":7959:8023  require(to != address(0), \"ERC20: transfer to the zero address\") */\n    tag_349:\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":8034:8072  _beforeTokenTransfer(from, to, amount) */\n      tag_352\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":8055:8059  from */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":8061:8063  to */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":8065:8071  amount */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":8034:8054  _beforeTokenTransfer */\n      tag_353\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":8034:8072  _beforeTokenTransfer(from, to, amount) */\n      jump\t// in\n    tag_352:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":8105:8120  _balances[from] */\n      dup4\n      and\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":8083:8102  uint256 fromBalance */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":8105:8120  _balances[from] */\n      swap1\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":8105:8114  _balances */\n      0x33\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":8105:8120  _balances[from] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":8138:8159  fromBalance >= amount */\n      dup2\n      dup2\n      lt\n      iszero\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":8130:8202  require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\") */\n      tag_354\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":11759:11761   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":8130:8202  require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":11741:11762   */\n      mstore\n        /* \"#utility.yul\":11798:11800   */\n      0x26\n        /* \"#utility.yul\":11778:11796   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":11771:11801   */\n      mstore\n        /* \"#utility.yul\":11837:11871   */\n      0x45524332303a207472616e7366657220616d6f756e7420657863656564732062\n        /* \"#utility.yul\":11817:11835   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":11810:11872   */\n      mstore\n      shl(0xd0, 0x616c616e6365)\n        /* \"#utility.yul\":11888:11906   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":11881:11917   */\n      mstore\n        /* \"#utility.yul\":11934:11953   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":8130:8202  require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\") */\n      tag_209\n        /* \"#utility.yul\":11557:11959   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":8130:8202  require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\") */\n    tag_354:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":8236:8251  _balances[from] */\n      dup1\n      dup6\n      and\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":8236:8245  _balances */\n      0x33\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":8236:8251  _balances[from] */\n      0x20\n      mstore\n      0x40\n      dup1\n      dup3\n      keccak256\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":8254:8274  fromBalance - amount */\n      dup7\n      dup7\n      sub\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":8236:8274  _balances[from] = fromBalance - amount */\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":8451:8464  _balances[to] */\n      swap3\n      dup7\n      and\n      dup1\n      dup3\n      mstore\n      swap1\n      dup4\n      swap1\n      keccak256\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":8451:8474  _balances[to] += amount */\n      dup1\n      sload\n      dup7\n      add\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":8500:8526  Transfer(from, to, amount) */\n      swap2\n      mload\n      0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n      swap1\n      tag_357\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":8268:8274  amount */\n      dup7\n        /* \"#utility.yul\":1731:1756   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1719:1721   */\n      0x20\n        /* \"#utility.yul\":1704:1722   */\n      add\n      swap1\n        /* \"#utility.yul\":1585:1762   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":8500:8526  Transfer(from, to, amount) */\n    tag_357:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":8537:8574  _afterTokenTransfer(from, to, amount) */\n      tag_344\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":5259:5404  function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {... */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":3768:3871  function _checkRole(bytes32 role) internal view virtual {... */\n    tag_201:\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":3834:3864  _checkRole(role, _msgSender()) */\n      tag_225\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":3845:3849  role */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":3834:3844  _checkRole */\n      tag_363\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":3834:3864  _checkRole(role, _msgSender()) */\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":7917:8150  function _grantRole(bytes32 role, address account) internal virtual {... */\n    tag_204:\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":8000:8022  hasRole(role, account) */\n      tag_365\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":8008:8012  role */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":8014:8021  account */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":8000:8007  hasRole */\n      tag_136\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":8000:8022  hasRole(role, account) */\n      jump\t// in\n    tag_365:\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":7995:8144  if (!hasRole(role, account)) {... */\n      tag_211\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":8038:8050  _roles[role] */\n      0x00\n      dup3\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":8038:8044  _roles */\n      0xfb\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":8038:8050  _roles[role] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":8038:8067  _roles[role].members[account] */\n      dup6\n      and\n      dup5\n      mstore\n      swap1\n      swap2\n      mstore\n      swap1\n      keccak256\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":8038:8074  _roles[role].members[account] = true */\n      dup1\n      sload\n      not(0xff)\n      and\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":8070:8074  true */\n      0x01\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":8038:8074  _roles[role].members[account] = true */\n      or\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":8120:8132  _msgSender() */\n      tag_367\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      caller\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/ContextUpgradeable.sol\":850:946  function _msgSender() internal view virtual returns (address) {... */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":8120:8132  _msgSender() */\n    tag_367:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":8093:8133  RoleGranted(role, account, _msgSender()) */\n      and\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":8111:8118  account */\n      dup2\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":8093:8133  RoleGranted(role, account, _msgSender()) */\n      and\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":8105:8109  role */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":8093:8133  RoleGranted(role, account, _msgSender()) */\n      0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d\n      mload(0x40)\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log4\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":7917:8150  function _grantRole(bytes32 role, address account) internal virtual {... */\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":8321:8555  function _revokeRole(bytes32 role, address account) internal virtual {... */\n    tag_212:\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":8404:8426  hasRole(role, account) */\n      tag_369\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":8412:8416  role */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":8418:8425  account */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":8404:8411  hasRole */\n      tag_136\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":8404:8426  hasRole(role, account) */\n      jump\t// in\n    tag_369:\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":8400:8549  if (hasRole(role, account)) {... */\n      iszero\n      tag_211\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":8474:8479  false */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":8442:8454  _roles[role] */\n      dup3\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":8442:8448  _roles */\n      0xfb\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":8442:8454  _roles[role] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":8442:8471  _roles[role].members[account] */\n      dup6\n      and\n      dup1\n      dup6\n      mstore\n      swap3\n      mstore\n      dup1\n      dup4\n      keccak256\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":8442:8479  _roles[role].members[account] = false */\n      dup1\n      sload\n      not(0xff)\n      and\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":8498:8538  RoleRevoked(role, account, _msgSender()) */\n      mload\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      caller\n      swap3\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":8442:8454  _roles[role] */\n      dup6\n      swap2\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":8498:8538  RoleRevoked(role, account, _msgSender()) */\n      0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b\n      swap2\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":8474:8479  false */\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":8498:8538  RoleRevoked(role, account, _msgSender()) */\n      log4\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":8321:8555  function _revokeRole(bytes32 role, address account) internal virtual {... */\n      pop\n      pop\n      jump\t// out\n        /* \"PAXX.sol\":1920:2046  function _authorizeUpgrade(address newImplementation)... */\n    tag_224:\n        /* \"PAXX.sol\":890:916  keccak256(\"UPGRADER_ROLE\") */\n      0x189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e3\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":2928:2944  _checkRole(role) */\n      tag_211\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":2939:2943  role */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":2928:2938  _checkRole */\n      tag_201\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":2928:2944  _checkRole(role) */\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":2820:3764  function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {... */\n    tag_230:\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":971:1037  0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143 */\n      0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":3236:3295  StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value */\n      sload\n      0xff\n      and\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":3232:3758  if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {... */\n      iszero\n      tag_381\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":3311:3348  _setImplementation(newImplementation) */\n      tag_203\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":3330:3347  newImplementation */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":3311:3329  _setImplementation */\n      tag_383\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":3311:3348  _setImplementation(newImplementation) */\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":3232:3758  if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {... */\n    tag_381:\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":3412:3429  newImplementation */\n      dup3\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":3383:3444  IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID */\n      and\n      0x52d1902d\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":3383:3446  IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() */\n      mload(0x40)\n      dup2\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_385\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_385:\n      pop\n      gas\n      staticcall\n      swap3\n      pop\n      pop\n      pop\n      dup1\n      iszero\n      tag_386\n      jumpi\n      pop\n      0x40\n      dup1\n      mload\n      0x1f\n      returndatasize\n      swap1\n      dup2\n      add\n      not(0x1f)\n      and\n      dup3\n      add\n      swap1\n      swap3\n      mstore\n      tag_387\n      swap2\n      dup2\n      add\n      swap1\n      tag_388\n      jump\t// in\n    tag_387:\n      0x01\n    tag_386:\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":3379:3681  try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {... */\n      tag_389\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":3610:3666  revert(\"ERC1967Upgrade: new implementation is not UUPS\") */\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":12355:12357   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":3610:3666  revert(\"ERC1967Upgrade: new implementation is not UUPS\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":12337:12358   */\n      mstore\n        /* \"#utility.yul\":12394:12396   */\n      0x2e\n        /* \"#utility.yul\":12374:12392   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":12367:12397   */\n      mstore\n        /* \"#utility.yul\":12433:12467   */\n      0x45524331393637557067726164653a206e657720696d706c656d656e74617469\n        /* \"#utility.yul\":12413:12431   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":12406:12468   */\n      mstore\n      shl(0x90, 0x6f6e206973206e6f742055555053)\n        /* \"#utility.yul\":12484:12502   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":12477:12521   */\n      mstore\n        /* \"#utility.yul\":12538:12557   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":3610:3666  revert(\"ERC1967Upgrade: new implementation is not UUPS\") */\n      tag_209\n        /* \"#utility.yul\":12153:12563   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":3379:3681  try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {... */\n    tag_389:\n      0x00\n      dup1\n      mload\n      0x20\n      data_75b20eef8615de99c108b05f0dbda081c91897128caa336d75dffb97c4132b4d\n      dup4\n      codecopy\n      dup2\n      mload\n      swap2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":3496:3524  slot == _IMPLEMENTATION_SLOT */\n      dup2\n      eq\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":3488:3570  require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\") */\n      tag_396\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":12770:12772   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":3488:3570  require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":12752:12773   */\n      mstore\n        /* \"#utility.yul\":12809:12811   */\n      0x29\n        /* \"#utility.yul\":12789:12807   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":12782:12812   */\n      mstore\n        /* \"#utility.yul\":12848:12882   */\n      0x45524331393637557067726164653a20756e737570706f727465642070726f78\n        /* \"#utility.yul\":12828:12846   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":12821:12883   */\n      mstore\n      shl(0xba, 0x1a58589b1955555251)\n        /* \"#utility.yul\":12899:12917   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":12892:12931   */\n      mstore\n        /* \"#utility.yul\":12948:12967   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":3488:3570  require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\") */\n      tag_209\n        /* \"#utility.yul\":12568:12973   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":3488:3570  require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\") */\n    tag_396:\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":3447:3585  returns (bytes32 slot) {... */\n      pop\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":3694:3747  _upgradeToAndCall(newImplementation, data, forceCall) */\n      tag_203\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":3712:3729  newImplementation */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":3731:3735  data */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":3737:3746  forceCall */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":3694:3711  _upgradeToAndCall */\n      tag_400\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":3694:3747  _upgradeToAndCall(newImplementation, data, forceCall) */\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/security/PausableUpgradeable.sol\":2676:2793  function _unpause() internal virtual whenPaused {... */\n    tag_241:\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/security/PausableUpgradeable.sol\":1729:1745  _requirePaused() */\n      tag_402\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/security/PausableUpgradeable.sol\":1729:1743  _requirePaused */\n      tag_403\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/security/PausableUpgradeable.sol\":1729:1745  _requirePaused() */\n      jump\t// in\n    tag_402:\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/security/PausableUpgradeable.sol\":2734:2741  _paused */\n      0x97\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/security/PausableUpgradeable.sol\":2734:2749  _paused = false */\n      dup1\n      sload\n      not(0xff)\n      and\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/security/PausableUpgradeable.sol\":2764:2786  Unpaused(_msgSender()) */\n      0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/security/PausableUpgradeable.sol\":2773:2785  _msgSender() */\n    tag_405:\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/security/PausableUpgradeable.sol\":2764:2786  Unpaused(_msgSender()) */\n      mload(0x40)\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":13142:13174   */\n      swap1\n      swap2\n      and\n        /* \"#utility.yul\":13124:13175   */\n      dup2\n      mstore\n        /* \"#utility.yul\":13112:13114   */\n      0x20\n        /* \"#utility.yul\":13097:13115   */\n      add\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/security/PausableUpgradeable.sol\":2764:2786  Unpaused(_msgSender()) */\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log1\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/security/PausableUpgradeable.sol\":2676:2793  function _unpause() internal virtual whenPaused {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":9712:10371  function _burn(address account, uint256 amount) internal virtual {... */\n    tag_245:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":9795:9816  account != address(0) */\n      dup3\n      and\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":9787:9854  require(account != address(0), \"ERC20: burn from the zero address\") */\n      tag_409\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":13388:13390   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":9787:9854  require(account != address(0), \"ERC20: burn from the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":13370:13391   */\n      mstore\n        /* \"#utility.yul\":13427:13429   */\n      0x21\n        /* \"#utility.yul\":13407:13425   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":13400:13430   */\n      mstore\n        /* \"#utility.yul\":13466:13500   */\n      0x45524332303a206275726e2066726f6d20746865207a65726f20616464726573\n        /* \"#utility.yul\":13446:13464   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":13439:13501   */\n      mstore\n      shl(0xf8, 0x73)\n        /* \"#utility.yul\":13517:13535   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":13510:13541   */\n      mstore\n        /* \"#utility.yul\":13558:13577   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":9787:9854  require(account != address(0), \"ERC20: burn from the zero address\") */\n      tag_209\n        /* \"#utility.yul\":13186:13583   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":9787:9854  require(account != address(0), \"ERC20: burn from the zero address\") */\n    tag_409:\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":9865:9914  _beforeTokenTransfer(account, address(0), amount) */\n      tag_412\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":9886:9893  account */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":9903:9904  0 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":9907:9913  amount */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":9865:9885  _beforeTokenTransfer */\n      tag_353\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":9865:9914  _beforeTokenTransfer(account, address(0), amount) */\n      jump\t// in\n    tag_412:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":9950:9968  _balances[account] */\n      dup3\n      and\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":9925:9947  uint256 accountBalance */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":9950:9968  _balances[account] */\n      swap1\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":9950:9959  _balances */\n      0x33\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":9950:9968  _balances[account] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":9986:10010  accountBalance >= amount */\n      dup2\n      dup2\n      lt\n      iszero\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":9978:10049  require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\") */\n      tag_413\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":13790:13792   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":9978:10049  require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":13772:13793   */\n      mstore\n        /* \"#utility.yul\":13829:13831   */\n      0x22\n        /* \"#utility.yul\":13809:13827   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":13802:13832   */\n      mstore\n        /* \"#utility.yul\":13868:13902   */\n      0x45524332303a206275726e20616d6f756e7420657863656564732062616c616e\n        /* \"#utility.yul\":13848:13866   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":13841:13903   */\n      mstore\n      shl(0xf0, 0x6365)\n        /* \"#utility.yul\":13919:13937   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":13912:13944   */\n      mstore\n        /* \"#utility.yul\":13961:13980   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":9978:10049  require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\") */\n      tag_209\n        /* \"#utility.yul\":13588:13986   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":9978:10049  require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\") */\n    tag_413:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":10083:10101  _balances[account] */\n      dup4\n      and\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":10083:10092  _balances */\n      0x33\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":10083:10101  _balances[account] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":10104:10127  accountBalance - amount */\n      dup7\n      dup7\n      sub\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":10083:10127  _balances[account] = accountBalance - amount */\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":10220:10232  _totalSupply */\n      0x35\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":10220:10242  _totalSupply -= amount */\n      dup1\n      sload\n      dup8\n      swap1\n      sub\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":10268:10305  Transfer(account, address(0), amount) */\n      mload\n        /* \"#utility.yul\":1731:1756   */\n      dup6\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":10083:10101  _balances[account] */\n      swap2\n      swap3\n      swap2\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":10268:10305  Transfer(account, address(0), amount) */\n      0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n      swap2\n        /* \"#utility.yul\":1704:1722   */\n      add\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":10268:10305  Transfer(account, address(0), amount) */\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":5259:5404  function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":2118:2265  function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {... */\n    tag_278:\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/Initializable.sol\":5374:5387  _initializing */\n      sload(0x00)\n      0x0100\n      swap1\n      div\n      0xff\n      and\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/Initializable.sol\":5366:5435  require(_initializing, \"Initializable: contract is not initializing\") */\n      tag_420\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_209\n      swap1\n      tag_422\n      jump\t// in\n    tag_420:\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":2220:2258  __ERC20_init_unchained(name_, symbol_) */\n      tag_211\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":2243:2248  name_ */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":2250:2257  symbol_ */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":2220:2242  __ERC20_init_unchained */\n      tag_425\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":2220:2258  __ERC20_init_unchained(name_, symbol_) */\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\":594:659  function __ERC20Burnable_init() internal onlyInitializing {... */\n    tag_280:\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/Initializable.sol\":5374:5387  _initializing */\n      sload(0x00)\n      0x0100\n      swap1\n      div\n      0xff\n      and\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/Initializable.sol\":5366:5435  require(_initializing, \"Initializable: contract is not initializing\") */\n      tag_427\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_209\n      swap1\n      tag_422\n      jump\t// in\n    tag_427:\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\":594:659  function __ERC20Burnable_init() internal onlyInitializing {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/security/PausableUpgradeable.sol\":1063:1160  function __Pausable_init() internal onlyInitializing {... */\n    tag_282:\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/Initializable.sol\":5374:5387  _initializing */\n      sload(0x00)\n      0x0100\n      swap1\n      div\n      0xff\n      and\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/Initializable.sol\":5366:5435  require(_initializing, \"Initializable: contract is not initializing\") */\n      tag_431\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_209\n      swap1\n      tag_422\n      jump\t// in\n    tag_431:\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/security/PausableUpgradeable.sol\":1126:1153  __Pausable_init_unchained() */\n      tag_427\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/security/PausableUpgradeable.sol\":1126:1151  __Pausable_init_unchained */\n      tag_435\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/security/PausableUpgradeable.sol\":1126:1153  __Pausable_init_unchained() */\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":8857:9392  function _mint(address account, uint256 amount) internal virtual {... */\n    tag_295:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":8940:8961  account != address(0) */\n      dup3\n      and\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":8932:8997  require(account != address(0), \"ERC20: mint to the zero address\") */\n      tag_445\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":14605:14607   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":8932:8997  require(account != address(0), \"ERC20: mint to the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":14587:14608   */\n      mstore\n        /* \"#utility.yul\":14644:14646   */\n      0x1f\n        /* \"#utility.yul\":14624:14642   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":14617:14647   */\n      mstore\n        /* \"#utility.yul\":14683:14716   */\n      0x45524332303a206d696e7420746f20746865207a65726f206164647265737300\n        /* \"#utility.yul\":14663:14681   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":14656:14717   */\n      mstore\n        /* \"#utility.yul\":14734:14752   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":8932:8997  require(account != address(0), \"ERC20: mint to the zero address\") */\n      tag_209\n        /* \"#utility.yul\":14403:14758   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":8932:8997  require(account != address(0), \"ERC20: mint to the zero address\") */\n    tag_445:\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":9008:9057  _beforeTokenTransfer(address(0), account, amount) */\n      tag_448\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":9037:9038  0 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":9041:9048  account */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":9050:9056  amount */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":9008:9028  _beforeTokenTransfer */\n      tag_353\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":9008:9057  _beforeTokenTransfer(address(0), account, amount) */\n      jump\t// in\n    tag_448:\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":9084:9090  amount */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":9068:9080  _totalSupply */\n      0x35\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":9068:9090  _totalSupply += amount */\n      dup3\n      dup3\n      sload\n      tag_449\n      swap2\n      swap1\n      tag_236\n      jump\t// in\n    tag_449:\n      swap1\n      swap2\n      sstore\n      pop\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":9236:9254  _balances[account] */\n      dup3\n      and\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":9236:9245  _balances */\n      0x33\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":9236:9254  _balances[account] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":9236:9264  _balances[account] += amount */\n      dup1\n      sload\n      dup7\n      add\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":9289:9326  Transfer(address(0), account, amount) */\n      mload\n        /* \"#utility.yul\":1731:1756   */\n      dup5\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":9289:9326  Transfer(address(0), account, amount) */\n      0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n      swap2\n        /* \"#utility.yul\":1704:1722   */\n      add\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":9289:9326  Transfer(address(0), account, amount) */\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":6368:6582  function renounceRole(bytes32 role, address account) public virtual override {... */\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/security/PausableUpgradeable.sol\":2429:2544  function _pause() internal virtual whenNotPaused {... */\n    tag_304:\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/security/PausableUpgradeable.sol\":1482:1501  _requireNotPaused() */\n      tag_453\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/security/PausableUpgradeable.sol\":1482:1499  _requireNotPaused */\n      tag_454\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/security/PausableUpgradeable.sol\":1482:1501  _requireNotPaused() */\n      jump\t// in\n    tag_453:\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/security/PausableUpgradeable.sol\":2488:2495  _paused */\n      0x97\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/security/PausableUpgradeable.sol\":2488:2502  _paused = true */\n      dup1\n      sload\n      not(0xff)\n      and\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/security/PausableUpgradeable.sol\":2498:2502  true */\n      0x01\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/security/PausableUpgradeable.sol\":2488:2502  _paused = true */\n      or\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/security/PausableUpgradeable.sol\":2517:2537  Paused(_msgSender()) */\n      0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/security/PausableUpgradeable.sol\":2524:2536  _msgSender() */\n      tag_405\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      caller\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/ContextUpgradeable.sol\":850:946  function _msgSender() internal view virtual returns (address) {... */\n      jump\n        /* \"PAXX.sol\":1721:1914  function _beforeTokenTransfer(address from, address to, uint256 amount)... */\n    tag_353:\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/security/PausableUpgradeable.sol\":1482:1501  _requireNotPaused() */\n      tag_203\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/security/PausableUpgradeable.sol\":1482:1499  _requireNotPaused */\n      tag_454\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/security/PausableUpgradeable.sol\":1482:1501  _requireNotPaused() */\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":4152:4653  function _checkRole(bytes32 role, address account) internal view virtual {... */\n    tag_363:\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":4240:4262  hasRole(role, account) */\n      tag_465\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":4248:4252  role */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":4254:4261  account */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":4240:4247  hasRole */\n      tag_136\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":4240:4262  hasRole(role, account) */\n      jump\t// in\n    tag_465:\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":4235:4647  if (!hasRole(role, account)) {... */\n      tag_211\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":4423:4462  StringsUpgradeable.toHexString(account) */\n      tag_467\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":4454:4461  account */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":4423:4453  StringsUpgradeable.toHexString */\n      tag_468\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":4423:4462  StringsUpgradeable.toHexString(account) */\n      jump\t// in\n    tag_467:\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":4533:4582  StringsUpgradeable.toHexString(uint256(role), 32) */\n      tag_469\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":4572:4576  role */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":4579:4581  32 */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":4533:4563  StringsUpgradeable.toHexString */\n      tag_470\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":4533:4582  StringsUpgradeable.toHexString(uint256(role), 32) */\n      jump\t// in\n    tag_469:\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":4330:4604  abi.encodePacked(... */\n      add(0x20, mload(0x40))\n      tag_471\n      swap3\n      swap2\n      swap1\n      tag_472\n      jump\t// in\n    tag_471:\n      0x40\n      dup1\n      mload\n      not(0x1f)\n      dup2\n      dup5\n      sub\n      add\n      dup2\n      mstore\n      swap1\n      dup3\n      swap1\n      mstore\n      shl(0xe5, 0x461bcd)\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":4278:4636  revert(... */\n      dup3\n      mstore\n      tag_209\n      swap2\n      0x04\n      add\n      tag_49\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":1699:1980  function _setImplementation(address newImplementation) private {... */\n    tag_383:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/AddressUpgradeable.sol\":1713:1732  account.code.length */\n      dup2\n      and\n      extcodesize\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":1772:1878  require(AddressUpgradeable.isContract(newImplementation), \"ERC1967: new implementation is not a contract\") */\n      tag_478\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":15756:15758   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":1772:1878  require(AddressUpgradeable.isContract(newImplementation), \"ERC1967: new implementation is not a contract\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":15738:15759   */\n      mstore\n        /* \"#utility.yul\":15795:15797   */\n      0x2d\n        /* \"#utility.yul\":15775:15793   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":15768:15798   */\n      mstore\n        /* \"#utility.yul\":15834:15868   */\n      0x455243313936373a206e657720696d706c656d656e746174696f6e206973206e\n        /* \"#utility.yul\":15814:15832   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":15807:15869   */\n      mstore\n      shl(0x9a, 0x1bdd08184818dbdb9d1c9858dd)\n        /* \"#utility.yul\":15885:15903   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":15878:15921   */\n      mstore\n        /* \"#utility.yul\":15938:15957   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":1772:1878  require(AddressUpgradeable.isContract(newImplementation), \"ERC1967: new implementation is not a contract\") */\n      tag_209\n        /* \"#utility.yul\":15554:15963   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":1772:1878  require(AddressUpgradeable.isContract(newImplementation), \"ERC1967: new implementation is not a contract\") */\n    tag_478:\n      0x00\n      dup1\n      mload\n      0x20\n      data_75b20eef8615de99c108b05f0dbda081c91897128caa336d75dffb97c4132b4d\n      dup4\n      codecopy\n      dup2\n      mload\n      swap2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":1888:1973  StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation */\n      dup1\n      sload\n      not(sub(shl(0xa0, 0x01), 0x01))\n      and\n      sub(shl(0xa0, 0x01), 0x01)\n      swap3\n      swap1\n      swap3\n      and\n      swap2\n      swap1\n      swap2\n      or\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":1699:1980  function _setImplementation(address newImplementation) private {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":2372:2648  function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {... */\n    tag_400:\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":2480:2509  _upgradeTo(newImplementation) */\n      tag_483\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":2491:2508  newImplementation */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":2480:2490  _upgradeTo */\n      tag_484\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":2480:2509  _upgradeTo(newImplementation) */\n      jump\t// in\n    tag_483:\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":2537:2538  0 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":2523:2527  data */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":2523:2534  data.length */\n      mload\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":2523:2538  data.length > 0 */\n      gt\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":2523:2551  data.length > 0 || forceCall */\n      dup1\n      tag_485\n      jumpi\n      pop\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":2542:2551  forceCall */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":2523:2551  data.length > 0 || forceCall */\n    tag_485:\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":2519:2642  if (data.length > 0 || forceCall) {... */\n      iszero\n      tag_203\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":2567:2631  AddressUpgradeable.functionDelegateCall(newImplementation, data) */\n      tag_344\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":2607:2624  newImplementation */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":2626:2630  data */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":2567:2606  AddressUpgradeable.functionDelegateCall */\n      tag_488\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":2567:2631  AddressUpgradeable.functionDelegateCall(newImplementation, data) */\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/security/PausableUpgradeable.sol\":2188:2294  function _requirePaused() internal view virtual {... */\n    tag_403:\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/security/PausableUpgradeable.sol\":1928:1935  _paused */\n      and(0xff, sload(0x97))\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/security/PausableUpgradeable.sol\":2246:2287  require(paused(), \"Pausable: not paused\") */\n      tag_427\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":16170:16172   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/security/PausableUpgradeable.sol\":2246:2287  require(paused(), \"Pausable: not paused\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":16152:16173   */\n      mstore\n        /* \"#utility.yul\":16209:16211   */\n      0x14\n        /* \"#utility.yul\":16189:16207   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":16182:16212   */\n      mstore\n      shl(0x62, 0x14185d5cd8589b194e881b9bdd081c185d5cd959)\n        /* \"#utility.yul\":16228:16246   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":16221:16271   */\n      mstore\n        /* \"#utility.yul\":16288:16306   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/security/PausableUpgradeable.sol\":2246:2287  require(paused(), \"Pausable: not paused\") */\n      tag_209\n        /* \"#utility.yul\":15968:16312   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":2271:2430  function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {... */\n    tag_425:\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/Initializable.sol\":5374:5387  _initializing */\n      sload(0x00)\n      0x0100\n      swap1\n      div\n      0xff\n      and\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/Initializable.sol\":5366:5435  require(_initializing, \"Initializable: contract is not initializing\") */\n      tag_495\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_209\n      swap1\n      tag_422\n      jump\t// in\n    tag_495:\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":2383:2396  _name = name_ */\n      dup2\n      mload\n      tag_498\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":2383:2388  _name */\n      0x36\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":2383:2396  _name = name_ */\n      0x20\n      dup6\n      add\n      swap1\n      tag_499\n      jump\t// in\n    tag_498:\n      pop\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":2406:2423  _symbol = symbol_ */\n      dup1\n      mload\n      tag_203\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":2406:2413  _symbol */\n      0x37\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":2406:2423  _symbol = symbol_ */\n      0x20\n      dup5\n      add\n      swap1\n      tag_499\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/security/PausableUpgradeable.sol\":1166:1261  function __Pausable_init_unchained() internal onlyInitializing {... */\n    tag_435:\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/Initializable.sol\":5374:5387  _initializing */\n      sload(0x00)\n      0x0100\n      swap1\n      div\n      0xff\n      and\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/Initializable.sol\":5366:5435  require(_initializing, \"Initializable: contract is not initializing\") */\n      tag_502\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_209\n      swap1\n      tag_422\n      jump\t// in\n    tag_502:\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/security/PausableUpgradeable.sol\":1239:1246  _paused */\n      0x97\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/security/PausableUpgradeable.sol\":1239:1254  _paused = false */\n      dup1\n      sload\n      not(0xff)\n      and\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/security/PausableUpgradeable.sol\":1166:1261  function __Pausable_init_unchained() internal onlyInitializing {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/security/PausableUpgradeable.sol\":2010:2116  function _requireNotPaused() internal view virtual {... */\n    tag_454:\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/security/PausableUpgradeable.sol\":1928:1935  _paused */\n      and(0xff, sload(0x97))\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/security/PausableUpgradeable.sol\":2079:2088  !paused() */\n      iszero\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/security/PausableUpgradeable.sol\":2071:2109  require(!paused(), \"Pausable: paused\") */\n      tag_427\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":16519:16521   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/security/PausableUpgradeable.sol\":2071:2109  require(!paused(), \"Pausable: paused\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":16501:16522   */\n      mstore\n        /* \"#utility.yul\":16558:16560   */\n      0x10\n        /* \"#utility.yul\":16538:16556   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":16531:16561   */\n      mstore\n      shl(0x82, 0x14185d5cd8589b194e881c185d5cd959)\n        /* \"#utility.yul\":16577:16595   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":16570:16616   */\n      mstore\n        /* \"#utility.yul\":16633:16651   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/security/PausableUpgradeable.sol\":2071:2109  require(!paused(), \"Pausable: paused\") */\n      tag_209\n        /* \"#utility.yul\":16317:16657   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/StringsUpgradeable.sol\":2473:2622  function toHexString(address addr) internal pure returns (string memory) {... */\n    tag_468:\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/StringsUpgradeable.sol\":2531:2544  string memory */\n      0x60\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/StringsUpgradeable.sol\":2563:2615  toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH) */\n      tag_176\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/StringsUpgradeable.sol\":2575:2597  uint256(uint160(addr)) */\n      dup4\n      and\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/StringsUpgradeable.sol\":376:378  20 */\n      0x14\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/StringsUpgradeable.sol\":1884:2321  function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {... */\n    tag_470:\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/StringsUpgradeable.sol\":1959:1972  string memory */\n      0x60\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/StringsUpgradeable.sol\":1984:2003  bytes memory buffer */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/StringsUpgradeable.sol\":2016:2026  2 * length */\n      tag_514\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/StringsUpgradeable.sol\":2020:2026  length */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/StringsUpgradeable.sol\":2016:2017  2 */\n      0x02\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/StringsUpgradeable.sol\":2016:2026  2 * length */\n      tag_294\n      jump\t// in\n    tag_514:\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/StringsUpgradeable.sol\":2016:2030  2 * length + 2 */\n      tag_515\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/StringsUpgradeable.sol\":2029:2030  2 */\n      0x02\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/StringsUpgradeable.sol\":2016:2030  2 * length + 2 */\n      tag_236\n      jump\t// in\n    tag_515:\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/StringsUpgradeable.sol\":2006:2031  new bytes(2 * length + 2) */\n      0xffffffffffffffff\n      dup2\n      gt\n      iszero\n      tag_517\n      jumpi\n      tag_517\n      tag_228\n      jump\t// in\n    tag_517:\n      mload(0x40)\n      swap1\n      dup1\n      dup3\n      mstore\n      dup1\n      0x1f\n      add\n      not(0x1f)\n      and\n      0x20\n      add\n      dup3\n      add\n      0x40\n      mstore\n      dup1\n      iszero\n      tag_518\n      jumpi\n      0x20\n      dup3\n      add\n      dup2\n      dup1\n      calldatasize\n      dup4\n      calldatacopy\n      add\n      swap1\n      pop\n    tag_518:\n      pop\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/StringsUpgradeable.sol\":1984:2031  bytes memory buffer = new bytes(2 * length + 2) */\n      swap1\n      pop\n      shl(0xfc, 0x03)\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/StringsUpgradeable.sol\":2041:2047  buffer */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/StringsUpgradeable.sol\":2048:2049  0 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/StringsUpgradeable.sol\":2041:2050  buffer[0] */\n      dup2\n      mload\n      dup2\n      lt\n      tag_520\n      jumpi\n      tag_520\n      tag_521\n      jump\t// in\n    tag_520:\n      0x20\n      add\n      add\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/StringsUpgradeable.sol\":2041:2056  buffer[0] = \"0\" */\n      swap1\n      not(sub(shl(0xf8, 0x01), 0x01))\n      and\n      swap1\n      dup2\n      0x00\n      byte\n      swap1\n      mstore8\n      pop\n      shl(0xfb, 0x0f)\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/StringsUpgradeable.sol\":2066:2072  buffer */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/StringsUpgradeable.sol\":2073:2074  1 */\n      0x01\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/StringsUpgradeable.sol\":2066:2075  buffer[1] */\n      dup2\n      mload\n      dup2\n      lt\n      tag_523\n      jumpi\n      tag_523\n      tag_521\n      jump\t// in\n    tag_523:\n      0x20\n      add\n      add\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/StringsUpgradeable.sol\":2066:2081  buffer[1] = \"x\" */\n      swap1\n      not(sub(shl(0xf8, 0x01), 0x01))\n      and\n      swap1\n      dup2\n      0x00\n      byte\n      swap1\n      mstore8\n      pop\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/StringsUpgradeable.sol\":2096:2105  uint256 i */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/StringsUpgradeable.sol\":2108:2118  2 * length */\n      tag_527\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/StringsUpgradeable.sol\":2112:2118  length */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/StringsUpgradeable.sol\":2108:2109  2 */\n      0x02\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/StringsUpgradeable.sol\":2108:2118  2 * length */\n      tag_294\n      jump\t// in\n    tag_527:\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/StringsUpgradeable.sol\":2108:2122  2 * length + 1 */\n      tag_528\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/StringsUpgradeable.sol\":2121:2122  1 */\n      0x01\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/StringsUpgradeable.sol\":2108:2122  2 * length + 1 */\n      tag_236\n      jump\t// in\n    tag_528:\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/StringsUpgradeable.sol\":2096:2122  uint256 i = 2 * length + 1 */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/StringsUpgradeable.sol\":2091:2219  for (uint256 i = 2 * length + 1; i > 1; --i) {... */\n    tag_524:\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/StringsUpgradeable.sol\":2128:2129  1 */\n      0x01\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/StringsUpgradeable.sol\":2124:2125  i */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/StringsUpgradeable.sol\":2124:2129  i > 1 */\n      gt\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/StringsUpgradeable.sol\":2091:2219  for (uint256 i = 2 * length + 1; i > 1; --i) {... */\n      iszero\n      tag_525\n      jumpi\n      shl(0x81, 0x181899199a1a9b1b9c1cb0b131b232b3)\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/StringsUpgradeable.sol\":2171:2176  value */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/StringsUpgradeable.sol\":2179:2182  0xf */\n      0x0f\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/StringsUpgradeable.sol\":2171:2182  value & 0xf */\n      and\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/StringsUpgradeable.sol\":2162:2183  _SYMBOLS[value & 0xf] */\n      0x10\n      dup2\n      lt\n      tag_530\n      jumpi\n      tag_530\n      tag_521\n      jump\t// in\n    tag_530:\n      byte\n      0xf8\n      shl\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/StringsUpgradeable.sol\":2150:2156  buffer */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/StringsUpgradeable.sol\":2157:2158  i */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/StringsUpgradeable.sol\":2150:2159  buffer[i] */\n      dup2\n      mload\n      dup2\n      lt\n      tag_532\n      jumpi\n      tag_532\n      tag_521\n      jump\t// in\n    tag_532:\n      0x20\n      add\n      add\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/StringsUpgradeable.sol\":2150:2183  buffer[i] = _SYMBOLS[value & 0xf] */\n      swap1\n      not(sub(shl(0xf8, 0x01), 0x01))\n      and\n      swap1\n      dup2\n      0x00\n      byte\n      swap1\n      mstore8\n      pop\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/StringsUpgradeable.sol\":2207:2208  4 */\n      0x04\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/StringsUpgradeable.sol\":2197:2208  value >>= 4 */\n      swap5\n      swap1\n      swap5\n      shr\n      swap4\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/StringsUpgradeable.sol\":2131:2134  --i */\n      tag_533\n      dup2\n      tag_534\n      jump\t// in\n    tag_533:\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/StringsUpgradeable.sol\":2091:2219  for (uint256 i = 2 * length + 1; i > 1; --i) {... */\n      jump(tag_524)\n    tag_525:\n      pop\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/StringsUpgradeable.sol\":2236:2246  value == 0 */\n      dup4\n      iszero\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/StringsUpgradeable.sol\":2228:2283  require(value == 0, \"Strings: hex length insufficient\") */\n      tag_535\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":17137:17139   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/StringsUpgradeable.sol\":2228:2283  require(value == 0, \"Strings: hex length insufficient\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":17119:17140   */\n      dup2\n      swap1\n      mstore\n        /* \"#utility.yul\":17156:17174   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":17149:17179   */\n      mstore\n        /* \"#utility.yul\":17215:17249   */\n      0x537472696e67733a20686578206c656e67746820696e73756666696369656e74\n        /* \"#utility.yul\":17195:17213   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":17188:17250   */\n      mstore\n        /* \"#utility.yul\":17267:17285   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/StringsUpgradeable.sol\":2228:2283  require(value == 0, \"Strings: hex length insufficient\") */\n      tag_209\n        /* \"#utility.yul\":16935:17291   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/StringsUpgradeable.sol\":2228:2283  require(value == 0, \"Strings: hex length insufficient\") */\n    tag_535:\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/StringsUpgradeable.sol\":2307:2313  buffer */\n      swap4\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/StringsUpgradeable.sol\":1884:2321  function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {... */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":2086:2238  function _upgradeTo(address newImplementation) internal {... */\n    tag_484:\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":2152:2189  _setImplementation(newImplementation) */\n      tag_539\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":2171:2188  newImplementation */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":2152:2170  _setImplementation */\n      tag_383\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":2152:2189  _setImplementation(newImplementation) */\n      jump\t// in\n    tag_539:\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":2204:2231  Upgraded(newImplementation) */\n      mload(0x40)\n      sub(shl(0xa0, 0x01), 0x01)\n      dup3\n      and\n      swap1\n      0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b\n      swap1\n      0x00\n      swap1\n      log2\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":2086:2238  function _upgradeTo(address newImplementation) internal {... */\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/AddressUpgradeable.sol\":6685:6883  function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {... */\n    tag_488:\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/AddressUpgradeable.sol\":6768:6780  bytes memory */\n      0x60\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/AddressUpgradeable.sol\":6799:6876  functionDelegateCall(target, data, \"Address: low-level delegate call failed\") */\n      tag_535\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/AddressUpgradeable.sol\":6820:6826  target */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/AddressUpgradeable.sol\":6828:6832  data */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/AddressUpgradeable.sol\":6799:6876  functionDelegateCall(target, data, \"Address: low-level delegate call failed\") */\n      mload(0x40)\n      dup1\n      0x60\n      add\n      0x40\n      mstore\n      dup1\n      0x27\n      dup2\n      mstore\n      0x20\n      add\n      data_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398\n      0x27\n      swap2\n      codecopy\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/AddressUpgradeable.sol\":7210:7222  bytes memory */\n      0x60\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/AddressUpgradeable.sol\":7235:7247  bool success */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/AddressUpgradeable.sol\":7249:7272  bytes memory returndata */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/AddressUpgradeable.sol\":7276:7282  target */\n      dup6\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/AddressUpgradeable.sol\":7276:7295  target.delegatecall */\n      and\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/AddressUpgradeable.sol\":7296:7300  data */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/AddressUpgradeable.sol\":7276:7301  target.delegatecall(data) */\n      mload(0x40)\n      tag_544\n      swap2\n      swap1\n      tag_545\n      jump\t// in\n    tag_544:\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup6\n      gas\n      delegatecall\n      swap2\n      pop\n      pop\n      returndatasize\n      dup1\n      0x00\n      dup2\n      eq\n      tag_548\n      jumpi\n      mload(0x40)\n      swap2\n      pop\n      and(add(returndatasize, 0x3f), not(0x1f))\n      dup3\n      add\n      0x40\n      mstore\n      returndatasize\n      dup3\n      mstore\n      returndatasize\n      0x00\n      0x20\n      dup5\n      add\n      returndatacopy\n      jump(tag_547)\n    tag_548:\n      0x60\n      swap2\n      pop\n    tag_547:\n      pop\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/AddressUpgradeable.sol\":7234:7301  (bool success, bytes memory returndata) = target.delegatecall(data) */\n      swap2\n      pop\n      swap2\n      pop\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/AddressUpgradeable.sol\":7318:7387  verifyCallResultFromTarget(target, success, returndata, errorMessage) */\n      tag_549\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/AddressUpgradeable.sol\":7345:7351  target */\n      dup7\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/AddressUpgradeable.sol\":7353:7360  success */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/AddressUpgradeable.sol\":7362:7372  returndata */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/AddressUpgradeable.sol\":7374:7386  errorMessage */\n      dup8\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/AddressUpgradeable.sol\":7318:7344  verifyCallResultFromTarget */\n      tag_550\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/AddressUpgradeable.sol\":7318:7387  verifyCallResultFromTarget(target, success, returndata, errorMessage) */\n      jump\t// in\n    tag_549:\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/AddressUpgradeable.sol\":7311:7387  return verifyCallResultFromTarget(target, success, returndata, errorMessage) */\n      swap7\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/AddressUpgradeable.sol\":7069:7394  function functionDelegateCall(... */\n      swap6\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/AddressUpgradeable.sol\":7682:8310  function verifyCallResultFromTarget(... */\n    tag_550:\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/AddressUpgradeable.sol\":7862:7874  bytes memory */\n      0x60\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/AddressUpgradeable.sol\":7890:7897  success */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/AddressUpgradeable.sol\":7886:8304  if (success) {... */\n      iszero\n      tag_552\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/AddressUpgradeable.sol\":7917:7934  returndata.length */\n      dup3\n      mload\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/AddressUpgradeable.sol\":7913:8199  if (returndata.length == 0) {... */\n      tag_555\n      jumpi\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/AddressUpgradeable.sol\":1713:1732  account.code.length */\n      dup6\n      and\n      extcodesize\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/AddressUpgradeable.sol\":8124:8184  require(isContract(target), \"Address: call to non-contract\") */\n      tag_555\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":17777:17779   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/AddressUpgradeable.sol\":8124:8184  require(isContract(target), \"Address: call to non-contract\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":17759:17780   */\n      mstore\n        /* \"#utility.yul\":17816:17818   */\n      0x1d\n        /* \"#utility.yul\":17796:17814   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":17789:17819   */\n      mstore\n        /* \"#utility.yul\":17855:17886   */\n      0x416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000\n        /* \"#utility.yul\":17835:17853   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":17828:17887   */\n      mstore\n        /* \"#utility.yul\":17904:17922   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/AddressUpgradeable.sol\":8124:8184  require(isContract(target), \"Address: call to non-contract\") */\n      tag_209\n        /* \"#utility.yul\":17575:17928   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/AddressUpgradeable.sol\":8124:8184  require(isContract(target), \"Address: call to non-contract\") */\n    tag_555:\n      pop\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/AddressUpgradeable.sol\":8219:8229  returndata */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/AddressUpgradeable.sol\":8212:8229  return returndata */\n      jump(tag_559)\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/AddressUpgradeable.sol\":7886:8304  if (success) {... */\n    tag_552:\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/AddressUpgradeable.sol\":8260:8293  _revert(returndata, errorMessage) */\n      tag_559\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/AddressUpgradeable.sol\":8268:8278  returndata */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/AddressUpgradeable.sol\":8280:8292  errorMessage */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/AddressUpgradeable.sol\":8260:8267  _revert */\n      tag_560\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/AddressUpgradeable.sol\":8260:8293  _revert(returndata, errorMessage) */\n      jump\t// in\n    tag_559:\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/AddressUpgradeable.sol\":7682:8310  function verifyCallResultFromTarget(... */\n      swap5\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/AddressUpgradeable.sol\":8832:9372  function _revert(bytes memory returndata, string memory errorMessage) private pure {... */\n    tag_560:\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/AddressUpgradeable.sol\":8991:9008  returndata.length */\n      dup2\n      mload\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/AddressUpgradeable.sol\":8991:9012  returndata.length > 0 */\n      iszero\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/AddressUpgradeable.sol\":8987:9366  if (returndata.length > 0) {... */\n      tag_562\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/AddressUpgradeable.sol\":9219:9229  returndata */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/AddressUpgradeable.sol\":9213:9230  mload(returndata) */\n      mload\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/AddressUpgradeable.sol\":9275:9290  returndata_size */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/AddressUpgradeable.sol\":9262:9272  returndata */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/AddressUpgradeable.sol\":9258:9260  32 */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/AddressUpgradeable.sol\":9254:9273  add(32, returndata) */\n      add\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/AddressUpgradeable.sol\":9247:9291  revert(add(32, returndata), returndata_size) */\n      revert\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/AddressUpgradeable.sol\":8987:9366  if (returndata.length > 0) {... */\n    tag_562:\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/AddressUpgradeable.sol\":9342:9354  errorMessage */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable@4.9.2/utils/AddressUpgradeable.sol\":9335:9355  revert(errorMessage) */\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_209\n      swap2\n      swap1\n      tag_49\n      jump\t// in\n    tag_499:\n      dup3\n      dup1\n      sload\n      tag_565\n      swap1\n      tag_180\n      jump\t// in\n    tag_565:\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n      0x1f\n      add\n      0x20\n      swap1\n      div\n      dup2\n      add\n      swap3\n      dup3\n      tag_567\n      jumpi\n      0x00\n      dup6\n      sstore\n      jump(tag_570)\n    tag_567:\n      dup3\n      0x1f\n      lt\n      tag_568\n      jumpi\n      dup1\n      mload\n      not(0xff)\n      and\n      dup4\n      dup1\n      add\n      or\n      dup6\n      sstore\n      jump(tag_570)\n    tag_568:\n      dup3\n      dup1\n      add\n      0x01\n      add\n      dup6\n      sstore\n      dup3\n      iszero\n      tag_570\n      jumpi\n      swap2\n      dup3\n      add\n    tag_569:\n      dup3\n      dup2\n      gt\n      iszero\n      tag_570\n      jumpi\n      dup3\n      mload\n      dup3\n      sstore\n      swap2\n      0x20\n      add\n      swap2\n      swap1\n      0x01\n      add\n      swap1\n      jump(tag_569)\n    tag_570:\n      pop\n      tag_571\n      swap3\n      swap2\n      pop\n      tag_572\n      jump\t// in\n    tag_571:\n      pop\n      swap1\n      jump\t// out\n    tag_572:\n    tag_573:\n      dup1\n      dup3\n      gt\n      iszero\n      tag_571\n      jumpi\n      0x00\n      dup2\n      sstore\n      0x01\n      add\n      jump(tag_573)\n        /* \"#utility.yul\":14:300   */\n    tag_41:\n        /* \"#utility.yul\":72:78   */\n      0x00\n        /* \"#utility.yul\":125:127   */\n      0x20\n        /* \"#utility.yul\":113:122   */\n      dup3\n        /* \"#utility.yul\":104:111   */\n      dup5\n        /* \"#utility.yul\":100:123   */\n      sub\n        /* \"#utility.yul\":96:128   */\n      slt\n        /* \"#utility.yul\":93:145   */\n      iszero\n      tag_582\n      jumpi\n        /* \"#utility.yul\":141:142   */\n      0x00\n        /* \"#utility.yul\":138:139   */\n      dup1\n        /* \"#utility.yul\":131:143   */\n      revert\n        /* \"#utility.yul\":93:145   */\n    tag_582:\n        /* \"#utility.yul\":167:190   */\n      dup2\n      calldataload\n      not(sub(shl(0xe0, 0x01), 0x01))\n        /* \"#utility.yul\":219:251   */\n      dup2\n      and\n        /* \"#utility.yul\":209:252   */\n      dup2\n      eq\n        /* \"#utility.yul\":199:270   */\n      tag_535\n      jumpi\n        /* \"#utility.yul\":266:267   */\n      0x00\n        /* \"#utility.yul\":263:264   */\n      dup1\n        /* \"#utility.yul\":256:268   */\n      revert\n        /* \"#utility.yul\":497:755   */\n    tag_575:\n        /* \"#utility.yul\":569:570   */\n      0x00\n        /* \"#utility.yul\":579:692   */\n    tag_586:\n        /* \"#utility.yul\":593:599   */\n      dup4\n        /* \"#utility.yul\":590:591   */\n      dup2\n        /* \"#utility.yul\":587:600   */\n      lt\n        /* \"#utility.yul\":579:692   */\n      iszero\n      tag_588\n      jumpi\n        /* \"#utility.yul\":669:680   */\n      dup2\n      dup2\n      add\n        /* \"#utility.yul\":663:681   */\n      mload\n        /* \"#utility.yul\":650:661   */\n      dup4\n      dup3\n      add\n        /* \"#utility.yul\":643:682   */\n      mstore\n        /* \"#utility.yul\":615:617   */\n      0x20\n        /* \"#utility.yul\":608:618   */\n      add\n        /* \"#utility.yul\":579:692   */\n      jump(tag_586)\n    tag_588:\n        /* \"#utility.yul\":710:716   */\n      dup4\n        /* \"#utility.yul\":707:708   */\n      dup2\n        /* \"#utility.yul\":704:717   */\n      gt\n        /* \"#utility.yul\":701:749   */\n      iszero\n      tag_344\n      jumpi\n      pop\n      pop\n        /* \"#utility.yul\":745:746   */\n      0x00\n        /* \"#utility.yul\":727:743   */\n      swap2\n      add\n        /* \"#utility.yul\":720:747   */\n      mstore\n        /* \"#utility.yul\":497:755   */\n      jump\t// out\n        /* \"#utility.yul\":760:1143   */\n    tag_49:\n        /* \"#utility.yul\":909:911   */\n      0x20\n        /* \"#utility.yul\":898:907   */\n      dup2\n        /* \"#utility.yul\":891:912   */\n      mstore\n        /* \"#utility.yul\":872:876   */\n      0x00\n        /* \"#utility.yul\":941:947   */\n      dup3\n        /* \"#utility.yul\":935:948   */\n      mload\n        /* \"#utility.yul\":984:990   */\n      dup1\n        /* \"#utility.yul\":979:981   */\n      0x20\n        /* \"#utility.yul\":968:977   */\n      dup5\n        /* \"#utility.yul\":964:982   */\n      add\n        /* \"#utility.yul\":957:991   */\n      mstore\n        /* \"#utility.yul\":1000:1066   */\n      tag_591\n        /* \"#utility.yul\":1059:1065   */\n      dup2\n        /* \"#utility.yul\":1054:1056   */\n      0x40\n        /* \"#utility.yul\":1043:1052   */\n      dup6\n        /* \"#utility.yul\":1039:1057   */\n      add\n        /* \"#utility.yul\":1034:1036   */\n      0x20\n        /* \"#utility.yul\":1026:1032   */\n      dup8\n        /* \"#utility.yul\":1022:1037   */\n      add\n        /* \"#utility.yul\":1000:1066   */\n      tag_575\n      jump\t// in\n    tag_591:\n        /* \"#utility.yul\":1127:1129   */\n      0x1f\n        /* \"#utility.yul\":1106:1121   */\n      add\n      not(0x1f)\n        /* \"#utility.yul\":1102:1131   */\n      and\n        /* \"#utility.yul\":1087:1132   */\n      swap2\n      swap1\n      swap2\n      add\n        /* \"#utility.yul\":1134:1136   */\n      0x40\n        /* \"#utility.yul\":1083:1137   */\n      add\n      swap3\n        /* \"#utility.yul\":760:1143   */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1148:1321   */\n    tag_576:\n        /* \"#utility.yul\":1216:1236   */\n      dup1\n      calldataload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":1265:1296   */\n      dup2\n      and\n        /* \"#utility.yul\":1255:1297   */\n      dup2\n      eq\n        /* \"#utility.yul\":1245:1315   */\n      tag_593\n      jumpi\n        /* \"#utility.yul\":1311:1312   */\n      0x00\n        /* \"#utility.yul\":1308:1309   */\n      dup1\n        /* \"#utility.yul\":1301:1313   */\n      revert\n        /* \"#utility.yul\":1245:1315   */\n    tag_593:\n        /* \"#utility.yul\":1148:1321   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1326:1580   */\n    tag_53:\n        /* \"#utility.yul\":1394:1400   */\n      0x00\n        /* \"#utility.yul\":1402:1408   */\n      dup1\n        /* \"#utility.yul\":1455:1457   */\n      0x40\n        /* \"#utility.yul\":1443:1452   */\n      dup4\n        /* \"#utility.yul\":1434:1441   */\n      dup6\n        /* \"#utility.yul\":1430:1453   */\n      sub\n        /* \"#utility.yul\":1426:1458   */\n      slt\n        /* \"#utility.yul\":1423:1475   */\n      iszero\n      tag_595\n      jumpi\n        /* \"#utility.yul\":1471:1472   */\n      0x00\n        /* \"#utility.yul\":1468:1469   */\n      dup1\n        /* \"#utility.yul\":1461:1473   */\n      revert\n        /* \"#utility.yul\":1423:1475   */\n    tag_595:\n        /* \"#utility.yul\":1494:1523   */\n      tag_596\n        /* \"#utility.yul\":1513:1522   */\n      dup4\n        /* \"#utility.yul\":1494:1523   */\n      tag_576\n      jump\t// in\n    tag_596:\n        /* \"#utility.yul\":1484:1523   */\n      swap5\n        /* \"#utility.yul\":1570:1572   */\n      0x20\n        /* \"#utility.yul\":1555:1573   */\n      swap4\n      swap1\n      swap4\n      add\n        /* \"#utility.yul\":1542:1574   */\n      calldataload\n      swap4\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":1326:1580   */\n      jump\t// out\n        /* \"#utility.yul\":1767:2095   */\n    tag_64:\n        /* \"#utility.yul\":1844:1850   */\n      0x00\n        /* \"#utility.yul\":1852:1858   */\n      dup1\n        /* \"#utility.yul\":1860:1866   */\n      0x00\n        /* \"#utility.yul\":1913:1915   */\n      0x60\n        /* \"#utility.yul\":1901:1910   */\n      dup5\n        /* \"#utility.yul\":1892:1899   */\n      dup7\n        /* \"#utility.yul\":1888:1911   */\n      sub\n        /* \"#utility.yul\":1884:1916   */\n      slt\n        /* \"#utility.yul\":1881:1933   */\n      iszero\n      tag_599\n      jumpi\n        /* \"#utility.yul\":1929:1930   */\n      0x00\n        /* \"#utility.yul\":1926:1927   */\n      dup1\n        /* \"#utility.yul\":1919:1931   */\n      revert\n        /* \"#utility.yul\":1881:1933   */\n    tag_599:\n        /* \"#utility.yul\":1952:1981   */\n      tag_600\n        /* \"#utility.yul\":1971:1980   */\n      dup5\n        /* \"#utility.yul\":1952:1981   */\n      tag_576\n      jump\t// in\n    tag_600:\n        /* \"#utility.yul\":1942:1981   */\n      swap3\n      pop\n        /* \"#utility.yul\":2000:2038   */\n      tag_601\n        /* \"#utility.yul\":2034:2036   */\n      0x20\n        /* \"#utility.yul\":2023:2032   */\n      dup6\n        /* \"#utility.yul\":2019:2037   */\n      add\n        /* \"#utility.yul\":2000:2038   */\n      tag_576\n      jump\t// in\n    tag_601:\n        /* \"#utility.yul\":1990:2038   */\n      swap2\n      pop\n        /* \"#utility.yul\":2085:2087   */\n      0x40\n        /* \"#utility.yul\":2074:2083   */\n      dup5\n        /* \"#utility.yul\":2070:2088   */\n      add\n        /* \"#utility.yul\":2057:2089   */\n      calldataload\n        /* \"#utility.yul\":2047:2089   */\n      swap1\n      pop\n        /* \"#utility.yul\":1767:2095   */\n      swap3\n      pop\n      swap3\n      pop\n      swap3\n      jump\t// out\n        /* \"#utility.yul\":2100:2280   */\n    tag_70:\n        /* \"#utility.yul\":2159:2165   */\n      0x00\n        /* \"#utility.yul\":2212:2214   */\n      0x20\n        /* \"#utility.yul\":2200:2209   */\n      dup3\n        /* \"#utility.yul\":2191:2198   */\n      dup5\n        /* \"#utility.yul\":2187:2210   */\n      sub\n        /* \"#utility.yul\":2183:2215   */\n      slt\n        /* \"#utility.yul\":2180:2232   */\n      iszero\n      tag_603\n      jumpi\n        /* \"#utility.yul\":2228:2229   */\n      0x00\n        /* \"#utility.yul\":2225:2226   */\n      dup1\n        /* \"#utility.yul\":2218:2230   */\n      revert\n        /* \"#utility.yul\":2180:2232   */\n    tag_603:\n      pop\n        /* \"#utility.yul\":2251:2274   */\n      calldataload\n      swap2\n        /* \"#utility.yul\":2100:2280   */\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2467:2721   */\n    tag_77:\n        /* \"#utility.yul\":2535:2541   */\n      0x00\n        /* \"#utility.yul\":2543:2549   */\n      dup1\n        /* \"#utility.yul\":2596:2598   */\n      0x40\n        /* \"#utility.yul\":2584:2593   */\n      dup4\n        /* \"#utility.yul\":2575:2582   */\n      dup6\n        /* \"#utility.yul\":2571:2594   */\n      sub\n        /* \"#utility.yul\":2567:2599   */\n      slt\n        /* \"#utility.yul\":2564:2616   */\n      iszero\n      tag_606\n      jumpi\n        /* \"#utility.yul\":2612:2613   */\n      0x00\n        /* \"#utility.yul\":2609:2610   */\n      dup1\n        /* \"#utility.yul\":2602:2614   */\n      revert\n        /* \"#utility.yul\":2564:2616   */\n    tag_606:\n        /* \"#utility.yul\":2648:2657   */\n      dup3\n        /* \"#utility.yul\":2635:2658   */\n      calldataload\n        /* \"#utility.yul\":2625:2658   */\n      swap2\n      pop\n        /* \"#utility.yul\":2677:2715   */\n      tag_607\n        /* \"#utility.yul\":2711:2713   */\n      0x20\n        /* \"#utility.yul\":2700:2709   */\n      dup5\n        /* \"#utility.yul\":2696:2714   */\n      add\n        /* \"#utility.yul\":2677:2715   */\n      tag_576\n      jump\t// in\n    tag_607:\n        /* \"#utility.yul\":2667:2715   */\n      swap1\n      pop\n        /* \"#utility.yul\":2467:2721   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2915:3101   */\n    tag_91:\n        /* \"#utility.yul\":2974:2980   */\n      0x00\n        /* \"#utility.yul\":3027:3029   */\n      0x20\n        /* \"#utility.yul\":3015:3024   */\n      dup3\n        /* \"#utility.yul\":3006:3013   */\n      dup5\n        /* \"#utility.yul\":3002:3025   */\n      sub\n        /* \"#utility.yul\":2998:3030   */\n      slt\n        /* \"#utility.yul\":2995:3047   */\n      iszero\n      tag_610\n      jumpi\n        /* \"#utility.yul\":3043:3044   */\n      0x00\n        /* \"#utility.yul\":3040:3041   */\n      dup1\n        /* \"#utility.yul\":3033:3045   */\n      revert\n        /* \"#utility.yul\":2995:3047   */\n    tag_610:\n        /* \"#utility.yul\":3066:3095   */\n      tag_535\n        /* \"#utility.yul\":3085:3094   */\n      dup3\n        /* \"#utility.yul\":3066:3095   */\n      tag_576\n      jump\t// in\n        /* \"#utility.yul\":3291:3418   */\n    tag_228:\n        /* \"#utility.yul\":3352:3362   */\n      0x4e487b71\n        /* \"#utility.yul\":3347:3350   */\n      0xe0\n        /* \"#utility.yul\":3343:3363   */\n      shl\n        /* \"#utility.yul\":3340:3341   */\n      0x00\n        /* \"#utility.yul\":3333:3364   */\n      mstore\n        /* \"#utility.yul\":3383:3387   */\n      0x41\n        /* \"#utility.yul\":3380:3381   */\n      0x04\n        /* \"#utility.yul\":3373:3388   */\n      mstore\n        /* \"#utility.yul\":3407:3411   */\n      0x24\n        /* \"#utility.yul\":3404:3405   */\n      0x00\n        /* \"#utility.yul\":3397:3412   */\n      revert\n        /* \"#utility.yul\":3423:4418   */\n    tag_108:\n        /* \"#utility.yul\":3500:3506   */\n      0x00\n        /* \"#utility.yul\":3508:3514   */\n      dup1\n        /* \"#utility.yul\":3561:3563   */\n      0x40\n        /* \"#utility.yul\":3549:3558   */\n      dup4\n        /* \"#utility.yul\":3540:3547   */\n      dup6\n        /* \"#utility.yul\":3536:3559   */\n      sub\n        /* \"#utility.yul\":3532:3564   */\n      slt\n        /* \"#utility.yul\":3529:3581   */\n      iszero\n      tag_616\n      jumpi\n        /* \"#utility.yul\":3577:3578   */\n      0x00\n        /* \"#utility.yul\":3574:3575   */\n      dup1\n        /* \"#utility.yul\":3567:3579   */\n      revert\n        /* \"#utility.yul\":3529:3581   */\n    tag_616:\n        /* \"#utility.yul\":3600:3629   */\n      tag_617\n        /* \"#utility.yul\":3619:3628   */\n      dup4\n        /* \"#utility.yul\":3600:3629   */\n      tag_576\n      jump\t// in\n    tag_617:\n        /* \"#utility.yul\":3590:3629   */\n      swap2\n      pop\n        /* \"#utility.yul\":3680:3682   */\n      0x20\n        /* \"#utility.yul\":3669:3678   */\n      dup4\n        /* \"#utility.yul\":3665:3683   */\n      add\n        /* \"#utility.yul\":3652:3684   */\n      calldataload\n        /* \"#utility.yul\":3703:3721   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":3744:3746   */\n      dup1\n        /* \"#utility.yul\":3736:3742   */\n      dup3\n        /* \"#utility.yul\":3733:3747   */\n      gt\n        /* \"#utility.yul\":3730:3764   */\n      iszero\n      tag_618\n      jumpi\n        /* \"#utility.yul\":3760:3761   */\n      0x00\n        /* \"#utility.yul\":3757:3758   */\n      dup1\n        /* \"#utility.yul\":3750:3762   */\n      revert\n        /* \"#utility.yul\":3730:3764   */\n    tag_618:\n        /* \"#utility.yul\":3798:3804   */\n      dup2\n        /* \"#utility.yul\":3787:3796   */\n      dup6\n        /* \"#utility.yul\":3783:3805   */\n      add\n        /* \"#utility.yul\":3773:3805   */\n      swap2\n      pop\n        /* \"#utility.yul\":3843:3850   */\n      dup6\n        /* \"#utility.yul\":3836:3840   */\n      0x1f\n        /* \"#utility.yul\":3832:3834   */\n      dup4\n        /* \"#utility.yul\":3828:3841   */\n      add\n        /* \"#utility.yul\":3824:3851   */\n      slt\n        /* \"#utility.yul\":3814:3869   */\n      tag_619\n      jumpi\n        /* \"#utility.yul\":3865:3866   */\n      0x00\n        /* \"#utility.yul\":3862:3863   */\n      dup1\n        /* \"#utility.yul\":3855:3867   */\n      revert\n        /* \"#utility.yul\":3814:3869   */\n    tag_619:\n        /* \"#utility.yul\":3901:3903   */\n      dup2\n        /* \"#utility.yul\":3888:3904   */\n      calldataload\n        /* \"#utility.yul\":3923:3925   */\n      dup2\n        /* \"#utility.yul\":3919:3921   */\n      dup2\n        /* \"#utility.yul\":3916:3926   */\n      gt\n        /* \"#utility.yul\":3913:3949   */\n      iszero\n      tag_621\n      jumpi\n        /* \"#utility.yul\":3929:3947   */\n      tag_621\n      tag_228\n      jump\t// in\n    tag_621:\n        /* \"#utility.yul\":4004:4006   */\n      0x40\n        /* \"#utility.yul\":3998:4007   */\n      mload\n        /* \"#utility.yul\":3972:3974   */\n      0x1f\n        /* \"#utility.yul\":4058:4071   */\n      dup3\n      add\n      not(0x1f)\n        /* \"#utility.yul\":4054:4076   */\n      swap1\n      dup2\n      and\n        /* \"#utility.yul\":4078:4080   */\n      0x3f\n        /* \"#utility.yul\":4050:4081   */\n      add\n        /* \"#utility.yul\":4046:4086   */\n      and\n        /* \"#utility.yul\":4034:4087   */\n      dup2\n      add\n      swap1\n        /* \"#utility.yul\":4102:4120   */\n      dup4\n      dup3\n      gt\n        /* \"#utility.yul\":4122:4144   */\n      dup2\n      dup4\n      lt\n        /* \"#utility.yul\":4099:4145   */\n      or\n        /* \"#utility.yul\":4096:4168   */\n      iszero\n      tag_623\n      jumpi\n        /* \"#utility.yul\":4148:4166   */\n      tag_623\n      tag_228\n      jump\t// in\n    tag_623:\n        /* \"#utility.yul\":4188:4198   */\n      dup2\n        /* \"#utility.yul\":4184:4186   */\n      0x40\n        /* \"#utility.yul\":4177:4199   */\n      mstore\n        /* \"#utility.yul\":4223:4225   */\n      dup3\n        /* \"#utility.yul\":4215:4221   */\n      dup2\n        /* \"#utility.yul\":4208:4226   */\n      mstore\n        /* \"#utility.yul\":4263:4270   */\n      dup9\n        /* \"#utility.yul\":4258:4260   */\n      0x20\n        /* \"#utility.yul\":4253:4255   */\n      dup5\n        /* \"#utility.yul\":4249:4251   */\n      dup8\n        /* \"#utility.yul\":4245:4256   */\n      add\n        /* \"#utility.yul\":4241:4261   */\n      add\n        /* \"#utility.yul\":4238:4271   */\n      gt\n        /* \"#utility.yul\":4235:4288   */\n      iszero\n      tag_624\n      jumpi\n        /* \"#utility.yul\":4284:4285   */\n      0x00\n        /* \"#utility.yul\":4281:4282   */\n      dup1\n        /* \"#utility.yul\":4274:4286   */\n      revert\n        /* \"#utility.yul\":4235:4288   */\n    tag_624:\n        /* \"#utility.yul\":4340:4342   */\n      dup3\n        /* \"#utility.yul\":4335:4337   */\n      0x20\n        /* \"#utility.yul\":4331:4333   */\n      dup7\n        /* \"#utility.yul\":4327:4338   */\n      add\n        /* \"#utility.yul\":4322:4324   */\n      0x20\n        /* \"#utility.yul\":4314:4320   */\n      dup4\n        /* \"#utility.yul\":4310:4325   */\n      add\n        /* \"#utility.yul\":4297:4343   */\n      calldatacopy\n        /* \"#utility.yul\":4385:4386   */\n      0x00\n        /* \"#utility.yul\":4380:4382   */\n      0x20\n        /* \"#utility.yul\":4375:4377   */\n      dup5\n        /* \"#utility.yul\":4367:4373   */\n      dup4\n        /* \"#utility.yul\":4363:4378   */\n      add\n        /* \"#utility.yul\":4359:4383   */\n      add\n        /* \"#utility.yul\":4352:4387   */\n      mstore\n        /* \"#utility.yul\":4406:4412   */\n      dup1\n        /* \"#utility.yul\":4396:4412   */\n      swap6\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":3423:4418   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4423:4683   */\n    tag_163:\n        /* \"#utility.yul\":4491:4497   */\n      0x00\n        /* \"#utility.yul\":4499:4505   */\n      dup1\n        /* \"#utility.yul\":4552:4554   */\n      0x40\n        /* \"#utility.yul\":4540:4549   */\n      dup4\n        /* \"#utility.yul\":4531:4538   */\n      dup6\n        /* \"#utility.yul\":4527:4550   */\n      sub\n        /* \"#utility.yul\":4523:4555   */\n      slt\n        /* \"#utility.yul\":4520:4572   */\n      iszero\n      tag_626\n      jumpi\n        /* \"#utility.yul\":4568:4569   */\n      0x00\n        /* \"#utility.yul\":4565:4566   */\n      dup1\n        /* \"#utility.yul\":4558:4570   */\n      revert\n        /* \"#utility.yul\":4520:4572   */\n    tag_626:\n        /* \"#utility.yul\":4591:4620   */\n      tag_627\n        /* \"#utility.yul\":4610:4619   */\n      dup4\n        /* \"#utility.yul\":4591:4620   */\n      tag_576\n      jump\t// in\n    tag_627:\n        /* \"#utility.yul\":4581:4620   */\n      swap2\n      pop\n        /* \"#utility.yul\":4639:4677   */\n      tag_607\n        /* \"#utility.yul\":4673:4675   */\n      0x20\n        /* \"#utility.yul\":4662:4671   */\n      dup5\n        /* \"#utility.yul\":4658:4676   */\n      add\n        /* \"#utility.yul\":4639:4677   */\n      tag_576\n      jump\t// in\n        /* \"#utility.yul\":4688:5068   */\n    tag_180:\n        /* \"#utility.yul\":4767:4768   */\n      0x01\n        /* \"#utility.yul\":4763:4775   */\n      dup2\n      dup2\n      shr\n      swap1\n        /* \"#utility.yul\":4810:4822   */\n      dup3\n      and\n      dup1\n        /* \"#utility.yul\":4831:4892   */\n      tag_630\n      jumpi\n        /* \"#utility.yul\":4885:4889   */\n      0x7f\n        /* \"#utility.yul\":4877:4883   */\n      dup3\n        /* \"#utility.yul\":4873:4890   */\n      and\n        /* \"#utility.yul\":4863:4890   */\n      swap2\n      pop\n        /* \"#utility.yul\":4831:4892   */\n    tag_630:\n        /* \"#utility.yul\":4938:4940   */\n      0x20\n        /* \"#utility.yul\":4930:4936   */\n      dup3\n        /* \"#utility.yul\":4927:4941   */\n      lt\n        /* \"#utility.yul\":4907:4925   */\n      dup2\n        /* \"#utility.yul\":4904:4942   */\n      eq\n        /* \"#utility.yul\":4901:5062   */\n      iszero\n      tag_631\n      jumpi\n        /* \"#utility.yul\":4984:4994   */\n      0x4e487b71\n        /* \"#utility.yul\":4979:4982   */\n      0xe0\n        /* \"#utility.yul\":4975:4995   */\n      shl\n        /* \"#utility.yul\":4972:4973   */\n      0x00\n        /* \"#utility.yul\":4965:4996   */\n      mstore\n        /* \"#utility.yul\":5019:5023   */\n      0x22\n        /* \"#utility.yul\":5016:5017   */\n      0x04\n        /* \"#utility.yul\":5009:5024   */\n      mstore\n        /* \"#utility.yul\":5047:5051   */\n      0x24\n        /* \"#utility.yul\":5044:5045   */\n      0x00\n        /* \"#utility.yul\":5037:5052   */\n      revert\n        /* \"#utility.yul\":4901:5062   */\n    tag_631:\n      pop\n        /* \"#utility.yul\":4688:5068   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5489:5897   */\n    tag_216:\n        /* \"#utility.yul\":5691:5693   */\n      0x20\n        /* \"#utility.yul\":5673:5694   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":5730:5732   */\n      0x2c\n        /* \"#utility.yul\":5710:5728   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":5703:5733   */\n      mstore\n        /* \"#utility.yul\":5769:5803   */\n      0x46756e6374696f6e206d7573742062652063616c6c6564207468726f75676820\n        /* \"#utility.yul\":5764:5766   */\n      0x40\n        /* \"#utility.yul\":5749:5767   */\n      dup3\n      add\n        /* \"#utility.yul\":5742:5804   */\n      mstore\n      shl(0xa2, 0x19195b1959d85d1958d85b1b)\n        /* \"#utility.yul\":5835:5837   */\n      0x60\n        /* \"#utility.yul\":5820:5838   */\n      dup3\n      add\n        /* \"#utility.yul\":5813:5855   */\n      mstore\n        /* \"#utility.yul\":5887:5890   */\n      0x80\n        /* \"#utility.yul\":5872:5891   */\n      add\n      swap1\n        /* \"#utility.yul\":5489:5897   */\n      jump\t// out\n        /* \"#utility.yul\":5902:6310   */\n    tag_221:\n        /* \"#utility.yul\":6104:6106   */\n      0x20\n        /* \"#utility.yul\":6086:6107   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":6143:6145   */\n      0x2c\n        /* \"#utility.yul\":6123:6141   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":6116:6146   */\n      mstore\n        /* \"#utility.yul\":6182:6216   */\n      0x46756e6374696f6e206d7573742062652063616c6c6564207468726f75676820\n        /* \"#utility.yul\":6177:6179   */\n      0x40\n        /* \"#utility.yul\":6162:6180   */\n      dup3\n      add\n        /* \"#utility.yul\":6155:6217   */\n      mstore\n      shl(0xa0, 0x6163746976652070726f7879)\n        /* \"#utility.yul\":6248:6250   */\n      0x60\n        /* \"#utility.yul\":6233:6251   */\n      dup3\n      add\n        /* \"#utility.yul\":6226:6268   */\n      mstore\n        /* \"#utility.yul\":6300:6303   */\n      0x80\n        /* \"#utility.yul\":6285:6304   */\n      add\n      swap1\n        /* \"#utility.yul\":5902:6310   */\n      jump\t// out\n        /* \"#utility.yul\":6315:6442   */\n    tag_577:\n        /* \"#utility.yul\":6376:6386   */\n      0x4e487b71\n        /* \"#utility.yul\":6371:6374   */\n      0xe0\n        /* \"#utility.yul\":6367:6387   */\n      shl\n        /* \"#utility.yul\":6364:6365   */\n      0x00\n        /* \"#utility.yul\":6357:6388   */\n      mstore\n        /* \"#utility.yul\":6407:6411   */\n      0x11\n        /* \"#utility.yul\":6404:6405   */\n      0x04\n        /* \"#utility.yul\":6397:6412   */\n      mstore\n        /* \"#utility.yul\":6431:6435   */\n      0x24\n        /* \"#utility.yul\":6428:6429   */\n      0x00\n        /* \"#utility.yul\":6421:6436   */\n      revert\n        /* \"#utility.yul\":6447:6575   */\n    tag_236:\n        /* \"#utility.yul\":6487:6490   */\n      0x00\n        /* \"#utility.yul\":6518:6519   */\n      dup3\n        /* \"#utility.yul\":6514:6520   */\n      not\n        /* \"#utility.yul\":6511:6512   */\n      dup3\n        /* \"#utility.yul\":6508:6521   */\n      gt\n        /* \"#utility.yul\":6505:6544   */\n      iszero\n      tag_638\n      jumpi\n        /* \"#utility.yul\":6524:6542   */\n      tag_638\n      tag_577\n      jump\t// in\n    tag_638:\n      pop\n        /* \"#utility.yul\":6560:6569   */\n      add\n      swap1\n        /* \"#utility.yul\":6447:6575   */\n      jump\t// out\n        /* \"#utility.yul\":7420:7842   */\n    tag_578:\n        /* \"#utility.yul\":7509:7510   */\n      0x01\n        /* \"#utility.yul\":7552:7557   */\n      dup2\n        /* \"#utility.yul\":7509:7510   */\n      dup2\n        /* \"#utility.yul\":7566:7836   */\n    tag_642:\n        /* \"#utility.yul\":7587:7594   */\n      dup1\n        /* \"#utility.yul\":7577:7585   */\n      dup6\n        /* \"#utility.yul\":7574:7595   */\n      gt\n        /* \"#utility.yul\":7566:7836   */\n      iszero\n      tag_644\n      jumpi\n        /* \"#utility.yul\":7646:7650   */\n      dup2\n        /* \"#utility.yul\":7642:7643   */\n      0x00\n        /* \"#utility.yul\":7638:7644   */\n      not\n        /* \"#utility.yul\":7634:7651   */\n      div\n        /* \"#utility.yul\":7628:7632   */\n      dup3\n        /* \"#utility.yul\":7625:7652   */\n      gt\n        /* \"#utility.yul\":7622:7675   */\n      iszero\n      tag_646\n      jumpi\n        /* \"#utility.yul\":7655:7673   */\n      tag_646\n      tag_577\n      jump\t// in\n    tag_646:\n        /* \"#utility.yul\":7705:7712   */\n      dup1\n        /* \"#utility.yul\":7695:7703   */\n      dup6\n        /* \"#utility.yul\":7691:7713   */\n      and\n        /* \"#utility.yul\":7688:7743   */\n      iszero\n      tag_647\n      jumpi\n        /* \"#utility.yul\":7725:7741   */\n      swap2\n      dup2\n      mul\n      swap2\n        /* \"#utility.yul\":7688:7743   */\n    tag_647:\n        /* \"#utility.yul\":7804:7826   */\n      swap4\n      dup5\n      shr\n      swap4\n        /* \"#utility.yul\":7764:7779   */\n      swap1\n      dup1\n      mul\n      swap1\n        /* \"#utility.yul\":7566:7836   */\n      jump(tag_642)\n    tag_644:\n        /* \"#utility.yul\":7570:7573   */\n      pop\n        /* \"#utility.yul\":7420:7842   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7847:8653   */\n    tag_579:\n        /* \"#utility.yul\":7896:7901   */\n      0x00\n        /* \"#utility.yul\":7926:7934   */\n      dup3\n        /* \"#utility.yul\":7916:7996   */\n      tag_649\n      jumpi\n      pop\n        /* \"#utility.yul\":7967:7968   */\n      0x01\n        /* \"#utility.yul\":7981:7986   */\n      jump(tag_176)\n        /* \"#utility.yul\":7916:7996   */\n    tag_649:\n        /* \"#utility.yul\":8015:8019   */\n      dup2\n        /* \"#utility.yul\":8005:8081   */\n      tag_650\n      jumpi\n      pop\n        /* \"#utility.yul\":8052:8053   */\n      0x00\n        /* \"#utility.yul\":8066:8071   */\n      jump(tag_176)\n        /* \"#utility.yul\":8005:8081   */\n    tag_650:\n        /* \"#utility.yul\":8097:8101   */\n      dup2\n        /* \"#utility.yul\":8115:8116   */\n      0x01\n        /* \"#utility.yul\":8110:8169   */\n      dup2\n      eq\n      tag_652\n      jumpi\n        /* \"#utility.yul\":8183:8184   */\n      0x02\n        /* \"#utility.yul\":8178:8308   */\n      dup2\n      eq\n      tag_653\n      jumpi\n        /* \"#utility.yul\":8090:8308   */\n      jump(tag_651)\n        /* \"#utility.yul\":8110:8169   */\n    tag_652:\n        /* \"#utility.yul\":8140:8141   */\n      0x01\n        /* \"#utility.yul\":8131:8141   */\n      swap2\n      pop\n        /* \"#utility.yul\":8154:8159   */\n      pop\n      jump(tag_176)\n        /* \"#utility.yul\":8178:8308   */\n    tag_653:\n        /* \"#utility.yul\":8215:8218   */\n      0xff\n        /* \"#utility.yul\":8205:8213   */\n      dup5\n        /* \"#utility.yul\":8202:8219   */\n      gt\n        /* \"#utility.yul\":8199:8242   */\n      iszero\n      tag_655\n      jumpi\n        /* \"#utility.yul\":8222:8240   */\n      tag_655\n      tag_577\n      jump\t// in\n    tag_655:\n      pop\n      pop\n        /* \"#utility.yul\":8278:8279   */\n      0x01\n        /* \"#utility.yul\":8264:8280   */\n      dup3\n      shl\n        /* \"#utility.yul\":8293:8298   */\n      jump(tag_176)\n        /* \"#utility.yul\":8090:8308   */\n    tag_651:\n      pop\n        /* \"#utility.yul\":8392:8394   */\n      0x20\n        /* \"#utility.yul\":8382:8390   */\n      dup4\n        /* \"#utility.yul\":8379:8395   */\n      lt\n        /* \"#utility.yul\":8373:8376   */\n      0x0133\n        /* \"#utility.yul\":8367:8371   */\n      dup4\n        /* \"#utility.yul\":8364:8377   */\n      lt\n        /* \"#utility.yul\":8360:8396   */\n      and\n        /* \"#utility.yul\":8354:8356   */\n      0x4e\n        /* \"#utility.yul\":8344:8352   */\n      dup5\n        /* \"#utility.yul\":8341:8357   */\n      lt\n        /* \"#utility.yul\":8336:8338   */\n      0x0b\n        /* \"#utility.yul\":8330:8334   */\n      dup5\n        /* \"#utility.yul\":8327:8339   */\n      lt\n        /* \"#utility.yul\":8323:8358   */\n      and\n        /* \"#utility.yul\":8320:8397   */\n      or\n        /* \"#utility.yul\":8317:8476   */\n      iszero\n      tag_656\n      jumpi\n      pop\n        /* \"#utility.yul\":8429:8448   */\n      dup2\n      dup2\n      exp\n        /* \"#utility.yul\":8461:8466   */\n      jump(tag_176)\n        /* \"#utility.yul\":8317:8476   */\n    tag_656:\n        /* \"#utility.yul\":8508:8542   */\n      tag_657\n        /* \"#utility.yul\":8533:8541   */\n      dup4\n        /* \"#utility.yul\":8527:8531   */\n      dup4\n        /* \"#utility.yul\":8508:8542   */\n      tag_578\n      jump\t// in\n    tag_657:\n        /* \"#utility.yul\":8578:8584   */\n      dup1\n        /* \"#utility.yul\":8574:8575   */\n      0x00\n        /* \"#utility.yul\":8570:8576   */\n      not\n        /* \"#utility.yul\":8566:8585   */\n      div\n        /* \"#utility.yul\":8557:8564   */\n      dup3\n        /* \"#utility.yul\":8554:8586   */\n      gt\n        /* \"#utility.yul\":8551:8609   */\n      iszero\n      tag_659\n      jumpi\n        /* \"#utility.yul\":8589:8607   */\n      tag_659\n      tag_577\n      jump\t// in\n    tag_659:\n        /* \"#utility.yul\":8627:8647   */\n      mul\n      swap4\n        /* \"#utility.yul\":7847:8653   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8658:8798   */\n    tag_292:\n        /* \"#utility.yul\":8716:8721   */\n      0x00\n        /* \"#utility.yul\":8745:8792   */\n      tag_535\n        /* \"#utility.yul\":8786:8790   */\n      0xff\n        /* \"#utility.yul\":8776:8784   */\n      dup5\n        /* \"#utility.yul\":8772:8791   */\n      and\n        /* \"#utility.yul\":8766:8770   */\n      dup4\n        /* \"#utility.yul\":8745:8792   */\n      tag_579\n      jump\t// in\n        /* \"#utility.yul\":8803:8971   */\n    tag_294:\n        /* \"#utility.yul\":8843:8850   */\n      0x00\n        /* \"#utility.yul\":8909:8910   */\n      dup2\n        /* \"#utility.yul\":8905:8906   */\n      0x00\n        /* \"#utility.yul\":8901:8907   */\n      not\n        /* \"#utility.yul\":8897:8911   */\n      div\n        /* \"#utility.yul\":8894:8895   */\n      dup4\n        /* \"#utility.yul\":8891:8912   */\n      gt\n        /* \"#utility.yul\":8886:8887   */\n      dup3\n        /* \"#utility.yul\":8879:8888   */\n      iszero\n        /* \"#utility.yul\":8872:8889   */\n      iszero\n        /* \"#utility.yul\":8868:8913   */\n      and\n        /* \"#utility.yul\":8865:8936   */\n      iszero\n      tag_664\n      jumpi\n        /* \"#utility.yul\":8916:8934   */\n      tag_664\n      tag_577\n      jump\t// in\n    tag_664:\n      pop\n        /* \"#utility.yul\":8956:8965   */\n      mul\n      swap1\n        /* \"#utility.yul\":8803:8971   */\n      jump\t// out\n        /* \"#utility.yul\":11964:12148   */\n    tag_388:\n        /* \"#utility.yul\":12034:12040   */\n      0x00\n        /* \"#utility.yul\":12087:12089   */\n      0x20\n        /* \"#utility.yul\":12075:12084   */\n      dup3\n        /* \"#utility.yul\":12066:12073   */\n      dup5\n        /* \"#utility.yul\":12062:12085   */\n      sub\n        /* \"#utility.yul\":12058:12090   */\n      slt\n        /* \"#utility.yul\":12055:12107   */\n      iszero\n      tag_674\n      jumpi\n        /* \"#utility.yul\":12103:12104   */\n      0x00\n        /* \"#utility.yul\":12100:12101   */\n      dup1\n        /* \"#utility.yul\":12093:12105   */\n      revert\n        /* \"#utility.yul\":12055:12107   */\n    tag_674:\n      pop\n        /* \"#utility.yul\":12126:12142   */\n      mload\n      swap2\n        /* \"#utility.yul\":11964:12148   */\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":13991:14398   */\n    tag_422:\n        /* \"#utility.yul\":14193:14195   */\n      0x20\n        /* \"#utility.yul\":14175:14196   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":14232:14234   */\n      0x2b\n        /* \"#utility.yul\":14212:14230   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":14205:14235   */\n      mstore\n        /* \"#utility.yul\":14271:14305   */\n      0x496e697469616c697a61626c653a20636f6e7472616374206973206e6f742069\n        /* \"#utility.yul\":14266:14268   */\n      0x40\n        /* \"#utility.yul\":14251:14269   */\n      dup3\n      add\n        /* \"#utility.yul\":14244:14306   */\n      mstore\n      shl(0xa8, 0x6e697469616c697a696e67)\n        /* \"#utility.yul\":14337:14339   */\n      0x60\n        /* \"#utility.yul\":14322:14340   */\n      dup3\n      add\n        /* \"#utility.yul\":14315:14356   */\n      mstore\n        /* \"#utility.yul\":14388:14391   */\n      0x80\n        /* \"#utility.yul\":14373:14392   */\n      add\n      swap1\n        /* \"#utility.yul\":13991:14398   */\n      jump\t// out\n        /* \"#utility.yul\":14763:15549   */\n    tag_472:\n        /* \"#utility.yul\":15174:15199   */\n      0x416363657373436f6e74726f6c3a206163636f756e7420000000000000000000\n        /* \"#utility.yul\":15169:15172   */\n      dup2\n        /* \"#utility.yul\":15162:15200   */\n      mstore\n        /* \"#utility.yul\":15144:15147   */\n      0x00\n        /* \"#utility.yul\":15229:15235   */\n      dup4\n        /* \"#utility.yul\":15223:15236   */\n      mload\n        /* \"#utility.yul\":15245:15307   */\n      tag_683\n        /* \"#utility.yul\":15300:15306   */\n      dup2\n        /* \"#utility.yul\":15295:15297   */\n      0x17\n        /* \"#utility.yul\":15290:15293   */\n      dup6\n        /* \"#utility.yul\":15286:15298   */\n      add\n        /* \"#utility.yul\":15279:15283   */\n      0x20\n        /* \"#utility.yul\":15271:15277   */\n      dup9\n        /* \"#utility.yul\":15267:15284   */\n      add\n        /* \"#utility.yul\":15245:15307   */\n      tag_575\n      jump\t// in\n    tag_683:\n      shl(0x7d, 0x01034b99036b4b9b9b4b733903937b6329)\n        /* \"#utility.yul\":15366:15368   */\n      0x17\n        /* \"#utility.yul\":15326:15342   */\n      swap2\n      dup5\n      add\n        /* \"#utility.yul\":15358:15369   */\n      swap2\n      dup3\n      add\n        /* \"#utility.yul\":15351:15391   */\n      mstore\n        /* \"#utility.yul\":15416:15429   */\n      dup4\n      mload\n        /* \"#utility.yul\":15438:15501   */\n      tag_684\n        /* \"#utility.yul\":15416:15429   */\n      dup2\n        /* \"#utility.yul\":15487:15489   */\n      0x28\n        /* \"#utility.yul\":15479:15490   */\n      dup5\n      add\n        /* \"#utility.yul\":15472:15476   */\n      0x20\n        /* \"#utility.yul\":15460:15477   */\n      dup9\n      add\n        /* \"#utility.yul\":15438:15501   */\n      tag_575\n      jump\t// in\n    tag_684:\n        /* \"#utility.yul\":15521:15538   */\n      add\n        /* \"#utility.yul\":15540:15542   */\n      0x28\n        /* \"#utility.yul\":15517:15543   */\n      add\n      swap5\n        /* \"#utility.yul\":14763:15549   */\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":16662:16789   */\n    tag_521:\n        /* \"#utility.yul\":16723:16733   */\n      0x4e487b71\n        /* \"#utility.yul\":16718:16721   */\n      0xe0\n        /* \"#utility.yul\":16714:16734   */\n      shl\n        /* \"#utility.yul\":16711:16712   */\n      0x00\n        /* \"#utility.yul\":16704:16735   */\n      mstore\n        /* \"#utility.yul\":16754:16758   */\n      0x32\n        /* \"#utility.yul\":16751:16752   */\n      0x04\n        /* \"#utility.yul\":16744:16759   */\n      mstore\n        /* \"#utility.yul\":16778:16782   */\n      0x24\n        /* \"#utility.yul\":16775:16776   */\n      0x00\n        /* \"#utility.yul\":16768:16783   */\n      revert\n        /* \"#utility.yul\":16794:16930   */\n    tag_534:\n        /* \"#utility.yul\":16833:16836   */\n      0x00\n        /* \"#utility.yul\":16861:16866   */\n      dup2\n        /* \"#utility.yul\":16851:16890   */\n      tag_691\n      jumpi\n        /* \"#utility.yul\":16870:16888   */\n      tag_691\n      tag_577\n      jump\t// in\n    tag_691:\n      pop\n      not(0x00)\n        /* \"#utility.yul\":16906:16924   */\n      add\n      swap1\n        /* \"#utility.yul\":16794:16930   */\n      jump\t// out\n        /* \"#utility.yul\":17296:17570   */\n    tag_545:\n        /* \"#utility.yul\":17425:17428   */\n      0x00\n        /* \"#utility.yul\":17463:17469   */\n      dup3\n        /* \"#utility.yul\":17457:17470   */\n      mload\n        /* \"#utility.yul\":17479:17532   */\n      tag_694\n        /* \"#utility.yul\":17525:17531   */\n      dup2\n        /* \"#utility.yul\":17520:17523   */\n      dup5\n        /* \"#utility.yul\":17513:17517   */\n      0x20\n        /* \"#utility.yul\":17505:17511   */\n      dup8\n        /* \"#utility.yul\":17501:17518   */\n      add\n        /* \"#utility.yul\":17479:17532   */\n      tag_575\n      jump\t// in\n    tag_694:\n        /* \"#utility.yul\":17548:17564   */\n      swap2\n      swap1\n      swap2\n      add\n      swap3\n        /* \"#utility.yul\":17296:17570   */\n      swap2\n      pop\n      pop\n      jump\t// out\n    stop\n    data_75b20eef8615de99c108b05f0dbda081c91897128caa336d75dffb97c4132b4d 360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc\n    data_9b87106a812d214d41ad9b68a21119e2948eaaf1040375c939ec808b8862455c 65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a\n    data_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398 416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564\n\n    auxdata: 0xa2646970667358221220c026e58ae13b5c64482eb691d8013675b76b325e89fca4ee10252d5638ff4c0c64736f6c63430008090033\n}\n",
						"bytecode": {
							"functionDebugData": {
								"@_3761": {
									"entryPoint": null,
									"id": 3761,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_disableInitializers_923": {
									"entryPoint": 34,
									"id": 923,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"abi_encode_tuple_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:608:22",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:22",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "188:229:22",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "205:9:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "216:2:22",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "198:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "198:21:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "198:21:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "239:9:22"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "250:2:22",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "235:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "235:18:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "255:2:22",
																		"type": "",
																		"value": "39"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "228:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "228:30:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "228:30:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "278:9:22"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "289:2:22",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "274:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "274:18:22"
																	},
																	{
																		"hexValue": "496e697469616c697a61626c653a20636f6e747261637420697320696e697469",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "294:34:22",
																		"type": "",
																		"value": "Initializable: contract is initi"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "267:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "267:62:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "267:62:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "349:9:22"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "360:2:22",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "345:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "345:18:22"
																	},
																	{
																		"hexValue": "616c697a696e67",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "365:9:22",
																		"type": "",
																		"value": "alizing"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "338:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "338:37:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "338:37:22"
														},
														{
															"nodeType": "YulAssignment",
															"src": "384:27:22",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "396:9:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "407:3:22",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "392:3:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "392:19:22"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "384:4:22"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "165:9:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "179:4:22",
														"type": ""
													}
												],
												"src": "14:403:22"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "519:87:22",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "529:26:22",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "541:9:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "552:2:22",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "537:3:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "537:18:22"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "529:4:22"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "571:9:22"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "586:6:22"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "594:4:22",
																				"type": "",
																				"value": "0xff"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "582:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "582:17:22"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "564:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "564:36:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "564:36:22"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "488:9:22",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "499:6:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "510:4:22",
														"type": ""
													}
												],
												"src": "422:184:22"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_encode_tuple_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 39)\n        mstore(add(headStart, 64), \"Initializable: contract is initi\")\n        mstore(add(headStart, 96), \"alizing\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n}",
									"id": 22,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"linkReferences": {},
							"object": "60a06040523060805234801561001457600080fd5b5061001d610022565b6100e1565b600054610100900460ff161561008e5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff908116146100df576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b608051612236620001196000396000818161071d0152818161075d0152818161084901528181610889015261091801526122366000f3fe6080604052600436106101c25760003560e01c806352d1902d116100f757806395d89b4111610095578063d547741f11610064578063d547741f146104ca578063dd62ed3e146104ea578063e63ab1e91461050a578063f72c0d8b1461052c57600080fd5b806395d89b4114610460578063a217fddf14610475578063a457c2d71461048a578063a9059cbb146104aa57600080fd5b806379cc6790116100d157806379cc6790146103f65780638129fc1c146104165780638456cb591461042b57806391d148541461044057600080fd5b806352d1902d146103935780635c975abb146103a857806370a08231146103c057600080fd5b8063313ce56711610164578063395093511161013e578063395093511461032b5780633f4ba83a1461034b57806342966c68146103605780634f1ef2861461038057600080fd5b8063313ce567146102cf57806336568abe146102eb5780633659cfe61461030b57600080fd5b806318160ddd116101a057806318160ddd1461023e57806323b872dd1461025d578063248a9ca31461027d5780632f2ff15d146102ad57600080fd5b806301ffc9a7146101c757806306fdde03146101fc578063095ea7b31461021e575b600080fd5b3480156101d357600080fd5b506101e76101e2366004611bf7565b610560565b60405190151581526020015b60405180910390f35b34801561020857600080fd5b50610211610597565b6040516101f39190611c4d565b34801561022a57600080fd5b506101e7610239366004611c9c565b610629565b34801561024a57600080fd5b506035545b6040519081526020016101f3565b34801561026957600080fd5b506101e7610278366004611cc6565b610641565b34801561028957600080fd5b5061024f610298366004611d02565b600090815260fb602052604090206001015490565b3480156102b957600080fd5b506102cd6102c8366004611d1b565b610665565b005b3480156102db57600080fd5b50604051601281526020016101f3565b3480156102f757600080fd5b506102cd610306366004611d1b565b61068f565b34801561031757600080fd5b506102cd610326366004611d47565b610712565b34801561033757600080fd5b506101e7610346366004611c9c565b6107f2565b34801561035757600080fd5b506102cd610814565b34801561036c57600080fd5b506102cd61037b366004611d02565b610834565b6102cd61038e366004611d78565b61083e565b34801561039f57600080fd5b5061024f61090b565b3480156103b457600080fd5b5060975460ff166101e7565b3480156103cc57600080fd5b5061024f6103db366004611d47565b6001600160a01b031660009081526033602052604090205490565b34801561040257600080fd5b506102cd610411366004611c9c565b6109be565b34801561042257600080fd5b506102cd6109d3565b34801561043757600080fd5b506102cd610bb0565b34801561044c57600080fd5b506101e761045b366004611d1b565b610bd0565b34801561046c57600080fd5b50610211610bfb565b34801561048157600080fd5b5061024f600081565b34801561049657600080fd5b506101e76104a5366004611c9c565b610c0a565b3480156104b657600080fd5b506101e76104c5366004611c9c565b610c85565b3480156104d657600080fd5b506102cd6104e5366004611d1b565b610c93565b3480156104f657600080fd5b5061024f610505366004611e3a565b610cb8565b34801561051657600080fd5b5061024f6000805160206121ba83398151915281565b34801561053857600080fd5b5061024f7f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e381565b60006001600160e01b03198216637965db0b60e01b148061059157506301ffc9a760e01b6001600160e01b03198316145b92915050565b6060603680546105a690611e64565b80601f01602080910402602001604051908101604052809291908181526020018280546105d290611e64565b801561061f5780601f106105f45761010080835404028352916020019161061f565b820191906000526020600020905b81548152906001019060200180831161060257829003601f168201915b5050505050905090565b600033610637818585610ce3565b5060019392505050565b60003361064f858285610e07565b61065a858585610e81565b506001949350505050565b600082815260fb602052604090206001015461068081611037565b61068a8383611041565b505050565b6001600160a01b03811633146107045760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b61070e82826110c7565b5050565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016141561075b5760405162461bcd60e51b81526004016106fb90611e9f565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166107a460008051602061219a833981519152546001600160a01b031690565b6001600160a01b0316146107ca5760405162461bcd60e51b81526004016106fb90611eeb565b6107d38161112e565b604080516000808252602082019092526107ef91839190611158565b50565b6000336106378185856108058383610cb8565b61080f9190611f4d565b610ce3565b6000805160206121ba83398151915261082c81611037565b6107ef6112d2565b6107ef3382611324565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156108875760405162461bcd60e51b81526004016106fb90611e9f565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166108d060008051602061219a833981519152546001600160a01b031690565b6001600160a01b0316146108f65760405162461bcd60e51b81526004016106fb90611eeb565b6108ff8261112e565b61070e82826001611158565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146109ab5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c000000000000000060648201526084016106fb565b5060008051602061219a83398151915290565b6109c9823383610e07565b61070e8282611324565b600054610100900460ff16158080156109f35750600054600160ff909116105b80610a0d5750303b158015610a0d575060005460ff166001145b610a705760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016106fb565b6000805460ff191660011790558015610a93576000805461ff0019166101001790555b610ad8604051806040016040528060078152602001665052415858495360c81b815250604051806040016040528060048152602001630a082b0b60e31b815250611464565b610ae0611495565b610ae86114be565b610af0611495565b610af8611495565b610b03600033611041565b610b1b6000805160206121ba83398151915233611041565b610b3e33610b2b6012600a612049565b610b3990633b9aca00612058565b6114ed565b610b687f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e333611041565b80156107ef576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a150565b6000805160206121ba833981519152610bc881611037565b6107ef6115ba565b600091825260fb602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6060603780546105a690611e64565b60003381610c188286610cb8565b905083811015610c785760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084016106fb565b61065a8286868403610ce3565b600033610637818585610e81565b600082815260fb6020526040902060010154610cae81611037565b61068a83836110c7565b6001600160a01b03918216600090815260346020908152604080832093909416825291909152205490565b6001600160a01b038316610d455760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016106fb565b6001600160a01b038216610da65760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016106fb565b6001600160a01b0383811660008181526034602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6000610e138484610cb8565b90506000198114610e7b5781811015610e6e5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060448201526064016106fb565b610e7b8484848403610ce3565b50505050565b6001600160a01b038316610ee55760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016106fb565b6001600160a01b038216610f475760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016106fb565b610f528383836115f7565b6001600160a01b03831660009081526033602052604090205481811015610fca5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016106fb565b6001600160a01b0380851660008181526033602052604080822086860390559286168082529083902080548601905591517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9061102a9086815260200190565b60405180910390a3610e7b565b6107ef81336115ff565b61104b8282610bd0565b61070e57600082815260fb602090815260408083206001600160a01b03851684529091529020805460ff191660011790556110833390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6110d18282610bd0565b1561070e57600082815260fb602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b7f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e361070e81611037565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff161561118b5761068a83611658565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b1580156111c457600080fd5b505afa9250505080156111f4575060408051601f3d908101601f191682019092526111f191810190612077565b60015b6112575760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b60648201526084016106fb565b60008051602061219a83398151915281146112c65760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b60648201526084016106fb565b5061068a8383836116f4565b6112da611719565b6097805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6001600160a01b0382166113845760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b60648201526084016106fb565b611390826000836115f7565b6001600160a01b038216600090815260336020526040902054818110156114045760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b60648201526084016106fb565b6001600160a01b03831660008181526033602090815260408083208686039055603580548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3505050565b600054610100900460ff1661148b5760405162461bcd60e51b81526004016106fb90612090565b61070e8282611762565b600054610100900460ff166114bc5760405162461bcd60e51b81526004016106fb90612090565b565b600054610100900460ff166114e55760405162461bcd60e51b81526004016106fb90612090565b6114bc6117b0565b6001600160a01b0382166115435760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016106fb565b61154f600083836115f7565b80603560008282546115619190611f4d565b90915550506001600160a01b0382166000818152603360209081526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b6115c26117e3565b6097805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586113073390565b61068a6117e3565b6116098282610bd0565b61070e5761161681611829565b61162183602061183b565b6040516020016116329291906120db565b60408051601f198184030181529082905262461bcd60e51b82526106fb91600401611c4d565b6001600160a01b0381163b6116c55760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016106fb565b60008051602061219a83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6116fd836119de565b60008251118061170a5750805b1561068a57610e7b8383611a1e565b60975460ff166114bc5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016106fb565b600054610100900460ff166117895760405162461bcd60e51b81526004016106fb90612090565b815161179c906036906020850190611b5e565b50805161068a906037906020840190611b5e565b600054610100900460ff166117d75760405162461bcd60e51b81526004016106fb90612090565b6097805460ff19169055565b60975460ff16156114bc5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016106fb565b60606105916001600160a01b03831660145b6060600061184a836002612058565b611855906002611f4d565b67ffffffffffffffff81111561186d5761186d611d62565b6040519080825280601f01601f191660200182016040528015611897576020820181803683370190505b509050600360fc1b816000815181106118b2576118b2612150565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106118e1576118e1612150565b60200101906001600160f81b031916908160001a9053506000611905846002612058565b611910906001611f4d565b90505b6001811115611988576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061194457611944612150565b1a60f81b82828151811061195a5761195a612150565b60200101906001600160f81b031916908160001a90535060049490941c9361198181612166565b9050611913565b5083156119d75760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016106fb565b9392505050565b6119e781611658565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606119d783836040518060600160405280602781526020016121da602791396060600080856001600160a01b031685604051611a5b919061217d565b600060405180830381855af49150503d8060008114611a96576040519150601f19603f3d011682016040523d82523d6000602084013e611a9b565b606091505b5091509150611aac86838387611ab6565b9695505050505050565b60608315611b22578251611b1b576001600160a01b0385163b611b1b5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016106fb565b5081611b2c565b611b2c8383611b34565b949350505050565b815115611b445781518083602001fd5b8060405162461bcd60e51b81526004016106fb9190611c4d565b828054611b6a90611e64565b90600052602060002090601f016020900481019282611b8c5760008555611bd2565b82601f10611ba557805160ff1916838001178555611bd2565b82800160010185558215611bd2579182015b82811115611bd2578251825591602001919060010190611bb7565b50611bde929150611be2565b5090565b5b80821115611bde5760008155600101611be3565b600060208284031215611c0957600080fd5b81356001600160e01b0319811681146119d757600080fd5b60005b83811015611c3c578181015183820152602001611c24565b83811115610e7b5750506000910152565b6020815260008251806020840152611c6c816040850160208701611c21565b601f01601f19169190910160400192915050565b80356001600160a01b0381168114611c9757600080fd5b919050565b60008060408385031215611caf57600080fd5b611cb883611c80565b946020939093013593505050565b600080600060608486031215611cdb57600080fd5b611ce484611c80565b9250611cf260208501611c80565b9150604084013590509250925092565b600060208284031215611d1457600080fd5b5035919050565b60008060408385031215611d2e57600080fd5b82359150611d3e60208401611c80565b90509250929050565b600060208284031215611d5957600080fd5b6119d782611c80565b634e487b7160e01b600052604160045260246000fd5b60008060408385031215611d8b57600080fd5b611d9483611c80565b9150602083013567ffffffffffffffff80821115611db157600080fd5b818501915085601f830112611dc557600080fd5b813581811115611dd757611dd7611d62565b604051601f8201601f19908116603f01168101908382118183101715611dff57611dff611d62565b81604052828152886020848701011115611e1857600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b60008060408385031215611e4d57600080fd5b611e5683611c80565b9150611d3e60208401611c80565b600181811c90821680611e7857607f821691505b60208210811415611e9957634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b60008219821115611f6057611f60611f37565b500190565b600181815b80851115611fa0578160001904821115611f8657611f86611f37565b80851615611f9357918102915b93841c9390800290611f6a565b509250929050565b600082611fb757506001610591565b81611fc457506000610591565b8160018114611fda5760028114611fe457612000565b6001915050610591565b60ff841115611ff557611ff5611f37565b50506001821b610591565b5060208310610133831016604e8410600b8410161715612023575081810a610591565b61202d8383611f65565b806000190482111561204157612041611f37565b029392505050565b60006119d760ff841683611fa8565b600081600019048311821515161561207257612072611f37565b500290565b60006020828403121561208957600080fd5b5051919050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612113816017850160208801611c21565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351612144816028840160208801611c21565b01602801949350505050565b634e487b7160e01b600052603260045260246000fd5b60008161217557612175611f37565b506000190190565b6000825161218f818460208701611c21565b919091019291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220c026e58ae13b5c64482eb691d8013675b76b325e89fca4ee10252d5638ff4c0c64736f6c63430008090033",
							"opcodes": "PUSH1 0xA0 PUSH1 0x40 MSTORE ADDRESS PUSH1 0x80 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x14 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1D PUSH2 0x22 JUMP JUMPDEST PUSH2 0xE1 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x8E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x27 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320696E697469 PUSH1 0x44 DUP3 ADD MSTORE PUSH7 0x616C697A696E67 PUSH1 0xC8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 SLOAD PUSH1 0xFF SWAP1 DUP2 AND EQ PUSH2 0xDF JUMPI PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0xFF SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH2 0x2236 PUSH3 0x119 PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH2 0x71D ADD MSTORE DUP2 DUP2 PUSH2 0x75D ADD MSTORE DUP2 DUP2 PUSH2 0x849 ADD MSTORE DUP2 DUP2 PUSH2 0x889 ADD MSTORE PUSH2 0x918 ADD MSTORE PUSH2 0x2236 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1C2 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x52D1902D GT PUSH2 0xF7 JUMPI DUP1 PUSH4 0x95D89B41 GT PUSH2 0x95 JUMPI DUP1 PUSH4 0xD547741F GT PUSH2 0x64 JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x4CA JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x4EA JUMPI DUP1 PUSH4 0xE63AB1E9 EQ PUSH2 0x50A JUMPI DUP1 PUSH4 0xF72C0D8B EQ PUSH2 0x52C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x460 JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x475 JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x48A JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x4AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x79CC6790 GT PUSH2 0xD1 JUMPI DUP1 PUSH4 0x79CC6790 EQ PUSH2 0x3F6 JUMPI DUP1 PUSH4 0x8129FC1C EQ PUSH2 0x416 JUMPI DUP1 PUSH4 0x8456CB59 EQ PUSH2 0x42B JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x440 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x52D1902D EQ PUSH2 0x393 JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x3A8 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x3C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x313CE567 GT PUSH2 0x164 JUMPI DUP1 PUSH4 0x39509351 GT PUSH2 0x13E JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x32B JUMPI DUP1 PUSH4 0x3F4BA83A EQ PUSH2 0x34B JUMPI DUP1 PUSH4 0x42966C68 EQ PUSH2 0x360 JUMPI DUP1 PUSH4 0x4F1EF286 EQ PUSH2 0x380 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x313CE567 EQ PUSH2 0x2CF JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x2EB JUMPI DUP1 PUSH4 0x3659CFE6 EQ PUSH2 0x30B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x18160DDD GT PUSH2 0x1A0 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x23E JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x25D JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0x27D JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x2AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x1C7 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x1FC JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x21E JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1E7 PUSH2 0x1E2 CALLDATASIZE PUSH1 0x4 PUSH2 0x1BF7 JUMP JUMPDEST PUSH2 0x560 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x208 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x211 PUSH2 0x597 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1F3 SWAP2 SWAP1 PUSH2 0x1C4D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x22A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1E7 PUSH2 0x239 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C9C JUMP JUMPDEST PUSH2 0x629 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x24A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x35 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1F3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x269 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1E7 PUSH2 0x278 CALLDATASIZE PUSH1 0x4 PUSH2 0x1CC6 JUMP JUMPDEST PUSH2 0x641 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x289 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x24F PUSH2 0x298 CALLDATASIZE PUSH1 0x4 PUSH2 0x1D02 JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xFB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2B9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2CD PUSH2 0x2C8 CALLDATASIZE PUSH1 0x4 PUSH2 0x1D1B JUMP JUMPDEST PUSH2 0x665 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1F3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2F7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2CD PUSH2 0x306 CALLDATASIZE PUSH1 0x4 PUSH2 0x1D1B JUMP JUMPDEST PUSH2 0x68F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x317 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2CD PUSH2 0x326 CALLDATASIZE PUSH1 0x4 PUSH2 0x1D47 JUMP JUMPDEST PUSH2 0x712 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x337 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1E7 PUSH2 0x346 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C9C JUMP JUMPDEST PUSH2 0x7F2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x357 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2CD PUSH2 0x814 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x36C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2CD PUSH2 0x37B CALLDATASIZE PUSH1 0x4 PUSH2 0x1D02 JUMP JUMPDEST PUSH2 0x834 JUMP JUMPDEST PUSH2 0x2CD PUSH2 0x38E CALLDATASIZE PUSH1 0x4 PUSH2 0x1D78 JUMP JUMPDEST PUSH2 0x83E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x39F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x24F PUSH2 0x90B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x97 SLOAD PUSH1 0xFF AND PUSH2 0x1E7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x24F PUSH2 0x3DB CALLDATASIZE PUSH1 0x4 PUSH2 0x1D47 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x402 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2CD PUSH2 0x411 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C9C JUMP JUMPDEST PUSH2 0x9BE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x422 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2CD PUSH2 0x9D3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x437 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2CD PUSH2 0xBB0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x44C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1E7 PUSH2 0x45B CALLDATASIZE PUSH1 0x4 PUSH2 0x1D1B JUMP JUMPDEST PUSH2 0xBD0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x46C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x211 PUSH2 0xBFB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x481 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x24F PUSH1 0x0 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x496 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1E7 PUSH2 0x4A5 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C9C JUMP JUMPDEST PUSH2 0xC0A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4B6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1E7 PUSH2 0x4C5 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C9C JUMP JUMPDEST PUSH2 0xC85 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4D6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2CD PUSH2 0x4E5 CALLDATASIZE PUSH1 0x4 PUSH2 0x1D1B JUMP JUMPDEST PUSH2 0xC93 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4F6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x24F PUSH2 0x505 CALLDATASIZE PUSH1 0x4 PUSH2 0x1E3A JUMP JUMPDEST PUSH2 0xCB8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x516 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x24F PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x21BA DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x538 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x24F PUSH32 0x189AB7A9244DF0848122154315AF71FE140F3DB0FE014031783B0946B8C9D2E3 DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x7965DB0B PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x591 JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x36 DUP1 SLOAD PUSH2 0x5A6 SWAP1 PUSH2 0x1E64 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x5D2 SWAP1 PUSH2 0x1E64 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x61F JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x5F4 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x61F JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x602 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x637 DUP2 DUP6 DUP6 PUSH2 0xCE3 JUMP JUMPDEST POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x64F DUP6 DUP3 DUP6 PUSH2 0xE07 JUMP JUMPDEST PUSH2 0x65A DUP6 DUP6 DUP6 PUSH2 0xE81 JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0xFB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0x680 DUP2 PUSH2 0x1037 JUMP JUMPDEST PUSH2 0x68A DUP4 DUP4 PUSH2 0x1041 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND CALLER EQ PUSH2 0x704 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416363657373436F6E74726F6C3A2063616E206F6E6C792072656E6F756E6365 PUSH1 0x44 DUP3 ADD MSTORE PUSH15 0x103937B632B9903337B91039B2B633 PUSH1 0x89 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x70E DUP3 DUP3 PUSH2 0x10C7 JUMP JUMPDEST POP POP JUMP JUMPDEST ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ ISZERO PUSH2 0x75B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6FB SWAP1 PUSH2 0x1E9F JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x7A4 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x219A DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x7CA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6FB SWAP1 PUSH2 0x1EEB JUMP JUMPDEST PUSH2 0x7D3 DUP2 PUSH2 0x112E JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x7EF SWAP2 DUP4 SWAP2 SWAP1 PUSH2 0x1158 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x637 DUP2 DUP6 DUP6 PUSH2 0x805 DUP4 DUP4 PUSH2 0xCB8 JUMP JUMPDEST PUSH2 0x80F SWAP2 SWAP1 PUSH2 0x1F4D JUMP JUMPDEST PUSH2 0xCE3 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x21BA DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x82C DUP2 PUSH2 0x1037 JUMP JUMPDEST PUSH2 0x7EF PUSH2 0x12D2 JUMP JUMPDEST PUSH2 0x7EF CALLER DUP3 PUSH2 0x1324 JUMP JUMPDEST ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ ISZERO PUSH2 0x887 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6FB SWAP1 PUSH2 0x1E9F JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x8D0 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x219A DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x8F6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6FB SWAP1 PUSH2 0x1EEB JUMP JUMPDEST PUSH2 0x8FF DUP3 PUSH2 0x112E JUMP JUMPDEST PUSH2 0x70E DUP3 DUP3 PUSH1 0x1 PUSH2 0x1158 JUMP JUMPDEST PUSH1 0x0 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ PUSH2 0x9AB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x38 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x555550535570677261646561626C653A206D757374206E6F742062652063616C PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6C6564207468726F7567682064656C656761746563616C6C0000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6FB JUMP JUMPDEST POP PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x219A DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH2 0x9C9 DUP3 CALLER DUP4 PUSH2 0xE07 JUMP JUMPDEST PUSH2 0x70E DUP3 DUP3 PUSH2 0x1324 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 DUP1 ISZERO PUSH2 0x9F3 JUMPI POP PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xFF SWAP1 SWAP2 AND LT JUMPDEST DUP1 PUSH2 0xA0D JUMPI POP ADDRESS EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xA0D JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF AND PUSH1 0x1 EQ JUMPDEST PUSH2 0xA70 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x191E481A5B9A5D1A585B1A5E9959 PUSH1 0x92 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6FB JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE DUP1 ISZERO PUSH2 0xA93 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND PUSH2 0x100 OR SWAP1 SSTORE JUMPDEST PUSH2 0xAD8 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x7 DUP2 MSTORE PUSH1 0x20 ADD PUSH7 0x50524158584953 PUSH1 0xC8 SHL DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x4 DUP2 MSTORE PUSH1 0x20 ADD PUSH4 0xA082B0B PUSH1 0xE3 SHL DUP2 MSTORE POP PUSH2 0x1464 JUMP JUMPDEST PUSH2 0xAE0 PUSH2 0x1495 JUMP JUMPDEST PUSH2 0xAE8 PUSH2 0x14BE JUMP JUMPDEST PUSH2 0xAF0 PUSH2 0x1495 JUMP JUMPDEST PUSH2 0xAF8 PUSH2 0x1495 JUMP JUMPDEST PUSH2 0xB03 PUSH1 0x0 CALLER PUSH2 0x1041 JUMP JUMPDEST PUSH2 0xB1B PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x21BA DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE CALLER PUSH2 0x1041 JUMP JUMPDEST PUSH2 0xB3E CALLER PUSH2 0xB2B PUSH1 0x12 PUSH1 0xA PUSH2 0x2049 JUMP JUMPDEST PUSH2 0xB39 SWAP1 PUSH4 0x3B9ACA00 PUSH2 0x2058 JUMP JUMPDEST PUSH2 0x14ED JUMP JUMPDEST PUSH2 0xB68 PUSH32 0x189AB7A9244DF0848122154315AF71FE140F3DB0FE014031783B0946B8C9D2E3 CALLER PUSH2 0x1041 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x7EF JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x21BA DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0xBC8 DUP2 PUSH2 0x1037 JUMP JUMPDEST PUSH2 0x7EF PUSH2 0x15BA JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0xFB PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 SWAP1 SWAP4 AND DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x37 DUP1 SLOAD PUSH2 0x5A6 SWAP1 PUSH2 0x1E64 JUMP JUMPDEST PUSH1 0x0 CALLER DUP2 PUSH2 0xC18 DUP3 DUP7 PUSH2 0xCB8 JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0xC78 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x207A65726F PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6FB JUMP JUMPDEST PUSH2 0x65A DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0xCE3 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x637 DUP2 DUP6 DUP6 PUSH2 0xE81 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0xFB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0xCAE DUP2 PUSH2 0x1037 JUMP JUMPDEST PUSH2 0x68A DUP4 DUP4 PUSH2 0x10C7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x34 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0xD45 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6FB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xDA6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6FB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x34 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE13 DUP5 DUP5 PUSH2 0xCB8 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 NOT DUP2 EQ PUSH2 0xE7B JUMPI DUP2 DUP2 LT ISZERO PUSH2 0xE6E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6FB JUMP JUMPDEST PUSH2 0xE7B DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0xCE3 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0xEE5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6FB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xF47 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6FB JUMP JUMPDEST PUSH2 0xF52 DUP4 DUP4 DUP4 PUSH2 0x15F7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0xFCA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x616C616E6365 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6FB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP7 DUP7 SUB SWAP1 SSTORE SWAP3 DUP7 AND DUP1 DUP3 MSTORE SWAP1 DUP4 SWAP1 KECCAK256 DUP1 SLOAD DUP7 ADD SWAP1 SSTORE SWAP2 MLOAD PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 PUSH2 0x102A SWAP1 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0xE7B JUMP JUMPDEST PUSH2 0x7EF DUP2 CALLER PUSH2 0x15FF JUMP JUMPDEST PUSH2 0x104B DUP3 DUP3 PUSH2 0xBD0 JUMP JUMPDEST PUSH2 0x70E JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0xFB PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0x1083 CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH2 0x10D1 DUP3 DUP3 PUSH2 0xBD0 JUMP JUMPDEST ISZERO PUSH2 0x70E JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0xFB PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP1 DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE MLOAD CALLER SWAP3 DUP6 SWAP2 PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP2 SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH32 0x189AB7A9244DF0848122154315AF71FE140F3DB0FE014031783B0946B8C9D2E3 PUSH2 0x70E DUP2 PUSH2 0x1037 JUMP JUMPDEST PUSH32 0x4910FDFA16FED3260ED0E7147F7CC6DA11A60208B5B9406D12A635614FFD9143 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x118B JUMPI PUSH2 0x68A DUP4 PUSH2 0x1658 JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x52D1902D PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x11C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x11F4 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x11F1 SWAP2 DUP2 ADD SWAP1 PUSH2 0x2077 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1257 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524331393637557067726164653A206E657720696D706C656D656E74617469 PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x6F6E206973206E6F742055555053 PUSH1 0x90 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6FB JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x219A DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 EQ PUSH2 0x12C6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524331393637557067726164653A20756E737570706F727465642070726F78 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x1A58589B1955555251 PUSH1 0xBA SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6FB JUMP JUMPDEST POP PUSH2 0x68A DUP4 DUP4 DUP4 PUSH2 0x16F4 JUMP JUMPDEST PUSH2 0x12DA PUSH2 0x1719 JUMP JUMPDEST PUSH1 0x97 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE PUSH32 0x5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA CALLER JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x1384 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206275726E2066726F6D20746865207A65726F20616464726573 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x73 PUSH1 0xF8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6FB JUMP JUMPDEST PUSH2 0x1390 DUP3 PUSH1 0x0 DUP4 PUSH2 0x15F7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x1404 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206275726E20616D6F756E7420657863656564732062616C616E PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x6365 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6FB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP7 DUP7 SUB SWAP1 SSTORE PUSH1 0x35 DUP1 SLOAD DUP8 SWAP1 SUB SWAP1 SSTORE MLOAD DUP6 DUP2 MSTORE SWAP2 SWAP3 SWAP2 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x148B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6FB SWAP1 PUSH2 0x2090 JUMP JUMPDEST PUSH2 0x70E DUP3 DUP3 PUSH2 0x1762 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x14BC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6FB SWAP1 PUSH2 0x2090 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x14E5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6FB SWAP1 PUSH2 0x2090 JUMP JUMPDEST PUSH2 0x14BC PUSH2 0x17B0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x1543 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206D696E7420746F20746865207A65726F206164647265737300 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6FB JUMP JUMPDEST PUSH2 0x154F PUSH1 0x0 DUP4 DUP4 PUSH2 0x15F7 JUMP JUMPDEST DUP1 PUSH1 0x35 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x1561 SWAP2 SWAP1 PUSH2 0x1F4D JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD DUP7 ADD SWAP1 SSTORE MLOAD DUP5 DUP2 MSTORE PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH2 0x15C2 PUSH2 0x17E3 JUMP JUMPDEST PUSH1 0x97 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH32 0x62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258 PUSH2 0x1307 CALLER SWAP1 JUMP JUMPDEST PUSH2 0x68A PUSH2 0x17E3 JUMP JUMPDEST PUSH2 0x1609 DUP3 DUP3 PUSH2 0xBD0 JUMP JUMPDEST PUSH2 0x70E JUMPI PUSH2 0x1616 DUP2 PUSH2 0x1829 JUMP JUMPDEST PUSH2 0x1621 DUP4 PUSH1 0x20 PUSH2 0x183B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1632 SWAP3 SWAP2 SWAP1 PUSH2 0x20DB JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE PUSH2 0x6FB SWAP2 PUSH1 0x4 ADD PUSH2 0x1C4D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND EXTCODESIZE PUSH2 0x16C5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313936373A206E657720696D706C656D656E746174696F6E206973206E PUSH1 0x44 DUP3 ADD MSTORE PUSH13 0x1BDD08184818DBDB9D1C9858DD PUSH1 0x9A SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6FB JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x219A DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x16FD DUP4 PUSH2 0x19DE JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD GT DUP1 PUSH2 0x170A JUMPI POP DUP1 JUMPDEST ISZERO PUSH2 0x68A JUMPI PUSH2 0xE7B DUP4 DUP4 PUSH2 0x1A1E JUMP JUMPDEST PUSH1 0x97 SLOAD PUSH1 0xFF AND PUSH2 0x14BC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x14185D5CD8589B194E881B9BDD081C185D5CD959 PUSH1 0x62 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6FB JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1789 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6FB SWAP1 PUSH2 0x2090 JUMP JUMPDEST DUP2 MLOAD PUSH2 0x179C SWAP1 PUSH1 0x36 SWAP1 PUSH1 0x20 DUP6 ADD SWAP1 PUSH2 0x1B5E JUMP JUMPDEST POP DUP1 MLOAD PUSH2 0x68A SWAP1 PUSH1 0x37 SWAP1 PUSH1 0x20 DUP5 ADD SWAP1 PUSH2 0x1B5E JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x17D7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6FB SWAP1 PUSH2 0x2090 JUMP JUMPDEST PUSH1 0x97 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x97 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x14BC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH16 0x14185D5CD8589B194E881C185D5CD959 PUSH1 0x82 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6FB JUMP JUMPDEST PUSH1 0x60 PUSH2 0x591 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x14 JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x184A DUP4 PUSH1 0x2 PUSH2 0x2058 JUMP JUMPDEST PUSH2 0x1855 SWAP1 PUSH1 0x2 PUSH2 0x1F4D JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x186D JUMPI PUSH2 0x186D PUSH2 0x1D62 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1897 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x3 PUSH1 0xFC SHL DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x18B2 JUMPI PUSH2 0x18B2 PUSH2 0x2150 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0xF PUSH1 0xFB SHL DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x18E1 JUMPI PUSH2 0x18E1 PUSH2 0x2150 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x0 PUSH2 0x1905 DUP5 PUSH1 0x2 PUSH2 0x2058 JUMP JUMPDEST PUSH2 0x1910 SWAP1 PUSH1 0x1 PUSH2 0x1F4D JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x1988 JUMPI PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL DUP6 PUSH1 0xF AND PUSH1 0x10 DUP2 LT PUSH2 0x1944 JUMPI PUSH2 0x1944 PUSH2 0x2150 JUMP JUMPDEST BYTE PUSH1 0xF8 SHL DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x195A JUMPI PUSH2 0x195A PUSH2 0x2150 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x4 SWAP5 SWAP1 SWAP5 SHR SWAP4 PUSH2 0x1981 DUP2 PUSH2 0x2166 JUMP JUMPDEST SWAP1 POP PUSH2 0x1913 JUMP JUMPDEST POP DUP4 ISZERO PUSH2 0x19D7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537472696E67733A20686578206C656E67746820696E73756666696369656E74 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6FB JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x19E7 DUP2 PUSH2 0x1658 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B SWAP1 PUSH1 0x0 SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x19D7 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x27 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x21DA PUSH1 0x27 SWAP2 CODECOPY PUSH1 0x60 PUSH1 0x0 DUP1 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x40 MLOAD PUSH2 0x1A5B SWAP2 SWAP1 PUSH2 0x217D JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1A96 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1A9B JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x1AAC DUP7 DUP4 DUP4 DUP8 PUSH2 0x1AB6 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x1B22 JUMPI DUP3 MLOAD PUSH2 0x1B1B JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND EXTCODESIZE PUSH2 0x1B1B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6FB JUMP JUMPDEST POP DUP2 PUSH2 0x1B2C JUMP JUMPDEST PUSH2 0x1B2C DUP4 DUP4 PUSH2 0x1B34 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP2 MLOAD ISZERO PUSH2 0x1B44 JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6FB SWAP2 SWAP1 PUSH2 0x1C4D JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH2 0x1B6A SWAP1 PUSH2 0x1E64 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH2 0x1B8C JUMPI PUSH1 0x0 DUP6 SSTORE PUSH2 0x1BD2 JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH2 0x1BA5 JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH2 0x1BD2 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 0x1BD2 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x1BD2 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x1BB7 JUMP JUMPDEST POP PUSH2 0x1BDE SWAP3 SWAP2 POP PUSH2 0x1BE2 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x1BDE JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x1BE3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1C09 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x19D7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1C3C JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1C24 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0xE7B JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x1C6C DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x1C21 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x1C97 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1CAF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1CB8 DUP4 PUSH2 0x1C80 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1CDB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1CE4 DUP5 PUSH2 0x1C80 JUMP JUMPDEST SWAP3 POP PUSH2 0x1CF2 PUSH1 0x20 DUP6 ADD PUSH2 0x1C80 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1D14 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1D2E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH2 0x1D3E PUSH1 0x20 DUP5 ADD PUSH2 0x1C80 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1D59 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x19D7 DUP3 PUSH2 0x1C80 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1D8B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1D94 DUP4 PUSH2 0x1C80 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1DB1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1DC5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x1DD7 JUMPI PUSH2 0x1DD7 PUSH2 0x1D62 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x1DFF JUMPI PUSH2 0x1DFF PUSH2 0x1D62 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP9 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0x1E18 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP5 DUP4 ADD ADD MSTORE DUP1 SWAP6 POP POP POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1E4D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1E56 DUP4 PUSH2 0x1C80 JUMP JUMPDEST SWAP2 POP PUSH2 0x1D3E PUSH1 0x20 DUP5 ADD PUSH2 0x1C80 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x1E78 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x1E99 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2C SWAP1 DUP3 ADD MSTORE PUSH32 0x46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820 PUSH1 0x40 DUP3 ADD MSTORE PUSH12 0x19195B1959D85D1958D85B1B PUSH1 0xA2 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2C SWAP1 DUP3 ADD MSTORE PUSH32 0x46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820 PUSH1 0x40 DUP3 ADD MSTORE PUSH12 0x6163746976652070726F7879 PUSH1 0xA0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x1F60 JUMPI PUSH2 0x1F60 PUSH2 0x1F37 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 JUMPDEST DUP1 DUP6 GT ISZERO PUSH2 0x1FA0 JUMPI DUP2 PUSH1 0x0 NOT DIV DUP3 GT ISZERO PUSH2 0x1F86 JUMPI PUSH2 0x1F86 PUSH2 0x1F37 JUMP JUMPDEST DUP1 DUP6 AND ISZERO PUSH2 0x1F93 JUMPI SWAP2 DUP2 MUL SWAP2 JUMPDEST SWAP4 DUP5 SHR SWAP4 SWAP1 DUP1 MUL SWAP1 PUSH2 0x1F6A JUMP JUMPDEST POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x1FB7 JUMPI POP PUSH1 0x1 PUSH2 0x591 JUMP JUMPDEST DUP2 PUSH2 0x1FC4 JUMPI POP PUSH1 0x0 PUSH2 0x591 JUMP JUMPDEST DUP2 PUSH1 0x1 DUP2 EQ PUSH2 0x1FDA JUMPI PUSH1 0x2 DUP2 EQ PUSH2 0x1FE4 JUMPI PUSH2 0x2000 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP PUSH2 0x591 JUMP JUMPDEST PUSH1 0xFF DUP5 GT ISZERO PUSH2 0x1FF5 JUMPI PUSH2 0x1FF5 PUSH2 0x1F37 JUMP JUMPDEST POP POP PUSH1 0x1 DUP3 SHL PUSH2 0x591 JUMP JUMPDEST POP PUSH1 0x20 DUP4 LT PUSH2 0x133 DUP4 LT AND PUSH1 0x4E DUP5 LT PUSH1 0xB DUP5 LT AND OR ISZERO PUSH2 0x2023 JUMPI POP DUP2 DUP2 EXP PUSH2 0x591 JUMP JUMPDEST PUSH2 0x202D DUP4 DUP4 PUSH2 0x1F65 JUMP JUMPDEST DUP1 PUSH1 0x0 NOT DIV DUP3 GT ISZERO PUSH2 0x2041 JUMPI PUSH2 0x2041 PUSH2 0x1F37 JUMP JUMPDEST MUL SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x19D7 PUSH1 0xFF DUP5 AND DUP4 PUSH2 0x1FA8 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x2072 JUMPI PUSH2 0x2072 PUSH2 0x1F37 JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2089 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2B SWAP1 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x40 DUP3 ADD MSTORE PUSH11 0x6E697469616C697A696E67 PUSH1 0xA8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH32 0x416363657373436F6E74726F6C3A206163636F756E7420000000000000000000 DUP2 MSTORE PUSH1 0x0 DUP4 MLOAD PUSH2 0x2113 DUP2 PUSH1 0x17 DUP6 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x1C21 JUMP JUMPDEST PUSH17 0x1034B99036B4B9B9B4B733903937B6329 PUSH1 0x7D SHL PUSH1 0x17 SWAP2 DUP5 ADD SWAP2 DUP3 ADD MSTORE DUP4 MLOAD PUSH2 0x2144 DUP2 PUSH1 0x28 DUP5 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x1C21 JUMP JUMPDEST ADD PUSH1 0x28 ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x2175 JUMPI PUSH2 0x2175 PUSH2 0x1F37 JUMP JUMPDEST POP PUSH1 0x0 NOT ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x218F DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x1C21 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP INVALID CALLDATASIZE ADDMOD SWAP5 LOG1 EXTCODESIZE LOG1 LOG3 0x21 MOD PUSH8 0xC828492DB98DCA3E KECCAK256 PUSH23 0xCC3735A920A3CA505D382BBC65D7A28E3265B37A647492 SWAP16 CALLER PUSH6 0x21B332C1681B SWAP4 EXTCODEHASH PUSH13 0xB9F3376673440D862A41646472 PUSH6 0x73733A206C6F PUSH24 0x2D6C6576656C2064656C65676174652063616C6C20666169 PUSH13 0x6564A2646970667358221220C0 0x26 0xE5 DUP11 0xE1 EXTCODESIZE 0x5C PUSH5 0x482EB691D8 ADD CALLDATASIZE PUSH22 0xB76B325E89FCA4EE10252D5638FF4C0C64736F6C6343 STOP ADDMOD MULMOD STOP CALLER ",
							"sourceMap": "634:1414:21:-:0;;;1332:4:7;1289:48;;975:53:21;;;;;;;;;-1:-1:-1;999:22:21;:20;:22::i;:::-;634:1414;;5939:280:6;6007:13;;;;;;;6006:14;5998:66;;;;-1:-1:-1;;;5998:66:6;;216:2:22;5998:66:6;;;198:21:22;255:2;235:18;;;228:30;294:34;274:18;;;267:62;-1:-1:-1;;;345:18:22;;;338:37;392:19;;5998:66:6;;;;;;;;6078:12;;6094:15;6078:12;;;:31;6074:139;;6125:12;:30;;-1:-1:-1;;6125:30:6;6140:15;6125:30;;;;;;6174:28;;564:36:22;;;6174:28:6;;552:2:22;537:18;6174:28:6;;;;;;;6074:139;5939:280::o;422:184:22:-;634:1414:21;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@DEFAULT_ADMIN_ROLE_42": {
									"entryPoint": null,
									"id": 42,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@PAUSER_ROLE_3748": {
									"entryPoint": null,
									"id": 3748,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@UPGRADER_ROLE_3753": {
									"entryPoint": null,
									"id": 3753,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@__AccessControl_init_21": {
									"entryPoint": null,
									"id": 21,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@__ERC20Burnable_init_1913": {
									"entryPoint": 5269,
									"id": 1913,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@__ERC20_init_1252": {
									"entryPoint": 5220,
									"id": 1252,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@__ERC20_init_unchained_1270": {
									"entryPoint": 5986,
									"id": 1270,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@__Pausable_init_1109": {
									"entryPoint": 5310,
									"id": 1109,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@__Pausable_init_unchained_1119": {
									"entryPoint": 6064,
									"id": 1119,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@__UUPSUpgradeable_init_960": {
									"entryPoint": null,
									"id": 960,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_afterTokenTransfer_1811": {
									"entryPoint": null,
									"id": 1811,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_approve_1746": {
									"entryPoint": 3299,
									"id": 1746,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_authorizeUpgrade_3865": {
									"entryPoint": 4398,
									"id": 3865,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@_beforeTokenTransfer_1800": {
									"entryPoint": null,
									"id": 1800,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_beforeTokenTransfer_3855": {
									"entryPoint": 5623,
									"id": 3855,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_burn_1701": {
									"entryPoint": 4900,
									"id": 1701,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_checkRole_107": {
									"entryPoint": 4151,
									"id": 107,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@_checkRole_146": {
									"entryPoint": 5631,
									"id": 146,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_getImplementation_484": {
									"entryPoint": null,
									"id": 484,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_grantRole_298": {
									"entryPoint": 4161,
									"id": 298,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_mint_1629": {
									"entryPoint": 5357,
									"id": 1629,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_msgSender_2341": {
									"entryPoint": null,
									"id": 2341,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_pause_1183": {
									"entryPoint": 5562,
									"id": 1183,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_requireNotPaused_1156": {
									"entryPoint": 6115,
									"id": 1156,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_requirePaused_1167": {
									"entryPoint": 5913,
									"id": 1167,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_revert_2313": {
									"entryPoint": 6964,
									"id": 2313,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_revokeRole_329": {
									"entryPoint": 4295,
									"id": 329,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_setImplementation_508": {
									"entryPoint": 5720,
									"id": 508,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@_spendAllowance_1789": {
									"entryPoint": 3591,
									"id": 1789,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_transfer_1572": {
									"entryPoint": 3713,
									"id": 1572,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_unpause_1199": {
									"entryPoint": 4818,
									"id": 1199,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_upgradeToAndCallUUPS_606": {
									"entryPoint": 4440,
									"id": 606,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_upgradeToAndCall_553": {
									"entryPoint": 5876,
									"id": 553,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_upgradeTo_523": {
									"entryPoint": 6622,
									"id": 523,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@allowance_1367": {
									"entryPoint": 3256,
									"id": 1367,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@approve_1392": {
									"entryPoint": 1577,
									"id": 1392,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@balanceOf_1324": {
									"entryPoint": null,
									"id": 1324,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@burnFrom_1953": {
									"entryPoint": 2494,
									"id": 1953,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@burn_1932": {
									"entryPoint": 2100,
									"id": 1932,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@decimals_1300": {
									"entryPoint": null,
									"id": 1300,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@decreaseAllowance_1495": {
									"entryPoint": 3082,
									"id": 1495,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@functionDelegateCall_2201": {
									"entryPoint": 6686,
									"id": 2201,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@functionDelegateCall_2230": {
									"entryPoint": null,
									"id": 2230,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"@getAddressSlot_2388": {
									"entryPoint": null,
									"id": 2388,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@getBooleanSlot_2399": {
									"entryPoint": null,
									"id": 2399,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@getRoleAdmin_161": {
									"entryPoint": null,
									"id": 161,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@grantRole_181": {
									"entryPoint": 1637,
									"id": 181,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@hasRole_94": {
									"entryPoint": 3024,
									"id": 94,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@increaseAllowance_1454": {
									"entryPoint": 2034,
									"id": 1454,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@initialize_3814": {
									"entryPoint": 2515,
									"id": 3814,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@isContract_2002": {
									"entryPoint": null,
									"id": 2002,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@name_1280": {
									"entryPoint": 1431,
									"id": 1280,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@pause_3824": {
									"entryPoint": 2992,
									"id": 3824,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@paused_1144": {
									"entryPoint": null,
									"id": 1144,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@proxiableUUID_1023": {
									"entryPoint": 2315,
									"id": 1023,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@renounceRole_224": {
									"entryPoint": 1679,
									"id": 224,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@revokeRole_201": {
									"entryPoint": 3219,
									"id": 201,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@supportsInterface_2733": {
									"entryPoint": null,
									"id": 2733,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@supportsInterface_75": {
									"entryPoint": 1376,
									"id": 75,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@symbol_1290": {
									"entryPoint": 3067,
									"id": 1290,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@toHexString_2649": {
									"entryPoint": 6203,
									"id": 2649,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@toHexString_2669": {
									"entryPoint": 6185,
									"id": 2669,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@totalSupply_1310": {
									"entryPoint": null,
									"id": 1310,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@transferFrom_1425": {
									"entryPoint": 1601,
									"id": 1425,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"@transfer_1349": {
									"entryPoint": 3205,
									"id": 1349,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@unpause_3834": {
									"entryPoint": 2068,
									"id": 3834,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@upgradeToAndCall_1066": {
									"entryPoint": 2110,
									"id": 1066,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@upgradeTo_1045": {
									"entryPoint": 1810,
									"id": 1045,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@verifyCallResultFromTarget_2269": {
									"entryPoint": 6838,
									"id": 2269,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"abi_decode_address": {
									"entryPoint": 7296,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_address": {
									"entryPoint": 7495,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_addresst_address": {
									"entryPoint": 7738,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_addresst_addresst_uint256": {
									"entryPoint": 7366,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 3
								},
								"abi_decode_tuple_t_addresst_bytes_memory_ptr": {
									"entryPoint": 7544,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_addresst_uint256": {
									"entryPoint": 7324,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_bytes32": {
									"entryPoint": 7426,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_bytes32_fromMemory": {
									"entryPoint": 8311,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_bytes32t_address": {
									"entryPoint": 7451,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_bytes4": {
									"entryPoint": 7159,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_uint256": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed": {
									"entryPoint": 8573,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_packed_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_t_string_memory_ptr_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed": {
									"entryPoint": 8411,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 7245,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_36e108fa7a809b52ab1951dd91c117a7bc9ac5250bdf1aa162d4e104f7edf9eb__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 7839,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_52f1ead4d9653e13afbd2e90ef2587c30187cd50b2e97d784e3f7a7541247434__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 7915,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_67f0151b4ad1dcfa0e3302a0cd6019f51582ef1807b37dceb00bd852a514f7f4__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_76b6b6debfc5febf101145a79ecf0b0d2e89e397dfdab2bca99888370411152c__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_8e8e2fbcb586f700b5b14e2c4a650c8d83b9773c31c5fe8962070ea544e11f24__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 8336,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_add_t_uint256": {
									"entryPoint": 8013,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_exp_helper": {
									"entryPoint": 8037,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"checked_exp_t_uint256_t_uint8": {
									"entryPoint": 8265,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_exp_unsigned": {
									"entryPoint": 8104,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_mul_t_uint256": {
									"entryPoint": 8280,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"copy_memory_to_memory": {
									"entryPoint": 7201,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"decrement_t_uint256": {
									"entryPoint": 8550,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"extract_byte_array_length": {
									"entryPoint": 7780,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"panic_error_0x11": {
									"entryPoint": 7991,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x32": {
									"entryPoint": 8528,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x41": {
									"entryPoint": 7522,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:17930:22",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:22",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "83:217:22",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "129:16:22",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "138:1:22",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "141:1:22",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "131:6:22"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "131:12:22"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "131:12:22"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "104:7:22"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "113:9:22"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "100:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "100:23:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "125:2:22",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "96:3:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "96:32:22"
															},
															"nodeType": "YulIf",
															"src": "93:52:22"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "154:36:22",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "180:9:22"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "167:12:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "167:23:22"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "158:5:22",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "254:16:22",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "263:1:22",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "266:1:22",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "256:6:22"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "256:12:22"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "256:12:22"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "212:5:22"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "223:5:22"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "234:3:22",
																								"type": "",
																								"value": "224"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "239:10:22",
																								"type": "",
																								"value": "0xffffffff"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "230:3:22"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "230:20:22"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "219:3:22"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "219:32:22"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "209:2:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "209:43:22"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "202:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "202:51:22"
															},
															"nodeType": "YulIf",
															"src": "199:71:22"
														},
														{
															"nodeType": "YulAssignment",
															"src": "279:15:22",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "289:5:22"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "279:6:22"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bytes4",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "49:9:22",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "60:7:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "72:6:22",
														"type": ""
													}
												],
												"src": "14:286:22"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "400:92:22",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "410:26:22",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "422:9:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "433:2:22",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "418:3:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "418:18:22"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "410:4:22"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "452:9:22"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value0",
																						"nodeType": "YulIdentifier",
																						"src": "477:6:22"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "470:6:22"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "470:14:22"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "463:6:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "463:22:22"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "445:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "445:41:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "445:41:22"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "369:9:22",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "380:6:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "391:4:22",
														"type": ""
													}
												],
												"src": "305:187:22"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "550:205:22",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "560:10:22",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "569:1:22",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "564:1:22",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "629:63:22",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "dst",
																							"nodeType": "YulIdentifier",
																							"src": "654:3:22"
																						},
																						{
																							"name": "i",
																							"nodeType": "YulIdentifier",
																							"src": "659:1:22"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "650:3:22"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "650:11:22"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "src",
																									"nodeType": "YulIdentifier",
																									"src": "673:3:22"
																								},
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "678:1:22"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "669:3:22"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "669:11:22"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "663:5:22"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "663:18:22"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "643:6:22"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "643:39:22"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "643:39:22"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "590:1:22"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "593:6:22"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "587:2:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "587:13:22"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "601:19:22",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "603:15:22",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "612:1:22"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "615:2:22",
																					"type": "",
																					"value": "32"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "608:3:22"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "608:10:22"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "603:1:22"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "583:3:22",
																"statements": []
															},
															"src": "579:113:22"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "718:31:22",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "dst",
																							"nodeType": "YulIdentifier",
																							"src": "731:3:22"
																						},
																						{
																							"name": "length",
																							"nodeType": "YulIdentifier",
																							"src": "736:6:22"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "727:3:22"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "727:16:22"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "745:1:22",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "720:6:22"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "720:27:22"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "720:27:22"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "707:1:22"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "710:6:22"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "704:2:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "704:13:22"
															},
															"nodeType": "YulIf",
															"src": "701:48:22"
														}
													]
												},
												"name": "copy_memory_to_memory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "src",
														"nodeType": "YulTypedName",
														"src": "528:3:22",
														"type": ""
													},
													{
														"name": "dst",
														"nodeType": "YulTypedName",
														"src": "533:3:22",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "538:6:22",
														"type": ""
													}
												],
												"src": "497:258:22"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "881:262:22",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "898:9:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "909:2:22",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "891:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "891:21:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "891:21:22"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "921:27:22",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "941:6:22"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "935:5:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "935:13:22"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "925:6:22",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "968:9:22"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "979:2:22",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "964:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "964:18:22"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "984:6:22"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "957:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "957:34:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "957:34:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "1026:6:22"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1034:2:22",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1022:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1022:15:22"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1043:9:22"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1054:2:22",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1039:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1039:18:22"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "1059:6:22"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory",
																	"nodeType": "YulIdentifier",
																	"src": "1000:21:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "1000:66:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1000:66:22"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1075:62:22",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1091:9:22"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "length",
																								"nodeType": "YulIdentifier",
																								"src": "1110:6:22"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "1118:2:22",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nodeType": "YulIdentifier",
																							"src": "1106:3:22"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "1106:15:22"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "1127:2:22",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nodeType": "YulIdentifier",
																							"src": "1123:3:22"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "1123:7:22"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "1102:3:22"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1102:29:22"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1087:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1087:45:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1134:2:22",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1083:3:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "1083:54:22"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1075:4:22"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "850:9:22",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "861:6:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "872:4:22",
														"type": ""
													}
												],
												"src": "760:383:22"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1197:124:22",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1207:29:22",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "1229:6:22"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1216:12:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "1216:20:22"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "1207:5:22"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1299:16:22",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1308:1:22",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1311:1:22",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1301:6:22"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1301:12:22"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1301:12:22"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "1258:5:22"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "1269:5:22"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "1284:3:22",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "1289:1:22",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nodeType": "YulIdentifier",
																									"src": "1280:3:22"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "1280:11:22"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "1293:1:22",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "1276:3:22"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "1276:19:22"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "1265:3:22"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1265:31:22"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "1255:2:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1255:42:22"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "1248:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "1248:50:22"
															},
															"nodeType": "YulIf",
															"src": "1245:70:22"
														}
													]
												},
												"name": "abi_decode_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "1176:6:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1187:5:22",
														"type": ""
													}
												],
												"src": "1148:173:22"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1413:167:22",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1459:16:22",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1468:1:22",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1471:1:22",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1461:6:22"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1461:12:22"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1461:12:22"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1434:7:22"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1443:9:22"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1430:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1430:23:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1455:2:22",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1426:3:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "1426:32:22"
															},
															"nodeType": "YulIf",
															"src": "1423:52:22"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1484:39:22",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1513:9:22"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "1494:18:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "1494:29:22"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1484:6:22"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1532:42:22",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1559:9:22"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1570:2:22",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1555:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1555:18:22"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1542:12:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "1542:32:22"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "1532:6:22"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1371:9:22",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1382:7:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1394:6:22",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1402:6:22",
														"type": ""
													}
												],
												"src": "1326:254:22"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1686:76:22",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1696:26:22",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1708:9:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1719:2:22",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1704:3:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "1704:18:22"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1696:4:22"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1738:9:22"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "1749:6:22"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1731:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "1731:25:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1731:25:22"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1655:9:22",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1666:6:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1677:4:22",
														"type": ""
													}
												],
												"src": "1585:177:22"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1871:224:22",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1917:16:22",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1926:1:22",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1929:1:22",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1919:6:22"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1919:12:22"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1919:12:22"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1892:7:22"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1901:9:22"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1888:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1888:23:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1913:2:22",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1884:3:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "1884:32:22"
															},
															"nodeType": "YulIf",
															"src": "1881:52:22"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1942:39:22",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1971:9:22"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "1952:18:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "1952:29:22"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1942:6:22"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1990:48:22",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2023:9:22"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2034:2:22",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2019:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2019:18:22"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "2000:18:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "2000:38:22"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "1990:6:22"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2047:42:22",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2074:9:22"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2085:2:22",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2070:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2070:18:22"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2057:12:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "2057:32:22"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "2047:6:22"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_addresst_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1821:9:22",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1832:7:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1844:6:22",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1852:6:22",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "1860:6:22",
														"type": ""
													}
												],
												"src": "1767:328:22"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2170:110:22",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2216:16:22",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2225:1:22",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2228:1:22",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2218:6:22"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2218:12:22"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2218:12:22"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2191:7:22"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2200:9:22"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2187:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2187:23:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2212:2:22",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2183:3:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "2183:32:22"
															},
															"nodeType": "YulIf",
															"src": "2180:52:22"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2241:33:22",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2264:9:22"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2251:12:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "2251:23:22"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "2241:6:22"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bytes32",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2136:9:22",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "2147:7:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2159:6:22",
														"type": ""
													}
												],
												"src": "2100:180:22"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2386:76:22",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2396:26:22",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2408:9:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2419:2:22",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2404:3:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "2404:18:22"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2396:4:22"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2438:9:22"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "2449:6:22"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2431:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "2431:25:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2431:25:22"
														}
													]
												},
												"name": "abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2355:9:22",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2366:6:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2377:4:22",
														"type": ""
													}
												],
												"src": "2285:177:22"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2554:167:22",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2600:16:22",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2609:1:22",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2612:1:22",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2602:6:22"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2602:12:22"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2602:12:22"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2575:7:22"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2584:9:22"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2571:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2571:23:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2596:2:22",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2567:3:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "2567:32:22"
															},
															"nodeType": "YulIf",
															"src": "2564:52:22"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2625:33:22",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2648:9:22"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2635:12:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "2635:23:22"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "2625:6:22"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2667:48:22",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2700:9:22"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2711:2:22",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2696:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2696:18:22"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "2677:18:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "2677:38:22"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "2667:6:22"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bytes32t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2512:9:22",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "2523:7:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2535:6:22",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "2543:6:22",
														"type": ""
													}
												],
												"src": "2467:254:22"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2823:87:22",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2833:26:22",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2845:9:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2856:2:22",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2841:3:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "2841:18:22"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2833:4:22"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2875:9:22"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "2890:6:22"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2898:4:22",
																				"type": "",
																				"value": "0xff"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "2886:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2886:17:22"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2868:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "2868:36:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2868:36:22"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2792:9:22",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2803:6:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2814:4:22",
														"type": ""
													}
												],
												"src": "2726:184:22"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2985:116:22",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3031:16:22",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3040:1:22",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3043:1:22",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3033:6:22"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3033:12:22"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3033:12:22"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3006:7:22"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3015:9:22"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "3002:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3002:23:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3027:2:22",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2998:3:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "2998:32:22"
															},
															"nodeType": "YulIf",
															"src": "2995:52:22"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3056:39:22",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3085:9:22"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "3066:18:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "3066:29:22"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "3056:6:22"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2951:9:22",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "2962:7:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2974:6:22",
														"type": ""
													}
												],
												"src": "2915:186:22"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3176:110:22",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3222:16:22",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3231:1:22",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3234:1:22",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3224:6:22"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3224:12:22"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3224:12:22"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3197:7:22"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3206:9:22"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "3193:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3193:23:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3218:2:22",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "3189:3:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "3189:32:22"
															},
															"nodeType": "YulIf",
															"src": "3186:52:22"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3247:33:22",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3270:9:22"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "3257:12:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "3257:23:22"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "3247:6:22"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3142:9:22",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "3153:7:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3165:6:22",
														"type": ""
													}
												],
												"src": "3106:180:22"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3323:95:22",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3340:1:22",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3347:3:22",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3352:10:22",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "3343:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3343:20:22"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3333:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "3333:31:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3333:31:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3380:1:22",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3383:4:22",
																		"type": "",
																		"value": "0x41"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3373:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "3373:15:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3373:15:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3404:1:22",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3407:4:22",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "3397:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "3397:15:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3397:15:22"
														}
													]
												},
												"name": "panic_error_0x41",
												"nodeType": "YulFunctionDefinition",
												"src": "3291:127:22"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3519:899:22",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3565:16:22",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3574:1:22",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3577:1:22",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3567:6:22"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3567:12:22"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3567:12:22"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3540:7:22"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3549:9:22"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "3536:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3536:23:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3561:2:22",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "3532:3:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "3532:32:22"
															},
															"nodeType": "YulIf",
															"src": "3529:52:22"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3590:39:22",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3619:9:22"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "3600:18:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "3600:29:22"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "3590:6:22"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3638:46:22",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3669:9:22"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3680:2:22",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3665:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3665:18:22"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "3652:12:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "3652:32:22"
															},
															"variables": [
																{
																	"name": "offset",
																	"nodeType": "YulTypedName",
																	"src": "3642:6:22",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3693:28:22",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "3703:18:22",
																"type": "",
																"value": "0xffffffffffffffff"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "3697:2:22",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3748:16:22",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3757:1:22",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3760:1:22",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3750:6:22"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3750:12:22"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3750:12:22"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "3736:6:22"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "3744:2:22"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "3733:2:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "3733:14:22"
															},
															"nodeType": "YulIf",
															"src": "3730:34:22"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3773:32:22",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3787:9:22"
																	},
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "3798:6:22"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3783:3:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "3783:22:22"
															},
															"variables": [
																{
																	"name": "_2",
																	"nodeType": "YulTypedName",
																	"src": "3777:2:22",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3853:16:22",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3862:1:22",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3865:1:22",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3855:6:22"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3855:12:22"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3855:12:22"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "_2",
																						"nodeType": "YulIdentifier",
																						"src": "3832:2:22"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "3836:4:22",
																						"type": "",
																						"value": "0x1f"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "3828:3:22"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3828:13:22"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3843:7:22"
																			}
																		],
																		"functionName": {
																			"name": "slt",
																			"nodeType": "YulIdentifier",
																			"src": "3824:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3824:27:22"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "3817:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "3817:35:22"
															},
															"nodeType": "YulIf",
															"src": "3814:55:22"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3878:26:22",
															"value": {
																"arguments": [
																	{
																		"name": "_2",
																		"nodeType": "YulIdentifier",
																		"src": "3901:2:22"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "3888:12:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "3888:16:22"
															},
															"variables": [
																{
																	"name": "_3",
																	"nodeType": "YulTypedName",
																	"src": "3882:2:22",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3927:22:22",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "3929:16:22"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3929:18:22"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3929:18:22"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "_3",
																		"nodeType": "YulIdentifier",
																		"src": "3919:2:22"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "3923:2:22"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "3916:2:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "3916:10:22"
															},
															"nodeType": "YulIf",
															"src": "3913:36:22"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3958:17:22",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3972:2:22",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "not",
																	"nodeType": "YulIdentifier",
																	"src": "3968:3:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "3968:7:22"
															},
															"variables": [
																{
																	"name": "_4",
																	"nodeType": "YulTypedName",
																	"src": "3962:2:22",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3984:23:22",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4004:2:22",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "3998:5:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "3998:9:22"
															},
															"variables": [
																{
																	"name": "memPtr",
																	"nodeType": "YulTypedName",
																	"src": "3988:6:22",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4016:71:22",
															"value": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nodeType": "YulIdentifier",
																		"src": "4038:6:22"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"name": "_3",
																										"nodeType": "YulIdentifier",
																										"src": "4062:2:22"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "4066:4:22",
																										"type": "",
																										"value": "0x1f"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "4058:3:22"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "4058:13:22"
																							},
																							{
																								"name": "_4",
																								"nodeType": "YulIdentifier",
																								"src": "4073:2:22"
																							}
																						],
																						"functionName": {
																							"name": "and",
																							"nodeType": "YulIdentifier",
																							"src": "4054:3:22"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "4054:22:22"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "4078:2:22",
																						"type": "",
																						"value": "63"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "4050:3:22"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4050:31:22"
																			},
																			{
																				"name": "_4",
																				"nodeType": "YulIdentifier",
																				"src": "4083:2:22"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "4046:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4046:40:22"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4034:3:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "4034:53:22"
															},
															"variables": [
																{
																	"name": "newFreePtr",
																	"nodeType": "YulTypedName",
																	"src": "4020:10:22",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4146:22:22",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "4148:16:22"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4148:18:22"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4148:18:22"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "4105:10:22"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "4117:2:22"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "4102:2:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4102:18:22"
																	},
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "4125:10:22"
																			},
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "4137:6:22"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "4122:2:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4122:22:22"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "4099:2:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "4099:46:22"
															},
															"nodeType": "YulIf",
															"src": "4096:72:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4184:2:22",
																		"type": "",
																		"value": "64"
																	},
																	{
																		"name": "newFreePtr",
																		"nodeType": "YulIdentifier",
																		"src": "4188:10:22"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4177:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "4177:22:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4177:22:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nodeType": "YulIdentifier",
																		"src": "4215:6:22"
																	},
																	{
																		"name": "_3",
																		"nodeType": "YulIdentifier",
																		"src": "4223:2:22"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4208:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "4208:18:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4208:18:22"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4272:16:22",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4281:1:22",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4284:1:22",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "4274:6:22"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4274:12:22"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4274:12:22"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "_2",
																						"nodeType": "YulIdentifier",
																						"src": "4249:2:22"
																					},
																					{
																						"name": "_3",
																						"nodeType": "YulIdentifier",
																						"src": "4253:2:22"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "4245:3:22"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4245:11:22"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4258:2:22",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4241:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4241:20:22"
																	},
																	{
																		"name": "dataEnd",
																		"nodeType": "YulIdentifier",
																		"src": "4263:7:22"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "4238:2:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "4238:33:22"
															},
															"nodeType": "YulIf",
															"src": "4235:53:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "4314:6:22"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4322:2:22",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4310:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4310:15:22"
																	},
																	{
																		"arguments": [
																			{
																				"name": "_2",
																				"nodeType": "YulIdentifier",
																				"src": "4331:2:22"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4335:2:22",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4327:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4327:11:22"
																	},
																	{
																		"name": "_3",
																		"nodeType": "YulIdentifier",
																		"src": "4340:2:22"
																	}
																],
																"functionName": {
																	"name": "calldatacopy",
																	"nodeType": "YulIdentifier",
																	"src": "4297:12:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "4297:46:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4297:46:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "memPtr",
																						"nodeType": "YulIdentifier",
																						"src": "4367:6:22"
																					},
																					{
																						"name": "_3",
																						"nodeType": "YulIdentifier",
																						"src": "4375:2:22"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "4363:3:22"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4363:15:22"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4380:2:22",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4359:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4359:24:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4385:1:22",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4352:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "4352:35:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4352:35:22"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4396:16:22",
															"value": {
																"name": "memPtr",
																"nodeType": "YulIdentifier",
																"src": "4406:6:22"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "4396:6:22"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_bytes_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3477:9:22",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "3488:7:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3500:6:22",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "3508:6:22",
														"type": ""
													}
												],
												"src": "3423:995:22"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4510:173:22",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4556:16:22",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4565:1:22",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4568:1:22",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "4558:6:22"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4558:12:22"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4558:12:22"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "4531:7:22"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4540:9:22"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "4527:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4527:23:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4552:2:22",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "4523:3:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "4523:32:22"
															},
															"nodeType": "YulIf",
															"src": "4520:52:22"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4581:39:22",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4610:9:22"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "4591:18:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "4591:29:22"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "4581:6:22"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "4629:48:22",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4662:9:22"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4673:2:22",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4658:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4658:18:22"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "4639:18:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "4639:38:22"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "4629:6:22"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4468:9:22",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "4479:7:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4491:6:22",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "4499:6:22",
														"type": ""
													}
												],
												"src": "4423:260:22"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4743:325:22",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4753:22:22",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4767:1:22",
																		"type": "",
																		"value": "1"
																	},
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "4770:4:22"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "4763:3:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "4763:12:22"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "4753:6:22"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4784:38:22",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "4814:4:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4820:1:22",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "4810:3:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "4810:12:22"
															},
															"variables": [
																{
																	"name": "outOfPlaceEncoding",
																	"nodeType": "YulTypedName",
																	"src": "4788:18:22",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4861:31:22",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "4863:27:22",
																		"value": {
																			"arguments": [
																				{
																					"name": "length",
																					"nodeType": "YulIdentifier",
																					"src": "4877:6:22"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4885:4:22",
																					"type": "",
																					"value": "0x7f"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nodeType": "YulIdentifier",
																				"src": "4873:3:22"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4873:17:22"
																		},
																		"variableNames": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "4863:6:22"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "4841:18:22"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "4834:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "4834:26:22"
															},
															"nodeType": "YulIf",
															"src": "4831:61:22"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4951:111:22",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4972:1:22",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "4979:3:22",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "4984:10:22",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "4975:3:22"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "4975:20:22"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "4965:6:22"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4965:31:22"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4965:31:22"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5016:1:22",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5019:4:22",
																					"type": "",
																					"value": "0x22"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "5009:6:22"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5009:15:22"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5009:15:22"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5044:1:22",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5047:4:22",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "5037:6:22"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5037:15:22"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5037:15:22"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "4907:18:22"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "4930:6:22"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4938:2:22",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "4927:2:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4927:14:22"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "4904:2:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "4904:38:22"
															},
															"nodeType": "YulIf",
															"src": "4901:161:22"
														}
													]
												},
												"name": "extract_byte_array_length",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "4723:4:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "4732:6:22",
														"type": ""
													}
												],
												"src": "4688:380:22"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5247:237:22",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5264:9:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5275:2:22",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5257:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "5257:21:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5257:21:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5298:9:22"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5309:2:22",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5294:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5294:18:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5314:2:22",
																		"type": "",
																		"value": "47"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5287:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "5287:30:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5287:30:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5337:9:22"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5348:2:22",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5333:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5333:18:22"
																	},
																	{
																		"hexValue": "416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e6365",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5353:34:22",
																		"type": "",
																		"value": "AccessControl: can only renounce"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5326:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "5326:62:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5326:62:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5408:9:22"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5419:2:22",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5404:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5404:18:22"
																	},
																	{
																		"hexValue": "20726f6c657320666f722073656c66",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5424:17:22",
																		"type": "",
																		"value": " roles for self"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5397:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "5397:45:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5397:45:22"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5451:27:22",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5463:9:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5474:3:22",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5459:3:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "5459:19:22"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5451:4:22"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5224:9:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5238:4:22",
														"type": ""
													}
												],
												"src": "5073:411:22"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5663:234:22",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5680:9:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5691:2:22",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5673:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "5673:21:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5673:21:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5714:9:22"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5725:2:22",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5710:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5710:18:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5730:2:22",
																		"type": "",
																		"value": "44"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5703:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "5703:30:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5703:30:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5753:9:22"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5764:2:22",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5749:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5749:18:22"
																	},
																	{
																		"hexValue": "46756e6374696f6e206d7573742062652063616c6c6564207468726f75676820",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5769:34:22",
																		"type": "",
																		"value": "Function must be called through "
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5742:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "5742:62:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5742:62:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5824:9:22"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5835:2:22",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5820:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5820:18:22"
																	},
																	{
																		"hexValue": "64656c656761746563616c6c",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5840:14:22",
																		"type": "",
																		"value": "delegatecall"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5813:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "5813:42:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5813:42:22"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5864:27:22",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5876:9:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5887:3:22",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5872:3:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "5872:19:22"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5864:4:22"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_36e108fa7a809b52ab1951dd91c117a7bc9ac5250bdf1aa162d4e104f7edf9eb__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5640:9:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5654:4:22",
														"type": ""
													}
												],
												"src": "5489:408:22"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6076:234:22",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6093:9:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6104:2:22",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6086:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "6086:21:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6086:21:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6127:9:22"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6138:2:22",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6123:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6123:18:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6143:2:22",
																		"type": "",
																		"value": "44"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6116:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "6116:30:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6116:30:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6166:9:22"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6177:2:22",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6162:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6162:18:22"
																	},
																	{
																		"hexValue": "46756e6374696f6e206d7573742062652063616c6c6564207468726f75676820",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "6182:34:22",
																		"type": "",
																		"value": "Function must be called through "
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6155:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "6155:62:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6155:62:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6237:9:22"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6248:2:22",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6233:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6233:18:22"
																	},
																	{
																		"hexValue": "6163746976652070726f7879",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "6253:14:22",
																		"type": "",
																		"value": "active proxy"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6226:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "6226:42:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6226:42:22"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6277:27:22",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6289:9:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6300:3:22",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6285:3:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "6285:19:22"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6277:4:22"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_52f1ead4d9653e13afbd2e90ef2587c30187cd50b2e97d784e3f7a7541247434__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6053:9:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "6067:4:22",
														"type": ""
													}
												],
												"src": "5902:408:22"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6347:95:22",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6364:1:22",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6371:3:22",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6376:10:22",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "6367:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6367:20:22"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6357:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "6357:31:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6357:31:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6404:1:22",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6407:4:22",
																		"type": "",
																		"value": "0x11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6397:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "6397:15:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6397:15:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6428:1:22",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6431:4:22",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "6421:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "6421:15:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6421:15:22"
														}
													]
												},
												"name": "panic_error_0x11",
												"nodeType": "YulFunctionDefinition",
												"src": "6315:127:22"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6495:80:22",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "6522:22:22",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "6524:16:22"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6524:18:22"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "6524:18:22"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "6511:1:22"
																	},
																	{
																		"arguments": [
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "6518:1:22"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "6514:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6514:6:22"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "6508:2:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "6508:13:22"
															},
															"nodeType": "YulIf",
															"src": "6505:39:22"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6553:16:22",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "6564:1:22"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "6567:1:22"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6560:3:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "6560:9:22"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nodeType": "YulIdentifier",
																	"src": "6553:3:22"
																}
															]
														}
													]
												},
												"name": "checked_add_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "6478:1:22",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "6481:1:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nodeType": "YulTypedName",
														"src": "6487:3:22",
														"type": ""
													}
												],
												"src": "6447:128:22"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6754:246:22",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6771:9:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6782:2:22",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6764:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "6764:21:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6764:21:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6805:9:22"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6816:2:22",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6801:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6801:18:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6821:2:22",
																		"type": "",
																		"value": "56"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6794:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "6794:30:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6794:30:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6844:9:22"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6855:2:22",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6840:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6840:18:22"
																	},
																	{
																		"hexValue": "555550535570677261646561626c653a206d757374206e6f742062652063616c",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "6860:34:22",
																		"type": "",
																		"value": "UUPSUpgradeable: must not be cal"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6833:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "6833:62:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6833:62:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6915:9:22"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6926:2:22",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6911:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6911:18:22"
																	},
																	{
																		"hexValue": "6c6564207468726f7567682064656c656761746563616c6c",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "6931:26:22",
																		"type": "",
																		"value": "led through delegatecall"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6904:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "6904:54:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6904:54:22"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6967:27:22",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6979:9:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6990:3:22",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6975:3:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "6975:19:22"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6967:4:22"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_67f0151b4ad1dcfa0e3302a0cd6019f51582ef1807b37dceb00bd852a514f7f4__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6731:9:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "6745:4:22",
														"type": ""
													}
												],
												"src": "6580:420:22"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7179:236:22",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7196:9:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7207:2:22",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7189:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "7189:21:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7189:21:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7230:9:22"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7241:2:22",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7226:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7226:18:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7246:2:22",
																		"type": "",
																		"value": "46"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7219:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "7219:30:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7219:30:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7269:9:22"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7280:2:22",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7265:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7265:18:22"
																	},
																	{
																		"hexValue": "496e697469616c697a61626c653a20636f6e747261637420697320616c726561",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "7285:34:22",
																		"type": "",
																		"value": "Initializable: contract is alrea"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7258:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "7258:62:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7258:62:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7340:9:22"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7351:2:22",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7336:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7336:18:22"
																	},
																	{
																		"hexValue": "647920696e697469616c697a6564",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "7356:16:22",
																		"type": "",
																		"value": "dy initialized"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7329:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "7329:44:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7329:44:22"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7382:27:22",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7394:9:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7405:3:22",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7390:3:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "7390:19:22"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "7382:4:22"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "7156:9:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "7170:4:22",
														"type": ""
													}
												],
												"src": "7005:410:22"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7484:358:22",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7494:16:22",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "7509:1:22",
																"type": "",
																"value": "1"
															},
															"variables": [
																{
																	"name": "power_1",
																	"nodeType": "YulTypedName",
																	"src": "7498:7:22",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7519:16:22",
															"value": {
																"name": "power_1",
																"nodeType": "YulIdentifier",
																"src": "7528:7:22"
															},
															"variableNames": [
																{
																	"name": "power",
																	"nodeType": "YulIdentifier",
																	"src": "7519:5:22"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7544:13:22",
															"value": {
																"name": "_base",
																"nodeType": "YulIdentifier",
																"src": "7552:5:22"
															},
															"variableNames": [
																{
																	"name": "base",
																	"nodeType": "YulIdentifier",
																	"src": "7544:4:22"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "7608:228:22",
																"statements": [
																	{
																		"body": {
																			"nodeType": "YulBlock",
																			"src": "7653:22:22",
																			"statements": [
																				{
																					"expression": {
																						"arguments": [],
																						"functionName": {
																							"name": "panic_error_0x11",
																							"nodeType": "YulIdentifier",
																							"src": "7655:16:22"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "7655:18:22"
																					},
																					"nodeType": "YulExpressionStatement",
																					"src": "7655:18:22"
																				}
																			]
																		},
																		"condition": {
																			"arguments": [
																				{
																					"name": "base",
																					"nodeType": "YulIdentifier",
																					"src": "7628:4:22"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"kind": "number",
																									"nodeType": "YulLiteral",
																									"src": "7642:1:22",
																									"type": "",
																									"value": "0"
																								}
																							],
																							"functionName": {
																								"name": "not",
																								"nodeType": "YulIdentifier",
																								"src": "7638:3:22"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "7638:6:22"
																						},
																						{
																							"name": "base",
																							"nodeType": "YulIdentifier",
																							"src": "7646:4:22"
																						}
																					],
																					"functionName": {
																						"name": "div",
																						"nodeType": "YulIdentifier",
																						"src": "7634:3:22"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "7634:17:22"
																				}
																			],
																			"functionName": {
																				"name": "gt",
																				"nodeType": "YulIdentifier",
																				"src": "7625:2:22"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "7625:27:22"
																		},
																		"nodeType": "YulIf",
																		"src": "7622:53:22"
																	},
																	{
																		"body": {
																			"nodeType": "YulBlock",
																			"src": "7714:29:22",
																			"statements": [
																				{
																					"nodeType": "YulAssignment",
																					"src": "7716:25:22",
																					"value": {
																						"arguments": [
																							{
																								"name": "power",
																								"nodeType": "YulIdentifier",
																								"src": "7729:5:22"
																							},
																							{
																								"name": "base",
																								"nodeType": "YulIdentifier",
																								"src": "7736:4:22"
																							}
																						],
																						"functionName": {
																							"name": "mul",
																							"nodeType": "YulIdentifier",
																							"src": "7725:3:22"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "7725:16:22"
																					},
																					"variableNames": [
																						{
																							"name": "power",
																							"nodeType": "YulIdentifier",
																							"src": "7716:5:22"
																						}
																					]
																				}
																			]
																		},
																		"condition": {
																			"arguments": [
																				{
																					"name": "exponent",
																					"nodeType": "YulIdentifier",
																					"src": "7695:8:22"
																				},
																				{
																					"name": "power_1",
																					"nodeType": "YulIdentifier",
																					"src": "7705:7:22"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nodeType": "YulIdentifier",
																				"src": "7691:3:22"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "7691:22:22"
																		},
																		"nodeType": "YulIf",
																		"src": "7688:55:22"
																	},
																	{
																		"nodeType": "YulAssignment",
																		"src": "7756:23:22",
																		"value": {
																			"arguments": [
																				{
																					"name": "base",
																					"nodeType": "YulIdentifier",
																					"src": "7768:4:22"
																				},
																				{
																					"name": "base",
																					"nodeType": "YulIdentifier",
																					"src": "7774:4:22"
																				}
																			],
																			"functionName": {
																				"name": "mul",
																				"nodeType": "YulIdentifier",
																				"src": "7764:3:22"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "7764:15:22"
																		},
																		"variableNames": [
																			{
																				"name": "base",
																				"nodeType": "YulIdentifier",
																				"src": "7756:4:22"
																			}
																		]
																	},
																	{
																		"nodeType": "YulAssignment",
																		"src": "7792:34:22",
																		"value": {
																			"arguments": [
																				{
																					"name": "power_1",
																					"nodeType": "YulIdentifier",
																					"src": "7808:7:22"
																				},
																				{
																					"name": "exponent",
																					"nodeType": "YulIdentifier",
																					"src": "7817:8:22"
																				}
																			],
																			"functionName": {
																				"name": "shr",
																				"nodeType": "YulIdentifier",
																				"src": "7804:3:22"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "7804:22:22"
																		},
																		"variableNames": [
																			{
																				"name": "exponent",
																				"nodeType": "YulIdentifier",
																				"src": "7792:8:22"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "exponent",
																		"nodeType": "YulIdentifier",
																		"src": "7577:8:22"
																	},
																	{
																		"name": "power_1",
																		"nodeType": "YulIdentifier",
																		"src": "7587:7:22"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "7574:2:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "7574:21:22"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "7596:3:22",
																"statements": []
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "7570:3:22",
																"statements": []
															},
															"src": "7566:270:22"
														}
													]
												},
												"name": "checked_exp_helper",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "_base",
														"nodeType": "YulTypedName",
														"src": "7448:5:22",
														"type": ""
													},
													{
														"name": "exponent",
														"nodeType": "YulTypedName",
														"src": "7455:8:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "power",
														"nodeType": "YulTypedName",
														"src": "7468:5:22",
														"type": ""
													},
													{
														"name": "base",
														"nodeType": "YulTypedName",
														"src": "7475:4:22",
														"type": ""
													}
												],
												"src": "7420:422:22"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7906:747:22",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "7944:52:22",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "7958:10:22",
																		"value": {
																			"kind": "number",
																			"nodeType": "YulLiteral",
																			"src": "7967:1:22",
																			"type": "",
																			"value": "1"
																		},
																		"variableNames": [
																			{
																				"name": "power",
																				"nodeType": "YulIdentifier",
																				"src": "7958:5:22"
																			}
																		]
																	},
																	{
																		"nodeType": "YulLeave",
																		"src": "7981:5:22"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "exponent",
																		"nodeType": "YulIdentifier",
																		"src": "7926:8:22"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "7919:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "7919:16:22"
															},
															"nodeType": "YulIf",
															"src": "7916:80:22"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "8029:52:22",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "8043:10:22",
																		"value": {
																			"kind": "number",
																			"nodeType": "YulLiteral",
																			"src": "8052:1:22",
																			"type": "",
																			"value": "0"
																		},
																		"variableNames": [
																			{
																				"name": "power",
																				"nodeType": "YulIdentifier",
																				"src": "8043:5:22"
																			}
																		]
																	},
																	{
																		"nodeType": "YulLeave",
																		"src": "8066:5:22"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "base",
																		"nodeType": "YulIdentifier",
																		"src": "8015:4:22"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "8008:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "8008:12:22"
															},
															"nodeType": "YulIf",
															"src": "8005:76:22"
														},
														{
															"cases": [
																{
																	"body": {
																		"nodeType": "YulBlock",
																		"src": "8117:52:22",
																		"statements": [
																			{
																				"nodeType": "YulAssignment",
																				"src": "8131:10:22",
																				"value": {
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "8140:1:22",
																					"type": "",
																					"value": "1"
																				},
																				"variableNames": [
																					{
																						"name": "power",
																						"nodeType": "YulIdentifier",
																						"src": "8131:5:22"
																					}
																				]
																			},
																			{
																				"nodeType": "YulLeave",
																				"src": "8154:5:22"
																			}
																		]
																	},
																	"nodeType": "YulCase",
																	"src": "8110:59:22",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8115:1:22",
																		"type": "",
																		"value": "1"
																	}
																},
																{
																	"body": {
																		"nodeType": "YulBlock",
																		"src": "8185:123:22",
																		"statements": [
																			{
																				"body": {
																					"nodeType": "YulBlock",
																					"src": "8220:22:22",
																					"statements": [
																						{
																							"expression": {
																								"arguments": [],
																								"functionName": {
																									"name": "panic_error_0x11",
																									"nodeType": "YulIdentifier",
																									"src": "8222:16:22"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "8222:18:22"
																							},
																							"nodeType": "YulExpressionStatement",
																							"src": "8222:18:22"
																						}
																					]
																				},
																				"condition": {
																					"arguments": [
																						{
																							"name": "exponent",
																							"nodeType": "YulIdentifier",
																							"src": "8205:8:22"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "8215:3:22",
																							"type": "",
																							"value": "255"
																						}
																					],
																					"functionName": {
																						"name": "gt",
																						"nodeType": "YulIdentifier",
																						"src": "8202:2:22"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "8202:17:22"
																				},
																				"nodeType": "YulIf",
																				"src": "8199:43:22"
																			},
																			{
																				"nodeType": "YulAssignment",
																				"src": "8255:25:22",
																				"value": {
																					"arguments": [
																						{
																							"name": "exponent",
																							"nodeType": "YulIdentifier",
																							"src": "8268:8:22"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "8278:1:22",
																							"type": "",
																							"value": "1"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "8264:3:22"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "8264:16:22"
																				},
																				"variableNames": [
																					{
																						"name": "power",
																						"nodeType": "YulIdentifier",
																						"src": "8255:5:22"
																					}
																				]
																			},
																			{
																				"nodeType": "YulLeave",
																				"src": "8293:5:22"
																			}
																		]
																	},
																	"nodeType": "YulCase",
																	"src": "8178:130:22",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8183:1:22",
																		"type": "",
																		"value": "2"
																	}
																}
															],
															"expression": {
																"name": "base",
																"nodeType": "YulIdentifier",
																"src": "8097:4:22"
															},
															"nodeType": "YulSwitch",
															"src": "8090:218:22"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "8406:70:22",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "8420:28:22",
																		"value": {
																			"arguments": [
																				{
																					"name": "base",
																					"nodeType": "YulIdentifier",
																					"src": "8433:4:22"
																				},
																				{
																					"name": "exponent",
																					"nodeType": "YulIdentifier",
																					"src": "8439:8:22"
																				}
																			],
																			"functionName": {
																				"name": "exp",
																				"nodeType": "YulIdentifier",
																				"src": "8429:3:22"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "8429:19:22"
																		},
																		"variableNames": [
																			{
																				"name": "power",
																				"nodeType": "YulIdentifier",
																				"src": "8420:5:22"
																			}
																		]
																	},
																	{
																		"nodeType": "YulLeave",
																		"src": "8461:5:22"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "base",
																						"nodeType": "YulIdentifier",
																						"src": "8330:4:22"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "8336:2:22",
																						"type": "",
																						"value": "11"
																					}
																				],
																				"functionName": {
																					"name": "lt",
																					"nodeType": "YulIdentifier",
																					"src": "8327:2:22"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "8327:12:22"
																			},
																			{
																				"arguments": [
																					{
																						"name": "exponent",
																						"nodeType": "YulIdentifier",
																						"src": "8344:8:22"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "8354:2:22",
																						"type": "",
																						"value": "78"
																					}
																				],
																				"functionName": {
																					"name": "lt",
																					"nodeType": "YulIdentifier",
																					"src": "8341:2:22"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "8341:16:22"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "8323:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8323:35:22"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "base",
																						"nodeType": "YulIdentifier",
																						"src": "8367:4:22"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "8373:3:22",
																						"type": "",
																						"value": "307"
																					}
																				],
																				"functionName": {
																					"name": "lt",
																					"nodeType": "YulIdentifier",
																					"src": "8364:2:22"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "8364:13:22"
																			},
																			{
																				"arguments": [
																					{
																						"name": "exponent",
																						"nodeType": "YulIdentifier",
																						"src": "8382:8:22"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "8392:2:22",
																						"type": "",
																						"value": "32"
																					}
																				],
																				"functionName": {
																					"name": "lt",
																					"nodeType": "YulIdentifier",
																					"src": "8379:2:22"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "8379:16:22"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "8360:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8360:36:22"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "8320:2:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "8320:77:22"
															},
															"nodeType": "YulIf",
															"src": "8317:159:22"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "8485:57:22",
															"value": {
																"arguments": [
																	{
																		"name": "base",
																		"nodeType": "YulIdentifier",
																		"src": "8527:4:22"
																	},
																	{
																		"name": "exponent",
																		"nodeType": "YulIdentifier",
																		"src": "8533:8:22"
																	}
																],
																"functionName": {
																	"name": "checked_exp_helper",
																	"nodeType": "YulIdentifier",
																	"src": "8508:18:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "8508:34:22"
															},
															"variables": [
																{
																	"name": "power_1",
																	"nodeType": "YulTypedName",
																	"src": "8489:7:22",
																	"type": ""
																},
																{
																	"name": "base_1",
																	"nodeType": "YulTypedName",
																	"src": "8498:6:22",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "8587:22:22",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "8589:16:22"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "8589:18:22"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "8589:18:22"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "power_1",
																		"nodeType": "YulIdentifier",
																		"src": "8557:7:22"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "8574:1:22",
																						"type": "",
																						"value": "0"
																					}
																				],
																				"functionName": {
																					"name": "not",
																					"nodeType": "YulIdentifier",
																					"src": "8570:3:22"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "8570:6:22"
																			},
																			{
																				"name": "base_1",
																				"nodeType": "YulIdentifier",
																				"src": "8578:6:22"
																			}
																		],
																		"functionName": {
																			"name": "div",
																			"nodeType": "YulIdentifier",
																			"src": "8566:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8566:19:22"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "8554:2:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "8554:32:22"
															},
															"nodeType": "YulIf",
															"src": "8551:58:22"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8618:29:22",
															"value": {
																"arguments": [
																	{
																		"name": "power_1",
																		"nodeType": "YulIdentifier",
																		"src": "8631:7:22"
																	},
																	{
																		"name": "base_1",
																		"nodeType": "YulIdentifier",
																		"src": "8640:6:22"
																	}
																],
																"functionName": {
																	"name": "mul",
																	"nodeType": "YulIdentifier",
																	"src": "8627:3:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "8627:20:22"
															},
															"variableNames": [
																{
																	"name": "power",
																	"nodeType": "YulIdentifier",
																	"src": "8618:5:22"
																}
															]
														}
													]
												},
												"name": "checked_exp_unsigned",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "base",
														"nodeType": "YulTypedName",
														"src": "7877:4:22",
														"type": ""
													},
													{
														"name": "exponent",
														"nodeType": "YulTypedName",
														"src": "7883:8:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "power",
														"nodeType": "YulTypedName",
														"src": "7896:5:22",
														"type": ""
													}
												],
												"src": "7847:806:22"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8726:72:22",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "8736:56:22",
															"value": {
																"arguments": [
																	{
																		"name": "base",
																		"nodeType": "YulIdentifier",
																		"src": "8766:4:22"
																	},
																	{
																		"arguments": [
																			{
																				"name": "exponent",
																				"nodeType": "YulIdentifier",
																				"src": "8776:8:22"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8786:4:22",
																				"type": "",
																				"value": "0xff"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "8772:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8772:19:22"
																	}
																],
																"functionName": {
																	"name": "checked_exp_unsigned",
																	"nodeType": "YulIdentifier",
																	"src": "8745:20:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "8745:47:22"
															},
															"variableNames": [
																{
																	"name": "power",
																	"nodeType": "YulIdentifier",
																	"src": "8736:5:22"
																}
															]
														}
													]
												},
												"name": "checked_exp_t_uint256_t_uint8",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "base",
														"nodeType": "YulTypedName",
														"src": "8697:4:22",
														"type": ""
													},
													{
														"name": "exponent",
														"nodeType": "YulTypedName",
														"src": "8703:8:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "power",
														"nodeType": "YulTypedName",
														"src": "8716:5:22",
														"type": ""
													}
												],
												"src": "8658:140:22"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8855:116:22",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "8914:22:22",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "8916:16:22"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "8916:18:22"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "8916:18:22"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "x",
																						"nodeType": "YulIdentifier",
																						"src": "8886:1:22"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "8879:6:22"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "8879:9:22"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "8872:6:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8872:17:22"
																	},
																	{
																		"arguments": [
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "8894:1:22"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "8905:1:22",
																								"type": "",
																								"value": "0"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nodeType": "YulIdentifier",
																							"src": "8901:3:22"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "8901:6:22"
																					},
																					{
																						"name": "x",
																						"nodeType": "YulIdentifier",
																						"src": "8909:1:22"
																					}
																				],
																				"functionName": {
																					"name": "div",
																					"nodeType": "YulIdentifier",
																					"src": "8897:3:22"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "8897:14:22"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "8891:2:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8891:21:22"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "8868:3:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "8868:45:22"
															},
															"nodeType": "YulIf",
															"src": "8865:71:22"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8945:20:22",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "8960:1:22"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "8963:1:22"
																	}
																],
																"functionName": {
																	"name": "mul",
																	"nodeType": "YulIdentifier",
																	"src": "8956:3:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "8956:9:22"
															},
															"variableNames": [
																{
																	"name": "product",
																	"nodeType": "YulIdentifier",
																	"src": "8945:7:22"
																}
															]
														}
													]
												},
												"name": "checked_mul_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "8834:1:22",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "8837:1:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "product",
														"nodeType": "YulTypedName",
														"src": "8843:7:22",
														"type": ""
													}
												],
												"src": "8803:168:22"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9083:87:22",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "9093:26:22",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9105:9:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9116:2:22",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9101:3:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "9101:18:22"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "9093:4:22"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9135:9:22"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "9150:6:22"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9158:4:22",
																				"type": "",
																				"value": "0xff"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "9146:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9146:17:22"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9128:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "9128:36:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9128:36:22"
														}
													]
												},
												"name": "abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "9052:9:22",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "9063:6:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "9074:4:22",
														"type": ""
													}
												],
												"src": "8976:194:22"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9349:227:22",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9366:9:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9377:2:22",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9359:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "9359:21:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9359:21:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9400:9:22"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9411:2:22",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9396:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9396:18:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9416:2:22",
																		"type": "",
																		"value": "37"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9389:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "9389:30:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9389:30:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9439:9:22"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9450:2:22",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9435:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9435:18:22"
																	},
																	{
																		"hexValue": "45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "9455:34:22",
																		"type": "",
																		"value": "ERC20: decreased allowance below"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9428:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "9428:62:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9428:62:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9510:9:22"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9521:2:22",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9506:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9506:18:22"
																	},
																	{
																		"hexValue": "207a65726f",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "9526:7:22",
																		"type": "",
																		"value": " zero"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9499:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "9499:35:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9499:35:22"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9543:27:22",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9555:9:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9566:3:22",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9551:3:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "9551:19:22"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "9543:4:22"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "9326:9:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "9340:4:22",
														"type": ""
													}
												],
												"src": "9175:401:22"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9755:226:22",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9772:9:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9783:2:22",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9765:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "9765:21:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9765:21:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9806:9:22"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9817:2:22",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9802:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9802:18:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9822:2:22",
																		"type": "",
																		"value": "36"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9795:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "9795:30:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9795:30:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9845:9:22"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9856:2:22",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9841:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9841:18:22"
																	},
																	{
																		"hexValue": "45524332303a20617070726f76652066726f6d20746865207a65726f20616464",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "9861:34:22",
																		"type": "",
																		"value": "ERC20: approve from the zero add"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9834:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "9834:62:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9834:62:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9916:9:22"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9927:2:22",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9912:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9912:18:22"
																	},
																	{
																		"hexValue": "72657373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "9932:6:22",
																		"type": "",
																		"value": "ress"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9905:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "9905:34:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9905:34:22"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9948:27:22",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9960:9:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9971:3:22",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9956:3:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "9956:19:22"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "9948:4:22"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "9732:9:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "9746:4:22",
														"type": ""
													}
												],
												"src": "9581:400:22"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10160:224:22",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "10177:9:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10188:2:22",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10170:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "10170:21:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10170:21:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10211:9:22"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10222:2:22",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10207:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10207:18:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10227:2:22",
																		"type": "",
																		"value": "34"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10200:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "10200:30:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10200:30:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10250:9:22"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10261:2:22",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10246:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10246:18:22"
																	},
																	{
																		"hexValue": "45524332303a20617070726f766520746f20746865207a65726f206164647265",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "10266:34:22",
																		"type": "",
																		"value": "ERC20: approve to the zero addre"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10239:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "10239:62:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10239:62:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10321:9:22"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10332:2:22",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10317:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10317:18:22"
																	},
																	{
																		"hexValue": "7373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "10337:4:22",
																		"type": "",
																		"value": "ss"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10310:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "10310:32:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10310:32:22"
														},
														{
															"nodeType": "YulAssignment",
															"src": "10351:27:22",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "10363:9:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10374:3:22",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "10359:3:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "10359:19:22"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "10351:4:22"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "10137:9:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "10151:4:22",
														"type": ""
													}
												],
												"src": "9986:398:22"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10563:179:22",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "10580:9:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10591:2:22",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10573:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "10573:21:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10573:21:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10614:9:22"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10625:2:22",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10610:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10610:18:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10630:2:22",
																		"type": "",
																		"value": "29"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10603:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "10603:30:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10603:30:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10653:9:22"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10664:2:22",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10649:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10649:18:22"
																	},
																	{
																		"hexValue": "45524332303a20696e73756666696369656e7420616c6c6f77616e6365",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "10669:31:22",
																		"type": "",
																		"value": "ERC20: insufficient allowance"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10642:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "10642:59:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10642:59:22"
														},
														{
															"nodeType": "YulAssignment",
															"src": "10710:26:22",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "10722:9:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10733:2:22",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "10718:3:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "10718:18:22"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "10710:4:22"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "10540:9:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "10554:4:22",
														"type": ""
													}
												],
												"src": "10389:353:22"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10921:227:22",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "10938:9:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10949:2:22",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10931:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "10931:21:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10931:21:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10972:9:22"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10983:2:22",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10968:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10968:18:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10988:2:22",
																		"type": "",
																		"value": "37"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10961:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "10961:30:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10961:30:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11011:9:22"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11022:2:22",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11007:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11007:18:22"
																	},
																	{
																		"hexValue": "45524332303a207472616e736665722066726f6d20746865207a65726f206164",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "11027:34:22",
																		"type": "",
																		"value": "ERC20: transfer from the zero ad"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11000:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "11000:62:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11000:62:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11082:9:22"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11093:2:22",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11078:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11078:18:22"
																	},
																	{
																		"hexValue": "6472657373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "11098:7:22",
																		"type": "",
																		"value": "dress"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11071:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "11071:35:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11071:35:22"
														},
														{
															"nodeType": "YulAssignment",
															"src": "11115:27:22",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "11127:9:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11138:3:22",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "11123:3:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "11123:19:22"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "11115:4:22"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "10898:9:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "10912:4:22",
														"type": ""
													}
												],
												"src": "10747:401:22"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11327:225:22",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "11344:9:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11355:2:22",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11337:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "11337:21:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11337:21:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11378:9:22"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11389:2:22",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11374:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11374:18:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11394:2:22",
																		"type": "",
																		"value": "35"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11367:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "11367:30:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11367:30:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11417:9:22"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11428:2:22",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11413:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11413:18:22"
																	},
																	{
																		"hexValue": "45524332303a207472616e7366657220746f20746865207a65726f2061646472",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "11433:34:22",
																		"type": "",
																		"value": "ERC20: transfer to the zero addr"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11406:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "11406:62:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11406:62:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11488:9:22"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11499:2:22",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11484:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11484:18:22"
																	},
																	{
																		"hexValue": "657373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "11504:5:22",
																		"type": "",
																		"value": "ess"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11477:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "11477:33:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11477:33:22"
														},
														{
															"nodeType": "YulAssignment",
															"src": "11519:27:22",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "11531:9:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11542:3:22",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "11527:3:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "11527:19:22"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "11519:4:22"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "11304:9:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "11318:4:22",
														"type": ""
													}
												],
												"src": "11153:399:22"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11731:228:22",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "11748:9:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11759:2:22",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11741:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "11741:21:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11741:21:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11782:9:22"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11793:2:22",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11778:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11778:18:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11798:2:22",
																		"type": "",
																		"value": "38"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11771:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "11771:30:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11771:30:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11821:9:22"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11832:2:22",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11817:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11817:18:22"
																	},
																	{
																		"hexValue": "45524332303a207472616e7366657220616d6f756e7420657863656564732062",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "11837:34:22",
																		"type": "",
																		"value": "ERC20: transfer amount exceeds b"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11810:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "11810:62:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11810:62:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11892:9:22"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11903:2:22",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11888:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11888:18:22"
																	},
																	{
																		"hexValue": "616c616e6365",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "11908:8:22",
																		"type": "",
																		"value": "alance"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11881:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "11881:36:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11881:36:22"
														},
														{
															"nodeType": "YulAssignment",
															"src": "11926:27:22",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "11938:9:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11949:3:22",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "11934:3:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "11934:19:22"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "11926:4:22"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "11708:9:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "11722:4:22",
														"type": ""
													}
												],
												"src": "11557:402:22"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12045:103:22",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "12091:16:22",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "12100:1:22",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "12103:1:22",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "12093:6:22"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "12093:12:22"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "12093:12:22"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "12066:7:22"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12075:9:22"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "12062:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12062:23:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12087:2:22",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "12058:3:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "12058:32:22"
															},
															"nodeType": "YulIf",
															"src": "12055:52:22"
														},
														{
															"nodeType": "YulAssignment",
															"src": "12116:26:22",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "12132:9:22"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "12126:5:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "12126:16:22"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "12116:6:22"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bytes32_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "12011:9:22",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "12022:7:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "12034:6:22",
														"type": ""
													}
												],
												"src": "11964:184:22"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12327:236:22",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "12344:9:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12355:2:22",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12337:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "12337:21:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12337:21:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12378:9:22"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12389:2:22",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12374:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12374:18:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12394:2:22",
																		"type": "",
																		"value": "46"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12367:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "12367:30:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12367:30:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12417:9:22"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12428:2:22",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12413:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12413:18:22"
																	},
																	{
																		"hexValue": "45524331393637557067726164653a206e657720696d706c656d656e74617469",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "12433:34:22",
																		"type": "",
																		"value": "ERC1967Upgrade: new implementati"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12406:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "12406:62:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12406:62:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12488:9:22"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12499:2:22",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12484:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12484:18:22"
																	},
																	{
																		"hexValue": "6f6e206973206e6f742055555053",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "12504:16:22",
																		"type": "",
																		"value": "on is not UUPS"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12477:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "12477:44:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12477:44:22"
														},
														{
															"nodeType": "YulAssignment",
															"src": "12530:27:22",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "12542:9:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12553:3:22",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "12538:3:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "12538:19:22"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "12530:4:22"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_8e8e2fbcb586f700b5b14e2c4a650c8d83b9773c31c5fe8962070ea544e11f24__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "12304:9:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "12318:4:22",
														"type": ""
													}
												],
												"src": "12153:410:22"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12742:231:22",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "12759:9:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12770:2:22",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12752:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "12752:21:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12752:21:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12793:9:22"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12804:2:22",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12789:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12789:18:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12809:2:22",
																		"type": "",
																		"value": "41"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12782:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "12782:30:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12782:30:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12832:9:22"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12843:2:22",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12828:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12828:18:22"
																	},
																	{
																		"hexValue": "45524331393637557067726164653a20756e737570706f727465642070726f78",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "12848:34:22",
																		"type": "",
																		"value": "ERC1967Upgrade: unsupported prox"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12821:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "12821:62:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12821:62:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12903:9:22"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12914:2:22",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12899:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12899:18:22"
																	},
																	{
																		"hexValue": "6961626c6555554944",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "12919:11:22",
																		"type": "",
																		"value": "iableUUID"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12892:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "12892:39:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12892:39:22"
														},
														{
															"nodeType": "YulAssignment",
															"src": "12940:27:22",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "12952:9:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12963:3:22",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "12948:3:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "12948:19:22"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "12940:4:22"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_76b6b6debfc5febf101145a79ecf0b0d2e89e397dfdab2bca99888370411152c__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "12719:9:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "12733:4:22",
														"type": ""
													}
												],
												"src": "12568:405:22"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "13079:102:22",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "13089:26:22",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "13101:9:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13112:2:22",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "13097:3:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "13097:18:22"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "13089:4:22"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "13131:9:22"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "13146:6:22"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "13162:3:22",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "13167:1:22",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "13158:3:22"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "13158:11:22"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "13171:1:22",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "13154:3:22"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "13154:19:22"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "13142:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13142:32:22"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13124:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "13124:51:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13124:51:22"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "13048:9:22",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "13059:6:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "13070:4:22",
														"type": ""
													}
												],
												"src": "12978:203:22"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "13360:223:22",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "13377:9:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13388:2:22",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13370:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "13370:21:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13370:21:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "13411:9:22"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13422:2:22",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13407:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13407:18:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13427:2:22",
																		"type": "",
																		"value": "33"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13400:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "13400:30:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13400:30:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "13450:9:22"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13461:2:22",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13446:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13446:18:22"
																	},
																	{
																		"hexValue": "45524332303a206275726e2066726f6d20746865207a65726f20616464726573",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "13466:34:22",
																		"type": "",
																		"value": "ERC20: burn from the zero addres"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13439:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "13439:62:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13439:62:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "13521:9:22"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13532:2:22",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13517:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13517:18:22"
																	},
																	{
																		"hexValue": "73",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "13537:3:22",
																		"type": "",
																		"value": "s"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13510:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "13510:31:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13510:31:22"
														},
														{
															"nodeType": "YulAssignment",
															"src": "13550:27:22",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "13562:9:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13573:3:22",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "13558:3:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "13558:19:22"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "13550:4:22"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "13337:9:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "13351:4:22",
														"type": ""
													}
												],
												"src": "13186:397:22"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "13762:224:22",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "13779:9:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13790:2:22",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13772:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "13772:21:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13772:21:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "13813:9:22"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13824:2:22",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13809:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13809:18:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13829:2:22",
																		"type": "",
																		"value": "34"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13802:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "13802:30:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13802:30:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "13852:9:22"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13863:2:22",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13848:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13848:18:22"
																	},
																	{
																		"hexValue": "45524332303a206275726e20616d6f756e7420657863656564732062616c616e",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "13868:34:22",
																		"type": "",
																		"value": "ERC20: burn amount exceeds balan"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13841:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "13841:62:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13841:62:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "13923:9:22"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13934:2:22",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13919:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13919:18:22"
																	},
																	{
																		"hexValue": "6365",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "13939:4:22",
																		"type": "",
																		"value": "ce"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13912:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "13912:32:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13912:32:22"
														},
														{
															"nodeType": "YulAssignment",
															"src": "13953:27:22",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "13965:9:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13976:3:22",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "13961:3:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "13961:19:22"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "13953:4:22"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "13739:9:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "13753:4:22",
														"type": ""
													}
												],
												"src": "13588:398:22"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "14165:233:22",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "14182:9:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14193:2:22",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "14175:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "14175:21:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14175:21:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "14216:9:22"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "14227:2:22",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "14212:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14212:18:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14232:2:22",
																		"type": "",
																		"value": "43"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "14205:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "14205:30:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14205:30:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "14255:9:22"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "14266:2:22",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "14251:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14251:18:22"
																	},
																	{
																		"hexValue": "496e697469616c697a61626c653a20636f6e7472616374206973206e6f742069",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "14271:34:22",
																		"type": "",
																		"value": "Initializable: contract is not i"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "14244:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "14244:62:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14244:62:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "14326:9:22"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "14337:2:22",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "14322:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14322:18:22"
																	},
																	{
																		"hexValue": "6e697469616c697a696e67",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "14342:13:22",
																		"type": "",
																		"value": "nitializing"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "14315:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "14315:41:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14315:41:22"
														},
														{
															"nodeType": "YulAssignment",
															"src": "14365:27:22",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "14377:9:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14388:3:22",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "14373:3:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "14373:19:22"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "14365:4:22"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "14142:9:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "14156:4:22",
														"type": ""
													}
												],
												"src": "13991:407:22"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "14577:181:22",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "14594:9:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14605:2:22",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "14587:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "14587:21:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14587:21:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "14628:9:22"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "14639:2:22",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "14624:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14624:18:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14644:2:22",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "14617:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "14617:30:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14617:30:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "14667:9:22"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "14678:2:22",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "14663:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14663:18:22"
																	},
																	{
																		"hexValue": "45524332303a206d696e7420746f20746865207a65726f2061646472657373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "14683:33:22",
																		"type": "",
																		"value": "ERC20: mint to the zero address"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "14656:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "14656:61:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14656:61:22"
														},
														{
															"nodeType": "YulAssignment",
															"src": "14726:26:22",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "14738:9:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14749:2:22",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "14734:3:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "14734:18:22"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "14726:4:22"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "14554:9:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "14568:4:22",
														"type": ""
													}
												],
												"src": "14403:355:22"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "15152:397:22",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "15169:3:22"
																	},
																	{
																		"hexValue": "416363657373436f6e74726f6c3a206163636f756e7420",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "15174:25:22",
																		"type": "",
																		"value": "AccessControl: account "
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "15162:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "15162:38:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "15162:38:22"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "15209:27:22",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "15229:6:22"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "15223:5:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "15223:13:22"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "15213:6:22",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "15271:6:22"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "15279:4:22",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "15267:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "15267:17:22"
																	},
																	{
																		"arguments": [
																			{
																				"name": "pos",
																				"nodeType": "YulIdentifier",
																				"src": "15290:3:22"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "15295:2:22",
																				"type": "",
																				"value": "23"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "15286:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "15286:12:22"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "15300:6:22"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory",
																	"nodeType": "YulIdentifier",
																	"src": "15245:21:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "15245:62:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "15245:62:22"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "15316:26:22",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "15330:3:22"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "15335:6:22"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "15326:3:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "15326:16:22"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "15320:2:22",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "15362:2:22"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "15366:2:22",
																				"type": "",
																				"value": "23"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "15358:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "15358:11:22"
																	},
																	{
																		"hexValue": "206973206d697373696e6720726f6c6520",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "15371:19:22",
																		"type": "",
																		"value": " is missing role "
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "15351:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "15351:40:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "15351:40:22"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "15400:29:22",
															"value": {
																"arguments": [
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "15422:6:22"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "15416:5:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "15416:13:22"
															},
															"variables": [
																{
																	"name": "length_1",
																	"nodeType": "YulTypedName",
																	"src": "15404:8:22",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value1",
																				"nodeType": "YulIdentifier",
																				"src": "15464:6:22"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "15472:4:22",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "15460:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "15460:17:22"
																	},
																	{
																		"arguments": [
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "15483:2:22"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "15487:2:22",
																				"type": "",
																				"value": "40"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "15479:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "15479:11:22"
																	},
																	{
																		"name": "length_1",
																		"nodeType": "YulIdentifier",
																		"src": "15492:8:22"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory",
																	"nodeType": "YulIdentifier",
																	"src": "15438:21:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "15438:63:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "15438:63:22"
														},
														{
															"nodeType": "YulAssignment",
															"src": "15510:33:22",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "15525:2:22"
																			},
																			{
																				"name": "length_1",
																				"nodeType": "YulIdentifier",
																				"src": "15529:8:22"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "15521:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "15521:17:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "15540:2:22",
																		"type": "",
																		"value": "40"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "15517:3:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "15517:26:22"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "15510:3:22"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_packed_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_t_string_memory_ptr_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "15120:3:22",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "15125:6:22",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "15133:6:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "15144:3:22",
														"type": ""
													}
												],
												"src": "14763:786:22"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "15728:235:22",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "15745:9:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "15756:2:22",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "15738:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "15738:21:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "15738:21:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "15779:9:22"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "15790:2:22",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "15775:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "15775:18:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "15795:2:22",
																		"type": "",
																		"value": "45"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "15768:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "15768:30:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "15768:30:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "15818:9:22"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "15829:2:22",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "15814:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "15814:18:22"
																	},
																	{
																		"hexValue": "455243313936373a206e657720696d706c656d656e746174696f6e206973206e",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "15834:34:22",
																		"type": "",
																		"value": "ERC1967: new implementation is n"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "15807:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "15807:62:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "15807:62:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "15889:9:22"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "15900:2:22",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "15885:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "15885:18:22"
																	},
																	{
																		"hexValue": "6f74206120636f6e7472616374",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "15905:15:22",
																		"type": "",
																		"value": "ot a contract"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "15878:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "15878:43:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "15878:43:22"
														},
														{
															"nodeType": "YulAssignment",
															"src": "15930:27:22",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "15942:9:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "15953:3:22",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "15938:3:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "15938:19:22"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "15930:4:22"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "15705:9:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "15719:4:22",
														"type": ""
													}
												],
												"src": "15554:409:22"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "16142:170:22",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "16159:9:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "16170:2:22",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "16152:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "16152:21:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "16152:21:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "16193:9:22"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "16204:2:22",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "16189:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "16189:18:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "16209:2:22",
																		"type": "",
																		"value": "20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "16182:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "16182:30:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "16182:30:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "16232:9:22"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "16243:2:22",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "16228:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "16228:18:22"
																	},
																	{
																		"hexValue": "5061757361626c653a206e6f7420706175736564",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "16248:22:22",
																		"type": "",
																		"value": "Pausable: not paused"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "16221:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "16221:50:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "16221:50:22"
														},
														{
															"nodeType": "YulAssignment",
															"src": "16280:26:22",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "16292:9:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "16303:2:22",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "16288:3:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "16288:18:22"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "16280:4:22"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "16119:9:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "16133:4:22",
														"type": ""
													}
												],
												"src": "15968:344:22"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "16491:166:22",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "16508:9:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "16519:2:22",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "16501:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "16501:21:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "16501:21:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "16542:9:22"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "16553:2:22",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "16538:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "16538:18:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "16558:2:22",
																		"type": "",
																		"value": "16"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "16531:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "16531:30:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "16531:30:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "16581:9:22"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "16592:2:22",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "16577:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "16577:18:22"
																	},
																	{
																		"hexValue": "5061757361626c653a20706175736564",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "16597:18:22",
																		"type": "",
																		"value": "Pausable: paused"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "16570:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "16570:46:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "16570:46:22"
														},
														{
															"nodeType": "YulAssignment",
															"src": "16625:26:22",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "16637:9:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "16648:2:22",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "16633:3:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "16633:18:22"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "16625:4:22"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "16468:9:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "16482:4:22",
														"type": ""
													}
												],
												"src": "16317:340:22"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "16694:95:22",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "16711:1:22",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "16718:3:22",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "16723:10:22",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "16714:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "16714:20:22"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "16704:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "16704:31:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "16704:31:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "16751:1:22",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "16754:4:22",
																		"type": "",
																		"value": "0x32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "16744:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "16744:15:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "16744:15:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "16775:1:22",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "16778:4:22",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "16768:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "16768:15:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "16768:15:22"
														}
													]
												},
												"name": "panic_error_0x32",
												"nodeType": "YulFunctionDefinition",
												"src": "16662:127:22"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "16841:89:22",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "16868:22:22",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "16870:16:22"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "16870:18:22"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "16870:18:22"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "16861:5:22"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "16854:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "16854:13:22"
															},
															"nodeType": "YulIf",
															"src": "16851:39:22"
														},
														{
															"nodeType": "YulAssignment",
															"src": "16899:25:22",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "16910:5:22"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "16921:1:22",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "16917:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "16917:6:22"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "16906:3:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "16906:18:22"
															},
															"variableNames": [
																{
																	"name": "ret",
																	"nodeType": "YulIdentifier",
																	"src": "16899:3:22"
																}
															]
														}
													]
												},
												"name": "decrement_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "16823:5:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "ret",
														"nodeType": "YulTypedName",
														"src": "16833:3:22",
														"type": ""
													}
												],
												"src": "16794:136:22"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "17109:182:22",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "17126:9:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "17137:2:22",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "17119:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "17119:21:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "17119:21:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "17160:9:22"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "17171:2:22",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "17156:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "17156:18:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "17176:2:22",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "17149:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "17149:30:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "17149:30:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "17199:9:22"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "17210:2:22",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "17195:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "17195:18:22"
																	},
																	{
																		"hexValue": "537472696e67733a20686578206c656e67746820696e73756666696369656e74",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "17215:34:22",
																		"type": "",
																		"value": "Strings: hex length insufficient"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "17188:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "17188:62:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "17188:62:22"
														},
														{
															"nodeType": "YulAssignment",
															"src": "17259:26:22",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "17271:9:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "17282:2:22",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "17267:3:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "17267:18:22"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "17259:4:22"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "17086:9:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "17100:4:22",
														"type": ""
													}
												],
												"src": "16935:356:22"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "17433:137:22",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "17443:27:22",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "17463:6:22"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "17457:5:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "17457:13:22"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "17447:6:22",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "17505:6:22"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "17513:4:22",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "17501:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "17501:17:22"
																	},
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "17520:3:22"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "17525:6:22"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory",
																	"nodeType": "YulIdentifier",
																	"src": "17479:21:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "17479:53:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "17479:53:22"
														},
														{
															"nodeType": "YulAssignment",
															"src": "17541:23:22",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "17552:3:22"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "17557:6:22"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "17548:3:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "17548:16:22"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "17541:3:22"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "17409:3:22",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "17414:6:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "17425:3:22",
														"type": ""
													}
												],
												"src": "17296:274:22"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "17749:179:22",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "17766:9:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "17777:2:22",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "17759:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "17759:21:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "17759:21:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "17800:9:22"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "17811:2:22",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "17796:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "17796:18:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "17816:2:22",
																		"type": "",
																		"value": "29"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "17789:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "17789:30:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "17789:30:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "17839:9:22"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "17850:2:22",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "17835:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "17835:18:22"
																	},
																	{
																		"hexValue": "416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "17855:31:22",
																		"type": "",
																		"value": "Address: call to non-contract"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "17828:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "17828:59:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "17828:59:22"
														},
														{
															"nodeType": "YulAssignment",
															"src": "17896:26:22",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "17908:9:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "17919:2:22",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "17904:3:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "17904:18:22"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "17896:4:22"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "17726:9:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "17740:4:22",
														"type": ""
													}
												],
												"src": "17575:353:22"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, shl(224, 0xffffffff)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function copy_memory_to_memory(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length) { mstore(add(dst, length), 0) }\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        let length := mload(value0)\n        mstore(add(headStart, 32), length)\n        copy_memory_to_memory(add(value0, 32), add(headStart, 64), length)\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_bytes32t_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_tuple_t_addresst_bytes_memory_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        let offset := calldataload(add(headStart, 32))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let _3 := calldataload(_2)\n        if gt(_3, _1) { panic_error_0x41() }\n        let _4 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_3, 0x1f), _4), 63), _4))\n        if or(gt(newFreePtr, _1), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _3)\n        if gt(add(add(_2, _3), 32), dataEnd) { revert(0, 0) }\n        calldatacopy(add(memPtr, 32), add(_2, 32), _3)\n        mstore(add(add(memPtr, _3), 32), 0)\n        value1 := memPtr\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 47)\n        mstore(add(headStart, 64), \"AccessControl: can only renounce\")\n        mstore(add(headStart, 96), \" roles for self\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_36e108fa7a809b52ab1951dd91c117a7bc9ac5250bdf1aa162d4e104f7edf9eb__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 44)\n        mstore(add(headStart, 64), \"Function must be called through \")\n        mstore(add(headStart, 96), \"delegatecall\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_52f1ead4d9653e13afbd2e90ef2587c30187cd50b2e97d784e3f7a7541247434__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 44)\n        mstore(add(headStart, 64), \"Function must be called through \")\n        mstore(add(headStart, 96), \"active proxy\")\n        tail := add(headStart, 128)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y)) { panic_error_0x11() }\n        sum := add(x, y)\n    }\n    function abi_encode_tuple_t_stringliteral_67f0151b4ad1dcfa0e3302a0cd6019f51582ef1807b37dceb00bd852a514f7f4__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 56)\n        mstore(add(headStart, 64), \"UUPSUpgradeable: must not be cal\")\n        mstore(add(headStart, 96), \"led through delegatecall\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 46)\n        mstore(add(headStart, 64), \"Initializable: contract is alrea\")\n        mstore(add(headStart, 96), \"dy initialized\")\n        tail := add(headStart, 128)\n    }\n    function checked_exp_helper(_base, exponent) -> power, base\n    {\n        let power_1 := 1\n        power := power_1\n        base := _base\n        for { } gt(exponent, power_1) { }\n        {\n            if gt(base, div(not(0), base)) { panic_error_0x11() }\n            if and(exponent, power_1) { power := mul(power, base) }\n            base := mul(base, base)\n            exponent := shr(power_1, exponent)\n        }\n    }\n    function checked_exp_unsigned(base, exponent) -> power\n    {\n        if iszero(exponent)\n        {\n            power := 1\n            leave\n        }\n        if iszero(base)\n        {\n            power := 0\n            leave\n        }\n        switch base\n        case 1 {\n            power := 1\n            leave\n        }\n        case 2 {\n            if gt(exponent, 255) { panic_error_0x11() }\n            power := shl(exponent, 1)\n            leave\n        }\n        if or(and(lt(base, 11), lt(exponent, 78)), and(lt(base, 307), lt(exponent, 32)))\n        {\n            power := exp(base, exponent)\n            leave\n        }\n        let power_1, base_1 := checked_exp_helper(base, exponent)\n        if gt(power_1, div(not(0), base_1)) { panic_error_0x11() }\n        power := mul(power_1, base_1)\n    }\n    function checked_exp_t_uint256_t_uint8(base, exponent) -> power\n    {\n        power := checked_exp_unsigned(base, and(exponent, 0xff))\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        if and(iszero(iszero(x)), gt(y, div(not(0), x))) { panic_error_0x11() }\n        product := mul(x, y)\n    }\n    function abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n    function abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC20: decreased allowance below\")\n        mstore(add(headStart, 96), \" zero\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 36)\n        mstore(add(headStart, 64), \"ERC20: approve from the zero add\")\n        mstore(add(headStart, 96), \"ress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 34)\n        mstore(add(headStart, 64), \"ERC20: approve to the zero addre\")\n        mstore(add(headStart, 96), \"ss\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"ERC20: insufficient allowance\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC20: transfer from the zero ad\")\n        mstore(add(headStart, 96), \"dress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 35)\n        mstore(add(headStart, 64), \"ERC20: transfer to the zero addr\")\n        mstore(add(headStart, 96), \"ess\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"ERC20: transfer amount exceeds b\")\n        mstore(add(headStart, 96), \"alance\")\n        tail := add(headStart, 128)\n    }\n    function abi_decode_tuple_t_bytes32_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function abi_encode_tuple_t_stringliteral_8e8e2fbcb586f700b5b14e2c4a650c8d83b9773c31c5fe8962070ea544e11f24__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 46)\n        mstore(add(headStart, 64), \"ERC1967Upgrade: new implementati\")\n        mstore(add(headStart, 96), \"on is not UUPS\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_76b6b6debfc5febf101145a79ecf0b0d2e89e397dfdab2bca99888370411152c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 41)\n        mstore(add(headStart, 64), \"ERC1967Upgrade: unsupported prox\")\n        mstore(add(headStart, 96), \"iableUUID\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 33)\n        mstore(add(headStart, 64), \"ERC20: burn from the zero addres\")\n        mstore(add(headStart, 96), \"s\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 34)\n        mstore(add(headStart, 64), \"ERC20: burn amount exceeds balan\")\n        mstore(add(headStart, 96), \"ce\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 43)\n        mstore(add(headStart, 64), \"Initializable: contract is not i\")\n        mstore(add(headStart, 96), \"nitializing\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 31)\n        mstore(add(headStart, 64), \"ERC20: mint to the zero address\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_t_string_memory_ptr_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        mstore(pos, \"AccessControl: account \")\n        let length := mload(value0)\n        copy_memory_to_memory(add(value0, 0x20), add(pos, 23), length)\n        let _1 := add(pos, length)\n        mstore(add(_1, 23), \" is missing role \")\n        let length_1 := mload(value1)\n        copy_memory_to_memory(add(value1, 0x20), add(_1, 40), length_1)\n        end := add(add(_1, length_1), 40)\n    }\n    function abi_encode_tuple_t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 45)\n        mstore(add(headStart, 64), \"ERC1967: new implementation is n\")\n        mstore(add(headStart, 96), \"ot a contract\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 20)\n        mstore(add(headStart, 64), \"Pausable: not paused\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 16)\n        mstore(add(headStart, 64), \"Pausable: paused\")\n        tail := add(headStart, 96)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function decrement_t_uint256(value) -> ret\n    {\n        if iszero(value) { panic_error_0x11() }\n        ret := add(value, not(0))\n    }\n    function abi_encode_tuple_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Strings: hex length insufficient\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory(add(value0, 0x20), pos, length)\n        end := add(pos, length)\n    }\n    function abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"Address: call to non-contract\")\n        tail := add(headStart, 96)\n    }\n}",
									"id": 22,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {
								"973": [
									{
										"length": 32,
										"start": 1821
									},
									{
										"length": 32,
										"start": 1885
									},
									{
										"length": 32,
										"start": 2121
									},
									{
										"length": 32,
										"start": 2185
									},
									{
										"length": 32,
										"start": 2328
									}
								]
							},
							"linkReferences": {},
							"object": "6080604052600436106101c25760003560e01c806352d1902d116100f757806395d89b4111610095578063d547741f11610064578063d547741f146104ca578063dd62ed3e146104ea578063e63ab1e91461050a578063f72c0d8b1461052c57600080fd5b806395d89b4114610460578063a217fddf14610475578063a457c2d71461048a578063a9059cbb146104aa57600080fd5b806379cc6790116100d157806379cc6790146103f65780638129fc1c146104165780638456cb591461042b57806391d148541461044057600080fd5b806352d1902d146103935780635c975abb146103a857806370a08231146103c057600080fd5b8063313ce56711610164578063395093511161013e578063395093511461032b5780633f4ba83a1461034b57806342966c68146103605780634f1ef2861461038057600080fd5b8063313ce567146102cf57806336568abe146102eb5780633659cfe61461030b57600080fd5b806318160ddd116101a057806318160ddd1461023e57806323b872dd1461025d578063248a9ca31461027d5780632f2ff15d146102ad57600080fd5b806301ffc9a7146101c757806306fdde03146101fc578063095ea7b31461021e575b600080fd5b3480156101d357600080fd5b506101e76101e2366004611bf7565b610560565b60405190151581526020015b60405180910390f35b34801561020857600080fd5b50610211610597565b6040516101f39190611c4d565b34801561022a57600080fd5b506101e7610239366004611c9c565b610629565b34801561024a57600080fd5b506035545b6040519081526020016101f3565b34801561026957600080fd5b506101e7610278366004611cc6565b610641565b34801561028957600080fd5b5061024f610298366004611d02565b600090815260fb602052604090206001015490565b3480156102b957600080fd5b506102cd6102c8366004611d1b565b610665565b005b3480156102db57600080fd5b50604051601281526020016101f3565b3480156102f757600080fd5b506102cd610306366004611d1b565b61068f565b34801561031757600080fd5b506102cd610326366004611d47565b610712565b34801561033757600080fd5b506101e7610346366004611c9c565b6107f2565b34801561035757600080fd5b506102cd610814565b34801561036c57600080fd5b506102cd61037b366004611d02565b610834565b6102cd61038e366004611d78565b61083e565b34801561039f57600080fd5b5061024f61090b565b3480156103b457600080fd5b5060975460ff166101e7565b3480156103cc57600080fd5b5061024f6103db366004611d47565b6001600160a01b031660009081526033602052604090205490565b34801561040257600080fd5b506102cd610411366004611c9c565b6109be565b34801561042257600080fd5b506102cd6109d3565b34801561043757600080fd5b506102cd610bb0565b34801561044c57600080fd5b506101e761045b366004611d1b565b610bd0565b34801561046c57600080fd5b50610211610bfb565b34801561048157600080fd5b5061024f600081565b34801561049657600080fd5b506101e76104a5366004611c9c565b610c0a565b3480156104b657600080fd5b506101e76104c5366004611c9c565b610c85565b3480156104d657600080fd5b506102cd6104e5366004611d1b565b610c93565b3480156104f657600080fd5b5061024f610505366004611e3a565b610cb8565b34801561051657600080fd5b5061024f6000805160206121ba83398151915281565b34801561053857600080fd5b5061024f7f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e381565b60006001600160e01b03198216637965db0b60e01b148061059157506301ffc9a760e01b6001600160e01b03198316145b92915050565b6060603680546105a690611e64565b80601f01602080910402602001604051908101604052809291908181526020018280546105d290611e64565b801561061f5780601f106105f45761010080835404028352916020019161061f565b820191906000526020600020905b81548152906001019060200180831161060257829003601f168201915b5050505050905090565b600033610637818585610ce3565b5060019392505050565b60003361064f858285610e07565b61065a858585610e81565b506001949350505050565b600082815260fb602052604090206001015461068081611037565b61068a8383611041565b505050565b6001600160a01b03811633146107045760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b61070e82826110c7565b5050565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016141561075b5760405162461bcd60e51b81526004016106fb90611e9f565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166107a460008051602061219a833981519152546001600160a01b031690565b6001600160a01b0316146107ca5760405162461bcd60e51b81526004016106fb90611eeb565b6107d38161112e565b604080516000808252602082019092526107ef91839190611158565b50565b6000336106378185856108058383610cb8565b61080f9190611f4d565b610ce3565b6000805160206121ba83398151915261082c81611037565b6107ef6112d2565b6107ef3382611324565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156108875760405162461bcd60e51b81526004016106fb90611e9f565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166108d060008051602061219a833981519152546001600160a01b031690565b6001600160a01b0316146108f65760405162461bcd60e51b81526004016106fb90611eeb565b6108ff8261112e565b61070e82826001611158565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146109ab5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c000000000000000060648201526084016106fb565b5060008051602061219a83398151915290565b6109c9823383610e07565b61070e8282611324565b600054610100900460ff16158080156109f35750600054600160ff909116105b80610a0d5750303b158015610a0d575060005460ff166001145b610a705760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016106fb565b6000805460ff191660011790558015610a93576000805461ff0019166101001790555b610ad8604051806040016040528060078152602001665052415858495360c81b815250604051806040016040528060048152602001630a082b0b60e31b815250611464565b610ae0611495565b610ae86114be565b610af0611495565b610af8611495565b610b03600033611041565b610b1b6000805160206121ba83398151915233611041565b610b3e33610b2b6012600a612049565b610b3990633b9aca00612058565b6114ed565b610b687f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e333611041565b80156107ef576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a150565b6000805160206121ba833981519152610bc881611037565b6107ef6115ba565b600091825260fb602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6060603780546105a690611e64565b60003381610c188286610cb8565b905083811015610c785760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084016106fb565b61065a8286868403610ce3565b600033610637818585610e81565b600082815260fb6020526040902060010154610cae81611037565b61068a83836110c7565b6001600160a01b03918216600090815260346020908152604080832093909416825291909152205490565b6001600160a01b038316610d455760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016106fb565b6001600160a01b038216610da65760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016106fb565b6001600160a01b0383811660008181526034602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6000610e138484610cb8565b90506000198114610e7b5781811015610e6e5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060448201526064016106fb565b610e7b8484848403610ce3565b50505050565b6001600160a01b038316610ee55760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016106fb565b6001600160a01b038216610f475760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016106fb565b610f528383836115f7565b6001600160a01b03831660009081526033602052604090205481811015610fca5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016106fb565b6001600160a01b0380851660008181526033602052604080822086860390559286168082529083902080548601905591517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9061102a9086815260200190565b60405180910390a3610e7b565b6107ef81336115ff565b61104b8282610bd0565b61070e57600082815260fb602090815260408083206001600160a01b03851684529091529020805460ff191660011790556110833390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6110d18282610bd0565b1561070e57600082815260fb602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b7f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e361070e81611037565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff161561118b5761068a83611658565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b1580156111c457600080fd5b505afa9250505080156111f4575060408051601f3d908101601f191682019092526111f191810190612077565b60015b6112575760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b60648201526084016106fb565b60008051602061219a83398151915281146112c65760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b60648201526084016106fb565b5061068a8383836116f4565b6112da611719565b6097805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6001600160a01b0382166113845760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b60648201526084016106fb565b611390826000836115f7565b6001600160a01b038216600090815260336020526040902054818110156114045760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b60648201526084016106fb565b6001600160a01b03831660008181526033602090815260408083208686039055603580548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3505050565b600054610100900460ff1661148b5760405162461bcd60e51b81526004016106fb90612090565b61070e8282611762565b600054610100900460ff166114bc5760405162461bcd60e51b81526004016106fb90612090565b565b600054610100900460ff166114e55760405162461bcd60e51b81526004016106fb90612090565b6114bc6117b0565b6001600160a01b0382166115435760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016106fb565b61154f600083836115f7565b80603560008282546115619190611f4d565b90915550506001600160a01b0382166000818152603360209081526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b6115c26117e3565b6097805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586113073390565b61068a6117e3565b6116098282610bd0565b61070e5761161681611829565b61162183602061183b565b6040516020016116329291906120db565b60408051601f198184030181529082905262461bcd60e51b82526106fb91600401611c4d565b6001600160a01b0381163b6116c55760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016106fb565b60008051602061219a83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6116fd836119de565b60008251118061170a5750805b1561068a57610e7b8383611a1e565b60975460ff166114bc5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016106fb565b600054610100900460ff166117895760405162461bcd60e51b81526004016106fb90612090565b815161179c906036906020850190611b5e565b50805161068a906037906020840190611b5e565b600054610100900460ff166117d75760405162461bcd60e51b81526004016106fb90612090565b6097805460ff19169055565b60975460ff16156114bc5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016106fb565b60606105916001600160a01b03831660145b6060600061184a836002612058565b611855906002611f4d565b67ffffffffffffffff81111561186d5761186d611d62565b6040519080825280601f01601f191660200182016040528015611897576020820181803683370190505b509050600360fc1b816000815181106118b2576118b2612150565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106118e1576118e1612150565b60200101906001600160f81b031916908160001a9053506000611905846002612058565b611910906001611f4d565b90505b6001811115611988576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061194457611944612150565b1a60f81b82828151811061195a5761195a612150565b60200101906001600160f81b031916908160001a90535060049490941c9361198181612166565b9050611913565b5083156119d75760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016106fb565b9392505050565b6119e781611658565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606119d783836040518060600160405280602781526020016121da602791396060600080856001600160a01b031685604051611a5b919061217d565b600060405180830381855af49150503d8060008114611a96576040519150601f19603f3d011682016040523d82523d6000602084013e611a9b565b606091505b5091509150611aac86838387611ab6565b9695505050505050565b60608315611b22578251611b1b576001600160a01b0385163b611b1b5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016106fb565b5081611b2c565b611b2c8383611b34565b949350505050565b815115611b445781518083602001fd5b8060405162461bcd60e51b81526004016106fb9190611c4d565b828054611b6a90611e64565b90600052602060002090601f016020900481019282611b8c5760008555611bd2565b82601f10611ba557805160ff1916838001178555611bd2565b82800160010185558215611bd2579182015b82811115611bd2578251825591602001919060010190611bb7565b50611bde929150611be2565b5090565b5b80821115611bde5760008155600101611be3565b600060208284031215611c0957600080fd5b81356001600160e01b0319811681146119d757600080fd5b60005b83811015611c3c578181015183820152602001611c24565b83811115610e7b5750506000910152565b6020815260008251806020840152611c6c816040850160208701611c21565b601f01601f19169190910160400192915050565b80356001600160a01b0381168114611c9757600080fd5b919050565b60008060408385031215611caf57600080fd5b611cb883611c80565b946020939093013593505050565b600080600060608486031215611cdb57600080fd5b611ce484611c80565b9250611cf260208501611c80565b9150604084013590509250925092565b600060208284031215611d1457600080fd5b5035919050565b60008060408385031215611d2e57600080fd5b82359150611d3e60208401611c80565b90509250929050565b600060208284031215611d5957600080fd5b6119d782611c80565b634e487b7160e01b600052604160045260246000fd5b60008060408385031215611d8b57600080fd5b611d9483611c80565b9150602083013567ffffffffffffffff80821115611db157600080fd5b818501915085601f830112611dc557600080fd5b813581811115611dd757611dd7611d62565b604051601f8201601f19908116603f01168101908382118183101715611dff57611dff611d62565b81604052828152886020848701011115611e1857600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b60008060408385031215611e4d57600080fd5b611e5683611c80565b9150611d3e60208401611c80565b600181811c90821680611e7857607f821691505b60208210811415611e9957634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b60008219821115611f6057611f60611f37565b500190565b600181815b80851115611fa0578160001904821115611f8657611f86611f37565b80851615611f9357918102915b93841c9390800290611f6a565b509250929050565b600082611fb757506001610591565b81611fc457506000610591565b8160018114611fda5760028114611fe457612000565b6001915050610591565b60ff841115611ff557611ff5611f37565b50506001821b610591565b5060208310610133831016604e8410600b8410161715612023575081810a610591565b61202d8383611f65565b806000190482111561204157612041611f37565b029392505050565b60006119d760ff841683611fa8565b600081600019048311821515161561207257612072611f37565b500290565b60006020828403121561208957600080fd5b5051919050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612113816017850160208801611c21565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351612144816028840160208801611c21565b01602801949350505050565b634e487b7160e01b600052603260045260246000fd5b60008161217557612175611f37565b506000190190565b6000825161218f818460208701611c21565b919091019291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220c026e58ae13b5c64482eb691d8013675b76b325e89fca4ee10252d5638ff4c0c64736f6c63430008090033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1C2 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x52D1902D GT PUSH2 0xF7 JUMPI DUP1 PUSH4 0x95D89B41 GT PUSH2 0x95 JUMPI DUP1 PUSH4 0xD547741F GT PUSH2 0x64 JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x4CA JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x4EA JUMPI DUP1 PUSH4 0xE63AB1E9 EQ PUSH2 0x50A JUMPI DUP1 PUSH4 0xF72C0D8B EQ PUSH2 0x52C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x460 JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x475 JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x48A JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x4AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x79CC6790 GT PUSH2 0xD1 JUMPI DUP1 PUSH4 0x79CC6790 EQ PUSH2 0x3F6 JUMPI DUP1 PUSH4 0x8129FC1C EQ PUSH2 0x416 JUMPI DUP1 PUSH4 0x8456CB59 EQ PUSH2 0x42B JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x440 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x52D1902D EQ PUSH2 0x393 JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x3A8 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x3C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x313CE567 GT PUSH2 0x164 JUMPI DUP1 PUSH4 0x39509351 GT PUSH2 0x13E JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x32B JUMPI DUP1 PUSH4 0x3F4BA83A EQ PUSH2 0x34B JUMPI DUP1 PUSH4 0x42966C68 EQ PUSH2 0x360 JUMPI DUP1 PUSH4 0x4F1EF286 EQ PUSH2 0x380 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x313CE567 EQ PUSH2 0x2CF JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x2EB JUMPI DUP1 PUSH4 0x3659CFE6 EQ PUSH2 0x30B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x18160DDD GT PUSH2 0x1A0 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x23E JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x25D JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0x27D JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x2AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x1C7 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x1FC JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x21E JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1E7 PUSH2 0x1E2 CALLDATASIZE PUSH1 0x4 PUSH2 0x1BF7 JUMP JUMPDEST PUSH2 0x560 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x208 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x211 PUSH2 0x597 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1F3 SWAP2 SWAP1 PUSH2 0x1C4D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x22A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1E7 PUSH2 0x239 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C9C JUMP JUMPDEST PUSH2 0x629 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x24A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x35 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1F3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x269 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1E7 PUSH2 0x278 CALLDATASIZE PUSH1 0x4 PUSH2 0x1CC6 JUMP JUMPDEST PUSH2 0x641 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x289 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x24F PUSH2 0x298 CALLDATASIZE PUSH1 0x4 PUSH2 0x1D02 JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xFB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2B9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2CD PUSH2 0x2C8 CALLDATASIZE PUSH1 0x4 PUSH2 0x1D1B JUMP JUMPDEST PUSH2 0x665 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1F3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2F7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2CD PUSH2 0x306 CALLDATASIZE PUSH1 0x4 PUSH2 0x1D1B JUMP JUMPDEST PUSH2 0x68F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x317 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2CD PUSH2 0x326 CALLDATASIZE PUSH1 0x4 PUSH2 0x1D47 JUMP JUMPDEST PUSH2 0x712 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x337 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1E7 PUSH2 0x346 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C9C JUMP JUMPDEST PUSH2 0x7F2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x357 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2CD PUSH2 0x814 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x36C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2CD PUSH2 0x37B CALLDATASIZE PUSH1 0x4 PUSH2 0x1D02 JUMP JUMPDEST PUSH2 0x834 JUMP JUMPDEST PUSH2 0x2CD PUSH2 0x38E CALLDATASIZE PUSH1 0x4 PUSH2 0x1D78 JUMP JUMPDEST PUSH2 0x83E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x39F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x24F PUSH2 0x90B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x97 SLOAD PUSH1 0xFF AND PUSH2 0x1E7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x24F PUSH2 0x3DB CALLDATASIZE PUSH1 0x4 PUSH2 0x1D47 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x402 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2CD PUSH2 0x411 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C9C JUMP JUMPDEST PUSH2 0x9BE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x422 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2CD PUSH2 0x9D3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x437 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2CD PUSH2 0xBB0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x44C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1E7 PUSH2 0x45B CALLDATASIZE PUSH1 0x4 PUSH2 0x1D1B JUMP JUMPDEST PUSH2 0xBD0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x46C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x211 PUSH2 0xBFB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x481 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x24F PUSH1 0x0 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x496 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1E7 PUSH2 0x4A5 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C9C JUMP JUMPDEST PUSH2 0xC0A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4B6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1E7 PUSH2 0x4C5 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C9C JUMP JUMPDEST PUSH2 0xC85 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4D6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2CD PUSH2 0x4E5 CALLDATASIZE PUSH1 0x4 PUSH2 0x1D1B JUMP JUMPDEST PUSH2 0xC93 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4F6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x24F PUSH2 0x505 CALLDATASIZE PUSH1 0x4 PUSH2 0x1E3A JUMP JUMPDEST PUSH2 0xCB8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x516 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x24F PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x21BA DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x538 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x24F PUSH32 0x189AB7A9244DF0848122154315AF71FE140F3DB0FE014031783B0946B8C9D2E3 DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x7965DB0B PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x591 JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x36 DUP1 SLOAD PUSH2 0x5A6 SWAP1 PUSH2 0x1E64 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x5D2 SWAP1 PUSH2 0x1E64 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x61F JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x5F4 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x61F JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x602 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x637 DUP2 DUP6 DUP6 PUSH2 0xCE3 JUMP JUMPDEST POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x64F DUP6 DUP3 DUP6 PUSH2 0xE07 JUMP JUMPDEST PUSH2 0x65A DUP6 DUP6 DUP6 PUSH2 0xE81 JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0xFB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0x680 DUP2 PUSH2 0x1037 JUMP JUMPDEST PUSH2 0x68A DUP4 DUP4 PUSH2 0x1041 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND CALLER EQ PUSH2 0x704 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416363657373436F6E74726F6C3A2063616E206F6E6C792072656E6F756E6365 PUSH1 0x44 DUP3 ADD MSTORE PUSH15 0x103937B632B9903337B91039B2B633 PUSH1 0x89 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x70E DUP3 DUP3 PUSH2 0x10C7 JUMP JUMPDEST POP POP JUMP JUMPDEST ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ ISZERO PUSH2 0x75B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6FB SWAP1 PUSH2 0x1E9F JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x7A4 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x219A DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x7CA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6FB SWAP1 PUSH2 0x1EEB JUMP JUMPDEST PUSH2 0x7D3 DUP2 PUSH2 0x112E JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x7EF SWAP2 DUP4 SWAP2 SWAP1 PUSH2 0x1158 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x637 DUP2 DUP6 DUP6 PUSH2 0x805 DUP4 DUP4 PUSH2 0xCB8 JUMP JUMPDEST PUSH2 0x80F SWAP2 SWAP1 PUSH2 0x1F4D JUMP JUMPDEST PUSH2 0xCE3 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x21BA DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x82C DUP2 PUSH2 0x1037 JUMP JUMPDEST PUSH2 0x7EF PUSH2 0x12D2 JUMP JUMPDEST PUSH2 0x7EF CALLER DUP3 PUSH2 0x1324 JUMP JUMPDEST ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ ISZERO PUSH2 0x887 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6FB SWAP1 PUSH2 0x1E9F JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x8D0 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x219A DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x8F6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6FB SWAP1 PUSH2 0x1EEB JUMP JUMPDEST PUSH2 0x8FF DUP3 PUSH2 0x112E JUMP JUMPDEST PUSH2 0x70E DUP3 DUP3 PUSH1 0x1 PUSH2 0x1158 JUMP JUMPDEST PUSH1 0x0 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ PUSH2 0x9AB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x38 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x555550535570677261646561626C653A206D757374206E6F742062652063616C PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6C6564207468726F7567682064656C656761746563616C6C0000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6FB JUMP JUMPDEST POP PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x219A DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH2 0x9C9 DUP3 CALLER DUP4 PUSH2 0xE07 JUMP JUMPDEST PUSH2 0x70E DUP3 DUP3 PUSH2 0x1324 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 DUP1 ISZERO PUSH2 0x9F3 JUMPI POP PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xFF SWAP1 SWAP2 AND LT JUMPDEST DUP1 PUSH2 0xA0D JUMPI POP ADDRESS EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xA0D JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF AND PUSH1 0x1 EQ JUMPDEST PUSH2 0xA70 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x191E481A5B9A5D1A585B1A5E9959 PUSH1 0x92 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6FB JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE DUP1 ISZERO PUSH2 0xA93 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND PUSH2 0x100 OR SWAP1 SSTORE JUMPDEST PUSH2 0xAD8 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x7 DUP2 MSTORE PUSH1 0x20 ADD PUSH7 0x50524158584953 PUSH1 0xC8 SHL DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x4 DUP2 MSTORE PUSH1 0x20 ADD PUSH4 0xA082B0B PUSH1 0xE3 SHL DUP2 MSTORE POP PUSH2 0x1464 JUMP JUMPDEST PUSH2 0xAE0 PUSH2 0x1495 JUMP JUMPDEST PUSH2 0xAE8 PUSH2 0x14BE JUMP JUMPDEST PUSH2 0xAF0 PUSH2 0x1495 JUMP JUMPDEST PUSH2 0xAF8 PUSH2 0x1495 JUMP JUMPDEST PUSH2 0xB03 PUSH1 0x0 CALLER PUSH2 0x1041 JUMP JUMPDEST PUSH2 0xB1B PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x21BA DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE CALLER PUSH2 0x1041 JUMP JUMPDEST PUSH2 0xB3E CALLER PUSH2 0xB2B PUSH1 0x12 PUSH1 0xA PUSH2 0x2049 JUMP JUMPDEST PUSH2 0xB39 SWAP1 PUSH4 0x3B9ACA00 PUSH2 0x2058 JUMP JUMPDEST PUSH2 0x14ED JUMP JUMPDEST PUSH2 0xB68 PUSH32 0x189AB7A9244DF0848122154315AF71FE140F3DB0FE014031783B0946B8C9D2E3 CALLER PUSH2 0x1041 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x7EF JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x21BA DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0xBC8 DUP2 PUSH2 0x1037 JUMP JUMPDEST PUSH2 0x7EF PUSH2 0x15BA JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0xFB PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 SWAP1 SWAP4 AND DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x37 DUP1 SLOAD PUSH2 0x5A6 SWAP1 PUSH2 0x1E64 JUMP JUMPDEST PUSH1 0x0 CALLER DUP2 PUSH2 0xC18 DUP3 DUP7 PUSH2 0xCB8 JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0xC78 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x207A65726F PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6FB JUMP JUMPDEST PUSH2 0x65A DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0xCE3 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x637 DUP2 DUP6 DUP6 PUSH2 0xE81 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0xFB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0xCAE DUP2 PUSH2 0x1037 JUMP JUMPDEST PUSH2 0x68A DUP4 DUP4 PUSH2 0x10C7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x34 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0xD45 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6FB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xDA6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6FB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x34 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE13 DUP5 DUP5 PUSH2 0xCB8 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 NOT DUP2 EQ PUSH2 0xE7B JUMPI DUP2 DUP2 LT ISZERO PUSH2 0xE6E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6FB JUMP JUMPDEST PUSH2 0xE7B DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0xCE3 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0xEE5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6FB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xF47 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6FB JUMP JUMPDEST PUSH2 0xF52 DUP4 DUP4 DUP4 PUSH2 0x15F7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0xFCA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x616C616E6365 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6FB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP7 DUP7 SUB SWAP1 SSTORE SWAP3 DUP7 AND DUP1 DUP3 MSTORE SWAP1 DUP4 SWAP1 KECCAK256 DUP1 SLOAD DUP7 ADD SWAP1 SSTORE SWAP2 MLOAD PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 PUSH2 0x102A SWAP1 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0xE7B JUMP JUMPDEST PUSH2 0x7EF DUP2 CALLER PUSH2 0x15FF JUMP JUMPDEST PUSH2 0x104B DUP3 DUP3 PUSH2 0xBD0 JUMP JUMPDEST PUSH2 0x70E JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0xFB PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0x1083 CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH2 0x10D1 DUP3 DUP3 PUSH2 0xBD0 JUMP JUMPDEST ISZERO PUSH2 0x70E JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0xFB PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP1 DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE MLOAD CALLER SWAP3 DUP6 SWAP2 PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP2 SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH32 0x189AB7A9244DF0848122154315AF71FE140F3DB0FE014031783B0946B8C9D2E3 PUSH2 0x70E DUP2 PUSH2 0x1037 JUMP JUMPDEST PUSH32 0x4910FDFA16FED3260ED0E7147F7CC6DA11A60208B5B9406D12A635614FFD9143 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x118B JUMPI PUSH2 0x68A DUP4 PUSH2 0x1658 JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x52D1902D PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x11C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x11F4 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x11F1 SWAP2 DUP2 ADD SWAP1 PUSH2 0x2077 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1257 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524331393637557067726164653A206E657720696D706C656D656E74617469 PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x6F6E206973206E6F742055555053 PUSH1 0x90 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6FB JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x219A DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 EQ PUSH2 0x12C6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524331393637557067726164653A20756E737570706F727465642070726F78 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x1A58589B1955555251 PUSH1 0xBA SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6FB JUMP JUMPDEST POP PUSH2 0x68A DUP4 DUP4 DUP4 PUSH2 0x16F4 JUMP JUMPDEST PUSH2 0x12DA PUSH2 0x1719 JUMP JUMPDEST PUSH1 0x97 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE PUSH32 0x5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA CALLER JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x1384 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206275726E2066726F6D20746865207A65726F20616464726573 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x73 PUSH1 0xF8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6FB JUMP JUMPDEST PUSH2 0x1390 DUP3 PUSH1 0x0 DUP4 PUSH2 0x15F7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x1404 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206275726E20616D6F756E7420657863656564732062616C616E PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x6365 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6FB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP7 DUP7 SUB SWAP1 SSTORE PUSH1 0x35 DUP1 SLOAD DUP8 SWAP1 SUB SWAP1 SSTORE MLOAD DUP6 DUP2 MSTORE SWAP2 SWAP3 SWAP2 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x148B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6FB SWAP1 PUSH2 0x2090 JUMP JUMPDEST PUSH2 0x70E DUP3 DUP3 PUSH2 0x1762 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x14BC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6FB SWAP1 PUSH2 0x2090 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x14E5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6FB SWAP1 PUSH2 0x2090 JUMP JUMPDEST PUSH2 0x14BC PUSH2 0x17B0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x1543 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206D696E7420746F20746865207A65726F206164647265737300 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6FB JUMP JUMPDEST PUSH2 0x154F PUSH1 0x0 DUP4 DUP4 PUSH2 0x15F7 JUMP JUMPDEST DUP1 PUSH1 0x35 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x1561 SWAP2 SWAP1 PUSH2 0x1F4D JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD DUP7 ADD SWAP1 SSTORE MLOAD DUP5 DUP2 MSTORE PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH2 0x15C2 PUSH2 0x17E3 JUMP JUMPDEST PUSH1 0x97 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH32 0x62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258 PUSH2 0x1307 CALLER SWAP1 JUMP JUMPDEST PUSH2 0x68A PUSH2 0x17E3 JUMP JUMPDEST PUSH2 0x1609 DUP3 DUP3 PUSH2 0xBD0 JUMP JUMPDEST PUSH2 0x70E JUMPI PUSH2 0x1616 DUP2 PUSH2 0x1829 JUMP JUMPDEST PUSH2 0x1621 DUP4 PUSH1 0x20 PUSH2 0x183B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1632 SWAP3 SWAP2 SWAP1 PUSH2 0x20DB JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE PUSH2 0x6FB SWAP2 PUSH1 0x4 ADD PUSH2 0x1C4D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND EXTCODESIZE PUSH2 0x16C5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313936373A206E657720696D706C656D656E746174696F6E206973206E PUSH1 0x44 DUP3 ADD MSTORE PUSH13 0x1BDD08184818DBDB9D1C9858DD PUSH1 0x9A SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6FB JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x219A DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x16FD DUP4 PUSH2 0x19DE JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD GT DUP1 PUSH2 0x170A JUMPI POP DUP1 JUMPDEST ISZERO PUSH2 0x68A JUMPI PUSH2 0xE7B DUP4 DUP4 PUSH2 0x1A1E JUMP JUMPDEST PUSH1 0x97 SLOAD PUSH1 0xFF AND PUSH2 0x14BC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x14185D5CD8589B194E881B9BDD081C185D5CD959 PUSH1 0x62 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6FB JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1789 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6FB SWAP1 PUSH2 0x2090 JUMP JUMPDEST DUP2 MLOAD PUSH2 0x179C SWAP1 PUSH1 0x36 SWAP1 PUSH1 0x20 DUP6 ADD SWAP1 PUSH2 0x1B5E JUMP JUMPDEST POP DUP1 MLOAD PUSH2 0x68A SWAP1 PUSH1 0x37 SWAP1 PUSH1 0x20 DUP5 ADD SWAP1 PUSH2 0x1B5E JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x17D7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6FB SWAP1 PUSH2 0x2090 JUMP JUMPDEST PUSH1 0x97 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x97 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x14BC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH16 0x14185D5CD8589B194E881C185D5CD959 PUSH1 0x82 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6FB JUMP JUMPDEST PUSH1 0x60 PUSH2 0x591 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x14 JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x184A DUP4 PUSH1 0x2 PUSH2 0x2058 JUMP JUMPDEST PUSH2 0x1855 SWAP1 PUSH1 0x2 PUSH2 0x1F4D JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x186D JUMPI PUSH2 0x186D PUSH2 0x1D62 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1897 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x3 PUSH1 0xFC SHL DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x18B2 JUMPI PUSH2 0x18B2 PUSH2 0x2150 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0xF PUSH1 0xFB SHL DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x18E1 JUMPI PUSH2 0x18E1 PUSH2 0x2150 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x0 PUSH2 0x1905 DUP5 PUSH1 0x2 PUSH2 0x2058 JUMP JUMPDEST PUSH2 0x1910 SWAP1 PUSH1 0x1 PUSH2 0x1F4D JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x1988 JUMPI PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL DUP6 PUSH1 0xF AND PUSH1 0x10 DUP2 LT PUSH2 0x1944 JUMPI PUSH2 0x1944 PUSH2 0x2150 JUMP JUMPDEST BYTE PUSH1 0xF8 SHL DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x195A JUMPI PUSH2 0x195A PUSH2 0x2150 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x4 SWAP5 SWAP1 SWAP5 SHR SWAP4 PUSH2 0x1981 DUP2 PUSH2 0x2166 JUMP JUMPDEST SWAP1 POP PUSH2 0x1913 JUMP JUMPDEST POP DUP4 ISZERO PUSH2 0x19D7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537472696E67733A20686578206C656E67746820696E73756666696369656E74 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6FB JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x19E7 DUP2 PUSH2 0x1658 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B SWAP1 PUSH1 0x0 SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x19D7 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x27 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x21DA PUSH1 0x27 SWAP2 CODECOPY PUSH1 0x60 PUSH1 0x0 DUP1 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x40 MLOAD PUSH2 0x1A5B SWAP2 SWAP1 PUSH2 0x217D JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1A96 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1A9B JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x1AAC DUP7 DUP4 DUP4 DUP8 PUSH2 0x1AB6 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x1B22 JUMPI DUP3 MLOAD PUSH2 0x1B1B JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND EXTCODESIZE PUSH2 0x1B1B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6FB JUMP JUMPDEST POP DUP2 PUSH2 0x1B2C JUMP JUMPDEST PUSH2 0x1B2C DUP4 DUP4 PUSH2 0x1B34 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP2 MLOAD ISZERO PUSH2 0x1B44 JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6FB SWAP2 SWAP1 PUSH2 0x1C4D JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH2 0x1B6A SWAP1 PUSH2 0x1E64 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH2 0x1B8C JUMPI PUSH1 0x0 DUP6 SSTORE PUSH2 0x1BD2 JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH2 0x1BA5 JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH2 0x1BD2 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 0x1BD2 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x1BD2 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x1BB7 JUMP JUMPDEST POP PUSH2 0x1BDE SWAP3 SWAP2 POP PUSH2 0x1BE2 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x1BDE JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x1BE3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1C09 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x19D7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1C3C JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1C24 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0xE7B JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x1C6C DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x1C21 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x1C97 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1CAF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1CB8 DUP4 PUSH2 0x1C80 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1CDB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1CE4 DUP5 PUSH2 0x1C80 JUMP JUMPDEST SWAP3 POP PUSH2 0x1CF2 PUSH1 0x20 DUP6 ADD PUSH2 0x1C80 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1D14 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1D2E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH2 0x1D3E PUSH1 0x20 DUP5 ADD PUSH2 0x1C80 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1D59 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x19D7 DUP3 PUSH2 0x1C80 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1D8B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1D94 DUP4 PUSH2 0x1C80 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1DB1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1DC5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x1DD7 JUMPI PUSH2 0x1DD7 PUSH2 0x1D62 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x1DFF JUMPI PUSH2 0x1DFF PUSH2 0x1D62 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP9 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0x1E18 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP5 DUP4 ADD ADD MSTORE DUP1 SWAP6 POP POP POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1E4D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1E56 DUP4 PUSH2 0x1C80 JUMP JUMPDEST SWAP2 POP PUSH2 0x1D3E PUSH1 0x20 DUP5 ADD PUSH2 0x1C80 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x1E78 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x1E99 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2C SWAP1 DUP3 ADD MSTORE PUSH32 0x46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820 PUSH1 0x40 DUP3 ADD MSTORE PUSH12 0x19195B1959D85D1958D85B1B PUSH1 0xA2 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2C SWAP1 DUP3 ADD MSTORE PUSH32 0x46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820 PUSH1 0x40 DUP3 ADD MSTORE PUSH12 0x6163746976652070726F7879 PUSH1 0xA0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x1F60 JUMPI PUSH2 0x1F60 PUSH2 0x1F37 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 JUMPDEST DUP1 DUP6 GT ISZERO PUSH2 0x1FA0 JUMPI DUP2 PUSH1 0x0 NOT DIV DUP3 GT ISZERO PUSH2 0x1F86 JUMPI PUSH2 0x1F86 PUSH2 0x1F37 JUMP JUMPDEST DUP1 DUP6 AND ISZERO PUSH2 0x1F93 JUMPI SWAP2 DUP2 MUL SWAP2 JUMPDEST SWAP4 DUP5 SHR SWAP4 SWAP1 DUP1 MUL SWAP1 PUSH2 0x1F6A JUMP JUMPDEST POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x1FB7 JUMPI POP PUSH1 0x1 PUSH2 0x591 JUMP JUMPDEST DUP2 PUSH2 0x1FC4 JUMPI POP PUSH1 0x0 PUSH2 0x591 JUMP JUMPDEST DUP2 PUSH1 0x1 DUP2 EQ PUSH2 0x1FDA JUMPI PUSH1 0x2 DUP2 EQ PUSH2 0x1FE4 JUMPI PUSH2 0x2000 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP PUSH2 0x591 JUMP JUMPDEST PUSH1 0xFF DUP5 GT ISZERO PUSH2 0x1FF5 JUMPI PUSH2 0x1FF5 PUSH2 0x1F37 JUMP JUMPDEST POP POP PUSH1 0x1 DUP3 SHL PUSH2 0x591 JUMP JUMPDEST POP PUSH1 0x20 DUP4 LT PUSH2 0x133 DUP4 LT AND PUSH1 0x4E DUP5 LT PUSH1 0xB DUP5 LT AND OR ISZERO PUSH2 0x2023 JUMPI POP DUP2 DUP2 EXP PUSH2 0x591 JUMP JUMPDEST PUSH2 0x202D DUP4 DUP4 PUSH2 0x1F65 JUMP JUMPDEST DUP1 PUSH1 0x0 NOT DIV DUP3 GT ISZERO PUSH2 0x2041 JUMPI PUSH2 0x2041 PUSH2 0x1F37 JUMP JUMPDEST MUL SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x19D7 PUSH1 0xFF DUP5 AND DUP4 PUSH2 0x1FA8 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x2072 JUMPI PUSH2 0x2072 PUSH2 0x1F37 JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2089 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2B SWAP1 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x40 DUP3 ADD MSTORE PUSH11 0x6E697469616C697A696E67 PUSH1 0xA8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH32 0x416363657373436F6E74726F6C3A206163636F756E7420000000000000000000 DUP2 MSTORE PUSH1 0x0 DUP4 MLOAD PUSH2 0x2113 DUP2 PUSH1 0x17 DUP6 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x1C21 JUMP JUMPDEST PUSH17 0x1034B99036B4B9B9B4B733903937B6329 PUSH1 0x7D SHL PUSH1 0x17 SWAP2 DUP5 ADD SWAP2 DUP3 ADD MSTORE DUP4 MLOAD PUSH2 0x2144 DUP2 PUSH1 0x28 DUP5 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x1C21 JUMP JUMPDEST ADD PUSH1 0x28 ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x2175 JUMPI PUSH2 0x2175 PUSH2 0x1F37 JUMP JUMPDEST POP PUSH1 0x0 NOT ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x218F DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x1C21 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP INVALID CALLDATASIZE ADDMOD SWAP5 LOG1 EXTCODESIZE LOG1 LOG3 0x21 MOD PUSH8 0xC828492DB98DCA3E KECCAK256 PUSH23 0xCC3735A920A3CA505D382BBC65D7A28E3265B37A647492 SWAP16 CALLER PUSH6 0x21B332C1681B SWAP4 EXTCODEHASH PUSH13 0xB9F3376673440D862A41646472 PUSH6 0x73733A206C6F PUSH24 0x2D6C6576656C2064656C65676174652063616C6C20666169 PUSH13 0x6564A2646970667358221220C0 0x26 0xE5 DUP11 0xE1 EXTCODESIZE 0x5C PUSH5 0x482EB691D8 ADD CALLDATASIZE PUSH22 0xB76B325E89FCA4EE10252D5638FF4C0C64736F6C6343 STOP ADDMOD MULMOD STOP CALLER ",
							"sourceMap": "634:1414:21:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3029:213:0;;;;;;;;;;-1:-1:-1;3029:213:0;;;;;:::i;:::-;;:::i;:::-;;;470:14:22;;463:22;445:41;;433:2;418:18;3029:213:0;;;;;;;;2495:98:9;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;4781:197::-;;;;;;;;;;-1:-1:-1;4781:197:9;;;;;:::i;:::-;;:::i;3592:106::-;;;;;;;;;;-1:-1:-1;3679:12:9;;3592:106;;;1731:25:22;;;1719:2;1704:18;3592:106:9;1585:177:22;5540:256:9;;;;;;;;;;-1:-1:-1;5540:256:9;;;;;:::i;:::-;;:::i;4834:129:0:-;;;;;;;;;;-1:-1:-1;4834:129:0;;;;;:::i;:::-;4908:7;4934:12;;;:6;:12;;;;;:22;;;;4834:129;5259:145;;;;;;;;;;-1:-1:-1;5259:145:0;;;;;:::i;:::-;;:::i;:::-;;3441:91:9;;;;;;;;;;-1:-1:-1;3441:91:9;;3523:2;2868:36:22;;2856:2;2841:18;3441:91:9;2726:184:22;6368:214:0;;;;;;;;;;-1:-1:-1;6368:214:0;;;;;:::i;:::-;;:::i;3387:195:7:-;;;;;;;;;;-1:-1:-1;3387:195:7;;;;;:::i;:::-;;:::i;6191:234:9:-;;;;;;;;;;-1:-1:-1;6191:234:9;;;;;:::i;:::-;;:::i;1640:75:21:-;;;;;;;;;;;;;:::i;848:89:11:-;;;;;;;;;;-1:-1:-1;848:89:11;;;;;:::i;:::-;;:::i;3901:220:7:-;;;;;;:::i;:::-;;:::i;3006:131::-;;;;;;;;;;;;;:::i;1858:84:8:-;;;;;;;;;;-1:-1:-1;1928:7:8;;;;1858:84;;3756:125:9;;;;;;;;;;-1:-1:-1;3756:125:9;;;;;:::i;:::-;-1:-1:-1;;;;;3856:18:9;3830:7;3856:18;;;:9;:18;;;;;;;3756:125;1243:161:11;;;;;;;;;;-1:-1:-1;1243:161:11;;;;;:::i;:::-;;:::i;1140:417:21:-;;;;;;;;;;;;;:::i;1563:71::-;;;;;;;;;;;;;:::i;3329:145:0:-;;;;;;;;;;-1:-1:-1;3329:145:0;;;;;:::i;:::-;;:::i;2706:102:9:-;;;;;;;;;;;;;:::i;2450:49:0:-;;;;;;;;;;-1:-1:-1;2450:49:0;2495:4;2450:49;;6912:427:9;;;;;;;;;;-1:-1:-1;6912:427:9;;;;;:::i;:::-;;:::i;4077:189::-;;;;;;;;;;-1:-1:-1;4077:189:9;;;;;:::i;:::-;;:::i;5684:147:0:-;;;;;;;;;;-1:-1:-1;5684:147:0;;;;;:::i;:::-;;:::i;4324:149:9:-;;;;;;;;;;-1:-1:-1;4324:149:9;;;;;:::i;:::-;;:::i;782:62:21:-;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;782:62:21;;850:66;;;;;;;;;;;;890:26;850:66;;3029:213:0;3114:4;-1:-1:-1;;;;;;3137:58:0;;-1:-1:-1;;;3137:58:0;;:98;;-1:-1:-1;;;;;;;;;;1168:51:17;;;3199:36:0;3130:105;3029:213;-1:-1:-1;;3029:213:0:o;2495:98:9:-;2549:13;2581:5;2574:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2495:98;:::o;4781:197::-;4864:4;929:10:14;4918:32:9;929:10:14;4934:7:9;4943:6;4918:8;:32::i;:::-;-1:-1:-1;4967:4:9;;4781:197;-1:-1:-1;;;4781:197:9:o;5540:256::-;5637:4;929:10:14;5693:38:9;5709:4;929:10:14;5724:6:9;5693:15;:38::i;:::-;5741:27;5751:4;5757:2;5761:6;5741:9;:27::i;:::-;-1:-1:-1;5785:4:9;;5540:256;-1:-1:-1;;;;5540:256:9:o;5259:145:0:-;4908:7;4934:12;;;:6;:12;;;;;:22;;;2928:16;2939:4;2928:10;:16::i;:::-;5372:25:::1;5383:4;5389:7;5372:10;:25::i;:::-;5259:145:::0;;;:::o;6368:214::-;-1:-1:-1;;;;;6463:23:0;;929:10:14;6463:23:0;6455:83;;;;-1:-1:-1;;;6455:83:0;;5275:2:22;6455:83:0;;;5257:21:22;5314:2;5294:18;;;5287:30;5353:34;5333:18;;;5326:62;-1:-1:-1;;;5404:18:22;;;5397:45;5459:19;;6455:83:0;;;;;;;;;6549:26;6561:4;6567:7;6549:11;:26::i;:::-;6368:214;;:::o;3387:195:7:-;1889:4;-1:-1:-1;;;;;1898:6:7;1881:23;;;1873:80;;;;-1:-1:-1;;;1873:80:7;;;;;;;:::i;:::-;1995:6;-1:-1:-1;;;;;1971:30:7;:20;-1:-1:-1;;;;;;;;;;;1536:65:4;-1:-1:-1;;;;;1536:65:4;;1457:151;1971:20:7;-1:-1:-1;;;;;1971:30:7;;1963:87;;;;-1:-1:-1;;;1963:87:7;;;;;;;:::i;:::-;3468:36:::1;3486:17;3468;:36::i;:::-;3555:12;::::0;;3565:1:::1;3555:12:::0;;;::::1;::::0;::::1;::::0;;;3514:61:::1;::::0;3536:17;;3555:12;3514:21:::1;:61::i;:::-;3387:195:::0;:::o;6191:234:9:-;6279:4;929:10:14;6333:64:9;929:10:14;6349:7:9;6386:10;6358:25;929:10:14;6349:7:9;6358:9;:25::i;:::-;:38;;;;:::i;:::-;6333:8;:64::i;1640:75:21:-;-1:-1:-1;;;;;;;;;;;2928:16:0;2939:4;2928:10;:16::i;:::-;1698:10:21::1;:8;:10::i;848:89:11:-:0;903:27;929:10:14;923:6:11;903:5;:27::i;3901:220:7:-;1889:4;-1:-1:-1;;;;;1898:6:7;1881:23;;;1873:80;;;;-1:-1:-1;;;1873:80:7;;;;;;;:::i;:::-;1995:6;-1:-1:-1;;;;;1971:30:7;:20;-1:-1:-1;;;;;;;;;;;1536:65:4;-1:-1:-1;;;;;1536:65:4;;1457:151;1971:20:7;-1:-1:-1;;;;;1971:30:7;;1963:87;;;;-1:-1:-1;;;1963:87:7;;;;;;;:::i;:::-;4016:36:::1;4034:17;4016;:36::i;:::-;4062:52;4084:17;4103:4;4109;4062:21;:52::i;3006:131::-:0;3084:7;2324:4;-1:-1:-1;;;;;2333:6:7;2316:23;;2308:92;;;;-1:-1:-1;;;2308:92:7;;6782:2:22;2308:92:7;;;6764:21:22;6821:2;6801:18;;;6794:30;6860:34;6840:18;;;6833:62;6931:26;6911:18;;;6904:54;6975:19;;2308:92:7;6580:420:22;2308:92:7;-1:-1:-1;;;;;;;;;;;;3006:131:7;:::o;1243:161:11:-;1319:46;1335:7;929:10:14;1358:6:11;1319:15;:46::i;:::-;1375:22;1381:7;1390:6;1375:5;:22::i;1140:417:21:-;3279:19:6;3302:13;;;;;;3301:14;;3347:34;;;;-1:-1:-1;3365:12:6;;3380:1;3365:12;;;;:16;3347:34;3346:108;;;-1:-1:-1;3426:4:6;1713:19:13;:23;;;3387:66:6;;-1:-1:-1;3436:12:6;;;;;:17;3387:66;3325:201;;;;-1:-1:-1;;;3325:201:6;;7207:2:22;3325:201:6;;;7189:21:22;7246:2;7226:18;;;7219:30;7285:34;7265:18;;;7258:62;-1:-1:-1;;;7336:18:22;;;7329:44;7390:19;;3325:201:6;7005:410:22;3325:201:6;3536:12;:16;;-1:-1:-1;;3536:16:6;3551:1;3536:16;;;3562:65;;;;3596:13;:20;;-1:-1:-1;;3596:20:6;;;;;3562:65;1191:31:21::1;;;;;;;;;;;;;;-1:-1:-1::0;;;1191:31:21::1;;::::0;::::1;;;;;;;;;;;;;-1:-1:-1::0;;;1191:31:21::1;;::::0;:12:::1;:31::i;:::-;1232:22;:20;:22::i;:::-;1264:17;:15;:17::i;:::-;1291:22;:20;:22::i;:::-;1323:24;:22;:24::i;:::-;1358:42;2495:4:0;1389:10:21;1358;:42::i;:::-;1410:35;-1:-1:-1::0;;;;;;;;;;;1434:10:21::1;1410;:35::i;:::-;1455:48;1461:10;1486:16;3523:2:9::0;1486::21::1;:16;:::i;:::-;1473:29;::::0;:10:::1;:29;:::i;:::-;1455:5;:48::i;:::-;1513:37;890:26;1539:10;1513;:37::i;:::-;3651:14:6::0;3647:99;;;3697:5;3681:21;;-1:-1:-1;;3681:21:6;;;3721:14;;-1:-1:-1;2868:36:22;;3721:14:6;;2856:2:22;2841:18;3721:14:6;;;;;;;3269:483;1140:417:21:o;1563:71::-;-1:-1:-1;;;;;;;;;;;2928:16:0;2939:4;2928:10;:16::i;:::-;1619:8:21::1;:6;:8::i;3329:145:0:-:0;3415:4;3438:12;;;:6;:12;;;;;;;;-1:-1:-1;;;;;3438:29:0;;;;;;;;;;;;;;;3329:145::o;2706:102:9:-;2762:13;2794:7;2787:14;;;;;:::i;6912:427::-;7005:4;929:10:14;7005:4:9;7086:25;929:10:14;7103:7:9;7086:9;:25::i;:::-;7059:52;;7149:15;7129:16;:35;;7121:85;;;;-1:-1:-1;;;7121:85:9;;9377:2:22;7121:85:9;;;9359:21:22;9416:2;9396:18;;;9389:30;9455:34;9435:18;;;9428:62;-1:-1:-1;;;9506:18:22;;;9499:35;9551:19;;7121:85:9;9175:401:22;7121:85:9;7240:60;7249:5;7256:7;7284:15;7265:16;:34;7240:8;:60::i;4077:189::-;4156:4;929:10:14;4210:28:9;929:10:14;4227:2:9;4231:6;4210:9;:28::i;5684:147:0:-;4908:7;4934:12;;;:6;:12;;;;;:22;;;2928:16;2939:4;2928:10;:16::i;:::-;5798:26:::1;5810:4;5816:7;5798:11;:26::i;4324:149:9:-:0;-1:-1:-1;;;;;4439:18:9;;;4413:7;4439:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;4324:149::o;10794:340::-;-1:-1:-1;;;;;10895:19:9;;10887:68;;;;-1:-1:-1;;;10887:68:9;;9783:2:22;10887:68:9;;;9765:21:22;9822:2;9802:18;;;9795:30;9861:34;9841:18;;;9834:62;-1:-1:-1;;;9912:18:22;;;9905:34;9956:19;;10887:68:9;9581:400:22;10887:68:9;-1:-1:-1;;;;;10973:21:9;;10965:68;;;;-1:-1:-1;;;10965:68:9;;10188:2:22;10965:68:9;;;10170:21:22;10227:2;10207:18;;;10200:30;10266:34;10246:18;;;10239:62;-1:-1:-1;;;10317:18:22;;;10310:32;10359:19;;10965:68:9;9986:398:22;10965:68:9;-1:-1:-1;;;;;11044:18:9;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;:36;;;11095:32;;1731:25:22;;;11095:32:9;;1704:18:22;11095:32:9;;;;;;;10794:340;;;:::o;11415:411::-;11515:24;11542:25;11552:5;11559:7;11542:9;:25::i;:::-;11515:52;;-1:-1:-1;;11581:16:9;:37;11577:243;;11662:6;11642:16;:26;;11634:68;;;;-1:-1:-1;;;11634:68:9;;10591:2:22;11634:68:9;;;10573:21:22;10630:2;10610:18;;;10603:30;10669:31;10649:18;;;10642:59;10718:18;;11634:68:9;10389:353:22;11634:68:9;11744:51;11753:5;11760:7;11788:6;11769:16;:25;11744:8;:51::i;:::-;11505:321;11415:411;;;:::o;7793:788::-;-1:-1:-1;;;;;7889:18:9;;7881:68;;;;-1:-1:-1;;;7881:68:9;;10949:2:22;7881:68:9;;;10931:21:22;10988:2;10968:18;;;10961:30;11027:34;11007:18;;;11000:62;-1:-1:-1;;;11078:18:22;;;11071:35;11123:19;;7881:68:9;10747:401:22;7881:68:9;-1:-1:-1;;;;;7967:16:9;;7959:64;;;;-1:-1:-1;;;7959:64:9;;11355:2:22;7959:64:9;;;11337:21:22;11394:2;11374:18;;;11367:30;11433:34;11413:18;;;11406:62;-1:-1:-1;;;11484:18:22;;;11477:33;11527:19;;7959:64:9;11153:399:22;7959:64:9;8034:38;8055:4;8061:2;8065:6;8034:20;:38::i;:::-;-1:-1:-1;;;;;8105:15:9;;8083:19;8105:15;;;:9;:15;;;;;;8138:21;;;;8130:72;;;;-1:-1:-1;;;8130:72:9;;11759:2:22;8130:72:9;;;11741:21:22;11798:2;11778:18;;;11771:30;11837:34;11817:18;;;11810:62;-1:-1:-1;;;11888:18:22;;;11881:36;11934:19;;8130:72:9;11557:402:22;8130:72:9;-1:-1:-1;;;;;8236:15:9;;;;;;;:9;:15;;;;;;8254:20;;;8236:38;;8451:13;;;;;;;;;;:23;;;;;;8500:26;;;;;;8268:6;1731:25:22;;1719:2;1704:18;;1585:177;8500:26:9;;;;;;;;8537:37;5259:145:0;3768:103;3834:30;3845:4;929:10:14;3834::0;:30::i;7917:233::-;8000:22;8008:4;8014:7;8000;:22::i;:::-;7995:149;;8038:12;;;;:6;:12;;;;;;;;-1:-1:-1;;;;;8038:29:0;;;;;;;;;:36;;-1:-1:-1;;8038:36:0;8070:4;8038:36;;;8120:12;929:10:14;;850:96;8120:12:0;-1:-1:-1;;;;;8093:40:0;8111:7;-1:-1:-1;;;;;8093:40:0;8105:4;8093:40;;;;;;;;;;7917:233;;:::o;8321:234::-;8404:22;8412:4;8418:7;8404;:22::i;:::-;8400:149;;;8474:5;8442:12;;;:6;:12;;;;;;;;-1:-1:-1;;;;;8442:29:0;;;;;;;;;;:37;;-1:-1:-1;;8442:37:0;;;8498:40;929:10:14;;8442:12:0;;8498:40;;8474:5;8498:40;8321:234;;:::o;1920:126:21:-;890:26;2928:16:0;2939:4;2928:10;:16::i;2820:944:4:-;971:66;3236:59;;;3232:526;;;3311:37;3330:17;3311:18;:37::i;3232:526::-;3412:17;-1:-1:-1;;;;;3383:61:4;;:63;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3383:63:4;;;;;;;;-1:-1:-1;;3383:63:4;;;;;;;;;;;;:::i;:::-;;;3379:302;;3610:56;;-1:-1:-1;;;3610:56:4;;12355:2:22;3610:56:4;;;12337:21:22;12394:2;12374:18;;;12367:30;12433:34;12413:18;;;12406:62;-1:-1:-1;;;12484:18:22;;;12477:44;12538:19;;3610:56:4;12153:410:22;3379:302:4;-1:-1:-1;;;;;;;;;;;3496:28:4;;3488:82;;;;-1:-1:-1;;;3488:82:4;;12770:2:22;3488:82:4;;;12752:21:22;12809:2;12789:18;;;12782:30;12848:34;12828:18;;;12821:62;-1:-1:-1;;;12899:18:22;;;12892:39;12948:19;;3488:82:4;12568:405:22;3488:82:4;3447:138;3694:53;3712:17;3731:4;3737:9;3694:17;:53::i;2676:117:8:-;1729:16;:14;:16::i;:::-;2734:7:::1;:15:::0;;-1:-1:-1;;2734:15:8::1;::::0;;2764:22:::1;929:10:14::0;2773:12:8::1;2764:22;::::0;-1:-1:-1;;;;;13142:32:22;;;13124:51;;13112:2;13097:18;2764:22:8::1;;;;;;;2676:117::o:0;9712:659:9:-;-1:-1:-1;;;;;9795:21:9;;9787:67;;;;-1:-1:-1;;;9787:67:9;;13388:2:22;9787:67:9;;;13370:21:22;13427:2;13407:18;;;13400:30;13466:34;13446:18;;;13439:62;-1:-1:-1;;;13517:18:22;;;13510:31;13558:19;;9787:67:9;13186:397:22;9787:67:9;9865:49;9886:7;9903:1;9907:6;9865:20;:49::i;:::-;-1:-1:-1;;;;;9950:18:9;;9925:22;9950:18;;;:9;:18;;;;;;9986:24;;;;9978:71;;;;-1:-1:-1;;;9978:71:9;;13790:2:22;9978:71:9;;;13772:21:22;13829:2;13809:18;;;13802:30;13868:34;13848:18;;;13841:62;-1:-1:-1;;;13919:18:22;;;13912:32;13961:19;;9978:71:9;13588:398:22;9978:71:9;-1:-1:-1;;;;;10083:18:9;;;;;;:9;:18;;;;;;;;10104:23;;;10083:44;;10220:12;:22;;;;;;;10268:37;1731:25:22;;;10083:18:9;;;10268:37;;1704:18:22;10268:37:9;;;;;;;5259:145:0;;;:::o;2118:147:9:-;5374:13:6;;;;;;;5366:69;;;;-1:-1:-1;;;5366:69:6;;;;;;;:::i;:::-;2220:38:9::1;2243:5;2250:7;2220:22;:38::i;594:65:11:-:0;5374:13:6;;;;;;;5366:69;;;;-1:-1:-1;;;5366:69:6;;;;;;;:::i;:::-;594:65:11:o;1063:97:8:-;5374:13:6;;;;;;;5366:69;;;;-1:-1:-1;;;5366:69:6;;;;;;;:::i;:::-;1126:27:8::1;:25;:27::i;8857:535:9:-:0;-1:-1:-1;;;;;8940:21:9;;8932:65;;;;-1:-1:-1;;;8932:65:9;;14605:2:22;8932:65:9;;;14587:21:22;14644:2;14624:18;;;14617:30;14683:33;14663:18;;;14656:61;14734:18;;8932:65:9;14403:355:22;8932:65:9;9008:49;9037:1;9041:7;9050:6;9008:20;:49::i;:::-;9084:6;9068:12;;:22;;;;;;;:::i;:::-;;;;-1:-1:-1;;;;;;;9236:18:9;;;;;;:9;:18;;;;;;;;:28;;;;;;9289:37;1731:25:22;;;9289:37:9;;1704:18:22;9289:37:9;;;;;;;6368:214:0;;:::o;2429:115:8:-;1482:19;:17;:19::i;:::-;2488:7:::1;:14:::0;;-1:-1:-1;;2488:14:8::1;2498:4;2488:14;::::0;;2517:20:::1;2524:12;929:10:14::0;;850:96;1721:193:21;1482:19:8;:17;:19::i;4152:501:0:-;4240:22;4248:4;4254:7;4240;:22::i;:::-;4235:412;;4423:39;4454:7;4423:30;:39::i;:::-;4533:49;4572:4;4579:2;4533:30;:49::i;:::-;4330:274;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;4330:274:0;;;;;;;;;;-1:-1:-1;;;4278:358:0;;;;;;;:::i;1699:281:4:-;-1:-1:-1;;;;;1713:19:13;;;1772:106:4;;;;-1:-1:-1;;;1772:106:4;;15756:2:22;1772:106:4;;;15738:21:22;15795:2;15775:18;;;15768:30;15834:34;15814:18;;;15807:62;-1:-1:-1;;;15885:18:22;;;15878:43;15938:19;;1772:106:4;15554:409:22;1772:106:4;-1:-1:-1;;;;;;;;;;;1888:85:4;;-1:-1:-1;;;;;;1888:85:4;-1:-1:-1;;;;;1888:85:4;;;;;;;;;;1699:281::o;2372:276::-;2480:29;2491:17;2480:10;:29::i;:::-;2537:1;2523:4;:11;:15;:28;;;;2542:9;2523:28;2519:123;;;2567:64;2607:17;2626:4;2567:39;:64::i;2188:106:8:-;1928:7;;;;2246:41;;;;-1:-1:-1;;;2246:41:8;;16170:2:22;2246:41:8;;;16152:21:22;16209:2;16189:18;;;16182:30;-1:-1:-1;;;16228:18:22;;;16221:50;16288:18;;2246:41:8;15968:344:22;2271:159:9;5374:13:6;;;;;;;5366:69;;;;-1:-1:-1;;;5366:69:6;;;;;;;:::i;:::-;2383:13:9;;::::1;::::0;:5:::1;::::0;:13:::1;::::0;::::1;::::0;::::1;:::i;:::-;-1:-1:-1::0;2406:17:9;;::::1;::::0;:7:::1;::::0;:17:::1;::::0;::::1;::::0;::::1;:::i;1166:95:8:-:0;5374:13:6;;;;;;;5366:69;;;;-1:-1:-1;;;5366:69:6;;;;;;;:::i;:::-;1239:7:8::1;:15:::0;;-1:-1:-1;;1239:15:8::1;::::0;;1166:95::o;2010:106::-;1928:7;;;;2079:9;2071:38;;;;-1:-1:-1;;;2071:38:8;;16519:2:22;2071:38:8;;;16501:21:22;16558:2;16538:18;;;16531:30;-1:-1:-1;;;16577:18:22;;;16570:46;16633:18;;2071:38:8;16317:340:22;2473:149:16;2531:13;2563:52;-1:-1:-1;;;;;2575:22:16;;376:2;1884:437;1959:13;1984:19;2016:10;2020:6;2016:1;:10;:::i;:::-;:14;;2029:1;2016:14;:::i;:::-;2006:25;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2006:25:16;;1984:47;;-1:-1:-1;;;2041:6:16;2048:1;2041:9;;;;;;;;:::i;:::-;;;;:15;-1:-1:-1;;;;;2041:15:16;;;;;;;;;-1:-1:-1;;;2066:6:16;2073:1;2066:9;;;;;;;;:::i;:::-;;;;:15;-1:-1:-1;;;;;2066:15:16;;;;;;;;-1:-1:-1;2096:9:16;2108:10;2112:6;2108:1;:10;:::i;:::-;:14;;2121:1;2108:14;:::i;:::-;2096:26;;2091:128;2128:1;2124;:5;2091:128;;;-1:-1:-1;;;2171:5:16;2179:3;2171:11;2162:21;;;;;;;:::i;:::-;;;;2150:6;2157:1;2150:9;;;;;;;;:::i;:::-;;;;:33;-1:-1:-1;;;;;2150:33:16;;;;;;;;-1:-1:-1;2207:1:16;2197:11;;;;;2131:3;;;:::i;:::-;;;2091:128;;;-1:-1:-1;2236:10:16;;2228:55;;;;-1:-1:-1;;;2228:55:16;;17137:2:22;2228:55:16;;;17119:21:22;;;17156:18;;;17149:30;17215:34;17195:18;;;17188:62;17267:18;;2228:55:16;16935:356:22;2228:55:16;2307:6;1884:437;-1:-1:-1;;;1884:437:16:o;2086:152:4:-;2152:37;2171:17;2152:18;:37::i;:::-;2204:27;;-1:-1:-1;;;;;2204:27:4;;;;;;;;2086:152;:::o;6685:198:13:-;6768:12;6799:77;6820:6;6828:4;6799:77;;;;;;;;;;;;;;;;;7210:12;7235;7249:23;7276:6;-1:-1:-1;;;;;7276:19:13;7296:4;7276:25;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7234:67;;;;7318:69;7345:6;7353:7;7362:10;7374:12;7318:26;:69::i;:::-;7311:76;7069:325;-1:-1:-1;;;;;;7069:325:13:o;7682:628::-;7862:12;7890:7;7886:418;;;7917:17;;7913:286;;-1:-1:-1;;;;;1713:19:13;;;8124:60;;;;-1:-1:-1;;;8124:60:13;;17777:2:22;8124:60:13;;;17759:21:22;17816:2;17796:18;;;17789:30;17855:31;17835:18;;;17828:59;17904:18;;8124:60:13;17575:353:22;8124:60:13;-1:-1:-1;8219:10:13;8212:17;;7886:418;8260:33;8268:10;8280:12;8260:7;:33::i;:::-;7682:628;;;;;;:::o;8832:540::-;8991:17;;:21;8987:379;;9219:10;9213:17;9275:15;9262:10;9258:2;9254:19;9247:44;8987:379;9342:12;9335:20;;-1:-1:-1;;;9335:20:13;;;;;;;;:::i;-1:-1:-1:-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:286:22;72:6;125:2;113:9;104:7;100:23;96:32;93:52;;;141:1;138;131:12;93:52;167:23;;-1:-1:-1;;;;;;219:32:22;;209:43;;199:71;;266:1;263;256:12;497:258;569:1;579:113;593:6;590:1;587:13;579:113;;;669:11;;;663:18;650:11;;;643:39;615:2;608:10;579:113;;;710:6;707:1;704:13;701:48;;;-1:-1:-1;;745:1:22;727:16;;720:27;497:258::o;760:383::-;909:2;898:9;891:21;872:4;941:6;935:13;984:6;979:2;968:9;964:18;957:34;1000:66;1059:6;1054:2;1043:9;1039:18;1034:2;1026:6;1022:15;1000:66;:::i;:::-;1127:2;1106:15;-1:-1:-1;;1102:29:22;1087:45;;;;1134:2;1083:54;;760:383;-1:-1:-1;;760:383:22:o;1148:173::-;1216:20;;-1:-1:-1;;;;;1265:31:22;;1255:42;;1245:70;;1311:1;1308;1301:12;1245:70;1148:173;;;:::o;1326:254::-;1394:6;1402;1455:2;1443:9;1434:7;1430:23;1426:32;1423:52;;;1471:1;1468;1461:12;1423:52;1494:29;1513:9;1494:29;:::i;:::-;1484:39;1570:2;1555:18;;;;1542:32;;-1:-1:-1;;;1326:254:22:o;1767:328::-;1844:6;1852;1860;1913:2;1901:9;1892:7;1888:23;1884:32;1881:52;;;1929:1;1926;1919:12;1881:52;1952:29;1971:9;1952:29;:::i;:::-;1942:39;;2000:38;2034:2;2023:9;2019:18;2000:38;:::i;:::-;1990:48;;2085:2;2074:9;2070:18;2057:32;2047:42;;1767:328;;;;;:::o;2100:180::-;2159:6;2212:2;2200:9;2191:7;2187:23;2183:32;2180:52;;;2228:1;2225;2218:12;2180:52;-1:-1:-1;2251:23:22;;2100:180;-1:-1:-1;2100:180:22:o;2467:254::-;2535:6;2543;2596:2;2584:9;2575:7;2571:23;2567:32;2564:52;;;2612:1;2609;2602:12;2564:52;2648:9;2635:23;2625:33;;2677:38;2711:2;2700:9;2696:18;2677:38;:::i;:::-;2667:48;;2467:254;;;;;:::o;2915:186::-;2974:6;3027:2;3015:9;3006:7;3002:23;2998:32;2995:52;;;3043:1;3040;3033:12;2995:52;3066:29;3085:9;3066:29;:::i;3291:127::-;3352:10;3347:3;3343:20;3340:1;3333:31;3383:4;3380:1;3373:15;3407:4;3404:1;3397:15;3423:995;3500:6;3508;3561:2;3549:9;3540:7;3536:23;3532:32;3529:52;;;3577:1;3574;3567:12;3529:52;3600:29;3619:9;3600:29;:::i;:::-;3590:39;;3680:2;3669:9;3665:18;3652:32;3703:18;3744:2;3736:6;3733:14;3730:34;;;3760:1;3757;3750:12;3730:34;3798:6;3787:9;3783:22;3773:32;;3843:7;3836:4;3832:2;3828:13;3824:27;3814:55;;3865:1;3862;3855:12;3814:55;3901:2;3888:16;3923:2;3919;3916:10;3913:36;;;3929:18;;:::i;:::-;4004:2;3998:9;3972:2;4058:13;;-1:-1:-1;;4054:22:22;;;4078:2;4050:31;4046:40;4034:53;;;4102:18;;;4122:22;;;4099:46;4096:72;;;4148:18;;:::i;:::-;4188:10;4184:2;4177:22;4223:2;4215:6;4208:18;4263:7;4258:2;4253;4249;4245:11;4241:20;4238:33;4235:53;;;4284:1;4281;4274:12;4235:53;4340:2;4335;4331;4327:11;4322:2;4314:6;4310:15;4297:46;4385:1;4380:2;4375;4367:6;4363:15;4359:24;4352:35;4406:6;4396:16;;;;;;;3423:995;;;;;:::o;4423:260::-;4491:6;4499;4552:2;4540:9;4531:7;4527:23;4523:32;4520:52;;;4568:1;4565;4558:12;4520:52;4591:29;4610:9;4591:29;:::i;:::-;4581:39;;4639:38;4673:2;4662:9;4658:18;4639:38;:::i;4688:380::-;4767:1;4763:12;;;;4810;;;4831:61;;4885:4;4877:6;4873:17;4863:27;;4831:61;4938:2;4930:6;4927:14;4907:18;4904:38;4901:161;;;4984:10;4979:3;4975:20;4972:1;4965:31;5019:4;5016:1;5009:15;5047:4;5044:1;5037:15;4901:161;;4688:380;;;:::o;5489:408::-;5691:2;5673:21;;;5730:2;5710:18;;;5703:30;5769:34;5764:2;5749:18;;5742:62;-1:-1:-1;;;5835:2:22;5820:18;;5813:42;5887:3;5872:19;;5489:408::o;5902:::-;6104:2;6086:21;;;6143:2;6123:18;;;6116:30;6182:34;6177:2;6162:18;;6155:62;-1:-1:-1;;;6248:2:22;6233:18;;6226:42;6300:3;6285:19;;5902:408::o;6315:127::-;6376:10;6371:3;6367:20;6364:1;6357:31;6407:4;6404:1;6397:15;6431:4;6428:1;6421:15;6447:128;6487:3;6518:1;6514:6;6511:1;6508:13;6505:39;;;6524:18;;:::i;:::-;-1:-1:-1;6560:9:22;;6447:128::o;7420:422::-;7509:1;7552:5;7509:1;7566:270;7587:7;7577:8;7574:21;7566:270;;;7646:4;7642:1;7638:6;7634:17;7628:4;7625:27;7622:53;;;7655:18;;:::i;:::-;7705:7;7695:8;7691:22;7688:55;;;7725:16;;;;7688:55;7804:22;;;;7764:15;;;;7566:270;;;7570:3;7420:422;;;;;:::o;7847:806::-;7896:5;7926:8;7916:80;;-1:-1:-1;7967:1:22;7981:5;;7916:80;8015:4;8005:76;;-1:-1:-1;8052:1:22;8066:5;;8005:76;8097:4;8115:1;8110:59;;;;8183:1;8178:130;;;;8090:218;;8110:59;8140:1;8131:10;;8154:5;;;8178:130;8215:3;8205:8;8202:17;8199:43;;;8222:18;;:::i;:::-;-1:-1:-1;;8278:1:22;8264:16;;8293:5;;8090:218;;8392:2;8382:8;8379:16;8373:3;8367:4;8364:13;8360:36;8354:2;8344:8;8341:16;8336:2;8330:4;8327:12;8323:35;8320:77;8317:159;;;-1:-1:-1;8429:19:22;;;8461:5;;8317:159;8508:34;8533:8;8527:4;8508:34;:::i;:::-;8578:6;8574:1;8570:6;8566:19;8557:7;8554:32;8551:58;;;8589:18;;:::i;:::-;8627:20;;7847:806;-1:-1:-1;;;7847:806:22:o;8658:140::-;8716:5;8745:47;8786:4;8776:8;8772:19;8766:4;8745:47;:::i;8803:168::-;8843:7;8909:1;8905;8901:6;8897:14;8894:1;8891:21;8886:1;8879:9;8872:17;8868:45;8865:71;;;8916:18;;:::i;:::-;-1:-1:-1;8956:9:22;;8803:168::o;11964:184::-;12034:6;12087:2;12075:9;12066:7;12062:23;12058:32;12055:52;;;12103:1;12100;12093:12;12055:52;-1:-1:-1;12126:16:22;;11964:184;-1:-1:-1;11964:184:22:o;13991:407::-;14193:2;14175:21;;;14232:2;14212:18;;;14205:30;14271:34;14266:2;14251:18;;14244:62;-1:-1:-1;;;14337:2:22;14322:18;;14315:41;14388:3;14373:19;;13991:407::o;14763:786::-;15174:25;15169:3;15162:38;15144:3;15229:6;15223:13;15245:62;15300:6;15295:2;15290:3;15286:12;15279:4;15271:6;15267:17;15245:62;:::i;:::-;-1:-1:-1;;;15366:2:22;15326:16;;;15358:11;;;15351:40;15416:13;;15438:63;15416:13;15487:2;15479:11;;15472:4;15460:17;;15438:63;:::i;:::-;15521:17;15540:2;15517:26;;14763:786;-1:-1:-1;;;;14763:786:22:o;16662:127::-;16723:10;16718:3;16714:20;16711:1;16704:31;16754:4;16751:1;16744:15;16778:4;16775:1;16768:15;16794:136;16833:3;16861:5;16851:39;;16870:18;;:::i;:::-;-1:-1:-1;;;16906:18:22;;16794:136::o;17296:274::-;17425:3;17463:6;17457:13;17479:53;17525:6;17520:3;17513:4;17505:6;17501:17;17479:53;:::i;:::-;17548:16;;;;;17296:274;-1:-1:-1;;17296:274:22:o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "1751600",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"DEFAULT_ADMIN_ROLE()": "262",
								"PAUSER_ROLE()": "infinite",
								"UPGRADER_ROLE()": "305",
								"allowance(address,address)": "infinite",
								"approve(address,uint256)": "24681",
								"balanceOf(address)": "2627",
								"burn(uint256)": "53026",
								"burnFrom(address,uint256)": "79692",
								"decimals()": "223",
								"decreaseAllowance(address,uint256)": "27028",
								"getRoleAdmin(bytes32)": "2534",
								"grantRole(bytes32,address)": "infinite",
								"hasRole(bytes32,address)": "2765",
								"increaseAllowance(address,uint256)": "27012",
								"initialize()": "infinite",
								"name()": "infinite",
								"pause()": "infinite",
								"paused()": "2361",
								"proxiableUUID()": "infinite",
								"renounceRole(bytes32,address)": "29069",
								"revokeRole(bytes32,address)": "infinite",
								"supportsInterface(bytes4)": "473",
								"symbol()": "infinite",
								"totalSupply()": "2327",
								"transfer(address,uint256)": "53344",
								"transferFrom(address,address,uint256)": "infinite",
								"unpause()": "infinite",
								"upgradeTo(address)": "infinite",
								"upgradeToAndCall(address,bytes)": "infinite"
							},
							"internal": {
								"_authorizeUpgrade(address)": "infinite",
								"_beforeTokenTransfer(address,address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 634,
									"end": 2048,
									"name": "PUSH",
									"source": 21,
									"value": "A0"
								},
								{
									"begin": 634,
									"end": 2048,
									"name": "PUSH",
									"source": 21,
									"value": "40"
								},
								{
									"begin": 634,
									"end": 2048,
									"name": "MSTORE",
									"source": 21
								},
								{
									"begin": 1332,
									"end": 1336,
									"name": "ADDRESS",
									"source": 7
								},
								{
									"begin": 1289,
									"end": 1337,
									"name": "PUSH",
									"source": 7,
									"value": "80"
								},
								{
									"begin": 1289,
									"end": 1337,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 975,
									"end": 1028,
									"name": "CALLVALUE",
									"source": 21
								},
								{
									"begin": 975,
									"end": 1028,
									"name": "DUP1",
									"source": 21
								},
								{
									"begin": 975,
									"end": 1028,
									"name": "ISZERO",
									"source": 21
								},
								{
									"begin": 975,
									"end": 1028,
									"name": "PUSH [tag]",
									"source": 21,
									"value": "1"
								},
								{
									"begin": 975,
									"end": 1028,
									"name": "JUMPI",
									"source": 21
								},
								{
									"begin": 975,
									"end": 1028,
									"name": "PUSH",
									"source": 21,
									"value": "0"
								},
								{
									"begin": 975,
									"end": 1028,
									"name": "DUP1",
									"source": 21
								},
								{
									"begin": 975,
									"end": 1028,
									"name": "REVERT",
									"source": 21
								},
								{
									"begin": 975,
									"end": 1028,
									"name": "tag",
									"source": 21,
									"value": "1"
								},
								{
									"begin": 975,
									"end": 1028,
									"name": "JUMPDEST",
									"source": 21
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 999,
									"end": 1021,
									"name": "PUSH [tag]",
									"source": 21,
									"value": "4"
								},
								{
									"begin": 999,
									"end": 1019,
									"name": "PUSH [tag]",
									"source": 21,
									"value": "5"
								},
								{
									"begin": 999,
									"end": 1021,
									"name": "JUMP",
									"source": 21,
									"value": "[in]"
								},
								{
									"begin": 999,
									"end": 1021,
									"name": "tag",
									"source": 21,
									"value": "4"
								},
								{
									"begin": 999,
									"end": 1021,
									"name": "JUMPDEST",
									"source": 21
								},
								{
									"begin": 634,
									"end": 2048,
									"name": "PUSH [tag]",
									"source": 21,
									"value": "14"
								},
								{
									"begin": 634,
									"end": 2048,
									"name": "JUMP",
									"source": 21
								},
								{
									"begin": 5939,
									"end": 6219,
									"name": "tag",
									"source": 6,
									"value": "5"
								},
								{
									"begin": 5939,
									"end": 6219,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 6007,
									"end": 6020,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 6007,
									"end": 6020,
									"name": "SLOAD",
									"source": 6
								},
								{
									"begin": 6007,
									"end": 6020,
									"name": "PUSH",
									"source": 6,
									"value": "100"
								},
								{
									"begin": 6007,
									"end": 6020,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 6007,
									"end": 6020,
									"name": "DIV",
									"source": 6
								},
								{
									"begin": 6007,
									"end": 6020,
									"name": "PUSH",
									"source": 6,
									"value": "FF"
								},
								{
									"begin": 6007,
									"end": 6020,
									"name": "AND",
									"source": 6
								},
								{
									"begin": 6006,
									"end": 6020,
									"name": "ISZERO",
									"source": 6
								},
								{
									"begin": 5998,
									"end": 6064,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "8"
								},
								{
									"begin": 5998,
									"end": 6064,
									"name": "JUMPI",
									"source": 6
								},
								{
									"begin": 5998,
									"end": 6064,
									"name": "PUSH",
									"source": 6,
									"value": "40"
								},
								{
									"begin": 5998,
									"end": 6064,
									"name": "MLOAD",
									"source": 6
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "461BCD"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E5"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 5998,
									"end": 6064,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 5998,
									"end": 6064,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 216,
									"end": 218,
									"name": "PUSH",
									"source": 22,
									"value": "20"
								},
								{
									"begin": 5998,
									"end": 6064,
									"name": "PUSH",
									"source": 6,
									"value": "4"
								},
								{
									"begin": 5998,
									"end": 6064,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 5998,
									"end": 6064,
									"name": "ADD",
									"source": 6
								},
								{
									"begin": 198,
									"end": 219,
									"name": "MSTORE",
									"source": 22
								},
								{
									"begin": 255,
									"end": 257,
									"name": "PUSH",
									"source": 22,
									"value": "27"
								},
								{
									"begin": 235,
									"end": 253,
									"name": "PUSH",
									"source": 22,
									"value": "24"
								},
								{
									"begin": 235,
									"end": 253,
									"name": "DUP3",
									"source": 22
								},
								{
									"begin": 235,
									"end": 253,
									"name": "ADD",
									"source": 22
								},
								{
									"begin": 228,
									"end": 258,
									"name": "MSTORE",
									"source": 22
								},
								{
									"begin": 294,
									"end": 328,
									"name": "PUSH",
									"source": 22,
									"value": "496E697469616C697A61626C653A20636F6E747261637420697320696E697469"
								},
								{
									"begin": 274,
									"end": 292,
									"name": "PUSH",
									"source": 22,
									"value": "44"
								},
								{
									"begin": 274,
									"end": 292,
									"name": "DUP3",
									"source": 22
								},
								{
									"begin": 274,
									"end": 292,
									"name": "ADD",
									"source": 22
								},
								{
									"begin": 267,
									"end": 329,
									"name": "MSTORE",
									"source": 22
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "616C697A696E67"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "C8"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 345,
									"end": 363,
									"name": "PUSH",
									"source": 22,
									"value": "64"
								},
								{
									"begin": 345,
									"end": 363,
									"name": "DUP3",
									"source": 22
								},
								{
									"begin": 345,
									"end": 363,
									"name": "ADD",
									"source": 22
								},
								{
									"begin": 338,
									"end": 375,
									"name": "MSTORE",
									"source": 22
								},
								{
									"begin": 392,
									"end": 411,
									"name": "PUSH",
									"source": 22,
									"value": "84"
								},
								{
									"begin": 392,
									"end": 411,
									"name": "ADD",
									"source": 22
								},
								{
									"begin": 5998,
									"end": 6064,
									"name": "PUSH",
									"source": 6,
									"value": "40"
								},
								{
									"begin": 5998,
									"end": 6064,
									"name": "MLOAD",
									"source": 6
								},
								{
									"begin": 5998,
									"end": 6064,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 5998,
									"end": 6064,
									"name": "SWAP2",
									"source": 6
								},
								{
									"begin": 5998,
									"end": 6064,
									"name": "SUB",
									"source": 6
								},
								{
									"begin": 5998,
									"end": 6064,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 5998,
									"end": 6064,
									"name": "REVERT",
									"source": 6
								},
								{
									"begin": 5998,
									"end": 6064,
									"name": "tag",
									"source": 6,
									"value": "8"
								},
								{
									"begin": 5998,
									"end": 6064,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 6078,
									"end": 6090,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 6078,
									"end": 6090,
									"name": "SLOAD",
									"source": 6
								},
								{
									"begin": 6094,
									"end": 6109,
									"name": "PUSH",
									"source": 6,
									"value": "FF"
								},
								{
									"begin": 6078,
									"end": 6090,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 6078,
									"end": 6090,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 6078,
									"end": 6090,
									"name": "AND",
									"source": 6
								},
								{
									"begin": 6078,
									"end": 6109,
									"name": "EQ",
									"source": 6
								},
								{
									"begin": 6074,
									"end": 6213,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "11"
								},
								{
									"begin": 6074,
									"end": 6213,
									"name": "JUMPI",
									"source": 6
								},
								{
									"begin": 6125,
									"end": 6137,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 6125,
									"end": 6155,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 6125,
									"end": 6155,
									"name": "SLOAD",
									"source": 6
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "FF"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 6125,
									"end": 6155,
									"name": "AND",
									"source": 6
								},
								{
									"begin": 6140,
									"end": 6155,
									"name": "PUSH",
									"source": 6,
									"value": "FF"
								},
								{
									"begin": 6125,
									"end": 6155,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 6125,
									"end": 6155,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 6125,
									"end": 6155,
									"name": "OR",
									"source": 6
								},
								{
									"begin": 6125,
									"end": 6155,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 6125,
									"end": 6155,
									"name": "SWAP2",
									"source": 6
								},
								{
									"begin": 6125,
									"end": 6155,
									"name": "SSTORE",
									"source": 6
								},
								{
									"begin": 6174,
									"end": 6202,
									"name": "PUSH",
									"source": 6,
									"value": "40"
								},
								{
									"begin": 6174,
									"end": 6202,
									"name": "MLOAD",
									"source": 6
								},
								{
									"begin": 564,
									"end": 600,
									"name": "SWAP1",
									"source": 22
								},
								{
									"begin": 564,
									"end": 600,
									"name": "DUP2",
									"source": 22
								},
								{
									"begin": 564,
									"end": 600,
									"name": "MSTORE",
									"source": 22
								},
								{
									"begin": 6174,
									"end": 6202,
									"name": "PUSH",
									"source": 6,
									"value": "7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498"
								},
								{
									"begin": 6174,
									"end": 6202,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 552,
									"end": 554,
									"name": "PUSH",
									"source": 22,
									"value": "20"
								},
								{
									"begin": 537,
									"end": 555,
									"name": "ADD",
									"source": 22
								},
								{
									"begin": 6174,
									"end": 6202,
									"name": "PUSH",
									"source": 6,
									"value": "40"
								},
								{
									"begin": 6174,
									"end": 6202,
									"name": "MLOAD",
									"source": 6
								},
								{
									"begin": 6174,
									"end": 6202,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 6174,
									"end": 6202,
									"name": "SWAP2",
									"source": 6
								},
								{
									"begin": 6174,
									"end": 6202,
									"name": "SUB",
									"source": 6
								},
								{
									"begin": 6174,
									"end": 6202,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 6174,
									"end": 6202,
									"name": "LOG1",
									"source": 6
								},
								{
									"begin": 6074,
									"end": 6213,
									"name": "tag",
									"source": 6,
									"value": "11"
								},
								{
									"begin": 6074,
									"end": 6213,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 5939,
									"end": 6219,
									"name": "JUMP",
									"source": 6,
									"value": "[out]"
								},
								{
									"begin": 422,
									"end": 606,
									"name": "tag",
									"source": 22,
									"value": "14"
								},
								{
									"begin": 422,
									"end": 606,
									"name": "JUMPDEST",
									"source": 22
								},
								{
									"begin": 634,
									"end": 2048,
									"name": "PUSH",
									"source": 21,
									"value": "80"
								},
								{
									"begin": 634,
									"end": 2048,
									"name": "MLOAD",
									"source": 21
								},
								{
									"begin": 634,
									"end": 2048,
									"name": "PUSH #[$]",
									"source": 21,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 634,
									"end": 2048,
									"name": "PUSH [$]",
									"source": 21,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 634,
									"end": 2048,
									"name": "PUSH",
									"source": 21,
									"value": "0"
								},
								{
									"begin": 634,
									"end": 2048,
									"name": "CODECOPY",
									"source": 21
								},
								{
									"begin": 634,
									"end": 2048,
									"name": "PUSH",
									"source": 21,
									"value": "0"
								},
								{
									"begin": 634,
									"end": 2048,
									"name": "ASSIGNIMMUTABLE",
									"source": 21,
									"value": "973"
								},
								{
									"begin": 634,
									"end": 2048,
									"name": "PUSH #[$]",
									"source": 21,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 634,
									"end": 2048,
									"name": "PUSH",
									"source": 21,
									"value": "0"
								},
								{
									"begin": 634,
									"end": 2048,
									"name": "RETURN",
									"source": 21
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220c026e58ae13b5c64482eb691d8013675b76b325e89fca4ee10252d5638ff4c0c64736f6c63430008090033",
									".code": [
										{
											"begin": 634,
											"end": 2048,
											"name": "PUSH",
											"source": 21,
											"value": "80"
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "PUSH",
											"source": 21,
											"value": "40"
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "MSTORE",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "PUSH",
											"source": 21,
											"value": "4"
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "CALLDATASIZE",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "LT",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "1"
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "JUMPI",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "CALLDATALOAD",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "PUSH",
											"source": 21,
											"value": "E0"
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "SHR",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "PUSH",
											"source": 21,
											"value": "52D1902D"
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "GT",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "31"
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "JUMPI",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "PUSH",
											"source": 21,
											"value": "95D89B41"
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "GT",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "32"
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "JUMPI",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "PUSH",
											"source": 21,
											"value": "D547741F"
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "GT",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "33"
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "JUMPI",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "PUSH",
											"source": 21,
											"value": "D547741F"
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "EQ",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "27"
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "JUMPI",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "PUSH",
											"source": 21,
											"value": "DD62ED3E"
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "EQ",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "28"
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "JUMPI",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "PUSH",
											"source": 21,
											"value": "E63AB1E9"
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "EQ",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "29"
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "JUMPI",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "PUSH",
											"source": 21,
											"value": "F72C0D8B"
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "EQ",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "30"
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "JUMPI",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "REVERT",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "tag",
											"source": 21,
											"value": "33"
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "PUSH",
											"source": 21,
											"value": "95D89B41"
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "EQ",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "23"
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "JUMPI",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "PUSH",
											"source": 21,
											"value": "A217FDDF"
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "EQ",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "24"
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "JUMPI",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "PUSH",
											"source": 21,
											"value": "A457C2D7"
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "EQ",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "25"
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "JUMPI",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "PUSH",
											"source": 21,
											"value": "A9059CBB"
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "EQ",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "26"
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "JUMPI",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "REVERT",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "tag",
											"source": 21,
											"value": "32"
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "PUSH",
											"source": 21,
											"value": "79CC6790"
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "GT",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "34"
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "JUMPI",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "PUSH",
											"source": 21,
											"value": "79CC6790"
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "EQ",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "19"
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "JUMPI",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "PUSH",
											"source": 21,
											"value": "8129FC1C"
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "EQ",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "20"
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "JUMPI",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "PUSH",
											"source": 21,
											"value": "8456CB59"
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "EQ",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "21"
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "JUMPI",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "PUSH",
											"source": 21,
											"value": "91D14854"
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "EQ",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "22"
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "JUMPI",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "REVERT",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "tag",
											"source": 21,
											"value": "34"
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "PUSH",
											"source": 21,
											"value": "52D1902D"
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "EQ",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "16"
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "JUMPI",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "PUSH",
											"source": 21,
											"value": "5C975ABB"
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "EQ",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "17"
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "JUMPI",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "PUSH",
											"source": 21,
											"value": "70A08231"
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "EQ",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "18"
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "JUMPI",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "REVERT",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "tag",
											"source": 21,
											"value": "31"
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "PUSH",
											"source": 21,
											"value": "313CE567"
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "GT",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "35"
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "JUMPI",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "PUSH",
											"source": 21,
											"value": "39509351"
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "GT",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "36"
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "JUMPI",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "PUSH",
											"source": 21,
											"value": "39509351"
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "EQ",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "12"
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "JUMPI",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "PUSH",
											"source": 21,
											"value": "3F4BA83A"
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "EQ",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "13"
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "JUMPI",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "PUSH",
											"source": 21,
											"value": "42966C68"
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "EQ",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "14"
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "JUMPI",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "PUSH",
											"source": 21,
											"value": "4F1EF286"
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "EQ",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "15"
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "JUMPI",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "REVERT",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "tag",
											"source": 21,
											"value": "36"
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "PUSH",
											"source": 21,
											"value": "313CE567"
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "EQ",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "9"
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "JUMPI",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "PUSH",
											"source": 21,
											"value": "36568ABE"
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "EQ",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "10"
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "JUMPI",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "PUSH",
											"source": 21,
											"value": "3659CFE6"
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "EQ",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "11"
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "JUMPI",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "REVERT",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "tag",
											"source": 21,
											"value": "35"
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "PUSH",
											"source": 21,
											"value": "18160DDD"
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "GT",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "37"
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "JUMPI",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "PUSH",
											"source": 21,
											"value": "18160DDD"
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "EQ",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "5"
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "JUMPI",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "PUSH",
											"source": 21,
											"value": "23B872DD"
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "EQ",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "6"
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "JUMPI",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "PUSH",
											"source": 21,
											"value": "248A9CA3"
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "EQ",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "7"
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "JUMPI",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "PUSH",
											"source": 21,
											"value": "2F2FF15D"
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "EQ",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "8"
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "JUMPI",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "REVERT",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "tag",
											"source": 21,
											"value": "37"
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "PUSH",
											"source": 21,
											"value": "1FFC9A7"
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "EQ",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "2"
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "JUMPI",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "PUSH",
											"source": 21,
											"value": "6FDDE03"
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "EQ",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "3"
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "JUMPI",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "PUSH",
											"source": 21,
											"value": "95EA7B3"
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "EQ",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "4"
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "JUMPI",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "tag",
											"source": 21,
											"value": "1"
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 634,
											"end": 2048,
											"name": "REVERT",
											"source": 21
										},
										{
											"begin": 3029,
											"end": 3242,
											"name": "tag",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 3029,
											"end": 3242,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3029,
											"end": 3242,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 3029,
											"end": 3242,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3029,
											"end": 3242,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 3029,
											"end": 3242,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "38"
										},
										{
											"begin": 3029,
											"end": 3242,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 3029,
											"end": 3242,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 3029,
											"end": 3242,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3029,
											"end": 3242,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 3029,
											"end": 3242,
											"name": "tag",
											"source": 0,
											"value": "38"
										},
										{
											"begin": 3029,
											"end": 3242,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3029,
											"end": 3242,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "39"
										},
										{
											"begin": 3029,
											"end": 3242,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 3029,
											"end": 3242,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 3029,
											"end": 3242,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 3029,
											"end": 3242,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "41"
										},
										{
											"begin": 3029,
											"end": 3242,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 3029,
											"end": 3242,
											"name": "tag",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 3029,
											"end": 3242,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3029,
											"end": 3242,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "42"
										},
										{
											"begin": 3029,
											"end": 3242,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 3029,
											"end": 3242,
											"name": "tag",
											"source": 0,
											"value": "39"
										},
										{
											"begin": 3029,
											"end": 3242,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3029,
											"end": 3242,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 3029,
											"end": 3242,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 470,
											"end": 484,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 470,
											"end": 484,
											"name": "ISZERO",
											"source": 22
										},
										{
											"begin": 463,
											"end": 485,
											"name": "ISZERO",
											"source": 22
										},
										{
											"begin": 445,
											"end": 486,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 445,
											"end": 486,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 433,
											"end": 435,
											"name": "PUSH",
											"source": 22,
											"value": "20"
										},
										{
											"begin": 418,
											"end": 436,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 3029,
											"end": 3242,
											"name": "tag",
											"source": 0,
											"value": "43"
										},
										{
											"begin": 3029,
											"end": 3242,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3029,
											"end": 3242,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 3029,
											"end": 3242,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 3029,
											"end": 3242,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3029,
											"end": 3242,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 3029,
											"end": 3242,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 3029,
											"end": 3242,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3029,
											"end": 3242,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "tag",
											"source": 9,
											"value": "3"
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "CALLVALUE",
											"source": 9
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "45"
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "tag",
											"source": 9,
											"value": "45"
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "46"
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "47"
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "tag",
											"source": 9,
											"value": "46"
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "43"
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "49"
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "tag",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "CALLVALUE",
											"source": 9
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "50"
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "tag",
											"source": 9,
											"value": "50"
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "39"
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "52"
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "53"
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "tag",
											"source": 9,
											"value": "52"
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "54"
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 3592,
											"end": 3698,
											"name": "tag",
											"source": 9,
											"value": "5"
										},
										{
											"begin": 3592,
											"end": 3698,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3592,
											"end": 3698,
											"name": "CALLVALUE",
											"source": 9
										},
										{
											"begin": 3592,
											"end": 3698,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3592,
											"end": 3698,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 3592,
											"end": 3698,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "56"
										},
										{
											"begin": 3592,
											"end": 3698,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 3592,
											"end": 3698,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3592,
											"end": 3698,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3592,
											"end": 3698,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 3592,
											"end": 3698,
											"name": "tag",
											"source": 9,
											"value": "56"
										},
										{
											"begin": 3592,
											"end": 3698,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3679,
											"end": 3691,
											"name": "PUSH",
											"source": 9,
											"value": "35"
										},
										{
											"begin": 3679,
											"end": 3691,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 3592,
											"end": 3698,
											"name": "tag",
											"source": 9,
											"value": "57"
										},
										{
											"begin": 3592,
											"end": 3698,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3592,
											"end": 3698,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 3592,
											"end": 3698,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 1731,
											"end": 1756,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 1731,
											"end": 1756,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 1731,
											"end": 1756,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 1719,
											"end": 1721,
											"name": "PUSH",
											"source": 22,
											"value": "20"
										},
										{
											"begin": 1704,
											"end": 1722,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 3592,
											"end": 3698,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "43"
										},
										{
											"begin": 1585,
											"end": 1762,
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 5540,
											"end": 5796,
											"name": "tag",
											"source": 9,
											"value": "6"
										},
										{
											"begin": 5540,
											"end": 5796,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5540,
											"end": 5796,
											"name": "CALLVALUE",
											"source": 9
										},
										{
											"begin": 5540,
											"end": 5796,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 5540,
											"end": 5796,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 5540,
											"end": 5796,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "61"
										},
										{
											"begin": 5540,
											"end": 5796,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 5540,
											"end": 5796,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 5540,
											"end": 5796,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 5540,
											"end": 5796,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 5540,
											"end": 5796,
											"name": "tag",
											"source": 9,
											"value": "61"
										},
										{
											"begin": 5540,
											"end": 5796,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5540,
											"end": 5796,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "39"
										},
										{
											"begin": 5540,
											"end": 5796,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "63"
										},
										{
											"begin": 5540,
											"end": 5796,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 5540,
											"end": 5796,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 5540,
											"end": 5796,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 5540,
											"end": 5796,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 5540,
											"end": 5796,
											"name": "tag",
											"source": 9,
											"value": "63"
										},
										{
											"begin": 5540,
											"end": 5796,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5540,
											"end": 5796,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "65"
										},
										{
											"begin": 5540,
											"end": 5796,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 4834,
											"end": 4963,
											"name": "tag",
											"source": 0,
											"value": "7"
										},
										{
											"begin": 4834,
											"end": 4963,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4834,
											"end": 4963,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 4834,
											"end": 4963,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4834,
											"end": 4963,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 4834,
											"end": 4963,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "67"
										},
										{
											"begin": 4834,
											"end": 4963,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 4834,
											"end": 4963,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4834,
											"end": 4963,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4834,
											"end": 4963,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 4834,
											"end": 4963,
											"name": "tag",
											"source": 0,
											"value": "67"
										},
										{
											"begin": 4834,
											"end": 4963,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4834,
											"end": 4963,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "57"
										},
										{
											"begin": 4834,
											"end": 4963,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "69"
										},
										{
											"begin": 4834,
											"end": 4963,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 4834,
											"end": 4963,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 4834,
											"end": 4963,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "70"
										},
										{
											"begin": 4834,
											"end": 4963,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 4834,
											"end": 4963,
											"name": "tag",
											"source": 0,
											"value": "69"
										},
										{
											"begin": 4834,
											"end": 4963,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4908,
											"end": 4915,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4934,
											"end": 4946,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4934,
											"end": 4946,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4934,
											"end": 4946,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 4934,
											"end": 4940,
											"name": "PUSH",
											"source": 0,
											"value": "FB"
										},
										{
											"begin": 4934,
											"end": 4946,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 4934,
											"end": 4946,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 4934,
											"end": 4946,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 4934,
											"end": 4946,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4934,
											"end": 4946,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 4934,
											"end": 4956,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 4934,
											"end": 4956,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4934,
											"end": 4956,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 4934,
											"end": 4956,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4834,
											"end": 4963,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 5259,
											"end": 5404,
											"name": "tag",
											"source": 0,
											"value": "8"
										},
										{
											"begin": 5259,
											"end": 5404,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5259,
											"end": 5404,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 5259,
											"end": 5404,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 5259,
											"end": 5404,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 5259,
											"end": 5404,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "74"
										},
										{
											"begin": 5259,
											"end": 5404,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 5259,
											"end": 5404,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 5259,
											"end": 5404,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 5259,
											"end": 5404,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 5259,
											"end": 5404,
											"name": "tag",
											"source": 0,
											"value": "74"
										},
										{
											"begin": 5259,
											"end": 5404,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5259,
											"end": 5404,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "75"
										},
										{
											"begin": 5259,
											"end": 5404,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "76"
										},
										{
											"begin": 5259,
											"end": 5404,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 5259,
											"end": 5404,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 5259,
											"end": 5404,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "77"
										},
										{
											"begin": 5259,
											"end": 5404,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 5259,
											"end": 5404,
											"name": "tag",
											"source": 0,
											"value": "76"
										},
										{
											"begin": 5259,
											"end": 5404,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5259,
											"end": 5404,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "78"
										},
										{
											"begin": 5259,
											"end": 5404,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 5259,
											"end": 5404,
											"name": "tag",
											"source": 0,
											"value": "75"
										},
										{
											"begin": 5259,
											"end": 5404,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5259,
											"end": 5404,
											"name": "STOP",
											"source": 0
										},
										{
											"begin": 3441,
											"end": 3532,
											"name": "tag",
											"source": 9,
											"value": "9"
										},
										{
											"begin": 3441,
											"end": 3532,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3441,
											"end": 3532,
											"name": "CALLVALUE",
											"source": 9
										},
										{
											"begin": 3441,
											"end": 3532,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3441,
											"end": 3532,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 3441,
											"end": 3532,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "79"
										},
										{
											"begin": 3441,
											"end": 3532,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 3441,
											"end": 3532,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3441,
											"end": 3532,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3441,
											"end": 3532,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 3441,
											"end": 3532,
											"name": "tag",
											"source": 9,
											"value": "79"
										},
										{
											"begin": 3441,
											"end": 3532,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3441,
											"end": 3532,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 3441,
											"end": 3532,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 3523,
											"end": 3525,
											"name": "PUSH",
											"source": 9,
											"value": "12"
										},
										{
											"begin": 2868,
											"end": 2904,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 2868,
											"end": 2904,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 2856,
											"end": 2858,
											"name": "PUSH",
											"source": 22,
											"value": "20"
										},
										{
											"begin": 2841,
											"end": 2859,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 3441,
											"end": 3532,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "43"
										},
										{
											"begin": 2726,
											"end": 2910,
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 6368,
											"end": 6582,
											"name": "tag",
											"source": 0,
											"value": "10"
										},
										{
											"begin": 6368,
											"end": 6582,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6368,
											"end": 6582,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 6368,
											"end": 6582,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 6368,
											"end": 6582,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 6368,
											"end": 6582,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "84"
										},
										{
											"begin": 6368,
											"end": 6582,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 6368,
											"end": 6582,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 6368,
											"end": 6582,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 6368,
											"end": 6582,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 6368,
											"end": 6582,
											"name": "tag",
											"source": 0,
											"value": "84"
										},
										{
											"begin": 6368,
											"end": 6582,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6368,
											"end": 6582,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "75"
										},
										{
											"begin": 6368,
											"end": 6582,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "86"
										},
										{
											"begin": 6368,
											"end": 6582,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 6368,
											"end": 6582,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 6368,
											"end": 6582,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "77"
										},
										{
											"begin": 6368,
											"end": 6582,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 6368,
											"end": 6582,
											"name": "tag",
											"source": 0,
											"value": "86"
										},
										{
											"begin": 6368,
											"end": 6582,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6368,
											"end": 6582,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "87"
										},
										{
											"begin": 6368,
											"end": 6582,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 3387,
											"end": 3582,
											"name": "tag",
											"source": 7,
											"value": "11"
										},
										{
											"begin": 3387,
											"end": 3582,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3387,
											"end": 3582,
											"name": "CALLVALUE",
											"source": 7
										},
										{
											"begin": 3387,
											"end": 3582,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 3387,
											"end": 3582,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 3387,
											"end": 3582,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "88"
										},
										{
											"begin": 3387,
											"end": 3582,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 3387,
											"end": 3582,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3387,
											"end": 3582,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 3387,
											"end": 3582,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 3387,
											"end": 3582,
											"name": "tag",
											"source": 7,
											"value": "88"
										},
										{
											"begin": 3387,
											"end": 3582,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3387,
											"end": 3582,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "75"
										},
										{
											"begin": 3387,
											"end": 3582,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "90"
										},
										{
											"begin": 3387,
											"end": 3582,
											"name": "CALLDATASIZE",
											"source": 7
										},
										{
											"begin": 3387,
											"end": 3582,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 3387,
											"end": 3582,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "91"
										},
										{
											"begin": 3387,
											"end": 3582,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 3387,
											"end": 3582,
											"name": "tag",
											"source": 7,
											"value": "90"
										},
										{
											"begin": 3387,
											"end": 3582,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3387,
											"end": 3582,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "92"
										},
										{
											"begin": 3387,
											"end": 3582,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 6191,
											"end": 6425,
											"name": "tag",
											"source": 9,
											"value": "12"
										},
										{
											"begin": 6191,
											"end": 6425,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 6191,
											"end": 6425,
											"name": "CALLVALUE",
											"source": 9
										},
										{
											"begin": 6191,
											"end": 6425,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 6191,
											"end": 6425,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 6191,
											"end": 6425,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "93"
										},
										{
											"begin": 6191,
											"end": 6425,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 6191,
											"end": 6425,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 6191,
											"end": 6425,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 6191,
											"end": 6425,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 6191,
											"end": 6425,
											"name": "tag",
											"source": 9,
											"value": "93"
										},
										{
											"begin": 6191,
											"end": 6425,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6191,
											"end": 6425,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "39"
										},
										{
											"begin": 6191,
											"end": 6425,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "95"
										},
										{
											"begin": 6191,
											"end": 6425,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 6191,
											"end": 6425,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 6191,
											"end": 6425,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "53"
										},
										{
											"begin": 6191,
											"end": 6425,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 6191,
											"end": 6425,
											"name": "tag",
											"source": 9,
											"value": "95"
										},
										{
											"begin": 6191,
											"end": 6425,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 6191,
											"end": 6425,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "96"
										},
										{
											"begin": 6191,
											"end": 6425,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 1640,
											"end": 1715,
											"name": "tag",
											"source": 21,
											"value": "13"
										},
										{
											"begin": 1640,
											"end": 1715,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 1640,
											"end": 1715,
											"name": "CALLVALUE",
											"source": 21
										},
										{
											"begin": 1640,
											"end": 1715,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 1640,
											"end": 1715,
											"name": "ISZERO",
											"source": 21
										},
										{
											"begin": 1640,
											"end": 1715,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "98"
										},
										{
											"begin": 1640,
											"end": 1715,
											"name": "JUMPI",
											"source": 21
										},
										{
											"begin": 1640,
											"end": 1715,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 1640,
											"end": 1715,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 1640,
											"end": 1715,
											"name": "REVERT",
											"source": 21
										},
										{
											"begin": 1640,
											"end": 1715,
											"name": "tag",
											"source": 21,
											"value": "98"
										},
										{
											"begin": 1640,
											"end": 1715,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 1640,
											"end": 1715,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 1640,
											"end": 1715,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "75"
										},
										{
											"begin": 1640,
											"end": 1715,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "100"
										},
										{
											"begin": 1640,
											"end": 1715,
											"name": "JUMP",
											"source": 21,
											"value": "[in]"
										},
										{
											"begin": 848,
											"end": 937,
											"name": "tag",
											"source": 11,
											"value": "14"
										},
										{
											"begin": 848,
											"end": 937,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 848,
											"end": 937,
											"name": "CALLVALUE",
											"source": 11
										},
										{
											"begin": 848,
											"end": 937,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 848,
											"end": 937,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 848,
											"end": 937,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "101"
										},
										{
											"begin": 848,
											"end": 937,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 848,
											"end": 937,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 848,
											"end": 937,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 848,
											"end": 937,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 848,
											"end": 937,
											"name": "tag",
											"source": 11,
											"value": "101"
										},
										{
											"begin": 848,
											"end": 937,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 848,
											"end": 937,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "75"
										},
										{
											"begin": 848,
											"end": 937,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "103"
										},
										{
											"begin": 848,
											"end": 937,
											"name": "CALLDATASIZE",
											"source": 11
										},
										{
											"begin": 848,
											"end": 937,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 848,
											"end": 937,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "70"
										},
										{
											"begin": 848,
											"end": 937,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 848,
											"end": 937,
											"name": "tag",
											"source": 11,
											"value": "103"
										},
										{
											"begin": 848,
											"end": 937,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 848,
											"end": 937,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "105"
										},
										{
											"begin": 848,
											"end": 937,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 3901,
											"end": 4121,
											"name": "tag",
											"source": 7,
											"value": "15"
										},
										{
											"begin": 3901,
											"end": 4121,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3901,
											"end": 4121,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "75"
										},
										{
											"begin": 3901,
											"end": 4121,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "107"
										},
										{
											"begin": 3901,
											"end": 4121,
											"name": "CALLDATASIZE",
											"source": 7
										},
										{
											"begin": 3901,
											"end": 4121,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 3901,
											"end": 4121,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "108"
										},
										{
											"begin": 3901,
											"end": 4121,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 3901,
											"end": 4121,
											"name": "tag",
											"source": 7,
											"value": "107"
										},
										{
											"begin": 3901,
											"end": 4121,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3901,
											"end": 4121,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "109"
										},
										{
											"begin": 3901,
											"end": 4121,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 3006,
											"end": 3137,
											"name": "tag",
											"source": 7,
											"value": "16"
										},
										{
											"begin": 3006,
											"end": 3137,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3006,
											"end": 3137,
											"name": "CALLVALUE",
											"source": 7
										},
										{
											"begin": 3006,
											"end": 3137,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 3006,
											"end": 3137,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 3006,
											"end": 3137,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "110"
										},
										{
											"begin": 3006,
											"end": 3137,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 3006,
											"end": 3137,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3006,
											"end": 3137,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 3006,
											"end": 3137,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 3006,
											"end": 3137,
											"name": "tag",
											"source": 7,
											"value": "110"
										},
										{
											"begin": 3006,
											"end": 3137,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3006,
											"end": 3137,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 3006,
											"end": 3137,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "57"
										},
										{
											"begin": 3006,
											"end": 3137,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "112"
										},
										{
											"begin": 3006,
											"end": 3137,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 1858,
											"end": 1942,
											"name": "tag",
											"source": 8,
											"value": "17"
										},
										{
											"begin": 1858,
											"end": 1942,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1858,
											"end": 1942,
											"name": "CALLVALUE",
											"source": 8
										},
										{
											"begin": 1858,
											"end": 1942,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1858,
											"end": 1942,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 1858,
											"end": 1942,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "114"
										},
										{
											"begin": 1858,
											"end": 1942,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1858,
											"end": 1942,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1858,
											"end": 1942,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1858,
											"end": 1942,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 1858,
											"end": 1942,
											"name": "tag",
											"source": 8,
											"value": "114"
										},
										{
											"begin": 1858,
											"end": 1942,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1928,
											"end": 1935,
											"name": "PUSH",
											"source": 8,
											"value": "97"
										},
										{
											"begin": 1928,
											"end": 1935,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 1928,
											"end": 1935,
											"name": "PUSH",
											"source": 8,
											"value": "FF"
										},
										{
											"begin": 1928,
											"end": 1935,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 1858,
											"end": 1942,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "39"
										},
										{
											"begin": 1858,
											"end": 1942,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 3756,
											"end": 3881,
											"name": "tag",
											"source": 9,
											"value": "18"
										},
										{
											"begin": 3756,
											"end": 3881,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3756,
											"end": 3881,
											"name": "CALLVALUE",
											"source": 9
										},
										{
											"begin": 3756,
											"end": 3881,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3756,
											"end": 3881,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 3756,
											"end": 3881,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "118"
										},
										{
											"begin": 3756,
											"end": 3881,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 3756,
											"end": 3881,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3756,
											"end": 3881,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3756,
											"end": 3881,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 3756,
											"end": 3881,
											"name": "tag",
											"source": 9,
											"value": "118"
										},
										{
											"begin": 3756,
											"end": 3881,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3756,
											"end": 3881,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "57"
										},
										{
											"begin": 3756,
											"end": 3881,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "120"
										},
										{
											"begin": 3756,
											"end": 3881,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 3756,
											"end": 3881,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 3756,
											"end": 3881,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "91"
										},
										{
											"begin": 3756,
											"end": 3881,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 3756,
											"end": 3881,
											"name": "tag",
											"source": 9,
											"value": "120"
										},
										{
											"begin": 3756,
											"end": 3881,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3856,
											"end": 3874,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 3830,
											"end": 3837,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3856,
											"end": 3874,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3856,
											"end": 3874,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3856,
											"end": 3874,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3856,
											"end": 3865,
											"name": "PUSH",
											"source": 9,
											"value": "33"
										},
										{
											"begin": 3856,
											"end": 3874,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 3856,
											"end": 3874,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3856,
											"end": 3874,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 3856,
											"end": 3874,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3856,
											"end": 3874,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 3856,
											"end": 3874,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 3856,
											"end": 3874,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3756,
											"end": 3881,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 1243,
											"end": 1404,
											"name": "tag",
											"source": 11,
											"value": "19"
										},
										{
											"begin": 1243,
											"end": 1404,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1243,
											"end": 1404,
											"name": "CALLVALUE",
											"source": 11
										},
										{
											"begin": 1243,
											"end": 1404,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1243,
											"end": 1404,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 1243,
											"end": 1404,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "123"
										},
										{
											"begin": 1243,
											"end": 1404,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 1243,
											"end": 1404,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1243,
											"end": 1404,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1243,
											"end": 1404,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 1243,
											"end": 1404,
											"name": "tag",
											"source": 11,
											"value": "123"
										},
										{
											"begin": 1243,
											"end": 1404,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1243,
											"end": 1404,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "75"
										},
										{
											"begin": 1243,
											"end": 1404,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "125"
										},
										{
											"begin": 1243,
											"end": 1404,
											"name": "CALLDATASIZE",
											"source": 11
										},
										{
											"begin": 1243,
											"end": 1404,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 1243,
											"end": 1404,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "53"
										},
										{
											"begin": 1243,
											"end": 1404,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 1243,
											"end": 1404,
											"name": "tag",
											"source": 11,
											"value": "125"
										},
										{
											"begin": 1243,
											"end": 1404,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1243,
											"end": 1404,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "126"
										},
										{
											"begin": 1243,
											"end": 1404,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 1140,
											"end": 1557,
											"name": "tag",
											"source": 21,
											"value": "20"
										},
										{
											"begin": 1140,
											"end": 1557,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 1140,
											"end": 1557,
											"name": "CALLVALUE",
											"source": 21
										},
										{
											"begin": 1140,
											"end": 1557,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 1140,
											"end": 1557,
											"name": "ISZERO",
											"source": 21
										},
										{
											"begin": 1140,
											"end": 1557,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "127"
										},
										{
											"begin": 1140,
											"end": 1557,
											"name": "JUMPI",
											"source": 21
										},
										{
											"begin": 1140,
											"end": 1557,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 1140,
											"end": 1557,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 1140,
											"end": 1557,
											"name": "REVERT",
											"source": 21
										},
										{
											"begin": 1140,
											"end": 1557,
											"name": "tag",
											"source": 21,
											"value": "127"
										},
										{
											"begin": 1140,
											"end": 1557,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 1140,
											"end": 1557,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 1140,
											"end": 1557,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "75"
										},
										{
											"begin": 1140,
											"end": 1557,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "129"
										},
										{
											"begin": 1140,
											"end": 1557,
											"name": "JUMP",
											"source": 21,
											"value": "[in]"
										},
										{
											"begin": 1563,
											"end": 1634,
											"name": "tag",
											"source": 21,
											"value": "21"
										},
										{
											"begin": 1563,
											"end": 1634,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 1563,
											"end": 1634,
											"name": "CALLVALUE",
											"source": 21
										},
										{
											"begin": 1563,
											"end": 1634,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 1563,
											"end": 1634,
											"name": "ISZERO",
											"source": 21
										},
										{
											"begin": 1563,
											"end": 1634,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "130"
										},
										{
											"begin": 1563,
											"end": 1634,
											"name": "JUMPI",
											"source": 21
										},
										{
											"begin": 1563,
											"end": 1634,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 1563,
											"end": 1634,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 1563,
											"end": 1634,
											"name": "REVERT",
											"source": 21
										},
										{
											"begin": 1563,
											"end": 1634,
											"name": "tag",
											"source": 21,
											"value": "130"
										},
										{
											"begin": 1563,
											"end": 1634,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 1563,
											"end": 1634,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 1563,
											"end": 1634,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "75"
										},
										{
											"begin": 1563,
											"end": 1634,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "132"
										},
										{
											"begin": 1563,
											"end": 1634,
											"name": "JUMP",
											"source": 21,
											"value": "[in]"
										},
										{
											"begin": 3329,
											"end": 3474,
											"name": "tag",
											"source": 0,
											"value": "22"
										},
										{
											"begin": 3329,
											"end": 3474,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3329,
											"end": 3474,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 3329,
											"end": 3474,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3329,
											"end": 3474,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 3329,
											"end": 3474,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "133"
										},
										{
											"begin": 3329,
											"end": 3474,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 3329,
											"end": 3474,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 3329,
											"end": 3474,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3329,
											"end": 3474,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 3329,
											"end": 3474,
											"name": "tag",
											"source": 0,
											"value": "133"
										},
										{
											"begin": 3329,
											"end": 3474,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3329,
											"end": 3474,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "39"
										},
										{
											"begin": 3329,
											"end": 3474,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "135"
										},
										{
											"begin": 3329,
											"end": 3474,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 3329,
											"end": 3474,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 3329,
											"end": 3474,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "77"
										},
										{
											"begin": 3329,
											"end": 3474,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 3329,
											"end": 3474,
											"name": "tag",
											"source": 0,
											"value": "135"
										},
										{
											"begin": 3329,
											"end": 3474,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3329,
											"end": 3474,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "136"
										},
										{
											"begin": 3329,
											"end": 3474,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2706,
											"end": 2808,
											"name": "tag",
											"source": 9,
											"value": "23"
										},
										{
											"begin": 2706,
											"end": 2808,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2706,
											"end": 2808,
											"name": "CALLVALUE",
											"source": 9
										},
										{
											"begin": 2706,
											"end": 2808,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 2706,
											"end": 2808,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 2706,
											"end": 2808,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "138"
										},
										{
											"begin": 2706,
											"end": 2808,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 2706,
											"end": 2808,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2706,
											"end": 2808,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 2706,
											"end": 2808,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 2706,
											"end": 2808,
											"name": "tag",
											"source": 9,
											"value": "138"
										},
										{
											"begin": 2706,
											"end": 2808,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2706,
											"end": 2808,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2706,
											"end": 2808,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "46"
										},
										{
											"begin": 2706,
											"end": 2808,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "140"
										},
										{
											"begin": 2706,
											"end": 2808,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 2450,
											"end": 2499,
											"name": "tag",
											"source": 0,
											"value": "24"
										},
										{
											"begin": 2450,
											"end": 2499,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2450,
											"end": 2499,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 2450,
											"end": 2499,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2450,
											"end": 2499,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 2450,
											"end": 2499,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "142"
										},
										{
											"begin": 2450,
											"end": 2499,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2450,
											"end": 2499,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2450,
											"end": 2499,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2450,
											"end": 2499,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 2450,
											"end": 2499,
											"name": "tag",
											"source": 0,
											"value": "142"
										},
										{
											"begin": 2450,
											"end": 2499,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2450,
											"end": 2499,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "57"
										},
										{
											"begin": 2495,
											"end": 2499,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2450,
											"end": 2499,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2450,
											"end": 2499,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 6912,
											"end": 7339,
											"name": "tag",
											"source": 9,
											"value": "25"
										},
										{
											"begin": 6912,
											"end": 7339,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 6912,
											"end": 7339,
											"name": "CALLVALUE",
											"source": 9
										},
										{
											"begin": 6912,
											"end": 7339,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 6912,
											"end": 7339,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 6912,
											"end": 7339,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "146"
										},
										{
											"begin": 6912,
											"end": 7339,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 6912,
											"end": 7339,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 6912,
											"end": 7339,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 6912,
											"end": 7339,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 6912,
											"end": 7339,
											"name": "tag",
											"source": 9,
											"value": "146"
										},
										{
											"begin": 6912,
											"end": 7339,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6912,
											"end": 7339,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "39"
										},
										{
											"begin": 6912,
											"end": 7339,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "148"
										},
										{
											"begin": 6912,
											"end": 7339,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 6912,
											"end": 7339,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 6912,
											"end": 7339,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "53"
										},
										{
											"begin": 6912,
											"end": 7339,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 6912,
											"end": 7339,
											"name": "tag",
											"source": 9,
											"value": "148"
										},
										{
											"begin": 6912,
											"end": 7339,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 6912,
											"end": 7339,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "149"
										},
										{
											"begin": 6912,
											"end": 7339,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 4077,
											"end": 4266,
											"name": "tag",
											"source": 9,
											"value": "26"
										},
										{
											"begin": 4077,
											"end": 4266,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4077,
											"end": 4266,
											"name": "CALLVALUE",
											"source": 9
										},
										{
											"begin": 4077,
											"end": 4266,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 4077,
											"end": 4266,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 4077,
											"end": 4266,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "151"
										},
										{
											"begin": 4077,
											"end": 4266,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 4077,
											"end": 4266,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 4077,
											"end": 4266,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 4077,
											"end": 4266,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 4077,
											"end": 4266,
											"name": "tag",
											"source": 9,
											"value": "151"
										},
										{
											"begin": 4077,
											"end": 4266,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4077,
											"end": 4266,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "39"
										},
										{
											"begin": 4077,
											"end": 4266,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "153"
										},
										{
											"begin": 4077,
											"end": 4266,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 4077,
											"end": 4266,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 4077,
											"end": 4266,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "53"
										},
										{
											"begin": 4077,
											"end": 4266,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 4077,
											"end": 4266,
											"name": "tag",
											"source": 9,
											"value": "153"
										},
										{
											"begin": 4077,
											"end": 4266,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4077,
											"end": 4266,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "154"
										},
										{
											"begin": 4077,
											"end": 4266,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 5684,
											"end": 5831,
											"name": "tag",
											"source": 0,
											"value": "27"
										},
										{
											"begin": 5684,
											"end": 5831,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5684,
											"end": 5831,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 5684,
											"end": 5831,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 5684,
											"end": 5831,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 5684,
											"end": 5831,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "156"
										},
										{
											"begin": 5684,
											"end": 5831,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 5684,
											"end": 5831,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 5684,
											"end": 5831,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 5684,
											"end": 5831,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 5684,
											"end": 5831,
											"name": "tag",
											"source": 0,
											"value": "156"
										},
										{
											"begin": 5684,
											"end": 5831,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5684,
											"end": 5831,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "75"
										},
										{
											"begin": 5684,
											"end": 5831,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "158"
										},
										{
											"begin": 5684,
											"end": 5831,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 5684,
											"end": 5831,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 5684,
											"end": 5831,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "77"
										},
										{
											"begin": 5684,
											"end": 5831,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 5684,
											"end": 5831,
											"name": "tag",
											"source": 0,
											"value": "158"
										},
										{
											"begin": 5684,
											"end": 5831,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5684,
											"end": 5831,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "159"
										},
										{
											"begin": 5684,
											"end": 5831,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 4324,
											"end": 4473,
											"name": "tag",
											"source": 9,
											"value": "28"
										},
										{
											"begin": 4324,
											"end": 4473,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4324,
											"end": 4473,
											"name": "CALLVALUE",
											"source": 9
										},
										{
											"begin": 4324,
											"end": 4473,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 4324,
											"end": 4473,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 4324,
											"end": 4473,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "160"
										},
										{
											"begin": 4324,
											"end": 4473,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 4324,
											"end": 4473,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 4324,
											"end": 4473,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 4324,
											"end": 4473,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 4324,
											"end": 4473,
											"name": "tag",
											"source": 9,
											"value": "160"
										},
										{
											"begin": 4324,
											"end": 4473,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4324,
											"end": 4473,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "57"
										},
										{
											"begin": 4324,
											"end": 4473,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "162"
										},
										{
											"begin": 4324,
											"end": 4473,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 4324,
											"end": 4473,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 4324,
											"end": 4473,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "163"
										},
										{
											"begin": 4324,
											"end": 4473,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 4324,
											"end": 4473,
											"name": "tag",
											"source": 9,
											"value": "162"
										},
										{
											"begin": 4324,
											"end": 4473,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4324,
											"end": 4473,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "164"
										},
										{
											"begin": 4324,
											"end": 4473,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 782,
											"end": 844,
											"name": "tag",
											"source": 21,
											"value": "29"
										},
										{
											"begin": 782,
											"end": 844,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 782,
											"end": 844,
											"name": "CALLVALUE",
											"source": 21
										},
										{
											"begin": 782,
											"end": 844,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 782,
											"end": 844,
											"name": "ISZERO",
											"source": 21
										},
										{
											"begin": 782,
											"end": 844,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "166"
										},
										{
											"begin": 782,
											"end": 844,
											"name": "JUMPI",
											"source": 21
										},
										{
											"begin": 782,
											"end": 844,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 782,
											"end": 844,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 782,
											"end": 844,
											"name": "REVERT",
											"source": 21
										},
										{
											"begin": 782,
											"end": 844,
											"name": "tag",
											"source": 21,
											"value": "166"
										},
										{
											"begin": 782,
											"end": 844,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 782,
											"end": 844,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 782,
											"end": 844,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "57"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "9B87106A812D214D41AD9B68A21119E2948EAAF1040375C939EC808B8862455C"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 782,
											"end": 844,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 782,
											"end": 844,
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 850,
											"end": 916,
											"name": "tag",
											"source": 21,
											"value": "30"
										},
										{
											"begin": 850,
											"end": 916,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 850,
											"end": 916,
											"name": "CALLVALUE",
											"source": 21
										},
										{
											"begin": 850,
											"end": 916,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 850,
											"end": 916,
											"name": "ISZERO",
											"source": 21
										},
										{
											"begin": 850,
											"end": 916,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "170"
										},
										{
											"begin": 850,
											"end": 916,
											"name": "JUMPI",
											"source": 21
										},
										{
											"begin": 850,
											"end": 916,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 850,
											"end": 916,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 850,
											"end": 916,
											"name": "REVERT",
											"source": 21
										},
										{
											"begin": 850,
											"end": 916,
											"name": "tag",
											"source": 21,
											"value": "170"
										},
										{
											"begin": 850,
											"end": 916,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 850,
											"end": 916,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 850,
											"end": 916,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "57"
										},
										{
											"begin": 890,
											"end": 916,
											"name": "PUSH",
											"source": 21,
											"value": "189AB7A9244DF0848122154315AF71FE140F3DB0FE014031783B0946B8C9D2E3"
										},
										{
											"begin": 850,
											"end": 916,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 850,
											"end": 916,
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 3029,
											"end": 3242,
											"name": "tag",
											"source": 0,
											"value": "42"
										},
										{
											"begin": 3029,
											"end": 3242,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3114,
											"end": 3118,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 3137,
											"end": 3195,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 3137,
											"end": 3195,
											"name": "AND",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "7965DB0B"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3137,
											"end": 3195,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 3137,
											"end": 3195,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3137,
											"end": 3235,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "176"
										},
										{
											"begin": 3137,
											"end": 3235,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1FFC9A7"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1168,
											"end": 1219,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 1168,
											"end": 1219,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 1168,
											"end": 1219,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 3199,
											"end": 3235,
											"name": "tag",
											"source": 0,
											"value": "176"
										},
										{
											"begin": 3199,
											"end": 3235,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3130,
											"end": 3235,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 3029,
											"end": 3242,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3029,
											"end": 3242,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "tag",
											"source": 9,
											"value": "47"
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2549,
											"end": 2562,
											"name": "PUSH",
											"source": 9,
											"value": "60"
										},
										{
											"begin": 2581,
											"end": 2586,
											"name": "PUSH",
											"source": 9,
											"value": "36"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "179"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "180"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "tag",
											"source": 9,
											"value": "179"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "DIV",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "181"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "180"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "tag",
											"source": 9,
											"value": "181"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "182"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "183"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "PUSH",
											"source": 9,
											"value": "100"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "DIV",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "182"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "tag",
											"source": 9,
											"value": "183"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "tag",
											"source": 9,
											"value": "184"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "184"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "tag",
											"source": 9,
											"value": "182"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "tag",
											"source": 9,
											"value": "54"
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4864,
											"end": 4868,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 929,
											"end": 939,
											"name": "CALLER",
											"source": 14
										},
										{
											"begin": 4918,
											"end": 4950,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "188"
										},
										{
											"begin": 929,
											"end": 939,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 4934,
											"end": 4941,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 4943,
											"end": 4949,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 4918,
											"end": 4926,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "189"
										},
										{
											"begin": 4918,
											"end": 4950,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 4918,
											"end": 4950,
											"name": "tag",
											"source": 9,
											"value": "188"
										},
										{
											"begin": 4918,
											"end": 4950,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4967,
											"end": 4971,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 4967,
											"end": 4971,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 5540,
											"end": 5796,
											"name": "tag",
											"source": 9,
											"value": "65"
										},
										{
											"begin": 5540,
											"end": 5796,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5637,
											"end": 5641,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 929,
											"end": 939,
											"name": "CALLER",
											"source": 14
										},
										{
											"begin": 5693,
											"end": 5731,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "193"
										},
										{
											"begin": 5709,
											"end": 5713,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 929,
											"end": 939,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 5724,
											"end": 5730,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 5693,
											"end": 5708,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "194"
										},
										{
											"begin": 5693,
											"end": 5731,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 5693,
											"end": 5731,
											"name": "tag",
											"source": 9,
											"value": "193"
										},
										{
											"begin": 5693,
											"end": 5731,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5741,
											"end": 5768,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "195"
										},
										{
											"begin": 5751,
											"end": 5755,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 5757,
											"end": 5759,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 5761,
											"end": 5767,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 5741,
											"end": 5750,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "196"
										},
										{
											"begin": 5741,
											"end": 5768,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 5741,
											"end": 5768,
											"name": "tag",
											"source": 9,
											"value": "195"
										},
										{
											"begin": 5741,
											"end": 5768,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5785,
											"end": 5789,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 5785,
											"end": 5789,
											"name": "SWAP5",
											"source": 9
										},
										{
											"begin": 5540,
											"end": 5796,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5540,
											"end": 5796,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 5259,
											"end": 5404,
											"name": "tag",
											"source": 0,
											"value": "78"
										},
										{
											"begin": 5259,
											"end": 5404,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4908,
											"end": 4915,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4934,
											"end": 4946,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 4934,
											"end": 4946,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4934,
											"end": 4946,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 4934,
											"end": 4940,
											"name": "PUSH",
											"source": 0,
											"value": "FB"
										},
										{
											"begin": 4934,
											"end": 4946,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 4934,
											"end": 4946,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 4934,
											"end": 4946,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 4934,
											"end": 4946,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4934,
											"end": 4946,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 4934,
											"end": 4956,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 4934,
											"end": 4956,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4934,
											"end": 4956,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 2928,
											"end": 2944,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "200"
										},
										{
											"begin": 2939,
											"end": 2943,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2928,
											"end": 2938,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "201"
										},
										{
											"begin": 2928,
											"end": 2944,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2928,
											"end": 2944,
											"name": "tag",
											"source": 0,
											"value": "200"
										},
										{
											"begin": 2928,
											"end": 2944,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5372,
											"end": 5397,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "203"
										},
										{
											"begin": 5383,
											"end": 5387,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 5389,
											"end": 5396,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 5372,
											"end": 5382,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "204"
										},
										{
											"begin": 5372,
											"end": 5397,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 5372,
											"end": 5397,
											"name": "tag",
											"source": 0,
											"value": "203"
										},
										{
											"begin": 5372,
											"end": 5397,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5259,
											"end": 5404,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 5259,
											"end": 5404,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 5259,
											"end": 5404,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 5259,
											"end": 5404,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 6368,
											"end": 6582,
											"name": "tag",
											"source": 0,
											"value": "87"
										},
										{
											"begin": 6368,
											"end": 6582,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6463,
											"end": 6486,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 6463,
											"end": 6486,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 929,
											"end": 939,
											"name": "CALLER",
											"source": 14
										},
										{
											"begin": 6463,
											"end": 6486,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 6455,
											"end": 6538,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "208"
										},
										{
											"begin": 6455,
											"end": 6538,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 6455,
											"end": 6538,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 6455,
											"end": 6538,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6455,
											"end": 6538,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 6455,
											"end": 6538,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 5275,
											"end": 5277,
											"name": "PUSH",
											"source": 22,
											"value": "20"
										},
										{
											"begin": 6455,
											"end": 6538,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 6455,
											"end": 6538,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 6455,
											"end": 6538,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 5257,
											"end": 5278,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 5314,
											"end": 5316,
											"name": "PUSH",
											"source": 22,
											"value": "2F"
										},
										{
											"begin": 5294,
											"end": 5312,
											"name": "PUSH",
											"source": 22,
											"value": "24"
										},
										{
											"begin": 5294,
											"end": 5312,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 5294,
											"end": 5312,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 5287,
											"end": 5317,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 5353,
											"end": 5387,
											"name": "PUSH",
											"source": 22,
											"value": "416363657373436F6E74726F6C3A2063616E206F6E6C792072656E6F756E6365"
										},
										{
											"begin": 5333,
											"end": 5351,
											"name": "PUSH",
											"source": 22,
											"value": "44"
										},
										{
											"begin": 5333,
											"end": 5351,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 5333,
											"end": 5351,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 5326,
											"end": 5388,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "103937B632B9903337B91039B2B633"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "89"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5404,
											"end": 5422,
											"name": "PUSH",
											"source": 22,
											"value": "64"
										},
										{
											"begin": 5404,
											"end": 5422,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 5404,
											"end": 5422,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 5397,
											"end": 5442,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 5459,
											"end": 5478,
											"name": "PUSH",
											"source": 22,
											"value": "84"
										},
										{
											"begin": 5459,
											"end": 5478,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 6455,
											"end": 6538,
											"name": "tag",
											"source": 0,
											"value": "209"
										},
										{
											"begin": 6455,
											"end": 6538,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6455,
											"end": 6538,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 6455,
											"end": 6538,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 6455,
											"end": 6538,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 6455,
											"end": 6538,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 6455,
											"end": 6538,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 6455,
											"end": 6538,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 6455,
											"end": 6538,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 6455,
											"end": 6538,
											"name": "tag",
											"source": 0,
											"value": "208"
										},
										{
											"begin": 6455,
											"end": 6538,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6549,
											"end": 6575,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "211"
										},
										{
											"begin": 6561,
											"end": 6565,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 6567,
											"end": 6574,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 6549,
											"end": 6560,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "212"
										},
										{
											"begin": 6549,
											"end": 6575,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 6549,
											"end": 6575,
											"name": "tag",
											"source": 0,
											"value": "211"
										},
										{
											"begin": 6549,
											"end": 6575,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6368,
											"end": 6582,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 6368,
											"end": 6582,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 6368,
											"end": 6582,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 3387,
											"end": 3582,
											"name": "tag",
											"source": 7,
											"value": "92"
										},
										{
											"begin": 3387,
											"end": 3582,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1889,
											"end": 1893,
											"name": "ADDRESS",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1898,
											"end": 1904,
											"name": "PUSHIMMUTABLE",
											"source": 7,
											"value": "973"
										},
										{
											"begin": 1881,
											"end": 1904,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 1881,
											"end": 1904,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 1881,
											"end": 1904,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 1873,
											"end": 1953,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "214"
										},
										{
											"begin": 1873,
											"end": 1953,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 1873,
											"end": 1953,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 1873,
											"end": 1953,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1873,
											"end": 1953,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1873,
											"end": 1953,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1873,
											"end": 1953,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 1873,
											"end": 1953,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1873,
											"end": 1953,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "209"
										},
										{
											"begin": 1873,
											"end": 1953,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1873,
											"end": 1953,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "216"
										},
										{
											"begin": 1873,
											"end": 1953,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 1873,
											"end": 1953,
											"name": "tag",
											"source": 7,
											"value": "214"
										},
										{
											"begin": 1873,
											"end": 1953,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1995,
											"end": 2001,
											"name": "PUSHIMMUTABLE",
											"source": 7,
											"value": "973"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1971,
											"end": 2001,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 1971,
											"end": 1991,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "217"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "75B20EEF8615DE99C108B05F0DBDA081C91897128CAA336D75DFFB97C4132B4D"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 1536,
											"end": 1601,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1536,
											"end": 1601,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 1536,
											"end": 1601,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1457,
											"end": 1608,
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 1971,
											"end": 1991,
											"name": "tag",
											"source": 7,
											"value": "217"
										},
										{
											"begin": 1971,
											"end": 1991,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1971,
											"end": 2001,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 1971,
											"end": 2001,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 1963,
											"end": 2050,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "219"
										},
										{
											"begin": 1963,
											"end": 2050,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 1963,
											"end": 2050,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 1963,
											"end": 2050,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1963,
											"end": 2050,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1963,
											"end": 2050,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1963,
											"end": 2050,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 1963,
											"end": 2050,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1963,
											"end": 2050,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "209"
										},
										{
											"begin": 1963,
											"end": 2050,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1963,
											"end": 2050,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "221"
										},
										{
											"begin": 1963,
											"end": 2050,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 1963,
											"end": 2050,
											"name": "tag",
											"source": 7,
											"value": "219"
										},
										{
											"begin": 1963,
											"end": 2050,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3468,
											"end": 3504,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "223"
										},
										{
											"begin": 3486,
											"end": 3503,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3468,
											"end": 3485,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "224"
										},
										{
											"begin": 3468,
											"end": 3504,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 3468,
											"end": 3504,
											"name": "tag",
											"source": 7,
											"value": "223"
										},
										{
											"begin": 3468,
											"end": 3504,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3555,
											"end": 3567,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 3555,
											"end": 3567,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 3555,
											"end": 3567,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 3565,
											"end": 3566,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3555,
											"end": 3567,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 3555,
											"end": 3567,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3555,
											"end": 3567,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3555,
											"end": 3567,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 3555,
											"end": 3567,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3555,
											"end": 3567,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3555,
											"end": 3567,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3555,
											"end": 3567,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 3555,
											"end": 3567,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3514,
											"end": 3575,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "225"
										},
										{
											"begin": 3514,
											"end": 3575,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 3536,
											"end": 3553,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 3536,
											"end": 3553,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 3555,
											"end": 3567,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3514,
											"end": 3535,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "230"
										},
										{
											"begin": 3514,
											"end": 3575,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 3514,
											"end": 3575,
											"name": "tag",
											"source": 7,
											"value": "225"
										},
										{
											"begin": 3514,
											"end": 3575,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3387,
											"end": 3582,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 3387,
											"end": 3582,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 6191,
											"end": 6425,
											"name": "tag",
											"source": 9,
											"value": "96"
										},
										{
											"begin": 6191,
											"end": 6425,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 6279,
											"end": 6283,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 929,
											"end": 939,
											"name": "CALLER",
											"source": 14
										},
										{
											"begin": 6333,
											"end": 6397,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "188"
										},
										{
											"begin": 929,
											"end": 939,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 6349,
											"end": 6356,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 6386,
											"end": 6396,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 6358,
											"end": 6383,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "234"
										},
										{
											"begin": 929,
											"end": 939,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 6349,
											"end": 6356,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 6358,
											"end": 6367,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "164"
										},
										{
											"begin": 6358,
											"end": 6383,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 6358,
											"end": 6383,
											"name": "tag",
											"source": 9,
											"value": "234"
										},
										{
											"begin": 6358,
											"end": 6383,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 6358,
											"end": 6396,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "235"
										},
										{
											"begin": 6358,
											"end": 6396,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 6358,
											"end": 6396,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 6358,
											"end": 6396,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "236"
										},
										{
											"begin": 6358,
											"end": 6396,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 6358,
											"end": 6396,
											"name": "tag",
											"source": 9,
											"value": "235"
										},
										{
											"begin": 6358,
											"end": 6396,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 6333,
											"end": 6341,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "189"
										},
										{
											"begin": 6333,
											"end": 6397,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 1640,
											"end": 1715,
											"name": "tag",
											"source": 21,
											"value": "100"
										},
										{
											"begin": 1640,
											"end": 1715,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "9B87106A812D214D41AD9B68A21119E2948EAAF1040375C939EC808B8862455C"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 2928,
											"end": 2944,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "238"
										},
										{
											"begin": 2939,
											"end": 2943,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2928,
											"end": 2938,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "201"
										},
										{
											"begin": 2928,
											"end": 2944,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2928,
											"end": 2944,
											"name": "tag",
											"source": 0,
											"value": "238"
										},
										{
											"begin": 2928,
											"end": 2944,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1698,
											"end": 1708,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "225"
										},
										{
											"begin": 1698,
											"end": 1706,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "241"
										},
										{
											"begin": 1698,
											"end": 1708,
											"name": "JUMP",
											"source": 21,
											"value": "[in]"
										},
										{
											"begin": 848,
											"end": 937,
											"name": "tag",
											"source": 11,
											"value": "105"
										},
										{
											"begin": 848,
											"end": 937,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 903,
											"end": 930,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "225"
										},
										{
											"begin": 929,
											"end": 939,
											"name": "CALLER",
											"source": 14
										},
										{
											"begin": 923,
											"end": 929,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 903,
											"end": 908,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "245"
										},
										{
											"begin": 903,
											"end": 930,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 3901,
											"end": 4121,
											"name": "tag",
											"source": 7,
											"value": "109"
										},
										{
											"begin": 3901,
											"end": 4121,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1889,
											"end": 1893,
											"name": "ADDRESS",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1898,
											"end": 1904,
											"name": "PUSHIMMUTABLE",
											"source": 7,
											"value": "973"
										},
										{
											"begin": 1881,
											"end": 1904,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 1881,
											"end": 1904,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 1881,
											"end": 1904,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 1873,
											"end": 1953,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "247"
										},
										{
											"begin": 1873,
											"end": 1953,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 1873,
											"end": 1953,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 1873,
											"end": 1953,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1873,
											"end": 1953,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1873,
											"end": 1953,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1873,
											"end": 1953,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 1873,
											"end": 1953,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1873,
											"end": 1953,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "209"
										},
										{
											"begin": 1873,
											"end": 1953,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1873,
											"end": 1953,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "216"
										},
										{
											"begin": 1873,
											"end": 1953,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 1873,
											"end": 1953,
											"name": "tag",
											"source": 7,
											"value": "247"
										},
										{
											"begin": 1873,
											"end": 1953,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1995,
											"end": 2001,
											"name": "PUSHIMMUTABLE",
											"source": 7,
											"value": "973"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1971,
											"end": 2001,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 1971,
											"end": 1991,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "249"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "75B20EEF8615DE99C108B05F0DBDA081C91897128CAA336D75DFFB97C4132B4D"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 1536,
											"end": 1601,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1536,
											"end": 1601,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 1536,
											"end": 1601,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1457,
											"end": 1608,
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 1971,
											"end": 1991,
											"name": "tag",
											"source": 7,
											"value": "249"
										},
										{
											"begin": 1971,
											"end": 1991,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1971,
											"end": 2001,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 1971,
											"end": 2001,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 1963,
											"end": 2050,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "250"
										},
										{
											"begin": 1963,
											"end": 2050,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 1963,
											"end": 2050,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 1963,
											"end": 2050,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1963,
											"end": 2050,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1963,
											"end": 2050,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1963,
											"end": 2050,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 1963,
											"end": 2050,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1963,
											"end": 2050,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "209"
										},
										{
											"begin": 1963,
											"end": 2050,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1963,
											"end": 2050,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "221"
										},
										{
											"begin": 1963,
											"end": 2050,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 1963,
											"end": 2050,
											"name": "tag",
											"source": 7,
											"value": "250"
										},
										{
											"begin": 1963,
											"end": 2050,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4016,
											"end": 4052,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "253"
										},
										{
											"begin": 4034,
											"end": 4051,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 4016,
											"end": 4033,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "224"
										},
										{
											"begin": 4016,
											"end": 4052,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 4016,
											"end": 4052,
											"name": "tag",
											"source": 7,
											"value": "253"
										},
										{
											"begin": 4016,
											"end": 4052,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4062,
											"end": 4114,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "211"
										},
										{
											"begin": 4084,
											"end": 4101,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 4103,
											"end": 4107,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 4109,
											"end": 4113,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 4062,
											"end": 4083,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "230"
										},
										{
											"begin": 4062,
											"end": 4114,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 3006,
											"end": 3137,
											"name": "tag",
											"source": 7,
											"value": "112"
										},
										{
											"begin": 3006,
											"end": 3137,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3084,
											"end": 3091,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2324,
											"end": 2328,
											"name": "ADDRESS",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2333,
											"end": 2339,
											"name": "PUSHIMMUTABLE",
											"source": 7,
											"value": "973"
										},
										{
											"begin": 2316,
											"end": 2339,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 2316,
											"end": 2339,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 2308,
											"end": 2400,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "256"
										},
										{
											"begin": 2308,
											"end": 2400,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 2308,
											"end": 2400,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 2308,
											"end": 2400,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2308,
											"end": 2400,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2308,
											"end": 2400,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 6782,
											"end": 6784,
											"name": "PUSH",
											"source": 22,
											"value": "20"
										},
										{
											"begin": 2308,
											"end": 2400,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 2308,
											"end": 2400,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2308,
											"end": 2400,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6764,
											"end": 6785,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 6821,
											"end": 6823,
											"name": "PUSH",
											"source": 22,
											"value": "38"
										},
										{
											"begin": 6801,
											"end": 6819,
											"name": "PUSH",
											"source": 22,
											"value": "24"
										},
										{
											"begin": 6801,
											"end": 6819,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 6801,
											"end": 6819,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 6794,
											"end": 6824,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 6860,
											"end": 6894,
											"name": "PUSH",
											"source": 22,
											"value": "555550535570677261646561626C653A206D757374206E6F742062652063616C"
										},
										{
											"begin": 6840,
											"end": 6858,
											"name": "PUSH",
											"source": 22,
											"value": "44"
										},
										{
											"begin": 6840,
											"end": 6858,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 6840,
											"end": 6858,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 6833,
											"end": 6895,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 6931,
											"end": 6957,
											"name": "PUSH",
											"source": 22,
											"value": "6C6564207468726F7567682064656C656761746563616C6C0000000000000000"
										},
										{
											"begin": 6911,
											"end": 6929,
											"name": "PUSH",
											"source": 22,
											"value": "64"
										},
										{
											"begin": 6911,
											"end": 6929,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 6911,
											"end": 6929,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 6904,
											"end": 6958,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 6975,
											"end": 6994,
											"name": "PUSH",
											"source": 22,
											"value": "84"
										},
										{
											"begin": 6975,
											"end": 6994,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 2308,
											"end": 2400,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "209"
										},
										{
											"begin": 6580,
											"end": 7000,
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 2308,
											"end": 2400,
											"name": "tag",
											"source": 7,
											"value": "256"
										},
										{
											"begin": 2308,
											"end": 2400,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "75B20EEF8615DE99C108B05F0DBDA081C91897128CAA336D75DFFB97C4132B4D"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 3006,
											"end": 3137,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3006,
											"end": 3137,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 1243,
											"end": 1404,
											"name": "tag",
											"source": 11,
											"value": "126"
										},
										{
											"begin": 1243,
											"end": 1404,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1319,
											"end": 1365,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "263"
										},
										{
											"begin": 1335,
											"end": 1342,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 929,
											"end": 939,
											"name": "CALLER",
											"source": 14
										},
										{
											"begin": 1358,
											"end": 1364,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 1319,
											"end": 1334,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "194"
										},
										{
											"begin": 1319,
											"end": 1365,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 1319,
											"end": 1365,
											"name": "tag",
											"source": 11,
											"value": "263"
										},
										{
											"begin": 1319,
											"end": 1365,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1375,
											"end": 1397,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "211"
										},
										{
											"begin": 1381,
											"end": 1388,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 1390,
											"end": 1396,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 1375,
											"end": 1380,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "245"
										},
										{
											"begin": 1375,
											"end": 1397,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 1140,
											"end": 1557,
											"name": "tag",
											"source": 21,
											"value": "129"
										},
										{
											"begin": 1140,
											"end": 1557,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 3279,
											"end": 3298,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 3302,
											"end": 3315,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 3302,
											"end": 3315,
											"name": "PUSH",
											"source": 6,
											"value": "100"
										},
										{
											"begin": 3302,
											"end": 3315,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3302,
											"end": 3315,
											"name": "DIV",
											"source": 6
										},
										{
											"begin": 3302,
											"end": 3315,
											"name": "PUSH",
											"source": 6,
											"value": "FF"
										},
										{
											"begin": 3302,
											"end": 3315,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 3301,
											"end": 3315,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 3301,
											"end": 3315,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 3347,
											"end": 3381,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 3347,
											"end": 3381,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 3347,
											"end": 3381,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "267"
										},
										{
											"begin": 3347,
											"end": 3381,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3365,
											"end": 3377,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 3365,
											"end": 3377,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 3380,
											"end": 3381,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 3365,
											"end": 3377,
											"name": "PUSH",
											"source": 6,
											"value": "FF"
										},
										{
											"begin": 3365,
											"end": 3377,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3365,
											"end": 3377,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 3365,
											"end": 3377,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 3365,
											"end": 3381,
											"name": "LT",
											"source": 6
										},
										{
											"begin": 3347,
											"end": 3381,
											"name": "tag",
											"source": 6,
											"value": "267"
										},
										{
											"begin": 3347,
											"end": 3381,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3346,
											"end": 3454,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 3346,
											"end": 3454,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "271"
										},
										{
											"begin": 3346,
											"end": 3454,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3426,
											"end": 3430,
											"name": "ADDRESS",
											"source": 6
										},
										{
											"begin": 1713,
											"end": 1732,
											"name": "EXTCODESIZE",
											"source": 13
										},
										{
											"begin": 1713,
											"end": 1736,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 1713,
											"end": 1736,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 1713,
											"end": 1736,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 3387,
											"end": 3453,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "271"
										},
										{
											"begin": 3387,
											"end": 3453,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3436,
											"end": 3448,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 3436,
											"end": 3448,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 3436,
											"end": 3448,
											"name": "PUSH",
											"source": 6,
											"value": "FF"
										},
										{
											"begin": 3436,
											"end": 3448,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 3436,
											"end": 3448,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 3436,
											"end": 3453,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 3387,
											"end": 3453,
											"name": "tag",
											"source": 6,
											"value": "271"
										},
										{
											"begin": 3387,
											"end": 3453,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3325,
											"end": 3526,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "272"
										},
										{
											"begin": 3325,
											"end": 3526,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 3325,
											"end": 3526,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 3325,
											"end": 3526,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3325,
											"end": 3526,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 3325,
											"end": 3526,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 7207,
											"end": 7209,
											"name": "PUSH",
											"source": 22,
											"value": "20"
										},
										{
											"begin": 3325,
											"end": 3526,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 3325,
											"end": 3526,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 3325,
											"end": 3526,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7189,
											"end": 7210,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 7246,
											"end": 7248,
											"name": "PUSH",
											"source": 22,
											"value": "2E"
										},
										{
											"begin": 7226,
											"end": 7244,
											"name": "PUSH",
											"source": 22,
											"value": "24"
										},
										{
											"begin": 7226,
											"end": 7244,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 7226,
											"end": 7244,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 7219,
											"end": 7249,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 7285,
											"end": 7319,
											"name": "PUSH",
											"source": 22,
											"value": "496E697469616C697A61626C653A20636F6E747261637420697320616C726561"
										},
										{
											"begin": 7265,
											"end": 7283,
											"name": "PUSH",
											"source": 22,
											"value": "44"
										},
										{
											"begin": 7265,
											"end": 7283,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 7265,
											"end": 7283,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 7258,
											"end": 7320,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "191E481A5B9A5D1A585B1A5E9959"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "92"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7336,
											"end": 7354,
											"name": "PUSH",
											"source": 22,
											"value": "64"
										},
										{
											"begin": 7336,
											"end": 7354,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 7336,
											"end": 7354,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 7329,
											"end": 7373,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 7390,
											"end": 7409,
											"name": "PUSH",
											"source": 22,
											"value": "84"
										},
										{
											"begin": 7390,
											"end": 7409,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 3325,
											"end": 3526,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "209"
										},
										{
											"begin": 7005,
											"end": 7415,
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 3325,
											"end": 3526,
											"name": "tag",
											"source": 6,
											"value": "272"
										},
										{
											"begin": 3325,
											"end": 3526,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3536,
											"end": 3548,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 3536,
											"end": 3552,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 3536,
											"end": 3552,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 3536,
											"end": 3552,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 3551,
											"end": 3552,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 3536,
											"end": 3552,
											"name": "OR",
											"source": 6
										},
										{
											"begin": 3536,
											"end": 3552,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3536,
											"end": 3552,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 3562,
											"end": 3627,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 3562,
											"end": 3627,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 3562,
											"end": 3627,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "275"
										},
										{
											"begin": 3562,
											"end": 3627,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 3596,
											"end": 3609,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 3596,
											"end": 3616,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 3596,
											"end": 3616,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF00"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 3596,
											"end": 3616,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 3596,
											"end": 3616,
											"name": "PUSH",
											"source": 6,
											"value": "100"
										},
										{
											"begin": 3596,
											"end": 3616,
											"name": "OR",
											"source": 6
										},
										{
											"begin": 3596,
											"end": 3616,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3596,
											"end": 3616,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 3562,
											"end": 3627,
											"name": "tag",
											"source": 6,
											"value": "275"
										},
										{
											"begin": 3562,
											"end": 3627,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1191,
											"end": 1222,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "277"
										},
										{
											"begin": 1191,
											"end": 1222,
											"name": "PUSH",
											"source": 21,
											"value": "40"
										},
										{
											"begin": 1191,
											"end": 1222,
											"name": "MLOAD",
											"source": 21
										},
										{
											"begin": 1191,
											"end": 1222,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 1191,
											"end": 1222,
											"name": "PUSH",
											"source": 21,
											"value": "40"
										},
										{
											"begin": 1191,
											"end": 1222,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 1191,
											"end": 1222,
											"name": "PUSH",
											"source": 21,
											"value": "40"
										},
										{
											"begin": 1191,
											"end": 1222,
											"name": "MSTORE",
											"source": 21
										},
										{
											"begin": 1191,
											"end": 1222,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 1191,
											"end": 1222,
											"name": "PUSH",
											"source": 21,
											"value": "7"
										},
										{
											"begin": 1191,
											"end": 1222,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 1191,
											"end": 1222,
											"name": "MSTORE",
											"source": 21
										},
										{
											"begin": 1191,
											"end": 1222,
											"name": "PUSH",
											"source": 21,
											"value": "20"
										},
										{
											"begin": 1191,
											"end": 1222,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "50524158584953"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "C8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1191,
											"end": 1222,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 1191,
											"end": 1222,
											"name": "MSTORE",
											"source": 21
										},
										{
											"begin": 1191,
											"end": 1222,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 1191,
											"end": 1222,
											"name": "PUSH",
											"source": 21,
											"value": "40"
										},
										{
											"begin": 1191,
											"end": 1222,
											"name": "MLOAD",
											"source": 21
										},
										{
											"begin": 1191,
											"end": 1222,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 1191,
											"end": 1222,
											"name": "PUSH",
											"source": 21,
											"value": "40"
										},
										{
											"begin": 1191,
											"end": 1222,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 1191,
											"end": 1222,
											"name": "PUSH",
											"source": 21,
											"value": "40"
										},
										{
											"begin": 1191,
											"end": 1222,
											"name": "MSTORE",
											"source": 21
										},
										{
											"begin": 1191,
											"end": 1222,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 1191,
											"end": 1222,
											"name": "PUSH",
											"source": 21,
											"value": "4"
										},
										{
											"begin": 1191,
											"end": 1222,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 1191,
											"end": 1222,
											"name": "MSTORE",
											"source": 21
										},
										{
											"begin": 1191,
											"end": 1222,
											"name": "PUSH",
											"source": 21,
											"value": "20"
										},
										{
											"begin": 1191,
											"end": 1222,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A082B0B"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1191,
											"end": 1222,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 1191,
											"end": 1222,
											"name": "MSTORE",
											"source": 21
										},
										{
											"begin": 1191,
											"end": 1222,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 1191,
											"end": 1203,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "278"
										},
										{
											"begin": 1191,
											"end": 1222,
											"name": "JUMP",
											"source": 21,
											"value": "[in]"
										},
										{
											"begin": 1191,
											"end": 1222,
											"name": "tag",
											"source": 21,
											"value": "277"
										},
										{
											"begin": 1191,
											"end": 1222,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 1232,
											"end": 1254,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "279"
										},
										{
											"begin": 1232,
											"end": 1252,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "280"
										},
										{
											"begin": 1232,
											"end": 1254,
											"name": "JUMP",
											"source": 21,
											"value": "[in]"
										},
										{
											"begin": 1232,
											"end": 1254,
											"name": "tag",
											"source": 21,
											"value": "279"
										},
										{
											"begin": 1232,
											"end": 1254,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 1264,
											"end": 1281,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "281"
										},
										{
											"begin": 1264,
											"end": 1279,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "282"
										},
										{
											"begin": 1264,
											"end": 1281,
											"name": "JUMP",
											"source": 21,
											"value": "[in]"
										},
										{
											"begin": 1264,
											"end": 1281,
											"name": "tag",
											"source": 21,
											"value": "281"
										},
										{
											"begin": 1264,
											"end": 1281,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 1291,
											"end": 1313,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "283"
										},
										{
											"begin": 1291,
											"end": 1311,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "280"
										},
										{
											"begin": 1291,
											"end": 1313,
											"name": "JUMP",
											"source": 21,
											"value": "[in]"
										},
										{
											"begin": 1291,
											"end": 1313,
											"name": "tag",
											"source": 21,
											"value": "283"
										},
										{
											"begin": 1291,
											"end": 1313,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 1323,
											"end": 1347,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "285"
										},
										{
											"begin": 1323,
											"end": 1345,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "280"
										},
										{
											"begin": 1323,
											"end": 1347,
											"name": "JUMP",
											"source": 21,
											"value": "[in]"
										},
										{
											"begin": 1323,
											"end": 1347,
											"name": "tag",
											"source": 21,
											"value": "285"
										},
										{
											"begin": 1323,
											"end": 1347,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 1358,
											"end": 1400,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "287"
										},
										{
											"begin": 2495,
											"end": 2499,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1389,
											"end": 1399,
											"name": "CALLER",
											"source": 21
										},
										{
											"begin": 1358,
											"end": 1368,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "204"
										},
										{
											"begin": 1358,
											"end": 1400,
											"name": "JUMP",
											"source": 21,
											"value": "[in]"
										},
										{
											"begin": 1358,
											"end": 1400,
											"name": "tag",
											"source": 21,
											"value": "287"
										},
										{
											"begin": 1358,
											"end": 1400,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 1410,
											"end": 1445,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "288"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "9B87106A812D214D41AD9B68A21119E2948EAAF1040375C939EC808B8862455C"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 1434,
											"end": 1444,
											"name": "CALLER",
											"source": 21
										},
										{
											"begin": 1410,
											"end": 1420,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "204"
										},
										{
											"begin": 1410,
											"end": 1445,
											"name": "JUMP",
											"source": 21,
											"value": "[in]"
										},
										{
											"begin": 1410,
											"end": 1445,
											"name": "tag",
											"source": 21,
											"value": "288"
										},
										{
											"begin": 1410,
											"end": 1445,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 1455,
											"end": 1503,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "289"
										},
										{
											"begin": 1461,
											"end": 1471,
											"name": "CALLER",
											"source": 21
										},
										{
											"begin": 1486,
											"end": 1502,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "291"
										},
										{
											"begin": 3523,
											"end": 3525,
											"name": "PUSH",
											"source": 9,
											"value": "12"
										},
										{
											"begin": 1486,
											"end": 1488,
											"name": "PUSH",
											"source": 21,
											"value": "A"
										},
										{
											"begin": 1486,
											"end": 1502,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "292"
										},
										{
											"begin": 1486,
											"end": 1502,
											"name": "JUMP",
											"source": 21,
											"value": "[in]"
										},
										{
											"begin": 1486,
											"end": 1502,
											"name": "tag",
											"source": 21,
											"value": "291"
										},
										{
											"begin": 1486,
											"end": 1502,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 1473,
											"end": 1502,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "293"
										},
										{
											"begin": 1473,
											"end": 1502,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 1473,
											"end": 1483,
											"name": "PUSH",
											"source": 21,
											"value": "3B9ACA00"
										},
										{
											"begin": 1473,
											"end": 1502,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "294"
										},
										{
											"begin": 1473,
											"end": 1502,
											"name": "JUMP",
											"source": 21,
											"value": "[in]"
										},
										{
											"begin": 1473,
											"end": 1502,
											"name": "tag",
											"source": 21,
											"value": "293"
										},
										{
											"begin": 1473,
											"end": 1502,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 1455,
											"end": 1460,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "295"
										},
										{
											"begin": 1455,
											"end": 1503,
											"name": "JUMP",
											"source": 21,
											"value": "[in]"
										},
										{
											"begin": 1455,
											"end": 1503,
											"name": "tag",
											"source": 21,
											"value": "289"
										},
										{
											"begin": 1455,
											"end": 1503,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 1513,
											"end": 1550,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "296"
										},
										{
											"begin": 890,
											"end": 916,
											"name": "PUSH",
											"source": 21,
											"value": "189AB7A9244DF0848122154315AF71FE140F3DB0FE014031783B0946B8C9D2E3"
										},
										{
											"begin": 1539,
											"end": 1549,
											"name": "CALLER",
											"source": 21
										},
										{
											"begin": 1513,
											"end": 1523,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "204"
										},
										{
											"begin": 1513,
											"end": 1550,
											"name": "JUMP",
											"source": 21,
											"value": "[in]"
										},
										{
											"begin": 1513,
											"end": 1550,
											"name": "tag",
											"source": 21,
											"value": "296"
										},
										{
											"begin": 1513,
											"end": 1550,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 3651,
											"end": 3665,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 3647,
											"end": 3746,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 3647,
											"end": 3746,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "225"
										},
										{
											"begin": 3647,
											"end": 3746,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 3697,
											"end": 3702,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 3681,
											"end": 3702,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 3681,
											"end": 3702,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF00"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 3681,
											"end": 3702,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 3681,
											"end": 3702,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3681,
											"end": 3702,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 3721,
											"end": 3735,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 3721,
											"end": 3735,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": 2868,
											"end": 2904,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 2868,
											"end": 2904,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 3721,
											"end": 3735,
											"name": "PUSH",
											"source": 6,
											"value": "7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498"
										},
										{
											"begin": 3721,
											"end": 3735,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2856,
											"end": 2858,
											"name": "PUSH",
											"source": 22,
											"value": "20"
										},
										{
											"begin": 2841,
											"end": 2859,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 3721,
											"end": 3735,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 3721,
											"end": 3735,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 3721,
											"end": 3735,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 3721,
											"end": 3735,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 3721,
											"end": 3735,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 3721,
											"end": 3735,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3721,
											"end": 3735,
											"name": "LOG1",
											"source": 6
										},
										{
											"begin": 3269,
											"end": 3752,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1140,
											"end": 1557,
											"name": "JUMP",
											"source": 21,
											"value": "[out]"
										},
										{
											"begin": 1563,
											"end": 1634,
											"name": "tag",
											"source": 21,
											"value": "132"
										},
										{
											"begin": 1563,
											"end": 1634,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "9B87106A812D214D41AD9B68A21119E2948EAAF1040375C939EC808B8862455C"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 2928,
											"end": 2944,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "301"
										},
										{
											"begin": 2939,
											"end": 2943,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2928,
											"end": 2938,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "201"
										},
										{
											"begin": 2928,
											"end": 2944,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2928,
											"end": 2944,
											"name": "tag",
											"source": 0,
											"value": "301"
										},
										{
											"begin": 2928,
											"end": 2944,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1619,
											"end": 1627,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "225"
										},
										{
											"begin": 1619,
											"end": 1625,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "304"
										},
										{
											"begin": 1619,
											"end": 1627,
											"name": "JUMP",
											"source": 21,
											"value": "[in]"
										},
										{
											"begin": 3329,
											"end": 3474,
											"name": "tag",
											"source": 0,
											"value": "136"
										},
										{
											"begin": 3329,
											"end": 3474,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3415,
											"end": 3419,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 3438,
											"end": 3450,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 3438,
											"end": 3450,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 3438,
											"end": 3450,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3438,
											"end": 3444,
											"name": "PUSH",
											"source": 0,
											"value": "FB"
										},
										{
											"begin": 3438,
											"end": 3450,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 3438,
											"end": 3450,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3438,
											"end": 3450,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3438,
											"end": 3450,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3438,
											"end": 3450,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 3438,
											"end": 3450,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3438,
											"end": 3450,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 3438,
											"end": 3450,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3438,
											"end": 3467,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 3438,
											"end": 3467,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3438,
											"end": 3467,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 3438,
											"end": 3467,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 3438,
											"end": 3467,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 3438,
											"end": 3467,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3438,
											"end": 3467,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 3438,
											"end": 3467,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3438,
											"end": 3467,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3438,
											"end": 3467,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3438,
											"end": 3467,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 3438,
											"end": 3467,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 3438,
											"end": 3467,
											"name": "PUSH",
											"source": 0,
											"value": "FF"
										},
										{
											"begin": 3438,
											"end": 3467,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 3438,
											"end": 3467,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3329,
											"end": 3474,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 2706,
											"end": 2808,
											"name": "tag",
											"source": 9,
											"value": "140"
										},
										{
											"begin": 2706,
											"end": 2808,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2762,
											"end": 2775,
											"name": "PUSH",
											"source": 9,
											"value": "60"
										},
										{
											"begin": 2794,
											"end": 2801,
											"name": "PUSH",
											"source": 9,
											"value": "37"
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "179"
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "180"
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 6912,
											"end": 7339,
											"name": "tag",
											"source": 9,
											"value": "149"
										},
										{
											"begin": 6912,
											"end": 7339,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 7005,
											"end": 7009,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 929,
											"end": 939,
											"name": "CALLER",
											"source": 14
										},
										{
											"begin": 7005,
											"end": 7009,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 7086,
											"end": 7111,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "314"
										},
										{
											"begin": 929,
											"end": 939,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 7103,
											"end": 7110,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 7086,
											"end": 7095,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "164"
										},
										{
											"begin": 7086,
											"end": 7111,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 7086,
											"end": 7111,
											"name": "tag",
											"source": 9,
											"value": "314"
										},
										{
											"begin": 7086,
											"end": 7111,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 7059,
											"end": 7111,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 7059,
											"end": 7111,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 7149,
											"end": 7164,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 7129,
											"end": 7145,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 7129,
											"end": 7164,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 7129,
											"end": 7164,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 7121,
											"end": 7206,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "315"
										},
										{
											"begin": 7121,
											"end": 7206,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 7121,
											"end": 7206,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 7121,
											"end": 7206,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7121,
											"end": 7206,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 7121,
											"end": 7206,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 9377,
											"end": 9379,
											"name": "PUSH",
											"source": 22,
											"value": "20"
										},
										{
											"begin": 7121,
											"end": 7206,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 7121,
											"end": 7206,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 7121,
											"end": 7206,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 9359,
											"end": 9380,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 9416,
											"end": 9418,
											"name": "PUSH",
											"source": 22,
											"value": "25"
										},
										{
											"begin": 9396,
											"end": 9414,
											"name": "PUSH",
											"source": 22,
											"value": "24"
										},
										{
											"begin": 9396,
											"end": 9414,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 9396,
											"end": 9414,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 9389,
											"end": 9419,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 9455,
											"end": 9489,
											"name": "PUSH",
											"source": 22,
											"value": "45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77"
										},
										{
											"begin": 9435,
											"end": 9453,
											"name": "PUSH",
											"source": 22,
											"value": "44"
										},
										{
											"begin": 9435,
											"end": 9453,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 9435,
											"end": 9453,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 9428,
											"end": 9490,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "207A65726F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 9506,
											"end": 9524,
											"name": "PUSH",
											"source": 22,
											"value": "64"
										},
										{
											"begin": 9506,
											"end": 9524,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 9506,
											"end": 9524,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 9499,
											"end": 9534,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 9551,
											"end": 9570,
											"name": "PUSH",
											"source": 22,
											"value": "84"
										},
										{
											"begin": 9551,
											"end": 9570,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 7121,
											"end": 7206,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "209"
										},
										{
											"begin": 9175,
											"end": 9576,
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 7121,
											"end": 7206,
											"name": "tag",
											"source": 9,
											"value": "315"
										},
										{
											"begin": 7121,
											"end": 7206,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 7240,
											"end": 7300,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "195"
										},
										{
											"begin": 7249,
											"end": 7254,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 7256,
											"end": 7263,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 7284,
											"end": 7299,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 7265,
											"end": 7281,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 7265,
											"end": 7299,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 7240,
											"end": 7248,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "189"
										},
										{
											"begin": 7240,
											"end": 7300,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 4077,
											"end": 4266,
											"name": "tag",
											"source": 9,
											"value": "154"
										},
										{
											"begin": 4077,
											"end": 4266,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4156,
											"end": 4160,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 929,
											"end": 939,
											"name": "CALLER",
											"source": 14
										},
										{
											"begin": 4210,
											"end": 4238,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "188"
										},
										{
											"begin": 929,
											"end": 939,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 4227,
											"end": 4229,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 4231,
											"end": 4237,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 4210,
											"end": 4219,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "196"
										},
										{
											"begin": 4210,
											"end": 4238,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 5684,
											"end": 5831,
											"name": "tag",
											"source": 0,
											"value": "159"
										},
										{
											"begin": 5684,
											"end": 5831,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4908,
											"end": 4915,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4934,
											"end": 4946,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 4934,
											"end": 4946,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4934,
											"end": 4946,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 4934,
											"end": 4940,
											"name": "PUSH",
											"source": 0,
											"value": "FB"
										},
										{
											"begin": 4934,
											"end": 4946,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 4934,
											"end": 4946,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 4934,
											"end": 4946,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 4934,
											"end": 4946,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4934,
											"end": 4946,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 4934,
											"end": 4956,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 4934,
											"end": 4956,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4934,
											"end": 4956,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 2928,
											"end": 2944,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "324"
										},
										{
											"begin": 2939,
											"end": 2943,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2928,
											"end": 2938,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "201"
										},
										{
											"begin": 2928,
											"end": 2944,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2928,
											"end": 2944,
											"name": "tag",
											"source": 0,
											"value": "324"
										},
										{
											"begin": 2928,
											"end": 2944,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5798,
											"end": 5824,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "203"
										},
										{
											"begin": 5810,
											"end": 5814,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 5816,
											"end": 5823,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 5798,
											"end": 5809,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "212"
										},
										{
											"begin": 5798,
											"end": 5824,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 4324,
											"end": 4473,
											"name": "tag",
											"source": 9,
											"value": "164"
										},
										{
											"begin": 4324,
											"end": 4473,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4439,
											"end": 4457,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 4439,
											"end": 4457,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 4439,
											"end": 4457,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 4413,
											"end": 4420,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 4439,
											"end": 4457,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4439,
											"end": 4457,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 4439,
											"end": 4457,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 4439,
											"end": 4450,
											"name": "PUSH",
											"source": 9,
											"value": "34"
										},
										{
											"begin": 4439,
											"end": 4457,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 4439,
											"end": 4457,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4439,
											"end": 4457,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 4439,
											"end": 4457,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 4439,
											"end": 4457,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 4439,
											"end": 4457,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 4439,
											"end": 4457,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 4439,
											"end": 4457,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 4439,
											"end": 4466,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": 4439,
											"end": 4466,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4439,
											"end": 4466,
											"name": "SWAP5",
											"source": 9
										},
										{
											"begin": 4439,
											"end": 4466,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 4439,
											"end": 4466,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 4439,
											"end": 4466,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 4439,
											"end": 4466,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 4439,
											"end": 4466,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4439,
											"end": 4466,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 4439,
											"end": 4466,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 4439,
											"end": 4466,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 4439,
											"end": 4466,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 4439,
											"end": 4466,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4324,
											"end": 4473,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 10794,
											"end": 11134,
											"name": "tag",
											"source": 9,
											"value": "189"
										},
										{
											"begin": 10794,
											"end": 11134,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10895,
											"end": 10914,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 10895,
											"end": 10914,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 10887,
											"end": 10955,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "331"
										},
										{
											"begin": 10887,
											"end": 10955,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 10887,
											"end": 10955,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 10887,
											"end": 10955,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10887,
											"end": 10955,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 10887,
											"end": 10955,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 9783,
											"end": 9785,
											"name": "PUSH",
											"source": 22,
											"value": "20"
										},
										{
											"begin": 10887,
											"end": 10955,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 10887,
											"end": 10955,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 10887,
											"end": 10955,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 9765,
											"end": 9786,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 9822,
											"end": 9824,
											"name": "PUSH",
											"source": 22,
											"value": "24"
										},
										{
											"begin": 9802,
											"end": 9820,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 9802,
											"end": 9820,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 9802,
											"end": 9820,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 9795,
											"end": 9825,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 9861,
											"end": 9895,
											"name": "PUSH",
											"source": 22,
											"value": "45524332303A20617070726F76652066726F6D20746865207A65726F20616464"
										},
										{
											"begin": 9841,
											"end": 9859,
											"name": "PUSH",
											"source": 22,
											"value": "44"
										},
										{
											"begin": 9841,
											"end": 9859,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 9841,
											"end": 9859,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 9834,
											"end": 9896,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "72657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 9912,
											"end": 9930,
											"name": "PUSH",
											"source": 22,
											"value": "64"
										},
										{
											"begin": 9912,
											"end": 9930,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 9912,
											"end": 9930,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 9905,
											"end": 9939,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 9956,
											"end": 9975,
											"name": "PUSH",
											"source": 22,
											"value": "84"
										},
										{
											"begin": 9956,
											"end": 9975,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 10887,
											"end": 10955,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "209"
										},
										{
											"begin": 9581,
											"end": 9981,
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 10887,
											"end": 10955,
											"name": "tag",
											"source": 9,
											"value": "331"
										},
										{
											"begin": 10887,
											"end": 10955,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10973,
											"end": 10994,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 10973,
											"end": 10994,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 10965,
											"end": 11033,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "334"
										},
										{
											"begin": 10965,
											"end": 11033,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 10965,
											"end": 11033,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 10965,
											"end": 11033,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10965,
											"end": 11033,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 10965,
											"end": 11033,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 10188,
											"end": 10190,
											"name": "PUSH",
											"source": 22,
											"value": "20"
										},
										{
											"begin": 10965,
											"end": 11033,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 10965,
											"end": 11033,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 10965,
											"end": 11033,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 10170,
											"end": 10191,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 10227,
											"end": 10229,
											"name": "PUSH",
											"source": 22,
											"value": "22"
										},
										{
											"begin": 10207,
											"end": 10225,
											"name": "PUSH",
											"source": 22,
											"value": "24"
										},
										{
											"begin": 10207,
											"end": 10225,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 10207,
											"end": 10225,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 10200,
											"end": 10230,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 10266,
											"end": 10300,
											"name": "PUSH",
											"source": 22,
											"value": "45524332303A20617070726F766520746F20746865207A65726F206164647265"
										},
										{
											"begin": 10246,
											"end": 10264,
											"name": "PUSH",
											"source": 22,
											"value": "44"
										},
										{
											"begin": 10246,
											"end": 10264,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 10246,
											"end": 10264,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 10239,
											"end": 10301,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "7373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10317,
											"end": 10335,
											"name": "PUSH",
											"source": 22,
											"value": "64"
										},
										{
											"begin": 10317,
											"end": 10335,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 10317,
											"end": 10335,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 10310,
											"end": 10342,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 10359,
											"end": 10378,
											"name": "PUSH",
											"source": 22,
											"value": "84"
										},
										{
											"begin": 10359,
											"end": 10378,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 10965,
											"end": 11033,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "209"
										},
										{
											"begin": 9986,
											"end": 10384,
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 10965,
											"end": 11033,
											"name": "tag",
											"source": 9,
											"value": "334"
										},
										{
											"begin": 10965,
											"end": 11033,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 11044,
											"end": 11062,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 11044,
											"end": 11062,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 11044,
											"end": 11062,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 11044,
											"end": 11062,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 11044,
											"end": 11062,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 11044,
											"end": 11062,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 11044,
											"end": 11062,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 11044,
											"end": 11055,
											"name": "PUSH",
											"source": 9,
											"value": "34"
										},
										{
											"begin": 11044,
											"end": 11062,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 11044,
											"end": 11062,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 11044,
											"end": 11062,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 11044,
											"end": 11062,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 11044,
											"end": 11062,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 11044,
											"end": 11062,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 11044,
											"end": 11062,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 11044,
											"end": 11062,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 11044,
											"end": 11071,
											"name": "SWAP5",
											"source": 9
										},
										{
											"begin": 11044,
											"end": 11071,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 11044,
											"end": 11071,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 11044,
											"end": 11071,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 11044,
											"end": 11071,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 11044,
											"end": 11071,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 11044,
											"end": 11071,
											"name": "SWAP5",
											"source": 9
										},
										{
											"begin": 11044,
											"end": 11071,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 11044,
											"end": 11071,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 11044,
											"end": 11071,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 11044,
											"end": 11071,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 11044,
											"end": 11071,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 11044,
											"end": 11071,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 11044,
											"end": 11080,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 11044,
											"end": 11080,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 11044,
											"end": 11080,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 11095,
											"end": 11127,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 11095,
											"end": 11127,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 1731,
											"end": 1756,
											"name": "DUP5",
											"source": 22
										},
										{
											"begin": 1731,
											"end": 1756,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 1731,
											"end": 1756,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 11095,
											"end": 11127,
											"name": "PUSH",
											"source": 9,
											"value": "8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925"
										},
										{
											"begin": 11095,
											"end": 11127,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 1704,
											"end": 1722,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 11095,
											"end": 11127,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 11095,
											"end": 11127,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 11095,
											"end": 11127,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 11095,
											"end": 11127,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 11095,
											"end": 11127,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 11095,
											"end": 11127,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 11095,
											"end": 11127,
											"name": "LOG3",
											"source": 9
										},
										{
											"begin": 10794,
											"end": 11134,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 10794,
											"end": 11134,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 10794,
											"end": 11134,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 10794,
											"end": 11134,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 11415,
											"end": 11826,
											"name": "tag",
											"source": 9,
											"value": "194"
										},
										{
											"begin": 11415,
											"end": 11826,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 11515,
											"end": 11539,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 11542,
											"end": 11567,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "339"
										},
										{
											"begin": 11552,
											"end": 11557,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 11559,
											"end": 11566,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 11542,
											"end": 11551,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "164"
										},
										{
											"begin": 11542,
											"end": 11567,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 11542,
											"end": 11567,
											"name": "tag",
											"source": 9,
											"value": "339"
										},
										{
											"begin": 11542,
											"end": 11567,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 11515,
											"end": 11567,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 11515,
											"end": 11567,
											"name": "POP",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 11581,
											"end": 11597,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 11581,
											"end": 11618,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 11577,
											"end": 11820,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "344"
										},
										{
											"begin": 11577,
											"end": 11820,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 11662,
											"end": 11668,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 11642,
											"end": 11658,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 11642,
											"end": 11668,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 11642,
											"end": 11668,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 11634,
											"end": 11702,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "341"
										},
										{
											"begin": 11634,
											"end": 11702,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 11634,
											"end": 11702,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 11634,
											"end": 11702,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 11634,
											"end": 11702,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 11634,
											"end": 11702,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 10591,
											"end": 10593,
											"name": "PUSH",
											"source": 22,
											"value": "20"
										},
										{
											"begin": 11634,
											"end": 11702,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 11634,
											"end": 11702,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 11634,
											"end": 11702,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 10573,
											"end": 10594,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 10630,
											"end": 10632,
											"name": "PUSH",
											"source": 22,
											"value": "1D"
										},
										{
											"begin": 10610,
											"end": 10628,
											"name": "PUSH",
											"source": 22,
											"value": "24"
										},
										{
											"begin": 10610,
											"end": 10628,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 10610,
											"end": 10628,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 10603,
											"end": 10633,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 10669,
											"end": 10700,
											"name": "PUSH",
											"source": 22,
											"value": "45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000"
										},
										{
											"begin": 10649,
											"end": 10667,
											"name": "PUSH",
											"source": 22,
											"value": "44"
										},
										{
											"begin": 10649,
											"end": 10667,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 10649,
											"end": 10667,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 10642,
											"end": 10701,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 10718,
											"end": 10736,
											"name": "PUSH",
											"source": 22,
											"value": "64"
										},
										{
											"begin": 10718,
											"end": 10736,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 11634,
											"end": 11702,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "209"
										},
										{
											"begin": 10389,
											"end": 10742,
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 11634,
											"end": 11702,
											"name": "tag",
											"source": 9,
											"value": "341"
										},
										{
											"begin": 11634,
											"end": 11702,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 11744,
											"end": 11795,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "344"
										},
										{
											"begin": 11753,
											"end": 11758,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 11760,
											"end": 11767,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 11788,
											"end": 11794,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 11769,
											"end": 11785,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 11769,
											"end": 11794,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 11744,
											"end": 11752,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "189"
										},
										{
											"begin": 11744,
											"end": 11795,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 11744,
											"end": 11795,
											"name": "tag",
											"source": 9,
											"value": "344"
										},
										{
											"begin": 11744,
											"end": 11795,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 11505,
											"end": 11826,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 11415,
											"end": 11826,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 11415,
											"end": 11826,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 11415,
											"end": 11826,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 11415,
											"end": 11826,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 7793,
											"end": 8581,
											"name": "tag",
											"source": 9,
											"value": "196"
										},
										{
											"begin": 7793,
											"end": 8581,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7889,
											"end": 7907,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 7889,
											"end": 7907,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 7881,
											"end": 7949,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "346"
										},
										{
											"begin": 7881,
											"end": 7949,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 7881,
											"end": 7949,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 7881,
											"end": 7949,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7881,
											"end": 7949,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 7881,
											"end": 7949,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 10949,
											"end": 10951,
											"name": "PUSH",
											"source": 22,
											"value": "20"
										},
										{
											"begin": 7881,
											"end": 7949,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 7881,
											"end": 7949,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 7881,
											"end": 7949,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 10931,
											"end": 10952,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 10988,
											"end": 10990,
											"name": "PUSH",
											"source": 22,
											"value": "25"
										},
										{
											"begin": 10968,
											"end": 10986,
											"name": "PUSH",
											"source": 22,
											"value": "24"
										},
										{
											"begin": 10968,
											"end": 10986,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 10968,
											"end": 10986,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 10961,
											"end": 10991,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 11027,
											"end": 11061,
											"name": "PUSH",
											"source": 22,
											"value": "45524332303A207472616E736665722066726F6D20746865207A65726F206164"
										},
										{
											"begin": 11007,
											"end": 11025,
											"name": "PUSH",
											"source": 22,
											"value": "44"
										},
										{
											"begin": 11007,
											"end": 11025,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 11007,
											"end": 11025,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 11000,
											"end": 11062,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "6472657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 11078,
											"end": 11096,
											"name": "PUSH",
											"source": 22,
											"value": "64"
										},
										{
											"begin": 11078,
											"end": 11096,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 11078,
											"end": 11096,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 11071,
											"end": 11106,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 11123,
											"end": 11142,
											"name": "PUSH",
											"source": 22,
											"value": "84"
										},
										{
											"begin": 11123,
											"end": 11142,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 7881,
											"end": 7949,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "209"
										},
										{
											"begin": 10747,
											"end": 11148,
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 7881,
											"end": 7949,
											"name": "tag",
											"source": 9,
											"value": "346"
										},
										{
											"begin": 7881,
											"end": 7949,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7967,
											"end": 7983,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 7967,
											"end": 7983,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 7959,
											"end": 8023,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "349"
										},
										{
											"begin": 7959,
											"end": 8023,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 7959,
											"end": 8023,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 7959,
											"end": 8023,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7959,
											"end": 8023,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 7959,
											"end": 8023,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 11355,
											"end": 11357,
											"name": "PUSH",
											"source": 22,
											"value": "20"
										},
										{
											"begin": 7959,
											"end": 8023,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 7959,
											"end": 8023,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 7959,
											"end": 8023,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 11337,
											"end": 11358,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 11394,
											"end": 11396,
											"name": "PUSH",
											"source": 22,
											"value": "23"
										},
										{
											"begin": 11374,
											"end": 11392,
											"name": "PUSH",
											"source": 22,
											"value": "24"
										},
										{
											"begin": 11374,
											"end": 11392,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 11374,
											"end": 11392,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 11367,
											"end": 11397,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 11433,
											"end": 11467,
											"name": "PUSH",
											"source": 22,
											"value": "45524332303A207472616E7366657220746F20746865207A65726F2061646472"
										},
										{
											"begin": 11413,
											"end": 11431,
											"name": "PUSH",
											"source": 22,
											"value": "44"
										},
										{
											"begin": 11413,
											"end": 11431,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 11413,
											"end": 11431,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 11406,
											"end": 11468,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 11484,
											"end": 11502,
											"name": "PUSH",
											"source": 22,
											"value": "64"
										},
										{
											"begin": 11484,
											"end": 11502,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 11484,
											"end": 11502,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 11477,
											"end": 11510,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 11527,
											"end": 11546,
											"name": "PUSH",
											"source": 22,
											"value": "84"
										},
										{
											"begin": 11527,
											"end": 11546,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 7959,
											"end": 8023,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "209"
										},
										{
											"begin": 11153,
											"end": 11552,
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 7959,
											"end": 8023,
											"name": "tag",
											"source": 9,
											"value": "349"
										},
										{
											"begin": 7959,
											"end": 8023,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 8034,
											"end": 8072,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "352"
										},
										{
											"begin": 8055,
											"end": 8059,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 8061,
											"end": 8063,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 8065,
											"end": 8071,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 8034,
											"end": 8054,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "353"
										},
										{
											"begin": 8034,
											"end": 8072,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 8034,
											"end": 8072,
											"name": "tag",
											"source": 9,
											"value": "352"
										},
										{
											"begin": 8034,
											"end": 8072,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8105,
											"end": 8120,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 8105,
											"end": 8120,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 8083,
											"end": 8102,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 8105,
											"end": 8120,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 8105,
											"end": 8120,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 8105,
											"end": 8120,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 8105,
											"end": 8114,
											"name": "PUSH",
											"source": 9,
											"value": "33"
										},
										{
											"begin": 8105,
											"end": 8120,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 8105,
											"end": 8120,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 8105,
											"end": 8120,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 8105,
											"end": 8120,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 8105,
											"end": 8120,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 8105,
											"end": 8120,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 8138,
											"end": 8159,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 8138,
											"end": 8159,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 8138,
											"end": 8159,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 8138,
											"end": 8159,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 8130,
											"end": 8202,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "354"
										},
										{
											"begin": 8130,
											"end": 8202,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 8130,
											"end": 8202,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 8130,
											"end": 8202,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8130,
											"end": 8202,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 8130,
											"end": 8202,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 11759,
											"end": 11761,
											"name": "PUSH",
											"source": 22,
											"value": "20"
										},
										{
											"begin": 8130,
											"end": 8202,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 8130,
											"end": 8202,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 8130,
											"end": 8202,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 11741,
											"end": 11762,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 11798,
											"end": 11800,
											"name": "PUSH",
											"source": 22,
											"value": "26"
										},
										{
											"begin": 11778,
											"end": 11796,
											"name": "PUSH",
											"source": 22,
											"value": "24"
										},
										{
											"begin": 11778,
											"end": 11796,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 11778,
											"end": 11796,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 11771,
											"end": 11801,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 11837,
											"end": 11871,
											"name": "PUSH",
											"source": 22,
											"value": "45524332303A207472616E7366657220616D6F756E7420657863656564732062"
										},
										{
											"begin": 11817,
											"end": 11835,
											"name": "PUSH",
											"source": 22,
											"value": "44"
										},
										{
											"begin": 11817,
											"end": 11835,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 11817,
											"end": 11835,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 11810,
											"end": 11872,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "616C616E6365"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 11888,
											"end": 11906,
											"name": "PUSH",
											"source": 22,
											"value": "64"
										},
										{
											"begin": 11888,
											"end": 11906,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 11888,
											"end": 11906,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 11881,
											"end": 11917,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 11934,
											"end": 11953,
											"name": "PUSH",
											"source": 22,
											"value": "84"
										},
										{
											"begin": 11934,
											"end": 11953,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 8130,
											"end": 8202,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "209"
										},
										{
											"begin": 11557,
											"end": 11959,
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 8130,
											"end": 8202,
											"name": "tag",
											"source": 9,
											"value": "354"
										},
										{
											"begin": 8130,
											"end": 8202,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8236,
											"end": 8251,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 8236,
											"end": 8251,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 8236,
											"end": 8251,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 8236,
											"end": 8251,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 8236,
											"end": 8251,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 8236,
											"end": 8251,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 8236,
											"end": 8251,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 8236,
											"end": 8245,
											"name": "PUSH",
											"source": 9,
											"value": "33"
										},
										{
											"begin": 8236,
											"end": 8251,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 8236,
											"end": 8251,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 8236,
											"end": 8251,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 8236,
											"end": 8251,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 8236,
											"end": 8251,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 8236,
											"end": 8251,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 8254,
											"end": 8274,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 8254,
											"end": 8274,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 8254,
											"end": 8274,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 8236,
											"end": 8274,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 8236,
											"end": 8274,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 8451,
											"end": 8464,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 8451,
											"end": 8464,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 8451,
											"end": 8464,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 8451,
											"end": 8464,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 8451,
											"end": 8464,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 8451,
											"end": 8464,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 8451,
											"end": 8464,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 8451,
											"end": 8464,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 8451,
											"end": 8464,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 8451,
											"end": 8464,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 8451,
											"end": 8474,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 8451,
											"end": 8474,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 8451,
											"end": 8474,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 8451,
											"end": 8474,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 8451,
											"end": 8474,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 8451,
											"end": 8474,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 8500,
											"end": 8526,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 8500,
											"end": 8526,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 8500,
											"end": 8526,
											"name": "PUSH",
											"source": 9,
											"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
										},
										{
											"begin": 8500,
											"end": 8526,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 8500,
											"end": 8526,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "357"
										},
										{
											"begin": 8500,
											"end": 8526,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 8268,
											"end": 8274,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 1731,
											"end": 1756,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 1731,
											"end": 1756,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 1719,
											"end": 1721,
											"name": "PUSH",
											"source": 22,
											"value": "20"
										},
										{
											"begin": 1704,
											"end": 1722,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 1704,
											"end": 1722,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 1585,
											"end": 1762,
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 8500,
											"end": 8526,
											"name": "tag",
											"source": 9,
											"value": "357"
										},
										{
											"begin": 8500,
											"end": 8526,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 8500,
											"end": 8526,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 8500,
											"end": 8526,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 8500,
											"end": 8526,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 8500,
											"end": 8526,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 8500,
											"end": 8526,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 8500,
											"end": 8526,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 8500,
											"end": 8526,
											"name": "LOG3",
											"source": 9
										},
										{
											"begin": 8537,
											"end": 8574,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "344"
										},
										{
											"begin": 5259,
											"end": 5404,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 3768,
											"end": 3871,
											"name": "tag",
											"source": 0,
											"value": "201"
										},
										{
											"begin": 3768,
											"end": 3871,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3834,
											"end": 3864,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "225"
										},
										{
											"begin": 3845,
											"end": 3849,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 929,
											"end": 939,
											"name": "CALLER",
											"source": 14
										},
										{
											"begin": 3834,
											"end": 3844,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "363"
										},
										{
											"begin": 3834,
											"end": 3864,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 7917,
											"end": 8150,
											"name": "tag",
											"source": 0,
											"value": "204"
										},
										{
											"begin": 7917,
											"end": 8150,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 8000,
											"end": 8022,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "365"
										},
										{
											"begin": 8008,
											"end": 8012,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 8014,
											"end": 8021,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 8000,
											"end": 8007,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "136"
										},
										{
											"begin": 8000,
											"end": 8022,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 8000,
											"end": 8022,
											"name": "tag",
											"source": 0,
											"value": "365"
										},
										{
											"begin": 8000,
											"end": 8022,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7995,
											"end": 8144,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "211"
										},
										{
											"begin": 7995,
											"end": 8144,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 8038,
											"end": 8050,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 8038,
											"end": 8050,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 8038,
											"end": 8050,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 8038,
											"end": 8050,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 8038,
											"end": 8044,
											"name": "PUSH",
											"source": 0,
											"value": "FB"
										},
										{
											"begin": 8038,
											"end": 8050,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 8038,
											"end": 8050,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8038,
											"end": 8050,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 8038,
											"end": 8050,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 8038,
											"end": 8050,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 8038,
											"end": 8050,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 8038,
											"end": 8050,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 8038,
											"end": 8050,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8038,
											"end": 8067,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 8038,
											"end": 8067,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 8038,
											"end": 8067,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 8038,
											"end": 8067,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 8038,
											"end": 8067,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8038,
											"end": 8067,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 8038,
											"end": 8067,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 8038,
											"end": 8067,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8038,
											"end": 8067,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 8038,
											"end": 8074,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 8038,
											"end": 8074,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 8038,
											"end": 8074,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 8070,
											"end": 8074,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 8038,
											"end": 8074,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 8038,
											"end": 8074,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8038,
											"end": 8074,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 8120,
											"end": 8132,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "367"
										},
										{
											"begin": 929,
											"end": 939,
											"name": "CALLER",
											"source": 14
										},
										{
											"begin": 929,
											"end": 939,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 850,
											"end": 946,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 8120,
											"end": 8132,
											"name": "tag",
											"source": 0,
											"value": "367"
										},
										{
											"begin": 8120,
											"end": 8132,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8093,
											"end": 8133,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 8111,
											"end": 8118,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8093,
											"end": 8133,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 8105,
											"end": 8109,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 8093,
											"end": 8133,
											"name": "PUSH",
											"source": 0,
											"value": "2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D"
										},
										{
											"begin": 8093,
											"end": 8133,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 8093,
											"end": 8133,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 8093,
											"end": 8133,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 8093,
											"end": 8133,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 8093,
											"end": 8133,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 8093,
											"end": 8133,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 8093,
											"end": 8133,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 8093,
											"end": 8133,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8093,
											"end": 8133,
											"name": "LOG4",
											"source": 0
										},
										{
											"begin": 7917,
											"end": 8150,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 7917,
											"end": 8150,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 7917,
											"end": 8150,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 8321,
											"end": 8555,
											"name": "tag",
											"source": 0,
											"value": "212"
										},
										{
											"begin": 8321,
											"end": 8555,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 8404,
											"end": 8426,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "369"
										},
										{
											"begin": 8412,
											"end": 8416,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 8418,
											"end": 8425,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 8404,
											"end": 8411,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "136"
										},
										{
											"begin": 8404,
											"end": 8426,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 8404,
											"end": 8426,
											"name": "tag",
											"source": 0,
											"value": "369"
										},
										{
											"begin": 8404,
											"end": 8426,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 8400,
											"end": 8549,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 8400,
											"end": 8549,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "211"
										},
										{
											"begin": 8400,
											"end": 8549,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 8474,
											"end": 8479,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 8442,
											"end": 8454,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 8442,
											"end": 8454,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 8442,
											"end": 8454,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 8442,
											"end": 8448,
											"name": "PUSH",
											"source": 0,
											"value": "FB"
										},
										{
											"begin": 8442,
											"end": 8454,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 8442,
											"end": 8454,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8442,
											"end": 8454,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 8442,
											"end": 8454,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 8442,
											"end": 8454,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 8442,
											"end": 8454,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 8442,
											"end": 8454,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 8442,
											"end": 8454,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8442,
											"end": 8471,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 8442,
											"end": 8471,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 8442,
											"end": 8471,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 8442,
											"end": 8471,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 8442,
											"end": 8471,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 8442,
											"end": 8471,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 8442,
											"end": 8471,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 8442,
											"end": 8471,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 8442,
											"end": 8471,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 8442,
											"end": 8471,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 8442,
											"end": 8479,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 8442,
											"end": 8479,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 8442,
											"end": 8479,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 8442,
											"end": 8479,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8442,
											"end": 8479,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 8498,
											"end": 8538,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 929,
											"end": 939,
											"name": "CALLER",
											"source": 14
										},
										{
											"begin": 929,
											"end": 939,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 8442,
											"end": 8454,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 8442,
											"end": 8454,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 8498,
											"end": 8538,
											"name": "PUSH",
											"source": 0,
											"value": "F6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B"
										},
										{
											"begin": 8498,
											"end": 8538,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 8474,
											"end": 8479,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8498,
											"end": 8538,
											"name": "LOG4",
											"source": 0
										},
										{
											"begin": 8321,
											"end": 8555,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 8321,
											"end": 8555,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 8321,
											"end": 8555,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 1920,
											"end": 2046,
											"name": "tag",
											"source": 21,
											"value": "224"
										},
										{
											"begin": 1920,
											"end": 2046,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 890,
											"end": 916,
											"name": "PUSH",
											"source": 21,
											"value": "189AB7A9244DF0848122154315AF71FE140F3DB0FE014031783B0946B8C9D2E3"
										},
										{
											"begin": 2928,
											"end": 2944,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "211"
										},
										{
											"begin": 2939,
											"end": 2943,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2928,
											"end": 2938,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "201"
										},
										{
											"begin": 2928,
											"end": 2944,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2820,
											"end": 3764,
											"name": "tag",
											"source": 4,
											"value": "230"
										},
										{
											"begin": 2820,
											"end": 3764,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 971,
											"end": 1037,
											"name": "PUSH",
											"source": 4,
											"value": "4910FDFA16FED3260ED0E7147F7CC6DA11A60208B5B9406D12A635614FFD9143"
										},
										{
											"begin": 3236,
											"end": 3295,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 3236,
											"end": 3295,
											"name": "PUSH",
											"source": 4,
											"value": "FF"
										},
										{
											"begin": 3236,
											"end": 3295,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 3232,
											"end": 3758,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 3232,
											"end": 3758,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "381"
										},
										{
											"begin": 3232,
											"end": 3758,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 3311,
											"end": 3348,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "203"
										},
										{
											"begin": 3330,
											"end": 3347,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 3311,
											"end": 3329,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "383"
										},
										{
											"begin": 3311,
											"end": 3348,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 3232,
											"end": 3758,
											"name": "tag",
											"source": 4,
											"value": "381"
										},
										{
											"begin": 3232,
											"end": 3758,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3412,
											"end": 3429,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3383,
											"end": 3444,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 3383,
											"end": 3444,
											"name": "PUSH",
											"source": 4,
											"value": "52D1902D"
										},
										{
											"begin": 3383,
											"end": 3446,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 3383,
											"end": 3446,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 3383,
											"end": 3446,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 3383,
											"end": 3446,
											"name": "PUSH",
											"source": 4,
											"value": "FFFFFFFF"
										},
										{
											"begin": 3383,
											"end": 3446,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 3383,
											"end": 3446,
											"name": "PUSH",
											"source": 4,
											"value": "E0"
										},
										{
											"begin": 3383,
											"end": 3446,
											"name": "SHL",
											"source": 4
										},
										{
											"begin": 3383,
											"end": 3446,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 3383,
											"end": 3446,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 3383,
											"end": 3446,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 3383,
											"end": 3446,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 3383,
											"end": 3446,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 3383,
											"end": 3446,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 3383,
											"end": 3446,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 3383,
											"end": 3446,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 3383,
											"end": 3446,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 3383,
											"end": 3446,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 3383,
											"end": 3446,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 3383,
											"end": 3446,
											"name": "DUP7",
											"source": 4
										},
										{
											"begin": 3383,
											"end": 3446,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 3383,
											"end": 3446,
											"name": "EXTCODESIZE",
											"source": 4
										},
										{
											"begin": 3383,
											"end": 3446,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 3383,
											"end": 3446,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 3383,
											"end": 3446,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 3383,
											"end": 3446,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "385"
										},
										{
											"begin": 3383,
											"end": 3446,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 3383,
											"end": 3446,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 3383,
											"end": 3446,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 3383,
											"end": 3446,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 3383,
											"end": 3446,
											"name": "tag",
											"source": 4,
											"value": "385"
										},
										{
											"begin": 3383,
											"end": 3446,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3383,
											"end": 3446,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 3383,
											"end": 3446,
											"name": "GAS",
											"source": 4
										},
										{
											"begin": 3383,
											"end": 3446,
											"name": "STATICCALL",
											"source": 4
										},
										{
											"begin": 3383,
											"end": 3446,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 3383,
											"end": 3446,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 3383,
											"end": 3446,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 3383,
											"end": 3446,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 3383,
											"end": 3446,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 3383,
											"end": 3446,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 3383,
											"end": 3446,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "386"
										},
										{
											"begin": 3383,
											"end": 3446,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3383,
											"end": 3446,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 3383,
											"end": 3446,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 3383,
											"end": 3446,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 3383,
											"end": 3446,
											"name": "PUSH",
											"source": 4,
											"value": "1F"
										},
										{
											"begin": 3383,
											"end": 3446,
											"name": "RETURNDATASIZE",
											"source": 4
										},
										{
											"begin": 3383,
											"end": 3446,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 3383,
											"end": 3446,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 3383,
											"end": 3446,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 3383,
											"end": 3446,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 3383,
											"end": 3446,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 3383,
											"end": 3446,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 3383,
											"end": 3446,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 3383,
											"end": 3446,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 3383,
											"end": 3446,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 3383,
											"end": 3446,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "387"
										},
										{
											"begin": 3383,
											"end": 3446,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 3383,
											"end": 3446,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 3383,
											"end": 3446,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 3383,
											"end": 3446,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 3383,
											"end": 3446,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "388"
										},
										{
											"begin": 3383,
											"end": 3446,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 3383,
											"end": 3446,
											"name": "tag",
											"source": 4,
											"value": "387"
										},
										{
											"begin": 3383,
											"end": 3446,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3383,
											"end": 3446,
											"name": "PUSH",
											"source": 4,
											"value": "1"
										},
										{
											"begin": 3383,
											"end": 3446,
											"name": "tag",
											"source": 4,
											"value": "386"
										},
										{
											"begin": 3383,
											"end": 3446,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3379,
											"end": 3681,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "389"
										},
										{
											"begin": 3379,
											"end": 3681,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 3610,
											"end": 3666,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 3610,
											"end": 3666,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3610,
											"end": 3666,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 3610,
											"end": 3666,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 12355,
											"end": 12357,
											"name": "PUSH",
											"source": 22,
											"value": "20"
										},
										{
											"begin": 3610,
											"end": 3666,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 3610,
											"end": 3666,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 3610,
											"end": 3666,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 12337,
											"end": 12358,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 12394,
											"end": 12396,
											"name": "PUSH",
											"source": 22,
											"value": "2E"
										},
										{
											"begin": 12374,
											"end": 12392,
											"name": "PUSH",
											"source": 22,
											"value": "24"
										},
										{
											"begin": 12374,
											"end": 12392,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 12374,
											"end": 12392,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 12367,
											"end": 12397,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 12433,
											"end": 12467,
											"name": "PUSH",
											"source": 22,
											"value": "45524331393637557067726164653A206E657720696D706C656D656E74617469"
										},
										{
											"begin": 12413,
											"end": 12431,
											"name": "PUSH",
											"source": 22,
											"value": "44"
										},
										{
											"begin": 12413,
											"end": 12431,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 12413,
											"end": 12431,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 12406,
											"end": 12468,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "6F6E206973206E6F742055555053"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "90"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 12484,
											"end": 12502,
											"name": "PUSH",
											"source": 22,
											"value": "64"
										},
										{
											"begin": 12484,
											"end": 12502,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 12484,
											"end": 12502,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 12477,
											"end": 12521,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 12538,
											"end": 12557,
											"name": "PUSH",
											"source": 22,
											"value": "84"
										},
										{
											"begin": 12538,
											"end": 12557,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 3610,
											"end": 3666,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "209"
										},
										{
											"begin": 12153,
											"end": 12563,
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 3379,
											"end": 3681,
											"name": "tag",
											"source": 4,
											"value": "389"
										},
										{
											"begin": 3379,
											"end": 3681,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "75B20EEF8615DE99C108B05F0DBDA081C91897128CAA336D75DFFB97C4132B4D"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 3496,
											"end": 3524,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 3496,
											"end": 3524,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 3488,
											"end": 3570,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "396"
										},
										{
											"begin": 3488,
											"end": 3570,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 3488,
											"end": 3570,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 3488,
											"end": 3570,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3488,
											"end": 3570,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 3488,
											"end": 3570,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 12770,
											"end": 12772,
											"name": "PUSH",
											"source": 22,
											"value": "20"
										},
										{
											"begin": 3488,
											"end": 3570,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 3488,
											"end": 3570,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 3488,
											"end": 3570,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 12752,
											"end": 12773,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 12809,
											"end": 12811,
											"name": "PUSH",
											"source": 22,
											"value": "29"
										},
										{
											"begin": 12789,
											"end": 12807,
											"name": "PUSH",
											"source": 22,
											"value": "24"
										},
										{
											"begin": 12789,
											"end": 12807,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 12789,
											"end": 12807,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 12782,
											"end": 12812,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 12848,
											"end": 12882,
											"name": "PUSH",
											"source": 22,
											"value": "45524331393637557067726164653A20756E737570706F727465642070726F78"
										},
										{
											"begin": 12828,
											"end": 12846,
											"name": "PUSH",
											"source": 22,
											"value": "44"
										},
										{
											"begin": 12828,
											"end": 12846,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 12828,
											"end": 12846,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 12821,
											"end": 12883,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1A58589B1955555251"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "BA"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 12899,
											"end": 12917,
											"name": "PUSH",
											"source": 22,
											"value": "64"
										},
										{
											"begin": 12899,
											"end": 12917,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 12899,
											"end": 12917,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 12892,
											"end": 12931,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 12948,
											"end": 12967,
											"name": "PUSH",
											"source": 22,
											"value": "84"
										},
										{
											"begin": 12948,
											"end": 12967,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 3488,
											"end": 3570,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "209"
										},
										{
											"begin": 12568,
											"end": 12973,
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 3488,
											"end": 3570,
											"name": "tag",
											"source": 4,
											"value": "396"
										},
										{
											"begin": 3488,
											"end": 3570,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3447,
											"end": 3585,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 3694,
											"end": 3747,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "203"
										},
										{
											"begin": 3712,
											"end": 3729,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 3731,
											"end": 3735,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 3737,
											"end": 3746,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 3694,
											"end": 3711,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "400"
										},
										{
											"begin": 3694,
											"end": 3747,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 2676,
											"end": 2793,
											"name": "tag",
											"source": 8,
											"value": "241"
										},
										{
											"begin": 2676,
											"end": 2793,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1729,
											"end": 1745,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "402"
										},
										{
											"begin": 1729,
											"end": 1743,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "403"
										},
										{
											"begin": 1729,
											"end": 1745,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 1729,
											"end": 1745,
											"name": "tag",
											"source": 8,
											"value": "402"
										},
										{
											"begin": 1729,
											"end": 1745,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2734,
											"end": 2741,
											"name": "PUSH",
											"source": 8,
											"value": "97"
										},
										{
											"begin": 2734,
											"end": 2749,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 2734,
											"end": 2749,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 2734,
											"end": 2749,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 2734,
											"end": 2749,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2734,
											"end": 2749,
											"name": "SSTORE",
											"source": 8
										},
										{
											"begin": 2764,
											"end": 2786,
											"name": "PUSH",
											"source": 8,
											"value": "5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA"
										},
										{
											"begin": 929,
											"end": 939,
											"name": "CALLER",
											"source": 14
										},
										{
											"begin": 2773,
											"end": 2785,
											"name": "tag",
											"source": 8,
											"value": "405"
										},
										{
											"begin": 2773,
											"end": 2785,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2764,
											"end": 2786,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 2764,
											"end": 2786,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 13142,
											"end": 13174,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 13142,
											"end": 13174,
											"name": "SWAP2",
											"source": 22
										},
										{
											"begin": 13142,
											"end": 13174,
											"name": "AND",
											"source": 22
										},
										{
											"begin": 13124,
											"end": 13175,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 13124,
											"end": 13175,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 13112,
											"end": 13114,
											"name": "PUSH",
											"source": 22,
											"value": "20"
										},
										{
											"begin": 13097,
											"end": 13115,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 2764,
											"end": 2786,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 2764,
											"end": 2786,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 2764,
											"end": 2786,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 2764,
											"end": 2786,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 2764,
											"end": 2786,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 2764,
											"end": 2786,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2764,
											"end": 2786,
											"name": "LOG1",
											"source": 8
										},
										{
											"begin": 2676,
											"end": 2793,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 9712,
											"end": 10371,
											"name": "tag",
											"source": 9,
											"value": "245"
										},
										{
											"begin": 9712,
											"end": 10371,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9795,
											"end": 9816,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 9795,
											"end": 9816,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 9787,
											"end": 9854,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "409"
										},
										{
											"begin": 9787,
											"end": 9854,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 9787,
											"end": 9854,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 9787,
											"end": 9854,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 9787,
											"end": 9854,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 9787,
											"end": 9854,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 13388,
											"end": 13390,
											"name": "PUSH",
											"source": 22,
											"value": "20"
										},
										{
											"begin": 9787,
											"end": 9854,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 9787,
											"end": 9854,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 9787,
											"end": 9854,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 13370,
											"end": 13391,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 13427,
											"end": 13429,
											"name": "PUSH",
											"source": 22,
											"value": "21"
										},
										{
											"begin": 13407,
											"end": 13425,
											"name": "PUSH",
											"source": 22,
											"value": "24"
										},
										{
											"begin": 13407,
											"end": 13425,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 13407,
											"end": 13425,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 13400,
											"end": 13430,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 13466,
											"end": 13500,
											"name": "PUSH",
											"source": 22,
											"value": "45524332303A206275726E2066726F6D20746865207A65726F20616464726573"
										},
										{
											"begin": 13446,
											"end": 13464,
											"name": "PUSH",
											"source": 22,
											"value": "44"
										},
										{
											"begin": 13446,
											"end": 13464,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 13446,
											"end": 13464,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 13439,
											"end": 13501,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "73"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 13517,
											"end": 13535,
											"name": "PUSH",
											"source": 22,
											"value": "64"
										},
										{
											"begin": 13517,
											"end": 13535,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 13517,
											"end": 13535,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 13510,
											"end": 13541,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 13558,
											"end": 13577,
											"name": "PUSH",
											"source": 22,
											"value": "84"
										},
										{
											"begin": 13558,
											"end": 13577,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 9787,
											"end": 9854,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "209"
										},
										{
											"begin": 13186,
											"end": 13583,
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 9787,
											"end": 9854,
											"name": "tag",
											"source": 9,
											"value": "409"
										},
										{
											"begin": 9787,
											"end": 9854,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 9865,
											"end": 9914,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "412"
										},
										{
											"begin": 9886,
											"end": 9893,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 9903,
											"end": 9904,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 9907,
											"end": 9913,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 9865,
											"end": 9885,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "353"
										},
										{
											"begin": 9865,
											"end": 9914,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 9865,
											"end": 9914,
											"name": "tag",
											"source": 9,
											"value": "412"
										},
										{
											"begin": 9865,
											"end": 9914,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9950,
											"end": 9968,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 9950,
											"end": 9968,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 9925,
											"end": 9947,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 9950,
											"end": 9968,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 9950,
											"end": 9968,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 9950,
											"end": 9968,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 9950,
											"end": 9959,
											"name": "PUSH",
											"source": 9,
											"value": "33"
										},
										{
											"begin": 9950,
											"end": 9968,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 9950,
											"end": 9968,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 9950,
											"end": 9968,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 9950,
											"end": 9968,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 9950,
											"end": 9968,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 9950,
											"end": 9968,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 9986,
											"end": 10010,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 9986,
											"end": 10010,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 9986,
											"end": 10010,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 9986,
											"end": 10010,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 9978,
											"end": 10049,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "413"
										},
										{
											"begin": 9978,
											"end": 10049,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 9978,
											"end": 10049,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 9978,
											"end": 10049,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 9978,
											"end": 10049,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 9978,
											"end": 10049,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 13790,
											"end": 13792,
											"name": "PUSH",
											"source": 22,
											"value": "20"
										},
										{
											"begin": 9978,
											"end": 10049,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 9978,
											"end": 10049,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 9978,
											"end": 10049,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 13772,
											"end": 13793,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 13829,
											"end": 13831,
											"name": "PUSH",
											"source": 22,
											"value": "22"
										},
										{
											"begin": 13809,
											"end": 13827,
											"name": "PUSH",
											"source": 22,
											"value": "24"
										},
										{
											"begin": 13809,
											"end": 13827,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 13809,
											"end": 13827,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 13802,
											"end": 13832,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 13868,
											"end": 13902,
											"name": "PUSH",
											"source": 22,
											"value": "45524332303A206275726E20616D6F756E7420657863656564732062616C616E"
										},
										{
											"begin": 13848,
											"end": 13866,
											"name": "PUSH",
											"source": 22,
											"value": "44"
										},
										{
											"begin": 13848,
											"end": 13866,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 13848,
											"end": 13866,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 13841,
											"end": 13903,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "6365"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 13919,
											"end": 13937,
											"name": "PUSH",
											"source": 22,
											"value": "64"
										},
										{
											"begin": 13919,
											"end": 13937,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 13919,
											"end": 13937,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 13912,
											"end": 13944,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 13961,
											"end": 13980,
											"name": "PUSH",
											"source": 22,
											"value": "84"
										},
										{
											"begin": 13961,
											"end": 13980,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 9978,
											"end": 10049,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "209"
										},
										{
											"begin": 13588,
											"end": 13986,
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 9978,
											"end": 10049,
											"name": "tag",
											"source": 9,
											"value": "413"
										},
										{
											"begin": 9978,
											"end": 10049,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10083,
											"end": 10101,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 10083,
											"end": 10101,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 10083,
											"end": 10101,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 10083,
											"end": 10101,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 10083,
											"end": 10101,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 10083,
											"end": 10101,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 10083,
											"end": 10092,
											"name": "PUSH",
											"source": 9,
											"value": "33"
										},
										{
											"begin": 10083,
											"end": 10101,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 10083,
											"end": 10101,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 10083,
											"end": 10101,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 10083,
											"end": 10101,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 10083,
											"end": 10101,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 10083,
											"end": 10101,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 10083,
											"end": 10101,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 10083,
											"end": 10101,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 10104,
											"end": 10127,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 10104,
											"end": 10127,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 10104,
											"end": 10127,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 10083,
											"end": 10127,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 10083,
											"end": 10127,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 10220,
											"end": 10232,
											"name": "PUSH",
											"source": 9,
											"value": "35"
										},
										{
											"begin": 10220,
											"end": 10242,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 10220,
											"end": 10242,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 10220,
											"end": 10242,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 10220,
											"end": 10242,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 10220,
											"end": 10242,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 10220,
											"end": 10242,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 10220,
											"end": 10242,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 10268,
											"end": 10305,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 1731,
											"end": 1756,
											"name": "DUP6",
											"source": 22
										},
										{
											"begin": 1731,
											"end": 1756,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 1731,
											"end": 1756,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 10083,
											"end": 10101,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 10083,
											"end": 10101,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 10083,
											"end": 10101,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 10268,
											"end": 10305,
											"name": "PUSH",
											"source": 9,
											"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
										},
										{
											"begin": 10268,
											"end": 10305,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 1704,
											"end": 1722,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 10268,
											"end": 10305,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 10268,
											"end": 10305,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 10268,
											"end": 10305,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 10268,
											"end": 10305,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 10268,
											"end": 10305,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 10268,
											"end": 10305,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 10268,
											"end": 10305,
											"name": "LOG3",
											"source": 9
										},
										{
											"begin": 5259,
											"end": 5404,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 5259,
											"end": 5404,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 5259,
											"end": 5404,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 5259,
											"end": 5404,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 2118,
											"end": 2265,
											"name": "tag",
											"source": 9,
											"value": "278"
										},
										{
											"begin": 2118,
											"end": 2265,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5374,
											"end": 5387,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 5374,
											"end": 5387,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 5374,
											"end": 5387,
											"name": "PUSH",
											"source": 6,
											"value": "100"
										},
										{
											"begin": 5374,
											"end": 5387,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5374,
											"end": 5387,
											"name": "DIV",
											"source": 6
										},
										{
											"begin": 5374,
											"end": 5387,
											"name": "PUSH",
											"source": 6,
											"value": "FF"
										},
										{
											"begin": 5374,
											"end": 5387,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "420"
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "209"
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "422"
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "tag",
											"source": 6,
											"value": "420"
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2220,
											"end": 2258,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "211"
										},
										{
											"begin": 2243,
											"end": 2248,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2250,
											"end": 2257,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2220,
											"end": 2242,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "425"
										},
										{
											"begin": 2220,
											"end": 2258,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 594,
											"end": 659,
											"name": "tag",
											"source": 11,
											"value": "280"
										},
										{
											"begin": 594,
											"end": 659,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 5374,
											"end": 5387,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 5374,
											"end": 5387,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 5374,
											"end": 5387,
											"name": "PUSH",
											"source": 6,
											"value": "100"
										},
										{
											"begin": 5374,
											"end": 5387,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5374,
											"end": 5387,
											"name": "DIV",
											"source": 6
										},
										{
											"begin": 5374,
											"end": 5387,
											"name": "PUSH",
											"source": 6,
											"value": "FF"
										},
										{
											"begin": 5374,
											"end": 5387,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "427"
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "209"
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "422"
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "tag",
											"source": 6,
											"value": "427"
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 594,
											"end": 659,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 1063,
											"end": 1160,
											"name": "tag",
											"source": 8,
											"value": "282"
										},
										{
											"begin": 1063,
											"end": 1160,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5374,
											"end": 5387,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 5374,
											"end": 5387,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 5374,
											"end": 5387,
											"name": "PUSH",
											"source": 6,
											"value": "100"
										},
										{
											"begin": 5374,
											"end": 5387,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5374,
											"end": 5387,
											"name": "DIV",
											"source": 6
										},
										{
											"begin": 5374,
											"end": 5387,
											"name": "PUSH",
											"source": 6,
											"value": "FF"
										},
										{
											"begin": 5374,
											"end": 5387,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "431"
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "209"
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "422"
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "tag",
											"source": 6,
											"value": "431"
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1126,
											"end": 1153,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "427"
										},
										{
											"begin": 1126,
											"end": 1151,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "435"
										},
										{
											"begin": 1126,
											"end": 1153,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 8857,
											"end": 9392,
											"name": "tag",
											"source": 9,
											"value": "295"
										},
										{
											"begin": 8857,
											"end": 9392,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8940,
											"end": 8961,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 8940,
											"end": 8961,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 8932,
											"end": 8997,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "445"
										},
										{
											"begin": 8932,
											"end": 8997,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 8932,
											"end": 8997,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 8932,
											"end": 8997,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8932,
											"end": 8997,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 8932,
											"end": 8997,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 14605,
											"end": 14607,
											"name": "PUSH",
											"source": 22,
											"value": "20"
										},
										{
											"begin": 8932,
											"end": 8997,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 8932,
											"end": 8997,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 8932,
											"end": 8997,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 14587,
											"end": 14608,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 14644,
											"end": 14646,
											"name": "PUSH",
											"source": 22,
											"value": "1F"
										},
										{
											"begin": 14624,
											"end": 14642,
											"name": "PUSH",
											"source": 22,
											"value": "24"
										},
										{
											"begin": 14624,
											"end": 14642,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 14624,
											"end": 14642,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 14617,
											"end": 14647,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 14683,
											"end": 14716,
											"name": "PUSH",
											"source": 22,
											"value": "45524332303A206D696E7420746F20746865207A65726F206164647265737300"
										},
										{
											"begin": 14663,
											"end": 14681,
											"name": "PUSH",
											"source": 22,
											"value": "44"
										},
										{
											"begin": 14663,
											"end": 14681,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 14663,
											"end": 14681,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 14656,
											"end": 14717,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 14734,
											"end": 14752,
											"name": "PUSH",
											"source": 22,
											"value": "64"
										},
										{
											"begin": 14734,
											"end": 14752,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 8932,
											"end": 8997,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "209"
										},
										{
											"begin": 14403,
											"end": 14758,
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 8932,
											"end": 8997,
											"name": "tag",
											"source": 9,
											"value": "445"
										},
										{
											"begin": 8932,
											"end": 8997,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 9008,
											"end": 9057,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "448"
										},
										{
											"begin": 9037,
											"end": 9038,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 9041,
											"end": 9048,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 9050,
											"end": 9056,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 9008,
											"end": 9028,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "353"
										},
										{
											"begin": 9008,
											"end": 9057,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 9008,
											"end": 9057,
											"name": "tag",
											"source": 9,
											"value": "448"
										},
										{
											"begin": 9008,
											"end": 9057,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 9084,
											"end": 9090,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 9068,
											"end": 9080,
											"name": "PUSH",
											"source": 9,
											"value": "35"
										},
										{
											"begin": 9068,
											"end": 9080,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 9068,
											"end": 9090,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 9068,
											"end": 9090,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 9068,
											"end": 9090,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 9068,
											"end": 9090,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "449"
										},
										{
											"begin": 9068,
											"end": 9090,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 9068,
											"end": 9090,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 9068,
											"end": 9090,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "236"
										},
										{
											"begin": 9068,
											"end": 9090,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 9068,
											"end": 9090,
											"name": "tag",
											"source": 9,
											"value": "449"
										},
										{
											"begin": 9068,
											"end": 9090,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 9068,
											"end": 9090,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 9068,
											"end": 9090,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 9068,
											"end": 9090,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9236,
											"end": 9254,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 9236,
											"end": 9254,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 9236,
											"end": 9254,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 9236,
											"end": 9254,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 9236,
											"end": 9254,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 9236,
											"end": 9254,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 9236,
											"end": 9245,
											"name": "PUSH",
											"source": 9,
											"value": "33"
										},
										{
											"begin": 9236,
											"end": 9254,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 9236,
											"end": 9254,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 9236,
											"end": 9254,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 9236,
											"end": 9254,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 9236,
											"end": 9254,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 9236,
											"end": 9254,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 9236,
											"end": 9254,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 9236,
											"end": 9254,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 9236,
											"end": 9264,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 9236,
											"end": 9264,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 9236,
											"end": 9264,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 9236,
											"end": 9264,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 9236,
											"end": 9264,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 9236,
											"end": 9264,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 9289,
											"end": 9326,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 1731,
											"end": 1756,
											"name": "DUP5",
											"source": 22
										},
										{
											"begin": 1731,
											"end": 1756,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 1731,
											"end": 1756,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 9289,
											"end": 9326,
											"name": "PUSH",
											"source": 9,
											"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
										},
										{
											"begin": 9289,
											"end": 9326,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 1704,
											"end": 1722,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 9289,
											"end": 9326,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 9289,
											"end": 9326,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 9289,
											"end": 9326,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 9289,
											"end": 9326,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 9289,
											"end": 9326,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 9289,
											"end": 9326,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 9289,
											"end": 9326,
											"name": "LOG3",
											"source": 9
										},
										{
											"begin": 6368,
											"end": 6582,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 6368,
											"end": 6582,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 6368,
											"end": 6582,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 2429,
											"end": 2544,
											"name": "tag",
											"source": 8,
											"value": "304"
										},
										{
											"begin": 2429,
											"end": 2544,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1482,
											"end": 1501,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "453"
										},
										{
											"begin": 1482,
											"end": 1499,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "454"
										},
										{
											"begin": 1482,
											"end": 1501,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 1482,
											"end": 1501,
											"name": "tag",
											"source": 8,
											"value": "453"
										},
										{
											"begin": 1482,
											"end": 1501,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2488,
											"end": 2495,
											"name": "PUSH",
											"source": 8,
											"value": "97"
										},
										{
											"begin": 2488,
											"end": 2502,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 2488,
											"end": 2502,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 2488,
											"end": 2502,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 2498,
											"end": 2502,
											"name": "PUSH",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 2488,
											"end": 2502,
											"name": "OR",
											"source": 8
										},
										{
											"begin": 2488,
											"end": 2502,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2488,
											"end": 2502,
											"name": "SSTORE",
											"source": 8
										},
										{
											"begin": 2517,
											"end": 2537,
											"name": "PUSH",
											"source": 8,
											"value": "62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258"
										},
										{
											"begin": 2524,
											"end": 2536,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "405"
										},
										{
											"begin": 929,
											"end": 939,
											"name": "CALLER",
											"source": 14
										},
										{
											"begin": 929,
											"end": 939,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 850,
											"end": 946,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 1721,
											"end": 1914,
											"name": "tag",
											"source": 21,
											"value": "353"
										},
										{
											"begin": 1721,
											"end": 1914,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 1482,
											"end": 1501,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "203"
										},
										{
											"begin": 1482,
											"end": 1499,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "454"
										},
										{
											"begin": 1482,
											"end": 1501,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 4152,
											"end": 4653,
											"name": "tag",
											"source": 0,
											"value": "363"
										},
										{
											"begin": 4152,
											"end": 4653,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4240,
											"end": 4262,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "465"
										},
										{
											"begin": 4248,
											"end": 4252,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 4254,
											"end": 4261,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 4240,
											"end": 4247,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "136"
										},
										{
											"begin": 4240,
											"end": 4262,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 4240,
											"end": 4262,
											"name": "tag",
											"source": 0,
											"value": "465"
										},
										{
											"begin": 4240,
											"end": 4262,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4235,
											"end": 4647,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "211"
										},
										{
											"begin": 4235,
											"end": 4647,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 4423,
											"end": 4462,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "467"
										},
										{
											"begin": 4454,
											"end": 4461,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4423,
											"end": 4453,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "468"
										},
										{
											"begin": 4423,
											"end": 4462,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 4423,
											"end": 4462,
											"name": "tag",
											"source": 0,
											"value": "467"
										},
										{
											"begin": 4423,
											"end": 4462,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4533,
											"end": 4582,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "469"
										},
										{
											"begin": 4572,
											"end": 4576,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 4579,
											"end": 4581,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 4533,
											"end": 4563,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "470"
										},
										{
											"begin": 4533,
											"end": 4582,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 4533,
											"end": 4582,
											"name": "tag",
											"source": 0,
											"value": "469"
										},
										{
											"begin": 4533,
											"end": 4582,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4330,
											"end": 4604,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 4330,
											"end": 4604,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 4330,
											"end": 4604,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 4330,
											"end": 4604,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4330,
											"end": 4604,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "471"
										},
										{
											"begin": 4330,
											"end": 4604,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 4330,
											"end": 4604,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 4330,
											"end": 4604,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4330,
											"end": 4604,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "472"
										},
										{
											"begin": 4330,
											"end": 4604,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 4330,
											"end": 4604,
											"name": "tag",
											"source": 0,
											"value": "471"
										},
										{
											"begin": 4330,
											"end": 4604,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4330,
											"end": 4604,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 4330,
											"end": 4604,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4330,
											"end": 4604,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 4330,
											"end": 4604,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4330,
											"end": 4604,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 4330,
											"end": 4604,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 4330,
											"end": 4604,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4330,
											"end": 4604,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4330,
											"end": 4604,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 4330,
											"end": 4604,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4330,
											"end": 4604,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 4330,
											"end": 4604,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4330,
											"end": 4604,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4278,
											"end": 4636,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 4278,
											"end": 4636,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 4278,
											"end": 4636,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "209"
										},
										{
											"begin": 4278,
											"end": 4636,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 4278,
											"end": 4636,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 4278,
											"end": 4636,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4278,
											"end": 4636,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "49"
										},
										{
											"begin": 4278,
											"end": 4636,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1699,
											"end": 1980,
											"name": "tag",
											"source": 4,
											"value": "383"
										},
										{
											"begin": 1699,
											"end": 1980,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1713,
											"end": 1732,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 1713,
											"end": 1732,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 1713,
											"end": 1732,
											"name": "EXTCODESIZE",
											"source": 13
										},
										{
											"begin": 1772,
											"end": 1878,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "478"
										},
										{
											"begin": 1772,
											"end": 1878,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 1772,
											"end": 1878,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 1772,
											"end": 1878,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1772,
											"end": 1878,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1772,
											"end": 1878,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 15756,
											"end": 15758,
											"name": "PUSH",
											"source": 22,
											"value": "20"
										},
										{
											"begin": 1772,
											"end": 1878,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 1772,
											"end": 1878,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 1772,
											"end": 1878,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 15738,
											"end": 15759,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 15795,
											"end": 15797,
											"name": "PUSH",
											"source": 22,
											"value": "2D"
										},
										{
											"begin": 15775,
											"end": 15793,
											"name": "PUSH",
											"source": 22,
											"value": "24"
										},
										{
											"begin": 15775,
											"end": 15793,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 15775,
											"end": 15793,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 15768,
											"end": 15798,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 15834,
											"end": 15868,
											"name": "PUSH",
											"source": 22,
											"value": "455243313936373A206E657720696D706C656D656E746174696F6E206973206E"
										},
										{
											"begin": 15814,
											"end": 15832,
											"name": "PUSH",
											"source": 22,
											"value": "44"
										},
										{
											"begin": 15814,
											"end": 15832,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 15814,
											"end": 15832,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 15807,
											"end": 15869,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1BDD08184818DBDB9D1C9858DD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "9A"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 15885,
											"end": 15903,
											"name": "PUSH",
											"source": 22,
											"value": "64"
										},
										{
											"begin": 15885,
											"end": 15903,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 15885,
											"end": 15903,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 15878,
											"end": 15921,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 15938,
											"end": 15957,
											"name": "PUSH",
											"source": 22,
											"value": "84"
										},
										{
											"begin": 15938,
											"end": 15957,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 1772,
											"end": 1878,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "209"
										},
										{
											"begin": 15554,
											"end": 15963,
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 1772,
											"end": 1878,
											"name": "tag",
											"source": 4,
											"value": "478"
										},
										{
											"begin": 1772,
											"end": 1878,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "75B20EEF8615DE99C108B05F0DBDA081C91897128CAA336D75DFFB97C4132B4D"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 1888,
											"end": 1973,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 1888,
											"end": 1973,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1888,
											"end": 1973,
											"name": "AND",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1888,
											"end": 1973,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 1888,
											"end": 1973,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1888,
											"end": 1973,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 1888,
											"end": 1973,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 1888,
											"end": 1973,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 1888,
											"end": 1973,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1888,
											"end": 1973,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 1888,
											"end": 1973,
											"name": "OR",
											"source": 4
										},
										{
											"begin": 1888,
											"end": 1973,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1888,
											"end": 1973,
											"name": "SSTORE",
											"source": 4
										},
										{
											"begin": 1699,
											"end": 1980,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 2372,
											"end": 2648,
											"name": "tag",
											"source": 4,
											"value": "400"
										},
										{
											"begin": 2372,
											"end": 2648,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2480,
											"end": 2509,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "483"
										},
										{
											"begin": 2491,
											"end": 2508,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 2480,
											"end": 2490,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "484"
										},
										{
											"begin": 2480,
											"end": 2509,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 2480,
											"end": 2509,
											"name": "tag",
											"source": 4,
											"value": "483"
										},
										{
											"begin": 2480,
											"end": 2509,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2537,
											"end": 2538,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 2523,
											"end": 2527,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 2523,
											"end": 2534,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 2523,
											"end": 2538,
											"name": "GT",
											"source": 4
										},
										{
											"begin": 2523,
											"end": 2551,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 2523,
											"end": 2551,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "485"
										},
										{
											"begin": 2523,
											"end": 2551,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 2523,
											"end": 2551,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 2542,
											"end": 2551,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 2523,
											"end": 2551,
											"name": "tag",
											"source": 4,
											"value": "485"
										},
										{
											"begin": 2523,
											"end": 2551,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2519,
											"end": 2642,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 2519,
											"end": 2642,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "203"
										},
										{
											"begin": 2519,
											"end": 2642,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 2567,
											"end": 2631,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "344"
										},
										{
											"begin": 2607,
											"end": 2624,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 2626,
											"end": 2630,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 2567,
											"end": 2606,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "488"
										},
										{
											"begin": 2567,
											"end": 2631,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 2188,
											"end": 2294,
											"name": "tag",
											"source": 8,
											"value": "403"
										},
										{
											"begin": 2188,
											"end": 2294,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1928,
											"end": 1935,
											"name": "PUSH",
											"source": 8,
											"value": "97"
										},
										{
											"begin": 1928,
											"end": 1935,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 1928,
											"end": 1935,
											"name": "PUSH",
											"source": 8,
											"value": "FF"
										},
										{
											"begin": 1928,
											"end": 1935,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 2246,
											"end": 2287,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "427"
										},
										{
											"begin": 2246,
											"end": 2287,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 2246,
											"end": 2287,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 2246,
											"end": 2287,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2246,
											"end": 2287,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2246,
											"end": 2287,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 16170,
											"end": 16172,
											"name": "PUSH",
											"source": 22,
											"value": "20"
										},
										{
											"begin": 2246,
											"end": 2287,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 2246,
											"end": 2287,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2246,
											"end": 2287,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 16152,
											"end": 16173,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 16209,
											"end": 16211,
											"name": "PUSH",
											"source": 22,
											"value": "14"
										},
										{
											"begin": 16189,
											"end": 16207,
											"name": "PUSH",
											"source": 22,
											"value": "24"
										},
										{
											"begin": 16189,
											"end": 16207,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 16189,
											"end": 16207,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 16182,
											"end": 16212,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "14185D5CD8589B194E881B9BDD081C185D5CD959"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "62"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 16228,
											"end": 16246,
											"name": "PUSH",
											"source": 22,
											"value": "44"
										},
										{
											"begin": 16228,
											"end": 16246,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 16228,
											"end": 16246,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 16221,
											"end": 16271,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 16288,
											"end": 16306,
											"name": "PUSH",
											"source": 22,
											"value": "64"
										},
										{
											"begin": 16288,
											"end": 16306,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 2246,
											"end": 2287,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "209"
										},
										{
											"begin": 15968,
											"end": 16312,
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 2271,
											"end": 2430,
											"name": "tag",
											"source": 9,
											"value": "425"
										},
										{
											"begin": 2271,
											"end": 2430,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5374,
											"end": 5387,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 5374,
											"end": 5387,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 5374,
											"end": 5387,
											"name": "PUSH",
											"source": 6,
											"value": "100"
										},
										{
											"begin": 5374,
											"end": 5387,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5374,
											"end": 5387,
											"name": "DIV",
											"source": 6
										},
										{
											"begin": 5374,
											"end": 5387,
											"name": "PUSH",
											"source": 6,
											"value": "FF"
										},
										{
											"begin": 5374,
											"end": 5387,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "495"
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "209"
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "422"
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "tag",
											"source": 6,
											"value": "495"
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2383,
											"end": 2396,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2383,
											"end": 2396,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 2383,
											"end": 2396,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "498"
										},
										{
											"begin": 2383,
											"end": 2396,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2383,
											"end": 2388,
											"name": "PUSH",
											"source": 9,
											"value": "36"
										},
										{
											"begin": 2383,
											"end": 2388,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2383,
											"end": 2396,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2383,
											"end": 2396,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 2383,
											"end": 2396,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2383,
											"end": 2396,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2383,
											"end": 2396,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "499"
										},
										{
											"begin": 2383,
											"end": 2396,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 2383,
											"end": 2396,
											"name": "tag",
											"source": 9,
											"value": "498"
										},
										{
											"begin": 2383,
											"end": 2396,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2406,
											"end": 2423,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 2406,
											"end": 2423,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 2406,
											"end": 2423,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "203"
										},
										{
											"begin": 2406,
											"end": 2423,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2406,
											"end": 2413,
											"name": "PUSH",
											"source": 9,
											"value": "37"
										},
										{
											"begin": 2406,
											"end": 2413,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2406,
											"end": 2423,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2406,
											"end": 2423,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 2406,
											"end": 2423,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2406,
											"end": 2423,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2406,
											"end": 2423,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "499"
										},
										{
											"begin": 2406,
											"end": 2423,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 1166,
											"end": 1261,
											"name": "tag",
											"source": 8,
											"value": "435"
										},
										{
											"begin": 1166,
											"end": 1261,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5374,
											"end": 5387,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 5374,
											"end": 5387,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 5374,
											"end": 5387,
											"name": "PUSH",
											"source": 6,
											"value": "100"
										},
										{
											"begin": 5374,
											"end": 5387,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5374,
											"end": 5387,
											"name": "DIV",
											"source": 6
										},
										{
											"begin": 5374,
											"end": 5387,
											"name": "PUSH",
											"source": 6,
											"value": "FF"
										},
										{
											"begin": 5374,
											"end": 5387,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "502"
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "209"
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "422"
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "tag",
											"source": 6,
											"value": "502"
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1239,
											"end": 1246,
											"name": "PUSH",
											"source": 8,
											"value": "97"
										},
										{
											"begin": 1239,
											"end": 1254,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1239,
											"end": 1254,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1239,
											"end": 1254,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 1239,
											"end": 1254,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1239,
											"end": 1254,
											"name": "SSTORE",
											"source": 8
										},
										{
											"begin": 1166,
											"end": 1261,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 2010,
											"end": 2116,
											"name": "tag",
											"source": 8,
											"value": "454"
										},
										{
											"begin": 2010,
											"end": 2116,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1928,
											"end": 1935,
											"name": "PUSH",
											"source": 8,
											"value": "97"
										},
										{
											"begin": 1928,
											"end": 1935,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 1928,
											"end": 1935,
											"name": "PUSH",
											"source": 8,
											"value": "FF"
										},
										{
											"begin": 1928,
											"end": 1935,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 2079,
											"end": 2088,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 2071,
											"end": 2109,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "427"
										},
										{
											"begin": 2071,
											"end": 2109,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 2071,
											"end": 2109,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 2071,
											"end": 2109,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2071,
											"end": 2109,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2071,
											"end": 2109,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 16519,
											"end": 16521,
											"name": "PUSH",
											"source": 22,
											"value": "20"
										},
										{
											"begin": 2071,
											"end": 2109,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 2071,
											"end": 2109,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2071,
											"end": 2109,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 16501,
											"end": 16522,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 16558,
											"end": 16560,
											"name": "PUSH",
											"source": 22,
											"value": "10"
										},
										{
											"begin": 16538,
											"end": 16556,
											"name": "PUSH",
											"source": 22,
											"value": "24"
										},
										{
											"begin": 16538,
											"end": 16556,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 16538,
											"end": 16556,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 16531,
											"end": 16561,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "14185D5CD8589B194E881C185D5CD959"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "82"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 16577,
											"end": 16595,
											"name": "PUSH",
											"source": 22,
											"value": "44"
										},
										{
											"begin": 16577,
											"end": 16595,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 16577,
											"end": 16595,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 16570,
											"end": 16616,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 16633,
											"end": 16651,
											"name": "PUSH",
											"source": 22,
											"value": "64"
										},
										{
											"begin": 16633,
											"end": 16651,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 2071,
											"end": 2109,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "209"
										},
										{
											"begin": 16317,
											"end": 16657,
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 2473,
											"end": 2622,
											"name": "tag",
											"source": 16,
											"value": "468"
										},
										{
											"begin": 2473,
											"end": 2622,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 2531,
											"end": 2544,
											"name": "PUSH",
											"source": 16,
											"value": "60"
										},
										{
											"begin": 2563,
											"end": 2615,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "176"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2575,
											"end": 2597,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 2575,
											"end": 2597,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 376,
											"end": 378,
											"name": "PUSH",
											"source": 16,
											"value": "14"
										},
										{
											"begin": 1884,
											"end": 2321,
											"name": "tag",
											"source": 16,
											"value": "470"
										},
										{
											"begin": 1884,
											"end": 2321,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 1959,
											"end": 1972,
											"name": "PUSH",
											"source": 16,
											"value": "60"
										},
										{
											"begin": 1984,
											"end": 2003,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 2016,
											"end": 2026,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "514"
										},
										{
											"begin": 2020,
											"end": 2026,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 2016,
											"end": 2017,
											"name": "PUSH",
											"source": 16,
											"value": "2"
										},
										{
											"begin": 2016,
											"end": 2026,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "294"
										},
										{
											"begin": 2016,
											"end": 2026,
											"name": "JUMP",
											"source": 16,
											"value": "[in]"
										},
										{
											"begin": 2016,
											"end": 2026,
											"name": "tag",
											"source": 16,
											"value": "514"
										},
										{
											"begin": 2016,
											"end": 2026,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 2016,
											"end": 2030,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "515"
										},
										{
											"begin": 2016,
											"end": 2030,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 2029,
											"end": 2030,
											"name": "PUSH",
											"source": 16,
											"value": "2"
										},
										{
											"begin": 2016,
											"end": 2030,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "236"
										},
										{
											"begin": 2016,
											"end": 2030,
											"name": "JUMP",
											"source": 16,
											"value": "[in]"
										},
										{
											"begin": 2016,
											"end": 2030,
											"name": "tag",
											"source": 16,
											"value": "515"
										},
										{
											"begin": 2016,
											"end": 2030,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 2006,
											"end": 2031,
											"name": "PUSH",
											"source": 16,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2006,
											"end": 2031,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 2006,
											"end": 2031,
											"name": "GT",
											"source": 16
										},
										{
											"begin": 2006,
											"end": 2031,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 2006,
											"end": 2031,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "517"
										},
										{
											"begin": 2006,
											"end": 2031,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 2006,
											"end": 2031,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "517"
										},
										{
											"begin": 2006,
											"end": 2031,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "228"
										},
										{
											"begin": 2006,
											"end": 2031,
											"name": "JUMP",
											"source": 16,
											"value": "[in]"
										},
										{
											"begin": 2006,
											"end": 2031,
											"name": "tag",
											"source": 16,
											"value": "517"
										},
										{
											"begin": 2006,
											"end": 2031,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 2006,
											"end": 2031,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 2006,
											"end": 2031,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 2006,
											"end": 2031,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 2006,
											"end": 2031,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 2006,
											"end": 2031,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 2006,
											"end": 2031,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 2006,
											"end": 2031,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 2006,
											"end": 2031,
											"name": "PUSH",
											"source": 16,
											"value": "1F"
										},
										{
											"begin": 2006,
											"end": 2031,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 2006,
											"end": 2031,
											"name": "PUSH",
											"source": 16,
											"value": "1F"
										},
										{
											"begin": 2006,
											"end": 2031,
											"name": "NOT",
											"source": 16
										},
										{
											"begin": 2006,
											"end": 2031,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 2006,
											"end": 2031,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 2006,
											"end": 2031,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 2006,
											"end": 2031,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 2006,
											"end": 2031,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 2006,
											"end": 2031,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 2006,
											"end": 2031,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 2006,
											"end": 2031,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 2006,
											"end": 2031,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 2006,
											"end": 2031,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "518"
										},
										{
											"begin": 2006,
											"end": 2031,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 2006,
											"end": 2031,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 2006,
											"end": 2031,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 2006,
											"end": 2031,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 2006,
											"end": 2031,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 2006,
											"end": 2031,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 2006,
											"end": 2031,
											"name": "CALLDATASIZE",
											"source": 16
										},
										{
											"begin": 2006,
											"end": 2031,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 2006,
											"end": 2031,
											"name": "CALLDATACOPY",
											"source": 16
										},
										{
											"begin": 2006,
											"end": 2031,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 2006,
											"end": 2031,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2006,
											"end": 2031,
											"name": "tag",
											"source": 16,
											"value": "518"
										},
										{
											"begin": 2006,
											"end": 2031,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 2006,
											"end": 2031,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 1984,
											"end": 2031,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 1984,
											"end": 2031,
											"name": "POP",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FC"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2041,
											"end": 2047,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 2048,
											"end": 2049,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 2041,
											"end": 2050,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 2041,
											"end": 2050,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 2041,
											"end": 2050,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 2041,
											"end": 2050,
											"name": "LT",
											"source": 16
										},
										{
											"begin": 2041,
											"end": 2050,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "520"
										},
										{
											"begin": 2041,
											"end": 2050,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 2041,
											"end": 2050,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "520"
										},
										{
											"begin": 2041,
											"end": 2050,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "521"
										},
										{
											"begin": 2041,
											"end": 2050,
											"name": "JUMP",
											"source": 16,
											"value": "[in]"
										},
										{
											"begin": 2041,
											"end": 2050,
											"name": "tag",
											"source": 16,
											"value": "520"
										},
										{
											"begin": 2041,
											"end": 2050,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 2041,
											"end": 2050,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 2041,
											"end": 2050,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 2041,
											"end": 2050,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 2041,
											"end": 2056,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2041,
											"end": 2056,
											"name": "NOT",
											"source": 16
										},
										{
											"begin": 2041,
											"end": 2056,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 2041,
											"end": 2056,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 2041,
											"end": 2056,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 2041,
											"end": 2056,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 2041,
											"end": 2056,
											"name": "BYTE",
											"source": 16
										},
										{
											"begin": 2041,
											"end": 2056,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 2041,
											"end": 2056,
											"name": "MSTORE8",
											"source": 16
										},
										{
											"begin": 2041,
											"end": 2056,
											"name": "POP",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FB"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2066,
											"end": 2072,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 2073,
											"end": 2074,
											"name": "PUSH",
											"source": 16,
											"value": "1"
										},
										{
											"begin": 2066,
											"end": 2075,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 2066,
											"end": 2075,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 2066,
											"end": 2075,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 2066,
											"end": 2075,
											"name": "LT",
											"source": 16
										},
										{
											"begin": 2066,
											"end": 2075,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "523"
										},
										{
											"begin": 2066,
											"end": 2075,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 2066,
											"end": 2075,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "523"
										},
										{
											"begin": 2066,
											"end": 2075,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "521"
										},
										{
											"begin": 2066,
											"end": 2075,
											"name": "JUMP",
											"source": 16,
											"value": "[in]"
										},
										{
											"begin": 2066,
											"end": 2075,
											"name": "tag",
											"source": 16,
											"value": "523"
										},
										{
											"begin": 2066,
											"end": 2075,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 2066,
											"end": 2075,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 2066,
											"end": 2075,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 2066,
											"end": 2075,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 2066,
											"end": 2081,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2066,
											"end": 2081,
											"name": "NOT",
											"source": 16
										},
										{
											"begin": 2066,
											"end": 2081,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 2066,
											"end": 2081,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 2066,
											"end": 2081,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 2066,
											"end": 2081,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 2066,
											"end": 2081,
											"name": "BYTE",
											"source": 16
										},
										{
											"begin": 2066,
											"end": 2081,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 2066,
											"end": 2081,
											"name": "MSTORE8",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2096,
											"end": 2105,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 2108,
											"end": 2118,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "527"
										},
										{
											"begin": 2112,
											"end": 2118,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 2108,
											"end": 2109,
											"name": "PUSH",
											"source": 16,
											"value": "2"
										},
										{
											"begin": 2108,
											"end": 2118,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "294"
										},
										{
											"begin": 2108,
											"end": 2118,
											"name": "JUMP",
											"source": 16,
											"value": "[in]"
										},
										{
											"begin": 2108,
											"end": 2118,
											"name": "tag",
											"source": 16,
											"value": "527"
										},
										{
											"begin": 2108,
											"end": 2118,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 2108,
											"end": 2122,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "528"
										},
										{
											"begin": 2108,
											"end": 2122,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 2121,
											"end": 2122,
											"name": "PUSH",
											"source": 16,
											"value": "1"
										},
										{
											"begin": 2108,
											"end": 2122,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "236"
										},
										{
											"begin": 2108,
											"end": 2122,
											"name": "JUMP",
											"source": 16,
											"value": "[in]"
										},
										{
											"begin": 2108,
											"end": 2122,
											"name": "tag",
											"source": 16,
											"value": "528"
										},
										{
											"begin": 2108,
											"end": 2122,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 2096,
											"end": 2122,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 2096,
											"end": 2122,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 2091,
											"end": 2219,
											"name": "tag",
											"source": 16,
											"value": "524"
										},
										{
											"begin": 2091,
											"end": 2219,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 2128,
											"end": 2129,
											"name": "PUSH",
											"source": 16,
											"value": "1"
										},
										{
											"begin": 2124,
											"end": 2125,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 2124,
											"end": 2129,
											"name": "GT",
											"source": 16
										},
										{
											"begin": 2091,
											"end": 2219,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 2091,
											"end": 2219,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "525"
										},
										{
											"begin": 2091,
											"end": 2219,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "181899199A1A9B1B9C1CB0B131B232B3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "81"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2171,
											"end": 2176,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 2179,
											"end": 2182,
											"name": "PUSH",
											"source": 16,
											"value": "F"
										},
										{
											"begin": 2171,
											"end": 2182,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 2162,
											"end": 2183,
											"name": "PUSH",
											"source": 16,
											"value": "10"
										},
										{
											"begin": 2162,
											"end": 2183,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 2162,
											"end": 2183,
											"name": "LT",
											"source": 16
										},
										{
											"begin": 2162,
											"end": 2183,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "530"
										},
										{
											"begin": 2162,
											"end": 2183,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 2162,
											"end": 2183,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "530"
										},
										{
											"begin": 2162,
											"end": 2183,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "521"
										},
										{
											"begin": 2162,
											"end": 2183,
											"name": "JUMP",
											"source": 16,
											"value": "[in]"
										},
										{
											"begin": 2162,
											"end": 2183,
											"name": "tag",
											"source": 16,
											"value": "530"
										},
										{
											"begin": 2162,
											"end": 2183,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 2162,
											"end": 2183,
											"name": "BYTE",
											"source": 16
										},
										{
											"begin": 2162,
											"end": 2183,
											"name": "PUSH",
											"source": 16,
											"value": "F8"
										},
										{
											"begin": 2162,
											"end": 2183,
											"name": "SHL",
											"source": 16
										},
										{
											"begin": 2150,
											"end": 2156,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 2157,
											"end": 2158,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 2150,
											"end": 2159,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 2150,
											"end": 2159,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 2150,
											"end": 2159,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 2150,
											"end": 2159,
											"name": "LT",
											"source": 16
										},
										{
											"begin": 2150,
											"end": 2159,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "532"
										},
										{
											"begin": 2150,
											"end": 2159,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 2150,
											"end": 2159,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "532"
										},
										{
											"begin": 2150,
											"end": 2159,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "521"
										},
										{
											"begin": 2150,
											"end": 2159,
											"name": "JUMP",
											"source": 16,
											"value": "[in]"
										},
										{
											"begin": 2150,
											"end": 2159,
											"name": "tag",
											"source": 16,
											"value": "532"
										},
										{
											"begin": 2150,
											"end": 2159,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 2150,
											"end": 2159,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 2150,
											"end": 2159,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 2150,
											"end": 2159,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 2150,
											"end": 2183,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2150,
											"end": 2183,
											"name": "NOT",
											"source": 16
										},
										{
											"begin": 2150,
											"end": 2183,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 2150,
											"end": 2183,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 2150,
											"end": 2183,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 2150,
											"end": 2183,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 2150,
											"end": 2183,
											"name": "BYTE",
											"source": 16
										},
										{
											"begin": 2150,
											"end": 2183,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 2150,
											"end": 2183,
											"name": "MSTORE8",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2207,
											"end": 2208,
											"name": "PUSH",
											"source": 16,
											"value": "4"
										},
										{
											"begin": 2197,
											"end": 2208,
											"name": "SWAP5",
											"source": 16
										},
										{
											"begin": 2197,
											"end": 2208,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 2197,
											"end": 2208,
											"name": "SWAP5",
											"source": 16
										},
										{
											"begin": 2197,
											"end": 2208,
											"name": "SHR",
											"source": 16
										},
										{
											"begin": 2197,
											"end": 2208,
											"name": "SWAP4",
											"source": 16
										},
										{
											"begin": 2131,
											"end": 2134,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "533"
										},
										{
											"begin": 2131,
											"end": 2134,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 2131,
											"end": 2134,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "534"
										},
										{
											"begin": 2131,
											"end": 2134,
											"name": "JUMP",
											"source": 16,
											"value": "[in]"
										},
										{
											"begin": 2131,
											"end": 2134,
											"name": "tag",
											"source": 16,
											"value": "533"
										},
										{
											"begin": 2131,
											"end": 2134,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 2131,
											"end": 2134,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 2131,
											"end": 2134,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 2091,
											"end": 2219,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "524"
										},
										{
											"begin": 2091,
											"end": 2219,
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 2091,
											"end": 2219,
											"name": "tag",
											"source": 16,
											"value": "525"
										},
										{
											"begin": 2091,
											"end": 2219,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2236,
											"end": 2246,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 2236,
											"end": 2246,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 2228,
											"end": 2283,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "535"
										},
										{
											"begin": 2228,
											"end": 2283,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 2228,
											"end": 2283,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 2228,
											"end": 2283,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2228,
											"end": 2283,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 2228,
											"end": 2283,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 17137,
											"end": 17139,
											"name": "PUSH",
											"source": 22,
											"value": "20"
										},
										{
											"begin": 2228,
											"end": 2283,
											"name": "PUSH",
											"source": 16,
											"value": "4"
										},
										{
											"begin": 2228,
											"end": 2283,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 2228,
											"end": 2283,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 17119,
											"end": 17140,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 17119,
											"end": 17140,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 17119,
											"end": 17140,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 17156,
											"end": 17174,
											"name": "PUSH",
											"source": 22,
											"value": "24"
										},
										{
											"begin": 17156,
											"end": 17174,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 17156,
											"end": 17174,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 17149,
											"end": 17179,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 17215,
											"end": 17249,
											"name": "PUSH",
											"source": 22,
											"value": "537472696E67733A20686578206C656E67746820696E73756666696369656E74"
										},
										{
											"begin": 17195,
											"end": 17213,
											"name": "PUSH",
											"source": 22,
											"value": "44"
										},
										{
											"begin": 17195,
											"end": 17213,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 17195,
											"end": 17213,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 17188,
											"end": 17250,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 17267,
											"end": 17285,
											"name": "PUSH",
											"source": 22,
											"value": "64"
										},
										{
											"begin": 17267,
											"end": 17285,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 2228,
											"end": 2283,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "209"
										},
										{
											"begin": 16935,
											"end": 17291,
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 2228,
											"end": 2283,
											"name": "tag",
											"source": 16,
											"value": "535"
										},
										{
											"begin": 2228,
											"end": 2283,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 2307,
											"end": 2313,
											"name": "SWAP4",
											"source": 16
										},
										{
											"begin": 1884,
											"end": 2321,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1884,
											"end": 2321,
											"name": "JUMP",
											"source": 16,
											"value": "[out]"
										},
										{
											"begin": 2086,
											"end": 2238,
											"name": "tag",
											"source": 4,
											"value": "484"
										},
										{
											"begin": 2086,
											"end": 2238,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2152,
											"end": 2189,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "539"
										},
										{
											"begin": 2171,
											"end": 2188,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 2152,
											"end": 2170,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "383"
										},
										{
											"begin": 2152,
											"end": 2189,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 2152,
											"end": 2189,
											"name": "tag",
											"source": 4,
											"value": "539"
										},
										{
											"begin": 2152,
											"end": 2189,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2204,
											"end": 2231,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 2204,
											"end": 2231,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2204,
											"end": 2231,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 2204,
											"end": 2231,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 2204,
											"end": 2231,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2204,
											"end": 2231,
											"name": "PUSH",
											"source": 4,
											"value": "BC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B"
										},
										{
											"begin": 2204,
											"end": 2231,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2204,
											"end": 2231,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 2204,
											"end": 2231,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2204,
											"end": 2231,
											"name": "LOG2",
											"source": 4
										},
										{
											"begin": 2086,
											"end": 2238,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 2086,
											"end": 2238,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 6685,
											"end": 6883,
											"name": "tag",
											"source": 13,
											"value": "488"
										},
										{
											"begin": 6685,
											"end": 6883,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 6768,
											"end": 6780,
											"name": "PUSH",
											"source": 13,
											"value": "60"
										},
										{
											"begin": 6799,
											"end": 6876,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "535"
										},
										{
											"begin": 6820,
											"end": 6826,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 6828,
											"end": 6832,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 6799,
											"end": 6876,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 6799,
											"end": 6876,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 6799,
											"end": 6876,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 6799,
											"end": 6876,
											"name": "PUSH",
											"source": 13,
											"value": "60"
										},
										{
											"begin": 6799,
											"end": 6876,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 6799,
											"end": 6876,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 6799,
											"end": 6876,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 6799,
											"end": 6876,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 6799,
											"end": 6876,
											"name": "PUSH",
											"source": 13,
											"value": "27"
										},
										{
											"begin": 6799,
											"end": 6876,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 6799,
											"end": 6876,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 6799,
											"end": 6876,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 6799,
											"end": 6876,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 6799,
											"end": 6876,
											"name": "PUSH data",
											"source": 13,
											"value": "9FDCD12E4B726339B32A442B0A448365D5D85C96B2D2CFF917B4F66C63110398"
										},
										{
											"begin": 6799,
											"end": 6876,
											"name": "PUSH",
											"source": 13,
											"value": "27"
										},
										{
											"begin": 6799,
											"end": 6876,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 6799,
											"end": 6876,
											"name": "CODECOPY",
											"source": 13
										},
										{
											"begin": 7210,
											"end": 7222,
											"name": "PUSH",
											"source": 13,
											"value": "60"
										},
										{
											"begin": 7235,
											"end": 7247,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 7249,
											"end": 7272,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 7276,
											"end": 7282,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7276,
											"end": 7295,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 7296,
											"end": 7300,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 7276,
											"end": 7301,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 7276,
											"end": 7301,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 7276,
											"end": 7301,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "544"
										},
										{
											"begin": 7276,
											"end": 7301,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 7276,
											"end": 7301,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 7276,
											"end": 7301,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "545"
										},
										{
											"begin": 7276,
											"end": 7301,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 7276,
											"end": 7301,
											"name": "tag",
											"source": 13,
											"value": "544"
										},
										{
											"begin": 7276,
											"end": 7301,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 7276,
											"end": 7301,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 7276,
											"end": 7301,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 7276,
											"end": 7301,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 7276,
											"end": 7301,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 7276,
											"end": 7301,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 7276,
											"end": 7301,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 7276,
											"end": 7301,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 7276,
											"end": 7301,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 7276,
											"end": 7301,
											"name": "GAS",
											"source": 13
										},
										{
											"begin": 7276,
											"end": 7301,
											"name": "DELEGATECALL",
											"source": 13
										},
										{
											"begin": 7276,
											"end": 7301,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 7276,
											"end": 7301,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 7276,
											"end": 7301,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 7276,
											"end": 7301,
											"name": "RETURNDATASIZE",
											"source": 13
										},
										{
											"begin": 7276,
											"end": 7301,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 7276,
											"end": 7301,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 7276,
											"end": 7301,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 7276,
											"end": 7301,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 7276,
											"end": 7301,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "548"
										},
										{
											"begin": 7276,
											"end": 7301,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 7276,
											"end": 7301,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 7276,
											"end": 7301,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 7276,
											"end": 7301,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 7276,
											"end": 7301,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 7276,
											"end": 7301,
											"name": "PUSH",
											"source": 13,
											"value": "1F"
										},
										{
											"begin": 7276,
											"end": 7301,
											"name": "NOT",
											"source": 13
										},
										{
											"begin": 7276,
											"end": 7301,
											"name": "PUSH",
											"source": 13,
											"value": "3F"
										},
										{
											"begin": 7276,
											"end": 7301,
											"name": "RETURNDATASIZE",
											"source": 13
										},
										{
											"begin": 7276,
											"end": 7301,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 7276,
											"end": 7301,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 7276,
											"end": 7301,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 7276,
											"end": 7301,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 7276,
											"end": 7301,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 7276,
											"end": 7301,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 7276,
											"end": 7301,
											"name": "RETURNDATASIZE",
											"source": 13
										},
										{
											"begin": 7276,
											"end": 7301,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 7276,
											"end": 7301,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 7276,
											"end": 7301,
											"name": "RETURNDATASIZE",
											"source": 13
										},
										{
											"begin": 7276,
											"end": 7301,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 7276,
											"end": 7301,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 7276,
											"end": 7301,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 7276,
											"end": 7301,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 7276,
											"end": 7301,
											"name": "RETURNDATACOPY",
											"source": 13
										},
										{
											"begin": 7276,
											"end": 7301,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "547"
										},
										{
											"begin": 7276,
											"end": 7301,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 7276,
											"end": 7301,
											"name": "tag",
											"source": 13,
											"value": "548"
										},
										{
											"begin": 7276,
											"end": 7301,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 7276,
											"end": 7301,
											"name": "PUSH",
											"source": 13,
											"value": "60"
										},
										{
											"begin": 7276,
											"end": 7301,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 7276,
											"end": 7301,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 7276,
											"end": 7301,
											"name": "tag",
											"source": 13,
											"value": "547"
										},
										{
											"begin": 7276,
											"end": 7301,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 7276,
											"end": 7301,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 7234,
											"end": 7301,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 7234,
											"end": 7301,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 7234,
											"end": 7301,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 7234,
											"end": 7301,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 7318,
											"end": 7387,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "549"
										},
										{
											"begin": 7345,
											"end": 7351,
											"name": "DUP7",
											"source": 13
										},
										{
											"begin": 7353,
											"end": 7360,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 7362,
											"end": 7372,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 7374,
											"end": 7386,
											"name": "DUP8",
											"source": 13
										},
										{
											"begin": 7318,
											"end": 7344,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "550"
										},
										{
											"begin": 7318,
											"end": 7387,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 7318,
											"end": 7387,
											"name": "tag",
											"source": 13,
											"value": "549"
										},
										{
											"begin": 7318,
											"end": 7387,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 7311,
											"end": 7387,
											"name": "SWAP7",
											"source": 13
										},
										{
											"begin": 7069,
											"end": 7394,
											"name": "SWAP6",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7069,
											"end": 7394,
											"name": "JUMP",
											"source": 13,
											"value": "[out]"
										},
										{
											"begin": 7682,
											"end": 8310,
											"name": "tag",
											"source": 13,
											"value": "550"
										},
										{
											"begin": 7682,
											"end": 8310,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 7862,
											"end": 7874,
											"name": "PUSH",
											"source": 13,
											"value": "60"
										},
										{
											"begin": 7890,
											"end": 7897,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 7886,
											"end": 8304,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 7886,
											"end": 8304,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "552"
										},
										{
											"begin": 7886,
											"end": 8304,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 7917,
											"end": 7934,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 7917,
											"end": 7934,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 7913,
											"end": 8199,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "555"
										},
										{
											"begin": 7913,
											"end": 8199,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1713,
											"end": 1732,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 1713,
											"end": 1732,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 1713,
											"end": 1732,
											"name": "EXTCODESIZE",
											"source": 13
										},
										{
											"begin": 8124,
											"end": 8184,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "555"
										},
										{
											"begin": 8124,
											"end": 8184,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 8124,
											"end": 8184,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 8124,
											"end": 8184,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8124,
											"end": 8184,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 8124,
											"end": 8184,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 17777,
											"end": 17779,
											"name": "PUSH",
											"source": 22,
											"value": "20"
										},
										{
											"begin": 8124,
											"end": 8184,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 8124,
											"end": 8184,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 8124,
											"end": 8184,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 17759,
											"end": 17780,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 17816,
											"end": 17818,
											"name": "PUSH",
											"source": 22,
											"value": "1D"
										},
										{
											"begin": 17796,
											"end": 17814,
											"name": "PUSH",
											"source": 22,
											"value": "24"
										},
										{
											"begin": 17796,
											"end": 17814,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 17796,
											"end": 17814,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 17789,
											"end": 17819,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 17855,
											"end": 17886,
											"name": "PUSH",
											"source": 22,
											"value": "416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000"
										},
										{
											"begin": 17835,
											"end": 17853,
											"name": "PUSH",
											"source": 22,
											"value": "44"
										},
										{
											"begin": 17835,
											"end": 17853,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 17835,
											"end": 17853,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 17828,
											"end": 17887,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 17904,
											"end": 17922,
											"name": "PUSH",
											"source": 22,
											"value": "64"
										},
										{
											"begin": 17904,
											"end": 17922,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 8124,
											"end": 8184,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "209"
										},
										{
											"begin": 17575,
											"end": 17928,
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 8124,
											"end": 8184,
											"name": "tag",
											"source": 13,
											"value": "555"
										},
										{
											"begin": 8124,
											"end": 8184,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 8219,
											"end": 8229,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 8212,
											"end": 8229,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "559"
										},
										{
											"begin": 8212,
											"end": 8229,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 7886,
											"end": 8304,
											"name": "tag",
											"source": 13,
											"value": "552"
										},
										{
											"begin": 7886,
											"end": 8304,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 8260,
											"end": 8293,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "559"
										},
										{
											"begin": 8268,
											"end": 8278,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 8280,
											"end": 8292,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 8260,
											"end": 8267,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "560"
										},
										{
											"begin": 8260,
											"end": 8293,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 8260,
											"end": 8293,
											"name": "tag",
											"source": 13,
											"value": "559"
										},
										{
											"begin": 8260,
											"end": 8293,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 7682,
											"end": 8310,
											"name": "SWAP5",
											"source": 13
										},
										{
											"begin": 7682,
											"end": 8310,
											"name": "SWAP4",
											"source": 13
										},
										{
											"begin": 7682,
											"end": 8310,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 7682,
											"end": 8310,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 7682,
											"end": 8310,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 7682,
											"end": 8310,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 7682,
											"end": 8310,
											"name": "JUMP",
											"source": 13,
											"value": "[out]"
										},
										{
											"begin": 8832,
											"end": 9372,
											"name": "tag",
											"source": 13,
											"value": "560"
										},
										{
											"begin": 8832,
											"end": 9372,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 8991,
											"end": 9008,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 8991,
											"end": 9008,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 8991,
											"end": 9012,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 8987,
											"end": 9366,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "562"
										},
										{
											"begin": 8987,
											"end": 9366,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 9219,
											"end": 9229,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 9213,
											"end": 9230,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 9275,
											"end": 9290,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 9262,
											"end": 9272,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 9258,
											"end": 9260,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 9254,
											"end": 9273,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 9247,
											"end": 9291,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 8987,
											"end": 9366,
											"name": "tag",
											"source": 13,
											"value": "562"
										},
										{
											"begin": 8987,
											"end": 9366,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 9342,
											"end": 9354,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 9335,
											"end": 9355,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 9335,
											"end": 9355,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 9335,
											"end": 9355,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 9335,
											"end": 9355,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 9335,
											"end": 9355,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 9335,
											"end": 9355,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 9335,
											"end": 9355,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "209"
										},
										{
											"begin": 9335,
											"end": 9355,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 9335,
											"end": 9355,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 9335,
											"end": 9355,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "49"
										},
										{
											"begin": 9335,
											"end": 9355,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "499"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "565"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "180"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMP",
											"source": -1,
											"value": "[in]"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "565"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "KECCAK256",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DIV",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "567"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPI",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP6",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "570"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "567"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "LT",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "568"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPI",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "AND",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "OR",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP6",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "570"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "568"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP6",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ISZERO",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "570"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPI",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "569"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "GT",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ISZERO",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "570"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPI",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "569"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "570"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "571"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "572"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMP",
											"source": -1,
											"value": "[in]"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "571"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMP",
											"source": -1,
											"value": "[out]"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "572"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "573"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "GT",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ISZERO",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "571"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPI",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "573"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMP",
											"source": -1
										},
										{
											"begin": 14,
											"end": 300,
											"name": "tag",
											"source": 22,
											"value": "41"
										},
										{
											"begin": 14,
											"end": 300,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 72,
											"end": 78,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 125,
											"end": 127,
											"name": "PUSH",
											"source": 22,
											"value": "20"
										},
										{
											"begin": 113,
											"end": 122,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 104,
											"end": 111,
											"name": "DUP5",
											"source": 22
										},
										{
											"begin": 100,
											"end": 123,
											"name": "SUB",
											"source": 22
										},
										{
											"begin": 96,
											"end": 128,
											"name": "SLT",
											"source": 22
										},
										{
											"begin": 93,
											"end": 145,
											"name": "ISZERO",
											"source": 22
										},
										{
											"begin": 93,
											"end": 145,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "582"
										},
										{
											"begin": 93,
											"end": 145,
											"name": "JUMPI",
											"source": 22
										},
										{
											"begin": 141,
											"end": 142,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 138,
											"end": 139,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 131,
											"end": 143,
											"name": "REVERT",
											"source": 22
										},
										{
											"begin": 93,
											"end": 145,
											"name": "tag",
											"source": 22,
											"value": "582"
										},
										{
											"begin": 93,
											"end": 145,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 167,
											"end": 190,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 167,
											"end": 190,
											"name": "CALLDATALOAD",
											"source": 22
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 219,
											"end": 251,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 219,
											"end": 251,
											"name": "AND",
											"source": 22
										},
										{
											"begin": 209,
											"end": 252,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 209,
											"end": 252,
											"name": "EQ",
											"source": 22
										},
										{
											"begin": 199,
											"end": 270,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "535"
										},
										{
											"begin": 199,
											"end": 270,
											"name": "JUMPI",
											"source": 22
										},
										{
											"begin": 266,
											"end": 267,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 263,
											"end": 264,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 256,
											"end": 268,
											"name": "REVERT",
											"source": 22
										},
										{
											"begin": 497,
											"end": 755,
											"name": "tag",
											"source": 22,
											"value": "575"
										},
										{
											"begin": 497,
											"end": 755,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 569,
											"end": 570,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 579,
											"end": 692,
											"name": "tag",
											"source": 22,
											"value": "586"
										},
										{
											"begin": 579,
											"end": 692,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 593,
											"end": 599,
											"name": "DUP4",
											"source": 22
										},
										{
											"begin": 590,
											"end": 591,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 587,
											"end": 600,
											"name": "LT",
											"source": 22
										},
										{
											"begin": 579,
											"end": 692,
											"name": "ISZERO",
											"source": 22
										},
										{
											"begin": 579,
											"end": 692,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "588"
										},
										{
											"begin": 579,
											"end": 692,
											"name": "JUMPI",
											"source": 22
										},
										{
											"begin": 669,
											"end": 680,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 669,
											"end": 680,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 669,
											"end": 680,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 663,
											"end": 681,
											"name": "MLOAD",
											"source": 22
										},
										{
											"begin": 650,
											"end": 661,
											"name": "DUP4",
											"source": 22
										},
										{
											"begin": 650,
											"end": 661,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 650,
											"end": 661,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 643,
											"end": 682,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 615,
											"end": 617,
											"name": "PUSH",
											"source": 22,
											"value": "20"
										},
										{
											"begin": 608,
											"end": 618,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 579,
											"end": 692,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "586"
										},
										{
											"begin": 579,
											"end": 692,
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 579,
											"end": 692,
											"name": "tag",
											"source": 22,
											"value": "588"
										},
										{
											"begin": 579,
											"end": 692,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 710,
											"end": 716,
											"name": "DUP4",
											"source": 22
										},
										{
											"begin": 707,
											"end": 708,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 704,
											"end": 717,
											"name": "GT",
											"source": 22
										},
										{
											"begin": 701,
											"end": 749,
											"name": "ISZERO",
											"source": 22
										},
										{
											"begin": 701,
											"end": 749,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "344"
										},
										{
											"begin": 701,
											"end": 749,
											"name": "JUMPI",
											"source": 22
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 745,
											"end": 746,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 727,
											"end": 743,
											"name": "SWAP2",
											"source": 22
										},
										{
											"begin": 727,
											"end": 743,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 720,
											"end": 747,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 497,
											"end": 755,
											"name": "JUMP",
											"source": 22,
											"value": "[out]"
										},
										{
											"begin": 760,
											"end": 1143,
											"name": "tag",
											"source": 22,
											"value": "49"
										},
										{
											"begin": 760,
											"end": 1143,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 909,
											"end": 911,
											"name": "PUSH",
											"source": 22,
											"value": "20"
										},
										{
											"begin": 898,
											"end": 907,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 891,
											"end": 912,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 872,
											"end": 876,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 941,
											"end": 947,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 935,
											"end": 948,
											"name": "MLOAD",
											"source": 22
										},
										{
											"begin": 984,
											"end": 990,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 979,
											"end": 981,
											"name": "PUSH",
											"source": 22,
											"value": "20"
										},
										{
											"begin": 968,
											"end": 977,
											"name": "DUP5",
											"source": 22
										},
										{
											"begin": 964,
											"end": 982,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 957,
											"end": 991,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 1000,
											"end": 1066,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "591"
										},
										{
											"begin": 1059,
											"end": 1065,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 1054,
											"end": 1056,
											"name": "PUSH",
											"source": 22,
											"value": "40"
										},
										{
											"begin": 1043,
											"end": 1052,
											"name": "DUP6",
											"source": 22
										},
										{
											"begin": 1039,
											"end": 1057,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 1034,
											"end": 1036,
											"name": "PUSH",
											"source": 22,
											"value": "20"
										},
										{
											"begin": 1026,
											"end": 1032,
											"name": "DUP8",
											"source": 22
										},
										{
											"begin": 1022,
											"end": 1037,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 1000,
											"end": 1066,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "575"
										},
										{
											"begin": 1000,
											"end": 1066,
											"name": "JUMP",
											"source": 22,
											"value": "[in]"
										},
										{
											"begin": 1000,
											"end": 1066,
											"name": "tag",
											"source": 22,
											"value": "591"
										},
										{
											"begin": 1000,
											"end": 1066,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 1127,
											"end": 1129,
											"name": "PUSH",
											"source": 22,
											"value": "1F"
										},
										{
											"begin": 1106,
											"end": 1121,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1102,
											"end": 1131,
											"name": "AND",
											"source": 22
										},
										{
											"begin": 1087,
											"end": 1132,
											"name": "SWAP2",
											"source": 22
										},
										{
											"begin": 1087,
											"end": 1132,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 1087,
											"end": 1132,
											"name": "SWAP2",
											"source": 22
										},
										{
											"begin": 1087,
											"end": 1132,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 1134,
											"end": 1136,
											"name": "PUSH",
											"source": 22,
											"value": "40"
										},
										{
											"begin": 1083,
											"end": 1137,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 1083,
											"end": 1137,
											"name": "SWAP3",
											"source": 22
										},
										{
											"begin": 760,
											"end": 1143,
											"name": "SWAP2",
											"source": 22
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 760,
											"end": 1143,
											"name": "JUMP",
											"source": 22,
											"value": "[out]"
										},
										{
											"begin": 1148,
											"end": 1321,
											"name": "tag",
											"source": 22,
											"value": "576"
										},
										{
											"begin": 1148,
											"end": 1321,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 1216,
											"end": 1236,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 1216,
											"end": 1236,
											"name": "CALLDATALOAD",
											"source": 22
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1265,
											"end": 1296,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 1265,
											"end": 1296,
											"name": "AND",
											"source": 22
										},
										{
											"begin": 1255,
											"end": 1297,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 1255,
											"end": 1297,
											"name": "EQ",
											"source": 22
										},
										{
											"begin": 1245,
											"end": 1315,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "593"
										},
										{
											"begin": 1245,
											"end": 1315,
											"name": "JUMPI",
											"source": 22
										},
										{
											"begin": 1311,
											"end": 1312,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 1308,
											"end": 1309,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 1301,
											"end": 1313,
											"name": "REVERT",
											"source": 22
										},
										{
											"begin": 1245,
											"end": 1315,
											"name": "tag",
											"source": 22,
											"value": "593"
										},
										{
											"begin": 1245,
											"end": 1315,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 1148,
											"end": 1321,
											"name": "SWAP2",
											"source": 22
										},
										{
											"begin": 1148,
											"end": 1321,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 1148,
											"end": 1321,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 1148,
											"end": 1321,
											"name": "JUMP",
											"source": 22,
											"value": "[out]"
										},
										{
											"begin": 1326,
											"end": 1580,
											"name": "tag",
											"source": 22,
											"value": "53"
										},
										{
											"begin": 1326,
											"end": 1580,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 1394,
											"end": 1400,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 1402,
											"end": 1408,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 1455,
											"end": 1457,
											"name": "PUSH",
											"source": 22,
											"value": "40"
										},
										{
											"begin": 1443,
											"end": 1452,
											"name": "DUP4",
											"source": 22
										},
										{
											"begin": 1434,
											"end": 1441,
											"name": "DUP6",
											"source": 22
										},
										{
											"begin": 1430,
											"end": 1453,
											"name": "SUB",
											"source": 22
										},
										{
											"begin": 1426,
											"end": 1458,
											"name": "SLT",
											"source": 22
										},
										{
											"begin": 1423,
											"end": 1475,
											"name": "ISZERO",
											"source": 22
										},
										{
											"begin": 1423,
											"end": 1475,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "595"
										},
										{
											"begin": 1423,
											"end": 1475,
											"name": "JUMPI",
											"source": 22
										},
										{
											"begin": 1471,
											"end": 1472,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 1468,
											"end": 1469,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 1461,
											"end": 1473,
											"name": "REVERT",
											"source": 22
										},
										{
											"begin": 1423,
											"end": 1475,
											"name": "tag",
											"source": 22,
											"value": "595"
										},
										{
											"begin": 1423,
											"end": 1475,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 1494,
											"end": 1523,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "596"
										},
										{
											"begin": 1513,
											"end": 1522,
											"name": "DUP4",
											"source": 22
										},
										{
											"begin": 1494,
											"end": 1523,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "576"
										},
										{
											"begin": 1494,
											"end": 1523,
											"name": "JUMP",
											"source": 22,
											"value": "[in]"
										},
										{
											"begin": 1494,
											"end": 1523,
											"name": "tag",
											"source": 22,
											"value": "596"
										},
										{
											"begin": 1494,
											"end": 1523,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 1484,
											"end": 1523,
											"name": "SWAP5",
											"source": 22
										},
										{
											"begin": 1570,
											"end": 1572,
											"name": "PUSH",
											"source": 22,
											"value": "20"
										},
										{
											"begin": 1555,
											"end": 1573,
											"name": "SWAP4",
											"source": 22
										},
										{
											"begin": 1555,
											"end": 1573,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 1555,
											"end": 1573,
											"name": "SWAP4",
											"source": 22
										},
										{
											"begin": 1555,
											"end": 1573,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 1542,
											"end": 1574,
											"name": "CALLDATALOAD",
											"source": 22
										},
										{
											"begin": 1542,
											"end": 1574,
											"name": "SWAP4",
											"source": 22
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1326,
											"end": 1580,
											"name": "JUMP",
											"source": 22,
											"value": "[out]"
										},
										{
											"begin": 1767,
											"end": 2095,
											"name": "tag",
											"source": 22,
											"value": "64"
										},
										{
											"begin": 1767,
											"end": 2095,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 1844,
											"end": 1850,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 1852,
											"end": 1858,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 1860,
											"end": 1866,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 1913,
											"end": 1915,
											"name": "PUSH",
											"source": 22,
											"value": "60"
										},
										{
											"begin": 1901,
											"end": 1910,
											"name": "DUP5",
											"source": 22
										},
										{
											"begin": 1892,
											"end": 1899,
											"name": "DUP7",
											"source": 22
										},
										{
											"begin": 1888,
											"end": 1911,
											"name": "SUB",
											"source": 22
										},
										{
											"begin": 1884,
											"end": 1916,
											"name": "SLT",
											"source": 22
										},
										{
											"begin": 1881,
											"end": 1933,
											"name": "ISZERO",
											"source": 22
										},
										{
											"begin": 1881,
											"end": 1933,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "599"
										},
										{
											"begin": 1881,
											"end": 1933,
											"name": "JUMPI",
											"source": 22
										},
										{
											"begin": 1929,
											"end": 1930,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 1926,
											"end": 1927,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 1919,
											"end": 1931,
											"name": "REVERT",
											"source": 22
										},
										{
											"begin": 1881,
											"end": 1933,
											"name": "tag",
											"source": 22,
											"value": "599"
										},
										{
											"begin": 1881,
											"end": 1933,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 1952,
											"end": 1981,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "600"
										},
										{
											"begin": 1971,
											"end": 1980,
											"name": "DUP5",
											"source": 22
										},
										{
											"begin": 1952,
											"end": 1981,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "576"
										},
										{
											"begin": 1952,
											"end": 1981,
											"name": "JUMP",
											"source": 22,
											"value": "[in]"
										},
										{
											"begin": 1952,
											"end": 1981,
											"name": "tag",
											"source": 22,
											"value": "600"
										},
										{
											"begin": 1952,
											"end": 1981,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 1942,
											"end": 1981,
											"name": "SWAP3",
											"source": 22
										},
										{
											"begin": 1942,
											"end": 1981,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 2000,
											"end": 2038,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "601"
										},
										{
											"begin": 2034,
											"end": 2036,
											"name": "PUSH",
											"source": 22,
											"value": "20"
										},
										{
											"begin": 2023,
											"end": 2032,
											"name": "DUP6",
											"source": 22
										},
										{
											"begin": 2019,
											"end": 2037,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 2000,
											"end": 2038,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "576"
										},
										{
											"begin": 2000,
											"end": 2038,
											"name": "JUMP",
											"source": 22,
											"value": "[in]"
										},
										{
											"begin": 2000,
											"end": 2038,
											"name": "tag",
											"source": 22,
											"value": "601"
										},
										{
											"begin": 2000,
											"end": 2038,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 1990,
											"end": 2038,
											"name": "SWAP2",
											"source": 22
										},
										{
											"begin": 1990,
											"end": 2038,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 2085,
											"end": 2087,
											"name": "PUSH",
											"source": 22,
											"value": "40"
										},
										{
											"begin": 2074,
											"end": 2083,
											"name": "DUP5",
											"source": 22
										},
										{
											"begin": 2070,
											"end": 2088,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 2057,
											"end": 2089,
											"name": "CALLDATALOAD",
											"source": 22
										},
										{
											"begin": 2047,
											"end": 2089,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 2047,
											"end": 2089,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 1767,
											"end": 2095,
											"name": "SWAP3",
											"source": 22
										},
										{
											"begin": 1767,
											"end": 2095,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 1767,
											"end": 2095,
											"name": "SWAP3",
											"source": 22
										},
										{
											"begin": 1767,
											"end": 2095,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 1767,
											"end": 2095,
											"name": "SWAP3",
											"source": 22
										},
										{
											"begin": 1767,
											"end": 2095,
											"name": "JUMP",
											"source": 22,
											"value": "[out]"
										},
										{
											"begin": 2100,
											"end": 2280,
											"name": "tag",
											"source": 22,
											"value": "70"
										},
										{
											"begin": 2100,
											"end": 2280,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 2159,
											"end": 2165,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 2212,
											"end": 2214,
											"name": "PUSH",
											"source": 22,
											"value": "20"
										},
										{
											"begin": 2200,
											"end": 2209,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 2191,
											"end": 2198,
											"name": "DUP5",
											"source": 22
										},
										{
											"begin": 2187,
											"end": 2210,
											"name": "SUB",
											"source": 22
										},
										{
											"begin": 2183,
											"end": 2215,
											"name": "SLT",
											"source": 22
										},
										{
											"begin": 2180,
											"end": 2232,
											"name": "ISZERO",
											"source": 22
										},
										{
											"begin": 2180,
											"end": 2232,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "603"
										},
										{
											"begin": 2180,
											"end": 2232,
											"name": "JUMPI",
											"source": 22
										},
										{
											"begin": 2228,
											"end": 2229,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 2225,
											"end": 2226,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 2218,
											"end": 2230,
											"name": "REVERT",
											"source": 22
										},
										{
											"begin": 2180,
											"end": 2232,
											"name": "tag",
											"source": 22,
											"value": "603"
										},
										{
											"begin": 2180,
											"end": 2232,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2251,
											"end": 2274,
											"name": "CALLDATALOAD",
											"source": 22
										},
										{
											"begin": 2251,
											"end": 2274,
											"name": "SWAP2",
											"source": 22
										},
										{
											"begin": 2100,
											"end": 2280,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2100,
											"end": 2280,
											"name": "JUMP",
											"source": 22,
											"value": "[out]"
										},
										{
											"begin": 2467,
											"end": 2721,
											"name": "tag",
											"source": 22,
											"value": "77"
										},
										{
											"begin": 2467,
											"end": 2721,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 2535,
											"end": 2541,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 2543,
											"end": 2549,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 2596,
											"end": 2598,
											"name": "PUSH",
											"source": 22,
											"value": "40"
										},
										{
											"begin": 2584,
											"end": 2593,
											"name": "DUP4",
											"source": 22
										},
										{
											"begin": 2575,
											"end": 2582,
											"name": "DUP6",
											"source": 22
										},
										{
											"begin": 2571,
											"end": 2594,
											"name": "SUB",
											"source": 22
										},
										{
											"begin": 2567,
											"end": 2599,
											"name": "SLT",
											"source": 22
										},
										{
											"begin": 2564,
											"end": 2616,
											"name": "ISZERO",
											"source": 22
										},
										{
											"begin": 2564,
											"end": 2616,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "606"
										},
										{
											"begin": 2564,
											"end": 2616,
											"name": "JUMPI",
											"source": 22
										},
										{
											"begin": 2612,
											"end": 2613,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 2609,
											"end": 2610,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 2602,
											"end": 2614,
											"name": "REVERT",
											"source": 22
										},
										{
											"begin": 2564,
											"end": 2616,
											"name": "tag",
											"source": 22,
											"value": "606"
										},
										{
											"begin": 2564,
											"end": 2616,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 2648,
											"end": 2657,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 2635,
											"end": 2658,
											"name": "CALLDATALOAD",
											"source": 22
										},
										{
											"begin": 2625,
											"end": 2658,
											"name": "SWAP2",
											"source": 22
										},
										{
											"begin": 2625,
											"end": 2658,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 2677,
											"end": 2715,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "607"
										},
										{
											"begin": 2711,
											"end": 2713,
											"name": "PUSH",
											"source": 22,
											"value": "20"
										},
										{
											"begin": 2700,
											"end": 2709,
											"name": "DUP5",
											"source": 22
										},
										{
											"begin": 2696,
											"end": 2714,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 2677,
											"end": 2715,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "576"
										},
										{
											"begin": 2677,
											"end": 2715,
											"name": "JUMP",
											"source": 22,
											"value": "[in]"
										},
										{
											"begin": 2677,
											"end": 2715,
											"name": "tag",
											"source": 22,
											"value": "607"
										},
										{
											"begin": 2677,
											"end": 2715,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 2667,
											"end": 2715,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 2667,
											"end": 2715,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 2467,
											"end": 2721,
											"name": "SWAP3",
											"source": 22
										},
										{
											"begin": 2467,
											"end": 2721,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 2467,
											"end": 2721,
											"name": "SWAP3",
											"source": 22
										},
										{
											"begin": 2467,
											"end": 2721,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 2467,
											"end": 2721,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 2467,
											"end": 2721,
											"name": "JUMP",
											"source": 22,
											"value": "[out]"
										},
										{
											"begin": 2915,
											"end": 3101,
											"name": "tag",
											"source": 22,
											"value": "91"
										},
										{
											"begin": 2915,
											"end": 3101,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 2974,
											"end": 2980,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 3027,
											"end": 3029,
											"name": "PUSH",
											"source": 22,
											"value": "20"
										},
										{
											"begin": 3015,
											"end": 3024,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 3006,
											"end": 3013,
											"name": "DUP5",
											"source": 22
										},
										{
											"begin": 3002,
											"end": 3025,
											"name": "SUB",
											"source": 22
										},
										{
											"begin": 2998,
											"end": 3030,
											"name": "SLT",
											"source": 22
										},
										{
											"begin": 2995,
											"end": 3047,
											"name": "ISZERO",
											"source": 22
										},
										{
											"begin": 2995,
											"end": 3047,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "610"
										},
										{
											"begin": 2995,
											"end": 3047,
											"name": "JUMPI",
											"source": 22
										},
										{
											"begin": 3043,
											"end": 3044,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 3040,
											"end": 3041,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 3033,
											"end": 3045,
											"name": "REVERT",
											"source": 22
										},
										{
											"begin": 2995,
											"end": 3047,
											"name": "tag",
											"source": 22,
											"value": "610"
										},
										{
											"begin": 2995,
											"end": 3047,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 3066,
											"end": 3095,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "535"
										},
										{
											"begin": 3085,
											"end": 3094,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 3066,
											"end": 3095,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "576"
										},
										{
											"begin": 3066,
											"end": 3095,
											"name": "JUMP",
											"source": 22,
											"value": "[in]"
										},
										{
											"begin": 3291,
											"end": 3418,
											"name": "tag",
											"source": 22,
											"value": "228"
										},
										{
											"begin": 3291,
											"end": 3418,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 3352,
											"end": 3362,
											"name": "PUSH",
											"source": 22,
											"value": "4E487B71"
										},
										{
											"begin": 3347,
											"end": 3350,
											"name": "PUSH",
											"source": 22,
											"value": "E0"
										},
										{
											"begin": 3343,
											"end": 3363,
											"name": "SHL",
											"source": 22
										},
										{
											"begin": 3340,
											"end": 3341,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 3333,
											"end": 3364,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 3383,
											"end": 3387,
											"name": "PUSH",
											"source": 22,
											"value": "41"
										},
										{
											"begin": 3380,
											"end": 3381,
											"name": "PUSH",
											"source": 22,
											"value": "4"
										},
										{
											"begin": 3373,
											"end": 3388,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 3407,
											"end": 3411,
											"name": "PUSH",
											"source": 22,
											"value": "24"
										},
										{
											"begin": 3404,
											"end": 3405,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 3397,
											"end": 3412,
											"name": "REVERT",
											"source": 22
										},
										{
											"begin": 3423,
											"end": 4418,
											"name": "tag",
											"source": 22,
											"value": "108"
										},
										{
											"begin": 3423,
											"end": 4418,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 3500,
											"end": 3506,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 3508,
											"end": 3514,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 3561,
											"end": 3563,
											"name": "PUSH",
											"source": 22,
											"value": "40"
										},
										{
											"begin": 3549,
											"end": 3558,
											"name": "DUP4",
											"source": 22
										},
										{
											"begin": 3540,
											"end": 3547,
											"name": "DUP6",
											"source": 22
										},
										{
											"begin": 3536,
											"end": 3559,
											"name": "SUB",
											"source": 22
										},
										{
											"begin": 3532,
											"end": 3564,
											"name": "SLT",
											"source": 22
										},
										{
											"begin": 3529,
											"end": 3581,
											"name": "ISZERO",
											"source": 22
										},
										{
											"begin": 3529,
											"end": 3581,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "616"
										},
										{
											"begin": 3529,
											"end": 3581,
											"name": "JUMPI",
											"source": 22
										},
										{
											"begin": 3577,
											"end": 3578,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 3574,
											"end": 3575,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 3567,
											"end": 3579,
											"name": "REVERT",
											"source": 22
										},
										{
											"begin": 3529,
											"end": 3581,
											"name": "tag",
											"source": 22,
											"value": "616"
										},
										{
											"begin": 3529,
											"end": 3581,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 3600,
											"end": 3629,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "617"
										},
										{
											"begin": 3619,
											"end": 3628,
											"name": "DUP4",
											"source": 22
										},
										{
											"begin": 3600,
											"end": 3629,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "576"
										},
										{
											"begin": 3600,
											"end": 3629,
											"name": "JUMP",
											"source": 22,
											"value": "[in]"
										},
										{
											"begin": 3600,
											"end": 3629,
											"name": "tag",
											"source": 22,
											"value": "617"
										},
										{
											"begin": 3600,
											"end": 3629,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 3590,
											"end": 3629,
											"name": "SWAP2",
											"source": 22
										},
										{
											"begin": 3590,
											"end": 3629,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 3680,
											"end": 3682,
											"name": "PUSH",
											"source": 22,
											"value": "20"
										},
										{
											"begin": 3669,
											"end": 3678,
											"name": "DUP4",
											"source": 22
										},
										{
											"begin": 3665,
											"end": 3683,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 3652,
											"end": 3684,
											"name": "CALLDATALOAD",
											"source": 22
										},
										{
											"begin": 3703,
											"end": 3721,
											"name": "PUSH",
											"source": 22,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3744,
											"end": 3746,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 3736,
											"end": 3742,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 3733,
											"end": 3747,
											"name": "GT",
											"source": 22
										},
										{
											"begin": 3730,
											"end": 3764,
											"name": "ISZERO",
											"source": 22
										},
										{
											"begin": 3730,
											"end": 3764,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "618"
										},
										{
											"begin": 3730,
											"end": 3764,
											"name": "JUMPI",
											"source": 22
										},
										{
											"begin": 3760,
											"end": 3761,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 3757,
											"end": 3758,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 3750,
											"end": 3762,
											"name": "REVERT",
											"source": 22
										},
										{
											"begin": 3730,
											"end": 3764,
											"name": "tag",
											"source": 22,
											"value": "618"
										},
										{
											"begin": 3730,
											"end": 3764,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 3798,
											"end": 3804,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 3787,
											"end": 3796,
											"name": "DUP6",
											"source": 22
										},
										{
											"begin": 3783,
											"end": 3805,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 3773,
											"end": 3805,
											"name": "SWAP2",
											"source": 22
										},
										{
											"begin": 3773,
											"end": 3805,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 3843,
											"end": 3850,
											"name": "DUP6",
											"source": 22
										},
										{
											"begin": 3836,
											"end": 3840,
											"name": "PUSH",
											"source": 22,
											"value": "1F"
										},
										{
											"begin": 3832,
											"end": 3834,
											"name": "DUP4",
											"source": 22
										},
										{
											"begin": 3828,
											"end": 3841,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 3824,
											"end": 3851,
											"name": "SLT",
											"source": 22
										},
										{
											"begin": 3814,
											"end": 3869,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "619"
										},
										{
											"begin": 3814,
											"end": 3869,
											"name": "JUMPI",
											"source": 22
										},
										{
											"begin": 3865,
											"end": 3866,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 3862,
											"end": 3863,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 3855,
											"end": 3867,
											"name": "REVERT",
											"source": 22
										},
										{
											"begin": 3814,
											"end": 3869,
											"name": "tag",
											"source": 22,
											"value": "619"
										},
										{
											"begin": 3814,
											"end": 3869,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 3901,
											"end": 3903,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 3888,
											"end": 3904,
											"name": "CALLDATALOAD",
											"source": 22
										},
										{
											"begin": 3923,
											"end": 3925,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 3919,
											"end": 3921,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 3916,
											"end": 3926,
											"name": "GT",
											"source": 22
										},
										{
											"begin": 3913,
											"end": 3949,
											"name": "ISZERO",
											"source": 22
										},
										{
											"begin": 3913,
											"end": 3949,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "621"
										},
										{
											"begin": 3913,
											"end": 3949,
											"name": "JUMPI",
											"source": 22
										},
										{
											"begin": 3929,
											"end": 3947,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "621"
										},
										{
											"begin": 3929,
											"end": 3947,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "228"
										},
										{
											"begin": 3929,
											"end": 3947,
											"name": "JUMP",
											"source": 22,
											"value": "[in]"
										},
										{
											"begin": 3929,
											"end": 3947,
											"name": "tag",
											"source": 22,
											"value": "621"
										},
										{
											"begin": 3929,
											"end": 3947,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 4004,
											"end": 4006,
											"name": "PUSH",
											"source": 22,
											"value": "40"
										},
										{
											"begin": 3998,
											"end": 4007,
											"name": "MLOAD",
											"source": 22
										},
										{
											"begin": 3972,
											"end": 3974,
											"name": "PUSH",
											"source": 22,
											"value": "1F"
										},
										{
											"begin": 4058,
											"end": 4071,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 4058,
											"end": 4071,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 4054,
											"end": 4076,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 4054,
											"end": 4076,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 4054,
											"end": 4076,
											"name": "AND",
											"source": 22
										},
										{
											"begin": 4078,
											"end": 4080,
											"name": "PUSH",
											"source": 22,
											"value": "3F"
										},
										{
											"begin": 4050,
											"end": 4081,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 4046,
											"end": 4086,
											"name": "AND",
											"source": 22
										},
										{
											"begin": 4034,
											"end": 4087,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 4034,
											"end": 4087,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 4034,
											"end": 4087,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 4102,
											"end": 4120,
											"name": "DUP4",
											"source": 22
										},
										{
											"begin": 4102,
											"end": 4120,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 4102,
											"end": 4120,
											"name": "GT",
											"source": 22
										},
										{
											"begin": 4122,
											"end": 4144,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 4122,
											"end": 4144,
											"name": "DUP4",
											"source": 22
										},
										{
											"begin": 4122,
											"end": 4144,
											"name": "LT",
											"source": 22
										},
										{
											"begin": 4099,
											"end": 4145,
											"name": "OR",
											"source": 22
										},
										{
											"begin": 4096,
											"end": 4168,
											"name": "ISZERO",
											"source": 22
										},
										{
											"begin": 4096,
											"end": 4168,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "623"
										},
										{
											"begin": 4096,
											"end": 4168,
											"name": "JUMPI",
											"source": 22
										},
										{
											"begin": 4148,
											"end": 4166,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "623"
										},
										{
											"begin": 4148,
											"end": 4166,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "228"
										},
										{
											"begin": 4148,
											"end": 4166,
											"name": "JUMP",
											"source": 22,
											"value": "[in]"
										},
										{
											"begin": 4148,
											"end": 4166,
											"name": "tag",
											"source": 22,
											"value": "623"
										},
										{
											"begin": 4148,
											"end": 4166,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 4188,
											"end": 4198,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 4184,
											"end": 4186,
											"name": "PUSH",
											"source": 22,
											"value": "40"
										},
										{
											"begin": 4177,
											"end": 4199,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 4223,
											"end": 4225,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 4215,
											"end": 4221,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 4208,
											"end": 4226,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 4263,
											"end": 4270,
											"name": "DUP9",
											"source": 22
										},
										{
											"begin": 4258,
											"end": 4260,
											"name": "PUSH",
											"source": 22,
											"value": "20"
										},
										{
											"begin": 4253,
											"end": 4255,
											"name": "DUP5",
											"source": 22
										},
										{
											"begin": 4249,
											"end": 4251,
											"name": "DUP8",
											"source": 22
										},
										{
											"begin": 4245,
											"end": 4256,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 4241,
											"end": 4261,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 4238,
											"end": 4271,
											"name": "GT",
											"source": 22
										},
										{
											"begin": 4235,
											"end": 4288,
											"name": "ISZERO",
											"source": 22
										},
										{
											"begin": 4235,
											"end": 4288,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "624"
										},
										{
											"begin": 4235,
											"end": 4288,
											"name": "JUMPI",
											"source": 22
										},
										{
											"begin": 4284,
											"end": 4285,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 4281,
											"end": 4282,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 4274,
											"end": 4286,
											"name": "REVERT",
											"source": 22
										},
										{
											"begin": 4235,
											"end": 4288,
											"name": "tag",
											"source": 22,
											"value": "624"
										},
										{
											"begin": 4235,
											"end": 4288,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 4340,
											"end": 4342,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 4335,
											"end": 4337,
											"name": "PUSH",
											"source": 22,
											"value": "20"
										},
										{
											"begin": 4331,
											"end": 4333,
											"name": "DUP7",
											"source": 22
										},
										{
											"begin": 4327,
											"end": 4338,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 4322,
											"end": 4324,
											"name": "PUSH",
											"source": 22,
											"value": "20"
										},
										{
											"begin": 4314,
											"end": 4320,
											"name": "DUP4",
											"source": 22
										},
										{
											"begin": 4310,
											"end": 4325,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 4297,
											"end": 4343,
											"name": "CALLDATACOPY",
											"source": 22
										},
										{
											"begin": 4385,
											"end": 4386,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 4380,
											"end": 4382,
											"name": "PUSH",
											"source": 22,
											"value": "20"
										},
										{
											"begin": 4375,
											"end": 4377,
											"name": "DUP5",
											"source": 22
										},
										{
											"begin": 4367,
											"end": 4373,
											"name": "DUP4",
											"source": 22
										},
										{
											"begin": 4363,
											"end": 4378,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 4359,
											"end": 4383,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 4352,
											"end": 4387,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 4406,
											"end": 4412,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 4396,
											"end": 4412,
											"name": "SWAP6",
											"source": 22
										},
										{
											"begin": 4396,
											"end": 4412,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 4396,
											"end": 4412,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 4396,
											"end": 4412,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 4396,
											"end": 4412,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 4396,
											"end": 4412,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 4396,
											"end": 4412,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 3423,
											"end": 4418,
											"name": "SWAP3",
											"source": 22
										},
										{
											"begin": 3423,
											"end": 4418,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 3423,
											"end": 4418,
											"name": "SWAP3",
											"source": 22
										},
										{
											"begin": 3423,
											"end": 4418,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 3423,
											"end": 4418,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 3423,
											"end": 4418,
											"name": "JUMP",
											"source": 22,
											"value": "[out]"
										},
										{
											"begin": 4423,
											"end": 4683,
											"name": "tag",
											"source": 22,
											"value": "163"
										},
										{
											"begin": 4423,
											"end": 4683,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 4491,
											"end": 4497,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 4499,
											"end": 4505,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 4552,
											"end": 4554,
											"name": "PUSH",
											"source": 22,
											"value": "40"
										},
										{
											"begin": 4540,
											"end": 4549,
											"name": "DUP4",
											"source": 22
										},
										{
											"begin": 4531,
											"end": 4538,
											"name": "DUP6",
											"source": 22
										},
										{
											"begin": 4527,
											"end": 4550,
											"name": "SUB",
											"source": 22
										},
										{
											"begin": 4523,
											"end": 4555,
											"name": "SLT",
											"source": 22
										},
										{
											"begin": 4520,
											"end": 4572,
											"name": "ISZERO",
											"source": 22
										},
										{
											"begin": 4520,
											"end": 4572,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "626"
										},
										{
											"begin": 4520,
											"end": 4572,
											"name": "JUMPI",
											"source": 22
										},
										{
											"begin": 4568,
											"end": 4569,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 4565,
											"end": 4566,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 4558,
											"end": 4570,
											"name": "REVERT",
											"source": 22
										},
										{
											"begin": 4520,
											"end": 4572,
											"name": "tag",
											"source": 22,
											"value": "626"
										},
										{
											"begin": 4520,
											"end": 4572,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 4591,
											"end": 4620,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "627"
										},
										{
											"begin": 4610,
											"end": 4619,
											"name": "DUP4",
											"source": 22
										},
										{
											"begin": 4591,
											"end": 4620,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "576"
										},
										{
											"begin": 4591,
											"end": 4620,
											"name": "JUMP",
											"source": 22,
											"value": "[in]"
										},
										{
											"begin": 4591,
											"end": 4620,
											"name": "tag",
											"source": 22,
											"value": "627"
										},
										{
											"begin": 4591,
											"end": 4620,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 4581,
											"end": 4620,
											"name": "SWAP2",
											"source": 22
										},
										{
											"begin": 4581,
											"end": 4620,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 4639,
											"end": 4677,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "607"
										},
										{
											"begin": 4673,
											"end": 4675,
											"name": "PUSH",
											"source": 22,
											"value": "20"
										},
										{
											"begin": 4662,
											"end": 4671,
											"name": "DUP5",
											"source": 22
										},
										{
											"begin": 4658,
											"end": 4676,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 4639,
											"end": 4677,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "576"
										},
										{
											"begin": 4639,
											"end": 4677,
											"name": "JUMP",
											"source": 22,
											"value": "[in]"
										},
										{
											"begin": 4688,
											"end": 5068,
											"name": "tag",
											"source": 22,
											"value": "180"
										},
										{
											"begin": 4688,
											"end": 5068,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 4767,
											"end": 4768,
											"name": "PUSH",
											"source": 22,
											"value": "1"
										},
										{
											"begin": 4763,
											"end": 4775,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 4763,
											"end": 4775,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 4763,
											"end": 4775,
											"name": "SHR",
											"source": 22
										},
										{
											"begin": 4763,
											"end": 4775,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 4810,
											"end": 4822,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 4810,
											"end": 4822,
											"name": "AND",
											"source": 22
										},
										{
											"begin": 4810,
											"end": 4822,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 4831,
											"end": 4892,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "630"
										},
										{
											"begin": 4831,
											"end": 4892,
											"name": "JUMPI",
											"source": 22
										},
										{
											"begin": 4885,
											"end": 4889,
											"name": "PUSH",
											"source": 22,
											"value": "7F"
										},
										{
											"begin": 4877,
											"end": 4883,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 4873,
											"end": 4890,
											"name": "AND",
											"source": 22
										},
										{
											"begin": 4863,
											"end": 4890,
											"name": "SWAP2",
											"source": 22
										},
										{
											"begin": 4863,
											"end": 4890,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 4831,
											"end": 4892,
											"name": "tag",
											"source": 22,
											"value": "630"
										},
										{
											"begin": 4831,
											"end": 4892,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 4938,
											"end": 4940,
											"name": "PUSH",
											"source": 22,
											"value": "20"
										},
										{
											"begin": 4930,
											"end": 4936,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 4927,
											"end": 4941,
											"name": "LT",
											"source": 22
										},
										{
											"begin": 4907,
											"end": 4925,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 4904,
											"end": 4942,
											"name": "EQ",
											"source": 22
										},
										{
											"begin": 4901,
											"end": 5062,
											"name": "ISZERO",
											"source": 22
										},
										{
											"begin": 4901,
											"end": 5062,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "631"
										},
										{
											"begin": 4901,
											"end": 5062,
											"name": "JUMPI",
											"source": 22
										},
										{
											"begin": 4984,
											"end": 4994,
											"name": "PUSH",
											"source": 22,
											"value": "4E487B71"
										},
										{
											"begin": 4979,
											"end": 4982,
											"name": "PUSH",
											"source": 22,
											"value": "E0"
										},
										{
											"begin": 4975,
											"end": 4995,
											"name": "SHL",
											"source": 22
										},
										{
											"begin": 4972,
											"end": 4973,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 4965,
											"end": 4996,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 5019,
											"end": 5023,
											"name": "PUSH",
											"source": 22,
											"value": "22"
										},
										{
											"begin": 5016,
											"end": 5017,
											"name": "PUSH",
											"source": 22,
											"value": "4"
										},
										{
											"begin": 5009,
											"end": 5024,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 5047,
											"end": 5051,
											"name": "PUSH",
											"source": 22,
											"value": "24"
										},
										{
											"begin": 5044,
											"end": 5045,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 5037,
											"end": 5052,
											"name": "REVERT",
											"source": 22
										},
										{
											"begin": 4901,
											"end": 5062,
											"name": "tag",
											"source": 22,
											"value": "631"
										},
										{
											"begin": 4901,
											"end": 5062,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 4901,
											"end": 5062,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 4688,
											"end": 5068,
											"name": "SWAP2",
											"source": 22
										},
										{
											"begin": 4688,
											"end": 5068,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 4688,
											"end": 5068,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 4688,
											"end": 5068,
											"name": "JUMP",
											"source": 22,
											"value": "[out]"
										},
										{
											"begin": 5489,
											"end": 5897,
											"name": "tag",
											"source": 22,
											"value": "216"
										},
										{
											"begin": 5489,
											"end": 5897,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 5691,
											"end": 5693,
											"name": "PUSH",
											"source": 22,
											"value": "20"
										},
										{
											"begin": 5673,
											"end": 5694,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 5673,
											"end": 5694,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 5673,
											"end": 5694,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 5730,
											"end": 5732,
											"name": "PUSH",
											"source": 22,
											"value": "2C"
										},
										{
											"begin": 5710,
											"end": 5728,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 5710,
											"end": 5728,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 5710,
											"end": 5728,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 5703,
											"end": 5733,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 5769,
											"end": 5803,
											"name": "PUSH",
											"source": 22,
											"value": "46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820"
										},
										{
											"begin": 5764,
											"end": 5766,
											"name": "PUSH",
											"source": 22,
											"value": "40"
										},
										{
											"begin": 5749,
											"end": 5767,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 5749,
											"end": 5767,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 5742,
											"end": 5804,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "19195B1959D85D1958D85B1B"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5835,
											"end": 5837,
											"name": "PUSH",
											"source": 22,
											"value": "60"
										},
										{
											"begin": 5820,
											"end": 5838,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 5820,
											"end": 5838,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 5813,
											"end": 5855,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 5887,
											"end": 5890,
											"name": "PUSH",
											"source": 22,
											"value": "80"
										},
										{
											"begin": 5872,
											"end": 5891,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 5872,
											"end": 5891,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 5489,
											"end": 5897,
											"name": "JUMP",
											"source": 22,
											"value": "[out]"
										},
										{
											"begin": 5902,
											"end": 6310,
											"name": "tag",
											"source": 22,
											"value": "221"
										},
										{
											"begin": 5902,
											"end": 6310,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 6104,
											"end": 6106,
											"name": "PUSH",
											"source": 22,
											"value": "20"
										},
										{
											"begin": 6086,
											"end": 6107,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 6086,
											"end": 6107,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 6086,
											"end": 6107,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 6143,
											"end": 6145,
											"name": "PUSH",
											"source": 22,
											"value": "2C"
										},
										{
											"begin": 6123,
											"end": 6141,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 6123,
											"end": 6141,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 6123,
											"end": 6141,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 6116,
											"end": 6146,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 6182,
											"end": 6216,
											"name": "PUSH",
											"source": 22,
											"value": "46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820"
										},
										{
											"begin": 6177,
											"end": 6179,
											"name": "PUSH",
											"source": 22,
											"value": "40"
										},
										{
											"begin": 6162,
											"end": 6180,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 6162,
											"end": 6180,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 6155,
											"end": 6217,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "6163746976652070726F7879"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6248,
											"end": 6250,
											"name": "PUSH",
											"source": 22,
											"value": "60"
										},
										{
											"begin": 6233,
											"end": 6251,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 6233,
											"end": 6251,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 6226,
											"end": 6268,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 6300,
											"end": 6303,
											"name": "PUSH",
											"source": 22,
											"value": "80"
										},
										{
											"begin": 6285,
											"end": 6304,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 6285,
											"end": 6304,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 5902,
											"end": 6310,
											"name": "JUMP",
											"source": 22,
											"value": "[out]"
										},
										{
											"begin": 6315,
											"end": 6442,
											"name": "tag",
											"source": 22,
											"value": "577"
										},
										{
											"begin": 6315,
											"end": 6442,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 6376,
											"end": 6386,
											"name": "PUSH",
											"source": 22,
											"value": "4E487B71"
										},
										{
											"begin": 6371,
											"end": 6374,
											"name": "PUSH",
											"source": 22,
											"value": "E0"
										},
										{
											"begin": 6367,
											"end": 6387,
											"name": "SHL",
											"source": 22
										},
										{
											"begin": 6364,
											"end": 6365,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 6357,
											"end": 6388,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 6407,
											"end": 6411,
											"name": "PUSH",
											"source": 22,
											"value": "11"
										},
										{
											"begin": 6404,
											"end": 6405,
											"name": "PUSH",
											"source": 22,
											"value": "4"
										},
										{
											"begin": 6397,
											"end": 6412,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 6431,
											"end": 6435,
											"name": "PUSH",
											"source": 22,
											"value": "24"
										},
										{
											"begin": 6428,
											"end": 6429,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 6421,
											"end": 6436,
											"name": "REVERT",
											"source": 22
										},
										{
											"begin": 6447,
											"end": 6575,
											"name": "tag",
											"source": 22,
											"value": "236"
										},
										{
											"begin": 6447,
											"end": 6575,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 6487,
											"end": 6490,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 6518,
											"end": 6519,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 6514,
											"end": 6520,
											"name": "NOT",
											"source": 22
										},
										{
											"begin": 6511,
											"end": 6512,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 6508,
											"end": 6521,
											"name": "GT",
											"source": 22
										},
										{
											"begin": 6505,
											"end": 6544,
											"name": "ISZERO",
											"source": 22
										},
										{
											"begin": 6505,
											"end": 6544,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "638"
										},
										{
											"begin": 6505,
											"end": 6544,
											"name": "JUMPI",
											"source": 22
										},
										{
											"begin": 6524,
											"end": 6542,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "638"
										},
										{
											"begin": 6524,
											"end": 6542,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "577"
										},
										{
											"begin": 6524,
											"end": 6542,
											"name": "JUMP",
											"source": 22,
											"value": "[in]"
										},
										{
											"begin": 6524,
											"end": 6542,
											"name": "tag",
											"source": 22,
											"value": "638"
										},
										{
											"begin": 6524,
											"end": 6542,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6560,
											"end": 6569,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 6560,
											"end": 6569,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 6447,
											"end": 6575,
											"name": "JUMP",
											"source": 22,
											"value": "[out]"
										},
										{
											"begin": 7420,
											"end": 7842,
											"name": "tag",
											"source": 22,
											"value": "578"
										},
										{
											"begin": 7420,
											"end": 7842,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 7509,
											"end": 7510,
											"name": "PUSH",
											"source": 22,
											"value": "1"
										},
										{
											"begin": 7552,
											"end": 7557,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 7509,
											"end": 7510,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 7566,
											"end": 7836,
											"name": "tag",
											"source": 22,
											"value": "642"
										},
										{
											"begin": 7566,
											"end": 7836,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 7587,
											"end": 7594,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 7577,
											"end": 7585,
											"name": "DUP6",
											"source": 22
										},
										{
											"begin": 7574,
											"end": 7595,
											"name": "GT",
											"source": 22
										},
										{
											"begin": 7566,
											"end": 7836,
											"name": "ISZERO",
											"source": 22
										},
										{
											"begin": 7566,
											"end": 7836,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "644"
										},
										{
											"begin": 7566,
											"end": 7836,
											"name": "JUMPI",
											"source": 22
										},
										{
											"begin": 7646,
											"end": 7650,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 7642,
											"end": 7643,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 7638,
											"end": 7644,
											"name": "NOT",
											"source": 22
										},
										{
											"begin": 7634,
											"end": 7651,
											"name": "DIV",
											"source": 22
										},
										{
											"begin": 7628,
											"end": 7632,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 7625,
											"end": 7652,
											"name": "GT",
											"source": 22
										},
										{
											"begin": 7622,
											"end": 7675,
											"name": "ISZERO",
											"source": 22
										},
										{
											"begin": 7622,
											"end": 7675,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "646"
										},
										{
											"begin": 7622,
											"end": 7675,
											"name": "JUMPI",
											"source": 22
										},
										{
											"begin": 7655,
											"end": 7673,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "646"
										},
										{
											"begin": 7655,
											"end": 7673,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "577"
										},
										{
											"begin": 7655,
											"end": 7673,
											"name": "JUMP",
											"source": 22,
											"value": "[in]"
										},
										{
											"begin": 7655,
											"end": 7673,
											"name": "tag",
											"source": 22,
											"value": "646"
										},
										{
											"begin": 7655,
											"end": 7673,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 7705,
											"end": 7712,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 7695,
											"end": 7703,
											"name": "DUP6",
											"source": 22
										},
										{
											"begin": 7691,
											"end": 7713,
											"name": "AND",
											"source": 22
										},
										{
											"begin": 7688,
											"end": 7743,
											"name": "ISZERO",
											"source": 22
										},
										{
											"begin": 7688,
											"end": 7743,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "647"
										},
										{
											"begin": 7688,
											"end": 7743,
											"name": "JUMPI",
											"source": 22
										},
										{
											"begin": 7725,
											"end": 7741,
											"name": "SWAP2",
											"source": 22
										},
										{
											"begin": 7725,
											"end": 7741,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 7725,
											"end": 7741,
											"name": "MUL",
											"source": 22
										},
										{
											"begin": 7725,
											"end": 7741,
											"name": "SWAP2",
											"source": 22
										},
										{
											"begin": 7688,
											"end": 7743,
											"name": "tag",
											"source": 22,
											"value": "647"
										},
										{
											"begin": 7688,
											"end": 7743,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 7804,
											"end": 7826,
											"name": "SWAP4",
											"source": 22
										},
										{
											"begin": 7804,
											"end": 7826,
											"name": "DUP5",
											"source": 22
										},
										{
											"begin": 7804,
											"end": 7826,
											"name": "SHR",
											"source": 22
										},
										{
											"begin": 7804,
											"end": 7826,
											"name": "SWAP4",
											"source": 22
										},
										{
											"begin": 7764,
											"end": 7779,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 7764,
											"end": 7779,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 7764,
											"end": 7779,
											"name": "MUL",
											"source": 22
										},
										{
											"begin": 7764,
											"end": 7779,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 7566,
											"end": 7836,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "642"
										},
										{
											"begin": 7566,
											"end": 7836,
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 7566,
											"end": 7836,
											"name": "tag",
											"source": 22,
											"value": "644"
										},
										{
											"begin": 7566,
											"end": 7836,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 7570,
											"end": 7573,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 7420,
											"end": 7842,
											"name": "SWAP3",
											"source": 22
										},
										{
											"begin": 7420,
											"end": 7842,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 7420,
											"end": 7842,
											"name": "SWAP3",
											"source": 22
										},
										{
											"begin": 7420,
											"end": 7842,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 7420,
											"end": 7842,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 7420,
											"end": 7842,
											"name": "JUMP",
											"source": 22,
											"value": "[out]"
										},
										{
											"begin": 7847,
											"end": 8653,
											"name": "tag",
											"source": 22,
											"value": "579"
										},
										{
											"begin": 7847,
											"end": 8653,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 7896,
											"end": 7901,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 7926,
											"end": 7934,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 7916,
											"end": 7996,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "649"
										},
										{
											"begin": 7916,
											"end": 7996,
											"name": "JUMPI",
											"source": 22
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7967,
											"end": 7968,
											"name": "PUSH",
											"source": 22,
											"value": "1"
										},
										{
											"begin": 7981,
											"end": 7986,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "176"
										},
										{
											"begin": 7981,
											"end": 7986,
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 7916,
											"end": 7996,
											"name": "tag",
											"source": 22,
											"value": "649"
										},
										{
											"begin": 7916,
											"end": 7996,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 8015,
											"end": 8019,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 8005,
											"end": 8081,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "650"
										},
										{
											"begin": 8005,
											"end": 8081,
											"name": "JUMPI",
											"source": 22
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 8052,
											"end": 8053,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 8066,
											"end": 8071,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "176"
										},
										{
											"begin": 8066,
											"end": 8071,
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 8005,
											"end": 8081,
											"name": "tag",
											"source": 22,
											"value": "650"
										},
										{
											"begin": 8005,
											"end": 8081,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 8097,
											"end": 8101,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 8115,
											"end": 8116,
											"name": "PUSH",
											"source": 22,
											"value": "1"
										},
										{
											"begin": 8110,
											"end": 8169,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 8110,
											"end": 8169,
											"name": "EQ",
											"source": 22
										},
										{
											"begin": 8110,
											"end": 8169,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "652"
										},
										{
											"begin": 8110,
											"end": 8169,
											"name": "JUMPI",
											"source": 22
										},
										{
											"begin": 8183,
											"end": 8184,
											"name": "PUSH",
											"source": 22,
											"value": "2"
										},
										{
											"begin": 8178,
											"end": 8308,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 8178,
											"end": 8308,
											"name": "EQ",
											"source": 22
										},
										{
											"begin": 8178,
											"end": 8308,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "653"
										},
										{
											"begin": 8178,
											"end": 8308,
											"name": "JUMPI",
											"source": 22
										},
										{
											"begin": 8090,
											"end": 8308,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "651"
										},
										{
											"begin": 8090,
											"end": 8308,
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 8110,
											"end": 8169,
											"name": "tag",
											"source": 22,
											"value": "652"
										},
										{
											"begin": 8110,
											"end": 8169,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 8140,
											"end": 8141,
											"name": "PUSH",
											"source": 22,
											"value": "1"
										},
										{
											"begin": 8131,
											"end": 8141,
											"name": "SWAP2",
											"source": 22
										},
										{
											"begin": 8131,
											"end": 8141,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 8154,
											"end": 8159,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 8154,
											"end": 8159,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "176"
										},
										{
											"begin": 8154,
											"end": 8159,
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 8178,
											"end": 8308,
											"name": "tag",
											"source": 22,
											"value": "653"
										},
										{
											"begin": 8178,
											"end": 8308,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 8215,
											"end": 8218,
											"name": "PUSH",
											"source": 22,
											"value": "FF"
										},
										{
											"begin": 8205,
											"end": 8213,
											"name": "DUP5",
											"source": 22
										},
										{
											"begin": 8202,
											"end": 8219,
											"name": "GT",
											"source": 22
										},
										{
											"begin": 8199,
											"end": 8242,
											"name": "ISZERO",
											"source": 22
										},
										{
											"begin": 8199,
											"end": 8242,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "655"
										},
										{
											"begin": 8199,
											"end": 8242,
											"name": "JUMPI",
											"source": 22
										},
										{
											"begin": 8222,
											"end": 8240,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "655"
										},
										{
											"begin": 8222,
											"end": 8240,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "577"
										},
										{
											"begin": 8222,
											"end": 8240,
											"name": "JUMP",
											"source": 22,
											"value": "[in]"
										},
										{
											"begin": 8222,
											"end": 8240,
											"name": "tag",
											"source": 22,
											"value": "655"
										},
										{
											"begin": 8222,
											"end": 8240,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 8278,
											"end": 8279,
											"name": "PUSH",
											"source": 22,
											"value": "1"
										},
										{
											"begin": 8264,
											"end": 8280,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 8264,
											"end": 8280,
											"name": "SHL",
											"source": 22
										},
										{
											"begin": 8293,
											"end": 8298,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "176"
										},
										{
											"begin": 8293,
											"end": 8298,
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 8090,
											"end": 8308,
											"name": "tag",
											"source": 22,
											"value": "651"
										},
										{
											"begin": 8090,
											"end": 8308,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 8090,
											"end": 8308,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 8392,
											"end": 8394,
											"name": "PUSH",
											"source": 22,
											"value": "20"
										},
										{
											"begin": 8382,
											"end": 8390,
											"name": "DUP4",
											"source": 22
										},
										{
											"begin": 8379,
											"end": 8395,
											"name": "LT",
											"source": 22
										},
										{
											"begin": 8373,
											"end": 8376,
											"name": "PUSH",
											"source": 22,
											"value": "133"
										},
										{
											"begin": 8367,
											"end": 8371,
											"name": "DUP4",
											"source": 22
										},
										{
											"begin": 8364,
											"end": 8377,
											"name": "LT",
											"source": 22
										},
										{
											"begin": 8360,
											"end": 8396,
											"name": "AND",
											"source": 22
										},
										{
											"begin": 8354,
											"end": 8356,
											"name": "PUSH",
											"source": 22,
											"value": "4E"
										},
										{
											"begin": 8344,
											"end": 8352,
											"name": "DUP5",
											"source": 22
										},
										{
											"begin": 8341,
											"end": 8357,
											"name": "LT",
											"source": 22
										},
										{
											"begin": 8336,
											"end": 8338,
											"name": "PUSH",
											"source": 22,
											"value": "B"
										},
										{
											"begin": 8330,
											"end": 8334,
											"name": "DUP5",
											"source": 22
										},
										{
											"begin": 8327,
											"end": 8339,
											"name": "LT",
											"source": 22
										},
										{
											"begin": 8323,
											"end": 8358,
											"name": "AND",
											"source": 22
										},
										{
											"begin": 8320,
											"end": 8397,
											"name": "OR",
											"source": 22
										},
										{
											"begin": 8317,
											"end": 8476,
											"name": "ISZERO",
											"source": 22
										},
										{
											"begin": 8317,
											"end": 8476,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "656"
										},
										{
											"begin": 8317,
											"end": 8476,
											"name": "JUMPI",
											"source": 22
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 8429,
											"end": 8448,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 8429,
											"end": 8448,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 8429,
											"end": 8448,
											"name": "EXP",
											"source": 22
										},
										{
											"begin": 8461,
											"end": 8466,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "176"
										},
										{
											"begin": 8461,
											"end": 8466,
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 8317,
											"end": 8476,
											"name": "tag",
											"source": 22,
											"value": "656"
										},
										{
											"begin": 8317,
											"end": 8476,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 8508,
											"end": 8542,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "657"
										},
										{
											"begin": 8533,
											"end": 8541,
											"name": "DUP4",
											"source": 22
										},
										{
											"begin": 8527,
											"end": 8531,
											"name": "DUP4",
											"source": 22
										},
										{
											"begin": 8508,
											"end": 8542,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "578"
										},
										{
											"begin": 8508,
											"end": 8542,
											"name": "JUMP",
											"source": 22,
											"value": "[in]"
										},
										{
											"begin": 8508,
											"end": 8542,
											"name": "tag",
											"source": 22,
											"value": "657"
										},
										{
											"begin": 8508,
											"end": 8542,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 8578,
											"end": 8584,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 8574,
											"end": 8575,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 8570,
											"end": 8576,
											"name": "NOT",
											"source": 22
										},
										{
											"begin": 8566,
											"end": 8585,
											"name": "DIV",
											"source": 22
										},
										{
											"begin": 8557,
											"end": 8564,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 8554,
											"end": 8586,
											"name": "GT",
											"source": 22
										},
										{
											"begin": 8551,
											"end": 8609,
											"name": "ISZERO",
											"source": 22
										},
										{
											"begin": 8551,
											"end": 8609,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "659"
										},
										{
											"begin": 8551,
											"end": 8609,
											"name": "JUMPI",
											"source": 22
										},
										{
											"begin": 8589,
											"end": 8607,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "659"
										},
										{
											"begin": 8589,
											"end": 8607,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "577"
										},
										{
											"begin": 8589,
											"end": 8607,
											"name": "JUMP",
											"source": 22,
											"value": "[in]"
										},
										{
											"begin": 8589,
											"end": 8607,
											"name": "tag",
											"source": 22,
											"value": "659"
										},
										{
											"begin": 8589,
											"end": 8607,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 8627,
											"end": 8647,
											"name": "MUL",
											"source": 22
										},
										{
											"begin": 8627,
											"end": 8647,
											"name": "SWAP4",
											"source": 22
										},
										{
											"begin": 7847,
											"end": 8653,
											"name": "SWAP3",
											"source": 22
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7847,
											"end": 8653,
											"name": "JUMP",
											"source": 22,
											"value": "[out]"
										},
										{
											"begin": 8658,
											"end": 8798,
											"name": "tag",
											"source": 22,
											"value": "292"
										},
										{
											"begin": 8658,
											"end": 8798,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 8716,
											"end": 8721,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 8745,
											"end": 8792,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "535"
										},
										{
											"begin": 8786,
											"end": 8790,
											"name": "PUSH",
											"source": 22,
											"value": "FF"
										},
										{
											"begin": 8776,
											"end": 8784,
											"name": "DUP5",
											"source": 22
										},
										{
											"begin": 8772,
											"end": 8791,
											"name": "AND",
											"source": 22
										},
										{
											"begin": 8766,
											"end": 8770,
											"name": "DUP4",
											"source": 22
										},
										{
											"begin": 8745,
											"end": 8792,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "579"
										},
										{
											"begin": 8745,
											"end": 8792,
											"name": "JUMP",
											"source": 22,
											"value": "[in]"
										},
										{
											"begin": 8803,
											"end": 8971,
											"name": "tag",
											"source": 22,
											"value": "294"
										},
										{
											"begin": 8803,
											"end": 8971,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 8843,
											"end": 8850,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 8909,
											"end": 8910,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 8905,
											"end": 8906,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 8901,
											"end": 8907,
											"name": "NOT",
											"source": 22
										},
										{
											"begin": 8897,
											"end": 8911,
											"name": "DIV",
											"source": 22
										},
										{
											"begin": 8894,
											"end": 8895,
											"name": "DUP4",
											"source": 22
										},
										{
											"begin": 8891,
											"end": 8912,
											"name": "GT",
											"source": 22
										},
										{
											"begin": 8886,
											"end": 8887,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 8879,
											"end": 8888,
											"name": "ISZERO",
											"source": 22
										},
										{
											"begin": 8872,
											"end": 8889,
											"name": "ISZERO",
											"source": 22
										},
										{
											"begin": 8868,
											"end": 8913,
											"name": "AND",
											"source": 22
										},
										{
											"begin": 8865,
											"end": 8936,
											"name": "ISZERO",
											"source": 22
										},
										{
											"begin": 8865,
											"end": 8936,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "664"
										},
										{
											"begin": 8865,
											"end": 8936,
											"name": "JUMPI",
											"source": 22
										},
										{
											"begin": 8916,
											"end": 8934,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "664"
										},
										{
											"begin": 8916,
											"end": 8934,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "577"
										},
										{
											"begin": 8916,
											"end": 8934,
											"name": "JUMP",
											"source": 22,
											"value": "[in]"
										},
										{
											"begin": 8916,
											"end": 8934,
											"name": "tag",
											"source": 22,
											"value": "664"
										},
										{
											"begin": 8916,
											"end": 8934,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 8956,
											"end": 8965,
											"name": "MUL",
											"source": 22
										},
										{
											"begin": 8956,
											"end": 8965,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 8803,
											"end": 8971,
											"name": "JUMP",
											"source": 22,
											"value": "[out]"
										},
										{
											"begin": 11964,
											"end": 12148,
											"name": "tag",
											"source": 22,
											"value": "388"
										},
										{
											"begin": 11964,
											"end": 12148,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 12034,
											"end": 12040,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 12087,
											"end": 12089,
											"name": "PUSH",
											"source": 22,
											"value": "20"
										},
										{
											"begin": 12075,
											"end": 12084,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 12066,
											"end": 12073,
											"name": "DUP5",
											"source": 22
										},
										{
											"begin": 12062,
											"end": 12085,
											"name": "SUB",
											"source": 22
										},
										{
											"begin": 12058,
											"end": 12090,
											"name": "SLT",
											"source": 22
										},
										{
											"begin": 12055,
											"end": 12107,
											"name": "ISZERO",
											"source": 22
										},
										{
											"begin": 12055,
											"end": 12107,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "674"
										},
										{
											"begin": 12055,
											"end": 12107,
											"name": "JUMPI",
											"source": 22
										},
										{
											"begin": 12103,
											"end": 12104,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 12100,
											"end": 12101,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 12093,
											"end": 12105,
											"name": "REVERT",
											"source": 22
										},
										{
											"begin": 12055,
											"end": 12107,
											"name": "tag",
											"source": 22,
											"value": "674"
										},
										{
											"begin": 12055,
											"end": 12107,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 12126,
											"end": 12142,
											"name": "MLOAD",
											"source": 22
										},
										{
											"begin": 12126,
											"end": 12142,
											"name": "SWAP2",
											"source": 22
										},
										{
											"begin": 11964,
											"end": 12148,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 11964,
											"end": 12148,
											"name": "JUMP",
											"source": 22,
											"value": "[out]"
										},
										{
											"begin": 13991,
											"end": 14398,
											"name": "tag",
											"source": 22,
											"value": "422"
										},
										{
											"begin": 13991,
											"end": 14398,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 14193,
											"end": 14195,
											"name": "PUSH",
											"source": 22,
											"value": "20"
										},
										{
											"begin": 14175,
											"end": 14196,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 14175,
											"end": 14196,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 14175,
											"end": 14196,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 14232,
											"end": 14234,
											"name": "PUSH",
											"source": 22,
											"value": "2B"
										},
										{
											"begin": 14212,
											"end": 14230,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 14212,
											"end": 14230,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 14212,
											"end": 14230,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 14205,
											"end": 14235,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 14271,
											"end": 14305,
											"name": "PUSH",
											"source": 22,
											"value": "496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069"
										},
										{
											"begin": 14266,
											"end": 14268,
											"name": "PUSH",
											"source": 22,
											"value": "40"
										},
										{
											"begin": 14251,
											"end": 14269,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 14251,
											"end": 14269,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 14244,
											"end": 14306,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "6E697469616C697A696E67"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 14337,
											"end": 14339,
											"name": "PUSH",
											"source": 22,
											"value": "60"
										},
										{
											"begin": 14322,
											"end": 14340,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 14322,
											"end": 14340,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 14315,
											"end": 14356,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 14388,
											"end": 14391,
											"name": "PUSH",
											"source": 22,
											"value": "80"
										},
										{
											"begin": 14373,
											"end": 14392,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 14373,
											"end": 14392,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 13991,
											"end": 14398,
											"name": "JUMP",
											"source": 22,
											"value": "[out]"
										},
										{
											"begin": 14763,
											"end": 15549,
											"name": "tag",
											"source": 22,
											"value": "472"
										},
										{
											"begin": 14763,
											"end": 15549,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 15174,
											"end": 15199,
											"name": "PUSH",
											"source": 22,
											"value": "416363657373436F6E74726F6C3A206163636F756E7420000000000000000000"
										},
										{
											"begin": 15169,
											"end": 15172,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 15162,
											"end": 15200,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 15144,
											"end": 15147,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 15229,
											"end": 15235,
											"name": "DUP4",
											"source": 22
										},
										{
											"begin": 15223,
											"end": 15236,
											"name": "MLOAD",
											"source": 22
										},
										{
											"begin": 15245,
											"end": 15307,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "683"
										},
										{
											"begin": 15300,
											"end": 15306,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 15295,
											"end": 15297,
											"name": "PUSH",
											"source": 22,
											"value": "17"
										},
										{
											"begin": 15290,
											"end": 15293,
											"name": "DUP6",
											"source": 22
										},
										{
											"begin": 15286,
											"end": 15298,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 15279,
											"end": 15283,
											"name": "PUSH",
											"source": 22,
											"value": "20"
										},
										{
											"begin": 15271,
											"end": 15277,
											"name": "DUP9",
											"source": 22
										},
										{
											"begin": 15267,
											"end": 15284,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 15245,
											"end": 15307,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "575"
										},
										{
											"begin": 15245,
											"end": 15307,
											"name": "JUMP",
											"source": 22,
											"value": "[in]"
										},
										{
											"begin": 15245,
											"end": 15307,
											"name": "tag",
											"source": 22,
											"value": "683"
										},
										{
											"begin": 15245,
											"end": 15307,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1034B99036B4B9B9B4B733903937B6329"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "7D"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 15366,
											"end": 15368,
											"name": "PUSH",
											"source": 22,
											"value": "17"
										},
										{
											"begin": 15326,
											"end": 15342,
											"name": "SWAP2",
											"source": 22
										},
										{
											"begin": 15326,
											"end": 15342,
											"name": "DUP5",
											"source": 22
										},
										{
											"begin": 15326,
											"end": 15342,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 15358,
											"end": 15369,
											"name": "SWAP2",
											"source": 22
										},
										{
											"begin": 15358,
											"end": 15369,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 15358,
											"end": 15369,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 15351,
											"end": 15391,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 15416,
											"end": 15429,
											"name": "DUP4",
											"source": 22
										},
										{
											"begin": 15416,
											"end": 15429,
											"name": "MLOAD",
											"source": 22
										},
										{
											"begin": 15438,
											"end": 15501,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "684"
										},
										{
											"begin": 15416,
											"end": 15429,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 15487,
											"end": 15489,
											"name": "PUSH",
											"source": 22,
											"value": "28"
										},
										{
											"begin": 15479,
											"end": 15490,
											"name": "DUP5",
											"source": 22
										},
										{
											"begin": 15479,
											"end": 15490,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 15472,
											"end": 15476,
											"name": "PUSH",
											"source": 22,
											"value": "20"
										},
										{
											"begin": 15460,
											"end": 15477,
											"name": "DUP9",
											"source": 22
										},
										{
											"begin": 15460,
											"end": 15477,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 15438,
											"end": 15501,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "575"
										},
										{
											"begin": 15438,
											"end": 15501,
											"name": "JUMP",
											"source": 22,
											"value": "[in]"
										},
										{
											"begin": 15438,
											"end": 15501,
											"name": "tag",
											"source": 22,
											"value": "684"
										},
										{
											"begin": 15438,
											"end": 15501,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 15521,
											"end": 15538,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 15540,
											"end": 15542,
											"name": "PUSH",
											"source": 22,
											"value": "28"
										},
										{
											"begin": 15517,
											"end": 15543,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 15517,
											"end": 15543,
											"name": "SWAP5",
											"source": 22
										},
										{
											"begin": 14763,
											"end": 15549,
											"name": "SWAP4",
											"source": 22
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 14763,
											"end": 15549,
											"name": "JUMP",
											"source": 22,
											"value": "[out]"
										},
										{
											"begin": 16662,
											"end": 16789,
											"name": "tag",
											"source": 22,
											"value": "521"
										},
										{
											"begin": 16662,
											"end": 16789,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 16723,
											"end": 16733,
											"name": "PUSH",
											"source": 22,
											"value": "4E487B71"
										},
										{
											"begin": 16718,
											"end": 16721,
											"name": "PUSH",
											"source": 22,
											"value": "E0"
										},
										{
											"begin": 16714,
											"end": 16734,
											"name": "SHL",
											"source": 22
										},
										{
											"begin": 16711,
											"end": 16712,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 16704,
											"end": 16735,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 16754,
											"end": 16758,
											"name": "PUSH",
											"source": 22,
											"value": "32"
										},
										{
											"begin": 16751,
											"end": 16752,
											"name": "PUSH",
											"source": 22,
											"value": "4"
										},
										{
											"begin": 16744,
											"end": 16759,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 16778,
											"end": 16782,
											"name": "PUSH",
											"source": 22,
											"value": "24"
										},
										{
											"begin": 16775,
											"end": 16776,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 16768,
											"end": 16783,
											"name": "REVERT",
											"source": 22
										},
										{
											"begin": 16794,
											"end": 16930,
											"name": "tag",
											"source": 22,
											"value": "534"
										},
										{
											"begin": 16794,
											"end": 16930,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 16833,
											"end": 16836,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 16861,
											"end": 16866,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 16851,
											"end": 16890,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "691"
										},
										{
											"begin": 16851,
											"end": 16890,
											"name": "JUMPI",
											"source": 22
										},
										{
											"begin": 16870,
											"end": 16888,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "691"
										},
										{
											"begin": 16870,
											"end": 16888,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "577"
										},
										{
											"begin": 16870,
											"end": 16888,
											"name": "JUMP",
											"source": 22,
											"value": "[in]"
										},
										{
											"begin": 16870,
											"end": 16888,
											"name": "tag",
											"source": 22,
											"value": "691"
										},
										{
											"begin": 16870,
											"end": 16888,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 16906,
											"end": 16924,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 16906,
											"end": 16924,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 16794,
											"end": 16930,
											"name": "JUMP",
											"source": 22,
											"value": "[out]"
										},
										{
											"begin": 17296,
											"end": 17570,
											"name": "tag",
											"source": 22,
											"value": "545"
										},
										{
											"begin": 17296,
											"end": 17570,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 17425,
											"end": 17428,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 17463,
											"end": 17469,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 17457,
											"end": 17470,
											"name": "MLOAD",
											"source": 22
										},
										{
											"begin": 17479,
											"end": 17532,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "694"
										},
										{
											"begin": 17525,
											"end": 17531,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 17520,
											"end": 17523,
											"name": "DUP5",
											"source": 22
										},
										{
											"begin": 17513,
											"end": 17517,
											"name": "PUSH",
											"source": 22,
											"value": "20"
										},
										{
											"begin": 17505,
											"end": 17511,
											"name": "DUP8",
											"source": 22
										},
										{
											"begin": 17501,
											"end": 17518,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 17479,
											"end": 17532,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "575"
										},
										{
											"begin": 17479,
											"end": 17532,
											"name": "JUMP",
											"source": 22,
											"value": "[in]"
										},
										{
											"begin": 17479,
											"end": 17532,
											"name": "tag",
											"source": 22,
											"value": "694"
										},
										{
											"begin": 17479,
											"end": 17532,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 17548,
											"end": 17564,
											"name": "SWAP2",
											"source": 22
										},
										{
											"begin": 17548,
											"end": 17564,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 17548,
											"end": 17564,
											"name": "SWAP2",
											"source": 22
										},
										{
											"begin": 17548,
											"end": 17564,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 17548,
											"end": 17564,
											"name": "SWAP3",
											"source": 22
										},
										{
											"begin": 17296,
											"end": 17570,
											"name": "SWAP2",
											"source": 22
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 17296,
											"end": 17570,
											"name": "JUMP",
											"source": 22,
											"value": "[out]"
										}
									],
									".data": {
										"75B20EEF8615DE99C108B05F0DBDA081C91897128CAA336D75DFFB97C4132B4D": "360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc",
										"9B87106A812D214D41AD9B68A21119E2948EAAF1040375C939EC808B8862455C": "65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a",
										"9FDCD12E4B726339B32A442B0A448365D5D85C96B2D2CFF917B4F66C63110398": "416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564"
									}
								}
							}
						},
						"methodIdentifiers": {
							"DEFAULT_ADMIN_ROLE()": "a217fddf",
							"PAUSER_ROLE()": "e63ab1e9",
							"UPGRADER_ROLE()": "f72c0d8b",
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"burn(uint256)": "42966c68",
							"burnFrom(address,uint256)": "79cc6790",
							"decimals()": "313ce567",
							"decreaseAllowance(address,uint256)": "a457c2d7",
							"getRoleAdmin(bytes32)": "248a9ca3",
							"grantRole(bytes32,address)": "2f2ff15d",
							"hasRole(bytes32,address)": "91d14854",
							"increaseAllowance(address,uint256)": "39509351",
							"initialize()": "8129fc1c",
							"name()": "06fdde03",
							"pause()": "8456cb59",
							"paused()": "5c975abb",
							"proxiableUUID()": "52d1902d",
							"renounceRole(bytes32,address)": "36568abe",
							"revokeRole(bytes32,address)": "d547741f",
							"supportsInterface(bytes4)": "01ffc9a7",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd",
							"unpause()": "3f4ba83a",
							"upgradeTo(address)": "3659cfe6",
							"upgradeToAndCall(address,bytes)": "4f1ef286"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPGRADER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"custom:security-contact\":\"sec@arcadia.global\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"burn(uint256)\":{\"details\":\"Destroys `amount` tokens from the caller. See {ERC20-_burn}.\"},\"burnFrom(address,uint256)\":{\"details\":\"Destroys `amount` tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `amount`.\"},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"},\"upgradeTo(address)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"initialize()\":{\"notice\":\"\\\"In Ancient Greek the word praxis (\\u03c0\\u03c1\\u1fb6\\u03be\\u03b9\\u03c2) referred to activity engaged in by free people.\\\"\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"PAXX.sol\":\"PRAXXIS\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol\":{\"keccak256\":\"0xfeefb24d068524440e1ba885efdf105d91f83504af3c2d745ffacc4595396831\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3df5f6a75f86411cb20df54362ed4ec9b4c270720be20da7095f169932fa2709\",\"dweb:/ipfs/QmTThfuAwFYAvtHgZbmp6ZAbN2MVGSabAnhAbsB6JQxJCF\"]},\"@openzeppelin/contracts-upgradeable@4.9.2/access/IAccessControlUpgradeable.sol\":{\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://740cf4dc535e3082560cf5a031473029f322690fc8037fe9d5e3a8bef42e757c\",\"dweb:/ipfs/QmTQxFdfxcaueQa23VX34wAPqzruZbkzyeN58tZK2yav2b\"]},\"@openzeppelin/contracts-upgradeable@4.9.2/interfaces/IERC1967Upgradeable.sol\":{\"keccak256\":\"0x47d6e06872b12e72c79d1b5eb55842f860b5fb1207b2317c2358d2766b950a7b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ac55bf6f92fc7b90c6d79d346163a0a02bd5c648c7fede08b20e5da96d4ae2a0\",\"dweb:/ipfs/QmQoSrHhka35iKDK5iyNt8cuXXS5ANXVPjLhfsJjktB8V9\"]},\"@openzeppelin/contracts-upgradeable@4.9.2/interfaces/draft-IERC1822Upgradeable.sol\":{\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://496bd9b3df2455d571018c09f0c6badd29713fdeb907c6aa09d8d28cb603f053\",\"dweb:/ipfs/QmXdJDyYs6WMwMh21dez2BYPxhSUaUYFMDtVNcn2cgFR79\"]},\"@openzeppelin/contracts-upgradeable@4.9.2/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"keccak256\":\"0x584ebdf9c1118a7c773f98788e3f3ede01982bdf8932aa06f5acc7d54876e161\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9826c7edf276ff48b99ee217358393097c30448a71d345d287c2f6961bb1f159\",\"dweb:/ipfs/QmYXBTY9wDvffGU47yMRFJ1NFyKwpbj94VHzRzhsm6R7Gz\"]},\"@openzeppelin/contracts-upgradeable@4.9.2/proxy/beacon/IBeaconUpgradeable.sol\":{\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4dbfe1a3b3b3fb64294ce41fd2ad362e7b7012208117864f42c1a67620a6d5c1\",\"dweb:/ipfs/QmVMU5tWt7zBQMmf5cpMX8UMHV86T3kFeTxBTBjFqVWfoJ\"]},\"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f103ee2e4aecd37aac6ceefe670709cdd7613dee25fa2d4d9feaf7fc0aaa155e\",\"dweb:/ipfs/QmRiNZLoJk5k3HPMYGPGjZFd2ke1ZxjhJZkM45Ec9GH9hv\"]},\"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/UUPSUpgradeable.sol\":{\"keccak256\":\"0xb607cb94c27e89750f5ae2ccebcb94e654e926f6125f4fd4c6262c89875118ad\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://33e8f8d863c6943ea046fcf4972b4e815c04ab06bad195dba1d93f8ebeb8420d\",\"dweb:/ipfs/QmTQzxQTuuzPDk3eqVmYy7hv2RCXM1yt1NtubXpRbzYjaj\"]},\"@openzeppelin/contracts-upgradeable@4.9.2/security/PausableUpgradeable.sol\":{\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9c7d1f5e15633ab912b74c2f57e24559e66b03232300d4b27ff0f25bc452ecad\",\"dweb:/ipfs/QmYTJkc1cntYkKQ1Tu11nBcJLakiy93Tjytc4XHELo4GmR\"]},\"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol\":{\"keccak256\":\"0xd14a627157b9a411d2410713e5dd3a377e9064bd5c194a90748bbf27ea625784\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://29d6a502187e88fdb4ac51319b6cfc82e7ba886a435480e229e5f838d2da55ee\",\"dweb:/ipfs/QmQNWKr3axXvQowZi31ydXRdeZ7UnE7oN8XAz9FCkx1JhN\"]},\"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/IERC20Upgradeable.sol\":{\"keccak256\":\"0x0e1f0f5f62f67a881cd1a9597acbc0a5e4071f3c2c10449a183b922ae7272e3f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c25f742ff154998d19a669e2508c3597b363e123ce9144cd0fcf6521229f401f\",\"dweb:/ipfs/QmQXRuFzStEWqeEPbhQU6cAg9PaSowxJVo4PDKyRod7dco\"]},\"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\":{\"keccak256\":\"0xea2c6f9d434127bf36b1e3e5ebaaf6d28a64dbaeea560508e570014e905a5ad2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3483370aa549810a946ace621a225616bb6d0b9ed22c3a99bbcf80dc4866ec39\",\"dweb:/ipfs/QmdgFnm6X2oQ574eJFLghVXVckwyC3SbiAUxXs934N1qvf\"]},\"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4c9c634f99dd02d73ce7498b03a6305e251c05eeebb71457306561c1fab0fa7d\",\"dweb:/ipfs/QmbYRBbZHy8YoaQKXdPryiL3CSS7uUaRfRYi1TUj9cTqJQ\"]},\"@openzeppelin/contracts-upgradeable@4.9.2/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://310136ad60820af4177a11a61d77a3686faf5fca4942b600e08fc940db38396b\",\"dweb:/ipfs/QmbCzMNSTL7Zi7M4UCSqBrkHtp4jjxUnGbkneCZKdR1qeq\"]},\"@openzeppelin/contracts-upgradeable@4.9.2/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d6520943ea55fdf5f0bafb39ed909f64de17051bc954ff3e88c9e5621412c79c\",\"dweb:/ipfs/QmWZ4rAKTQbNG2HxGs46AcTXShsVytKeLs7CUCdCSv5N7a\"]},\"@openzeppelin/contracts-upgradeable@4.9.2/utils/StorageSlotUpgradeable.sol\":{\"keccak256\":\"0x07ac95acad040f1fb1f6120dd0aa5f702db69446e95f82613721879d30de0908\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a9df9de7b5da1d1bd3d4b6c073d0174bc4211db60e794a321c8cb5d4eae34685\",\"dweb:/ipfs/QmWe49zj65jayrCe9jZpoWhYUZ1RiwSxyU2s7SBZnMztVy\"]},\"@openzeppelin/contracts-upgradeable@4.9.2/utils/StringsUpgradeable.sol\":{\"keccak256\":\"0xb96dc79b65b7c37937919dcdb356a969ce0aa2e8338322bf4dc027a3c9c9a7eb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f8613145881436fc0480fff22da4868d611e2b0c0c3da083334eb4362ce1945a\",\"dweb:/ipfs/QmPqpP3YeRbBdTJRe6Gv2eGsUaANf4J6RwTNRW36iYahfV\"]},\"@openzeppelin/contracts-upgradeable@4.9.2/utils/introspection/ERC165Upgradeable.sol\":{\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0895399d170daab2d69b4c43a0202e5a07f2e67a93b26e3354dcbedb062232f7\",\"dweb:/ipfs/QmUM1VH3XDk559Dsgh4QPvupr3YVKjz87HrSyYzzVFZbxw\"]},\"@openzeppelin/contracts-upgradeable@4.9.2/utils/introspection/IERC165Upgradeable.sol\":{\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://92ad7e572cf44e6b4b37631b44b62f9eb9fb1cf14d9ce51c1504d5dc7ccaf758\",\"dweb:/ipfs/QmcnbqX85tsWnUXPmtuPLE4SczME2sJaTfmqEFkuAJvWhy\"]},\"@openzeppelin/contracts-upgradeable@4.9.2/utils/math/MathUpgradeable.sol\":{\"keccak256\":\"0x2bc0007987c229ae7624eb29be6a9b84f6a6a5872f76248b15208b131ea41c4e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2b2835c737d073ef8b82a4cc246495a9740f43e7ff2cf130906b2449ff9bfb91\",\"dweb:/ipfs/QmSCWfNoSvvTN57ic7o1RW6NqSxxGAqbBTnLKc7QHe27qB\"]},\"@openzeppelin/contracts-upgradeable@4.9.2/utils/math/SignedMathUpgradeable.sol\":{\"keccak256\":\"0x88f6b7bba3ee33eeb741f9a0f5bc98b6e6e352d0fe4905377bb328590f84095a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://88ace2d60f265752f18903d839910be4e4e104340b2957678585b812447825d4\",\"dweb:/ipfs/QmXFkNxMc3AAGzhs2wUEZyErWQjsvoTGyYjuU5oZkFki5Z\"]},\"PAXX.sol\":{\"keccak256\":\"0x8c1cc234e62c4e871cf85873434693b6bebec5e4c759f79c17f24b80469889e8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://77f199f29ded7bf105ca639c8dde9b560ed8fc6a9f7fde60f7df1f71eefb43da\",\"dweb:/ipfs/QmfVfL3NbiiY3DPSh5S4spVaTd6ToEg8ycpV9Zu2iRS8Cg\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 780,
								"contract": "PAXX.sol:PRAXXIS",
								"label": "_initialized",
								"offset": 0,
								"slot": "0",
								"type": "t_uint8"
							},
							{
								"astId": 783,
								"contract": "PAXX.sol:PRAXXIS",
								"label": "_initializing",
								"offset": 1,
								"slot": "0",
								"type": "t_bool"
							},
							{
								"astId": 2355,
								"contract": "PAXX.sol:PRAXXIS",
								"label": "__gap",
								"offset": 0,
								"slot": "1",
								"type": "t_array(t_uint256)50_storage"
							},
							{
								"astId": 1224,
								"contract": "PAXX.sol:PRAXXIS",
								"label": "_balances",
								"offset": 0,
								"slot": "51",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 1230,
								"contract": "PAXX.sol:PRAXXIS",
								"label": "_allowances",
								"offset": 0,
								"slot": "52",
								"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
							},
							{
								"astId": 1232,
								"contract": "PAXX.sol:PRAXXIS",
								"label": "_totalSupply",
								"offset": 0,
								"slot": "53",
								"type": "t_uint256"
							},
							{
								"astId": 1234,
								"contract": "PAXX.sol:PRAXXIS",
								"label": "_name",
								"offset": 0,
								"slot": "54",
								"type": "t_string_storage"
							},
							{
								"astId": 1236,
								"contract": "PAXX.sol:PRAXXIS",
								"label": "_symbol",
								"offset": 0,
								"slot": "55",
								"type": "t_string_storage"
							},
							{
								"astId": 1816,
								"contract": "PAXX.sol:PRAXXIS",
								"label": "__gap",
								"offset": 0,
								"slot": "56",
								"type": "t_array(t_uint256)45_storage"
							},
							{
								"astId": 1958,
								"contract": "PAXX.sol:PRAXXIS",
								"label": "__gap",
								"offset": 0,
								"slot": "101",
								"type": "t_array(t_uint256)50_storage"
							},
							{
								"astId": 1099,
								"contract": "PAXX.sol:PRAXXIS",
								"label": "_paused",
								"offset": 0,
								"slot": "151",
								"type": "t_bool"
							},
							{
								"astId": 1204,
								"contract": "PAXX.sol:PRAXXIS",
								"label": "__gap",
								"offset": 0,
								"slot": "152",
								"type": "t_array(t_uint256)49_storage"
							},
							{
								"astId": 2738,
								"contract": "PAXX.sol:PRAXXIS",
								"label": "__gap",
								"offset": 0,
								"slot": "201",
								"type": "t_array(t_uint256)50_storage"
							},
							{
								"astId": 39,
								"contract": "PAXX.sol:PRAXXIS",
								"label": "_roles",
								"offset": 0,
								"slot": "251",
								"type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)"
							},
							{
								"astId": 334,
								"contract": "PAXX.sol:PRAXXIS",
								"label": "__gap",
								"offset": 0,
								"slot": "252",
								"type": "t_array(t_uint256)49_storage"
							},
							{
								"astId": 762,
								"contract": "PAXX.sol:PRAXXIS",
								"label": "__gap",
								"offset": 0,
								"slot": "301",
								"type": "t_array(t_uint256)50_storage"
							},
							{
								"astId": 1077,
								"contract": "PAXX.sol:PRAXXIS",
								"label": "__gap",
								"offset": 0,
								"slot": "351",
								"type": "t_array(t_uint256)50_storage"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_array(t_uint256)45_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[45]",
								"numberOfBytes": "1440"
							},
							"t_array(t_uint256)49_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[49]",
								"numberOfBytes": "1568"
							},
							"t_array(t_uint256)50_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[50]",
								"numberOfBytes": "1600"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_bytes32": {
								"encoding": "inplace",
								"label": "bytes32",
								"numberOfBytes": "32"
							},
							"t_mapping(t_address,t_bool)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => bool)",
								"numberOfBytes": "32",
								"value": "t_bool"
							},
							"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_uint256)"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
								"encoding": "mapping",
								"key": "t_bytes32",
								"label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
								"numberOfBytes": "32",
								"value": "t_struct(RoleData)34_storage"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_struct(RoleData)34_storage": {
								"encoding": "inplace",
								"label": "struct AccessControlUpgradeable.RoleData",
								"members": [
									{
										"astId": 31,
										"contract": "PAXX.sol:PRAXXIS",
										"label": "members",
										"offset": 0,
										"slot": "0",
										"type": "t_mapping(t_address,t_bool)"
									},
									{
										"astId": 33,
										"contract": "PAXX.sol:PRAXXIS",
										"label": "adminRole",
										"offset": 0,
										"slot": "1",
										"type": "t_bytes32"
									}
								],
								"numberOfBytes": "64"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							},
							"t_uint8": {
								"encoding": "inplace",
								"label": "uint8",
								"numberOfBytes": "1"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"initialize()": {
								"notice": "\"In Ancient Greek the word praxis (πρᾶξις) referred to activity engaged in by free people.\""
							}
						},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol",
					"exportedSymbols": {
						"AccessControlUpgradeable": [
							335
						],
						"AddressUpgradeable": [
							2314
						],
						"ContextUpgradeable": [
							2356
						],
						"ERC165Upgradeable": [
							2739
						],
						"IAccessControlUpgradeable": [
							408
						],
						"IERC165Upgradeable": [
							2751
						],
						"Initializable": [
							942
						],
						"MathUpgradeable": [
							3617
						],
						"SignedMathUpgradeable": [
							3722
						],
						"StringsUpgradeable": [
							2695
						]
					},
					"id": 336,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "108:23:0"
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable@4.9.2/access/IAccessControlUpgradeable.sol",
							"file": "./IAccessControlUpgradeable.sol",
							"id": 2,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 336,
							"sourceUnit": 409,
							"src": "133:41:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable@4.9.2/utils/ContextUpgradeable.sol",
							"file": "../utils/ContextUpgradeable.sol",
							"id": 3,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 336,
							"sourceUnit": 2357,
							"src": "175:41:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable@4.9.2/utils/StringsUpgradeable.sol",
							"file": "../utils/StringsUpgradeable.sol",
							"id": 4,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 336,
							"sourceUnit": 2696,
							"src": "217:41:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable@4.9.2/utils/introspection/ERC165Upgradeable.sol",
							"file": "../utils/introspection/ERC165Upgradeable.sol",
							"id": 5,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 336,
							"sourceUnit": 2740,
							"src": "259:54:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/Initializable.sol",
							"file": "../proxy/utils/Initializable.sol",
							"id": 6,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 336,
							"sourceUnit": 943,
							"src": "314:42:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 8,
										"name": "Initializable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 942,
										"src": "2065:13:0"
									},
									"id": 9,
									"nodeType": "InheritanceSpecifier",
									"src": "2065:13:0"
								},
								{
									"baseName": {
										"id": 10,
										"name": "ContextUpgradeable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 2356,
										"src": "2080:18:0"
									},
									"id": 11,
									"nodeType": "InheritanceSpecifier",
									"src": "2080:18:0"
								},
								{
									"baseName": {
										"id": 12,
										"name": "IAccessControlUpgradeable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 408,
										"src": "2100:25:0"
									},
									"id": 13,
									"nodeType": "InheritanceSpecifier",
									"src": "2100:25:0"
								},
								{
									"baseName": {
										"id": 14,
										"name": "ERC165Upgradeable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 2739,
										"src": "2127:17:0"
									},
									"id": 15,
									"nodeType": "InheritanceSpecifier",
									"src": "2127:17:0"
								}
							],
							"canonicalName": "AccessControlUpgradeable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 7,
								"nodeType": "StructuredDocumentation",
								"src": "358:1660:0",
								"text": " @dev Contract module that allows children to implement role-based access\n control mechanisms. This is a lightweight version that doesn't allow enumerating role\n members except through off-chain means by accessing the contract event logs. Some\n applications may benefit from on-chain enumerability, for those cases see\n {AccessControlEnumerable}.\n Roles are referred to by their `bytes32` identifier. These should be exposed\n in the external API and be unique. The best way to achieve this is by\n using `public constant` hash digests:\n ```solidity\n bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n ```\n Roles can be used to represent a set of permissions. To restrict access to a\n function call, use {hasRole}:\n ```solidity\n function foo() public {\n     require(hasRole(MY_ROLE, msg.sender));\n     ...\n }\n ```\n Roles can be granted and revoked dynamically via the {grantRole} and\n {revokeRole} functions. Each role has an associated admin role, and only\n accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n that only accounts with this role will be able to grant or revoke other\n roles. More complex role relationships can be created by using\n {_setRoleAdmin}.\n WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n grant and revoke this role. Extra precautions should be taken to secure\n accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n to enforce additional security measures for this role."
							},
							"fullyImplemented": true,
							"id": 335,
							"linearizedBaseContracts": [
								335,
								2739,
								2751,
								408,
								2356,
								942
							],
							"name": "AccessControlUpgradeable",
							"nameLocation": "2037:24:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 20,
										"nodeType": "Block",
										"src": "2209:7:0",
										"statements": []
									},
									"id": 21,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 18,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 17,
												"name": "onlyInitializing",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 887,
												"src": "2192:16:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "2192:16:0"
										}
									],
									"name": "__AccessControl_init",
									"nameLocation": "2160:20:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 16,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2180:2:0"
									},
									"returnParameters": {
										"id": 19,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2209:0:0"
									},
									"scope": 335,
									"src": "2151:65:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 26,
										"nodeType": "Block",
										"src": "2290:7:0",
										"statements": []
									},
									"id": 27,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 24,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 23,
												"name": "onlyInitializing",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 887,
												"src": "2273:16:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "2273:16:0"
										}
									],
									"name": "__AccessControl_init_unchained",
									"nameLocation": "2231:30:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 22,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2261:2:0"
									},
									"returnParameters": {
										"id": 25,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2290:0:0"
									},
									"scope": 335,
									"src": "2222:75:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"canonicalName": "AccessControlUpgradeable.RoleData",
									"id": 34,
									"members": [
										{
											"constant": false,
											"id": 31,
											"mutability": "mutable",
											"name": "members",
											"nameLocation": "2353:7:0",
											"nodeType": "VariableDeclaration",
											"scope": 34,
											"src": "2328:32:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
												"typeString": "mapping(address => bool)"
											},
											"typeName": {
												"id": 30,
												"keyType": {
													"id": 28,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2336:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "Mapping",
												"src": "2328:24:0",
												"typeDescriptions": {
													"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
													"typeString": "mapping(address => bool)"
												},
												"valueType": {
													"id": 29,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2347:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 33,
											"mutability": "mutable",
											"name": "adminRole",
											"nameLocation": "2378:9:0",
											"nodeType": "VariableDeclaration",
											"scope": 34,
											"src": "2370:17:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes32",
												"typeString": "bytes32"
											},
											"typeName": {
												"id": 32,
												"name": "bytes32",
												"nodeType": "ElementaryTypeName",
												"src": "2370:7:0",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "RoleData",
									"nameLocation": "2309:8:0",
									"nodeType": "StructDefinition",
									"scope": 335,
									"src": "2302:92:0",
									"visibility": "public"
								},
								{
									"constant": false,
									"id": 39,
									"mutability": "mutable",
									"name": "_roles",
									"nameLocation": "2437:6:0",
									"nodeType": "VariableDeclaration",
									"scope": 335,
									"src": "2400:43:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_RoleData_$34_storage_$",
										"typeString": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
									},
									"typeName": {
										"id": 38,
										"keyType": {
											"id": 35,
											"name": "bytes32",
											"nodeType": "ElementaryTypeName",
											"src": "2408:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes32",
												"typeString": "bytes32"
											}
										},
										"nodeType": "Mapping",
										"src": "2400:28:0",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_RoleData_$34_storage_$",
											"typeString": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
										},
										"valueType": {
											"id": 37,
											"nodeType": "UserDefinedTypeName",
											"pathNode": {
												"id": 36,
												"name": "RoleData",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 34,
												"src": "2419:8:0"
											},
											"referencedDeclaration": 34,
											"src": "2419:8:0",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_RoleData_$34_storage_ptr",
												"typeString": "struct AccessControlUpgradeable.RoleData"
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": true,
									"functionSelector": "a217fddf",
									"id": 42,
									"mutability": "constant",
									"name": "DEFAULT_ADMIN_ROLE",
									"nameLocation": "2474:18:0",
									"nodeType": "VariableDeclaration",
									"scope": 335,
									"src": "2450:49:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 40,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "2450:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"value": {
										"hexValue": "30783030",
										"id": 41,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "2495:4:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_0_by_1",
											"typeString": "int_const 0"
										},
										"value": "0x00"
									},
									"visibility": "public"
								},
								{
									"body": {
										"id": 52,
										"nodeType": "Block",
										"src": "2918:44:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 48,
															"name": "role",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 45,
															"src": "2939:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 47,
														"name": "_checkRole",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															107,
															146
														],
														"referencedDeclaration": 107,
														"src": "2928:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_bytes32_$returns$__$",
															"typeString": "function (bytes32) view"
														}
													},
													"id": 49,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2928:16:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 50,
												"nodeType": "ExpressionStatement",
												"src": "2928:16:0"
											},
											{
												"id": 51,
												"nodeType": "PlaceholderStatement",
												"src": "2954:1:0"
											}
										]
									},
									"documentation": {
										"id": 43,
										"nodeType": "StructuredDocumentation",
										"src": "2506:375:0",
										"text": " @dev Modifier that checks that an account has a specific role. Reverts\n with a standardized message including the required role.\n The format of the revert reason is given by the following regular expression:\n  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n _Available since v4.1._"
									},
									"id": 53,
									"name": "onlyRole",
									"nameLocation": "2895:8:0",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 46,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 45,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "2912:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 53,
												"src": "2904:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 44,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2904:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2903:14:0"
									},
									"src": "2886:76:0",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										2733
									],
									"body": {
										"id": 74,
										"nodeType": "Block",
										"src": "3120:122:0",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 72,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_bytes4",
															"typeString": "bytes4"
														},
														"id": 67,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 62,
															"name": "interfaceId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 56,
															"src": "3137:11:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes4",
																"typeString": "bytes4"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"expression": {
																"arguments": [
																	{
																		"id": 64,
																		"name": "IAccessControlUpgradeable",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 408,
																		"src": "3157:25:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_IAccessControlUpgradeable_$408_$",
																			"typeString": "type(contract IAccessControlUpgradeable)"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_type$_t_contract$_IAccessControlUpgradeable_$408_$",
																			"typeString": "type(contract IAccessControlUpgradeable)"
																		}
																	],
																	"id": 63,
																	"name": "type",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967269,
																	"src": "3152:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 65,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3152:31:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_meta_type_t_contract$_IAccessControlUpgradeable_$408",
																	"typeString": "type(contract IAccessControlUpgradeable)"
																}
															},
															"id": 66,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberName": "interfaceId",
															"nodeType": "MemberAccess",
															"src": "3152:43:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes4",
																"typeString": "bytes4"
															}
														},
														"src": "3137:58:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "||",
													"rightExpression": {
														"arguments": [
															{
																"id": 70,
																"name": "interfaceId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 56,
																"src": "3223:11:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes4",
																	"typeString": "bytes4"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes4",
																	"typeString": "bytes4"
																}
															],
															"expression": {
																"id": 68,
																"name": "super",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967271,
																"src": "3199:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_super$_AccessControlUpgradeable_$335_$",
																	"typeString": "type(contract super AccessControlUpgradeable)"
																}
															},
															"id": 69,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "supportsInterface",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2733,
															"src": "3199:23:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_bytes4_$returns$_t_bool_$",
																"typeString": "function (bytes4) view returns (bool)"
															}
														},
														"id": 71,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3199:36:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "3137:98:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 61,
												"id": 73,
												"nodeType": "Return",
												"src": "3130:105:0"
											}
										]
									},
									"documentation": {
										"id": 54,
										"nodeType": "StructuredDocumentation",
										"src": "2968:56:0",
										"text": " @dev See {IERC165-supportsInterface}."
									},
									"functionSelector": "01ffc9a7",
									"id": 75,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "supportsInterface",
									"nameLocation": "3038:17:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 58,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3096:8:0"
									},
									"parameters": {
										"id": 57,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 56,
												"mutability": "mutable",
												"name": "interfaceId",
												"nameLocation": "3063:11:0",
												"nodeType": "VariableDeclaration",
												"scope": 75,
												"src": "3056:18:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 55,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "3056:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3055:20:0"
									},
									"returnParameters": {
										"id": 61,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 60,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 75,
												"src": "3114:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 59,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3114:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3113:6:0"
									},
									"scope": 335,
									"src": "3029:213:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										375
									],
									"body": {
										"id": 93,
										"nodeType": "Block",
										"src": "3421:53:0",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"expression": {
															"baseExpression": {
																"id": 86,
																"name": "_roles",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 39,
																"src": "3438:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_RoleData_$34_storage_$",
																	"typeString": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData storage ref)"
																}
															},
															"id": 88,
															"indexExpression": {
																"id": 87,
																"name": "role",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 78,
																"src": "3445:4:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "3438:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_RoleData_$34_storage",
																"typeString": "struct AccessControlUpgradeable.RoleData storage ref"
															}
														},
														"id": 89,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "members",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 31,
														"src": "3438:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
															"typeString": "mapping(address => bool)"
														}
													},
													"id": 91,
													"indexExpression": {
														"id": 90,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 80,
														"src": "3459:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "3438:29:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 85,
												"id": 92,
												"nodeType": "Return",
												"src": "3431:36:0"
											}
										]
									},
									"documentation": {
										"id": 76,
										"nodeType": "StructuredDocumentation",
										"src": "3248:76:0",
										"text": " @dev Returns `true` if `account` has been granted `role`."
									},
									"functionSelector": "91d14854",
									"id": 94,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "hasRole",
									"nameLocation": "3338:7:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 82,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3397:8:0"
									},
									"parameters": {
										"id": 81,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 78,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "3354:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 94,
												"src": "3346:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 77,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3346:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 80,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "3368:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 94,
												"src": "3360:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 79,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3360:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3345:31:0"
									},
									"returnParameters": {
										"id": 85,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 84,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 94,
												"src": "3415:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 83,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3415:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3414:6:0"
									},
									"scope": 335,
									"src": "3329:145:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 106,
										"nodeType": "Block",
										"src": "3824:47:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 101,
															"name": "role",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 97,
															"src": "3845:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 102,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2341,
																"src": "3851:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 103,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3851:12:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 100,
														"name": "_checkRole",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															107,
															146
														],
														"referencedDeclaration": 146,
														"src": "3834:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_address_$returns$__$",
															"typeString": "function (bytes32,address) view"
														}
													},
													"id": 104,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3834:30:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 105,
												"nodeType": "ExpressionStatement",
												"src": "3834:30:0"
											}
										]
									},
									"documentation": {
										"id": 95,
										"nodeType": "StructuredDocumentation",
										"src": "3480:283:0",
										"text": " @dev Revert with a standard message if `_msgSender()` is missing `role`.\n Overriding this function changes the behavior of the {onlyRole} modifier.\n Format of the revert message is described in {_checkRole}.\n _Available since v4.6._"
									},
									"id": 107,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_checkRole",
									"nameLocation": "3777:10:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 98,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 97,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "3796:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 107,
												"src": "3788:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 96,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3788:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3787:14:0"
									},
									"returnParameters": {
										"id": 99,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3824:0:0"
									},
									"scope": 335,
									"src": "3768:103:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 145,
										"nodeType": "Block",
										"src": "4225:428:0",
										"statements": [
											{
												"condition": {
													"id": 119,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "4239:23:0",
													"subExpression": {
														"arguments": [
															{
																"id": 116,
																"name": "role",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 110,
																"src": "4248:4:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															{
																"id": 117,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 112,
																"src": "4254:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"id": 115,
															"name": "hasRole",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 94,
															"src": "4240:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$",
																"typeString": "function (bytes32,address) view returns (bool)"
															}
														},
														"id": 118,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "4240:22:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 144,
												"nodeType": "IfStatement",
												"src": "4235:412:0",
												"trueBody": {
													"id": 143,
													"nodeType": "Block",
													"src": "4264:383:0",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"hexValue": "416363657373436f6e74726f6c3a206163636f756e7420",
																						"id": 125,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "string",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "4372:25:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874",
																							"typeString": "literal_string \"AccessControl: account \""
																						},
																						"value": "AccessControl: account "
																					},
																					{
																						"arguments": [
																							{
																								"id": 128,
																								"name": "account",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 112,
																								"src": "4454:7:0",
																								"typeDescriptions": {
																									"typeIdentifier": "t_address",
																									"typeString": "address"
																								}
																							}
																						],
																						"expression": {
																							"argumentTypes": [
																								{
																									"typeIdentifier": "t_address",
																									"typeString": "address"
																								}
																							],
																							"expression": {
																								"id": 126,
																								"name": "StringsUpgradeable",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 2695,
																								"src": "4423:18:0",
																								"typeDescriptions": {
																									"typeIdentifier": "t_type$_t_contract$_StringsUpgradeable_$2695_$",
																									"typeString": "type(library StringsUpgradeable)"
																								}
																							},
																							"id": 127,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": false,
																							"lValueRequested": false,
																							"memberName": "toHexString",
																							"nodeType": "MemberAccess",
																							"referencedDeclaration": 2669,
																							"src": "4423:30:0",
																							"typeDescriptions": {
																								"typeIdentifier": "t_function_internal_pure$_t_address_$returns$_t_string_memory_ptr_$",
																								"typeString": "function (address) pure returns (string memory)"
																							}
																						},
																						"id": 129,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"kind": "functionCall",
																						"lValueRequested": false,
																						"names": [],
																						"nodeType": "FunctionCall",
																						"src": "4423:39:0",
																						"tryCall": false,
																						"typeDescriptions": {
																							"typeIdentifier": "t_string_memory_ptr",
																							"typeString": "string memory"
																						}
																					},
																					{
																						"hexValue": "206973206d697373696e6720726f6c6520",
																						"id": 130,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "string",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "4488:19:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69",
																							"typeString": "literal_string \" is missing role \""
																						},
																						"value": " is missing role "
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"id": 135,
																										"name": "role",
																										"nodeType": "Identifier",
																										"overloadedDeclarations": [],
																										"referencedDeclaration": 110,
																										"src": "4572:4:0",
																										"typeDescriptions": {
																											"typeIdentifier": "t_bytes32",
																											"typeString": "bytes32"
																										}
																									}
																								],
																								"expression": {
																									"argumentTypes": [
																										{
																											"typeIdentifier": "t_bytes32",
																											"typeString": "bytes32"
																										}
																									],
																									"id": 134,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"lValueRequested": false,
																									"nodeType": "ElementaryTypeNameExpression",
																									"src": "4564:7:0",
																									"typeDescriptions": {
																										"typeIdentifier": "t_type$_t_uint256_$",
																										"typeString": "type(uint256)"
																									},
																									"typeName": {
																										"id": 133,
																										"name": "uint256",
																										"nodeType": "ElementaryTypeName",
																										"src": "4564:7:0",
																										"typeDescriptions": {}
																									}
																								},
																								"id": 136,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"kind": "typeConversion",
																								"lValueRequested": false,
																								"names": [],
																								"nodeType": "FunctionCall",
																								"src": "4564:13:0",
																								"tryCall": false,
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							{
																								"hexValue": "3332",
																								"id": 137,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": true,
																								"kind": "number",
																								"lValueRequested": false,
																								"nodeType": "Literal",
																								"src": "4579:2:0",
																								"typeDescriptions": {
																									"typeIdentifier": "t_rational_32_by_1",
																									"typeString": "int_const 32"
																								},
																								"value": "32"
																							}
																						],
																						"expression": {
																							"argumentTypes": [
																								{
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								},
																								{
																									"typeIdentifier": "t_rational_32_by_1",
																									"typeString": "int_const 32"
																								}
																							],
																							"expression": {
																								"id": 131,
																								"name": "StringsUpgradeable",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 2695,
																								"src": "4533:18:0",
																								"typeDescriptions": {
																									"typeIdentifier": "t_type$_t_contract$_StringsUpgradeable_$2695_$",
																									"typeString": "type(library StringsUpgradeable)"
																								}
																							},
																							"id": 132,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": false,
																							"lValueRequested": false,
																							"memberName": "toHexString",
																							"nodeType": "MemberAccess",
																							"referencedDeclaration": 2649,
																							"src": "4533:30:0",
																							"typeDescriptions": {
																								"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$",
																								"typeString": "function (uint256,uint256) pure returns (string memory)"
																							}
																						},
																						"id": 138,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"kind": "functionCall",
																						"lValueRequested": false,
																						"names": [],
																						"nodeType": "FunctionCall",
																						"src": "4533:49:0",
																						"tryCall": false,
																						"typeDescriptions": {
																							"typeIdentifier": "t_string_memory_ptr",
																							"typeString": "string memory"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874",
																							"typeString": "literal_string \"AccessControl: account \""
																						},
																						{
																							"typeIdentifier": "t_string_memory_ptr",
																							"typeString": "string memory"
																						},
																						{
																							"typeIdentifier": "t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69",
																							"typeString": "literal_string \" is missing role \""
																						},
																						{
																							"typeIdentifier": "t_string_memory_ptr",
																							"typeString": "string memory"
																						}
																					],
																					"expression": {
																						"id": 123,
																						"name": "abi",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 4294967295,
																						"src": "4330:3:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_magic_abi",
																							"typeString": "abi"
																						}
																					},
																					"id": 124,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"memberName": "encodePacked",
																					"nodeType": "MemberAccess",
																					"src": "4330:16:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
																						"typeString": "function () pure returns (bytes memory)"
																					}
																				},
																				"id": 139,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "4330:274:0",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			],
																			"id": 122,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "4302:6:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_string_storage_ptr_$",
																				"typeString": "type(string storage pointer)"
																			},
																			"typeName": {
																				"id": 121,
																				"name": "string",
																				"nodeType": "ElementaryTypeName",
																				"src": "4302:6:0",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 140,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "4302:320:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 120,
																	"name": "revert",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967277,
																		4294967277
																	],
																	"referencedDeclaration": 4294967277,
																	"src": "4278:6:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (string memory) pure"
																	}
																},
																"id": 141,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4278:358:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 142,
															"nodeType": "ExpressionStatement",
															"src": "4278:358:0"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 108,
										"nodeType": "StructuredDocumentation",
										"src": "3877:270:0",
										"text": " @dev Revert with a standard message if `account` is missing `role`.\n The format of the revert reason is given by the following regular expression:\n  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/"
									},
									"id": 146,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_checkRole",
									"nameLocation": "4161:10:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 113,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 110,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "4180:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 146,
												"src": "4172:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 109,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4172:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 112,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "4194:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 146,
												"src": "4186:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 111,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4186:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4171:31:0"
									},
									"returnParameters": {
										"id": 114,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4225:0:0"
									},
									"scope": 335,
									"src": "4152:501:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										383
									],
									"body": {
										"id": 160,
										"nodeType": "Block",
										"src": "4917:46:0",
										"statements": [
											{
												"expression": {
													"expression": {
														"baseExpression": {
															"id": 155,
															"name": "_roles",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 39,
															"src": "4934:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_RoleData_$34_storage_$",
																"typeString": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData storage ref)"
															}
														},
														"id": 157,
														"indexExpression": {
															"id": 156,
															"name": "role",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 149,
															"src": "4941:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "4934:12:0",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_RoleData_$34_storage",
															"typeString": "struct AccessControlUpgradeable.RoleData storage ref"
														}
													},
													"id": 158,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "adminRole",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 33,
													"src": "4934:22:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 154,
												"id": 159,
												"nodeType": "Return",
												"src": "4927:29:0"
											}
										]
									},
									"documentation": {
										"id": 147,
										"nodeType": "StructuredDocumentation",
										"src": "4659:170:0",
										"text": " @dev Returns the admin role that controls `role`. See {grantRole} and\n {revokeRole}.\n To change a role's admin, use {_setRoleAdmin}."
									},
									"functionSelector": "248a9ca3",
									"id": 161,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getRoleAdmin",
									"nameLocation": "4843:12:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 151,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "4890:8:0"
									},
									"parameters": {
										"id": 150,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 149,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "4864:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 161,
												"src": "4856:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 148,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4856:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4855:14:0"
									},
									"returnParameters": {
										"id": 154,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 153,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 161,
												"src": "4908:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 152,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4908:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4907:9:0"
									},
									"scope": 335,
									"src": "4834:129:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										391
									],
									"body": {
										"id": 180,
										"nodeType": "Block",
										"src": "5362:42:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 176,
															"name": "role",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 164,
															"src": "5383:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 177,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 166,
															"src": "5389:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 175,
														"name": "_grantRole",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 298,
														"src": "5372:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$",
															"typeString": "function (bytes32,address)"
														}
													},
													"id": 178,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5372:25:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 179,
												"nodeType": "ExpressionStatement",
												"src": "5372:25:0"
											}
										]
									},
									"documentation": {
										"id": 162,
										"nodeType": "StructuredDocumentation",
										"src": "4969:285:0",
										"text": " @dev Grants `role` to `account`.\n If `account` had not been already granted `role`, emits a {RoleGranted}\n event.\n Requirements:\n - the caller must have ``role``'s admin role.\n May emit a {RoleGranted} event."
									},
									"functionSelector": "2f2ff15d",
									"id": 181,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"arguments": [
												{
													"arguments": [
														{
															"id": 171,
															"name": "role",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 164,
															"src": "5355:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 170,
														"name": "getRoleAdmin",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 161,
														"src": "5342:12:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$",
															"typeString": "function (bytes32) view returns (bytes32)"
														}
													},
													"id": 172,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5342:18:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												}
											],
											"id": 173,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 169,
												"name": "onlyRole",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 53,
												"src": "5333:8:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "5333:28:0"
										}
									],
									"name": "grantRole",
									"nameLocation": "5268:9:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 168,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "5324:8:0"
									},
									"parameters": {
										"id": 167,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 164,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "5286:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 181,
												"src": "5278:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 163,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5278:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 166,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "5300:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 181,
												"src": "5292:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 165,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5292:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5277:31:0"
									},
									"returnParameters": {
										"id": 174,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5362:0:0"
									},
									"scope": 335,
									"src": "5259:145:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										399
									],
									"body": {
										"id": 200,
										"nodeType": "Block",
										"src": "5788:43:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 196,
															"name": "role",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 184,
															"src": "5810:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 197,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 186,
															"src": "5816:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 195,
														"name": "_revokeRole",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 329,
														"src": "5798:11:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$",
															"typeString": "function (bytes32,address)"
														}
													},
													"id": 198,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5798:26:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 199,
												"nodeType": "ExpressionStatement",
												"src": "5798:26:0"
											}
										]
									},
									"documentation": {
										"id": 182,
										"nodeType": "StructuredDocumentation",
										"src": "5410:269:0",
										"text": " @dev Revokes `role` from `account`.\n If `account` had been granted `role`, emits a {RoleRevoked} event.\n Requirements:\n - the caller must have ``role``'s admin role.\n May emit a {RoleRevoked} event."
									},
									"functionSelector": "d547741f",
									"id": 201,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"arguments": [
												{
													"arguments": [
														{
															"id": 191,
															"name": "role",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 184,
															"src": "5781:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 190,
														"name": "getRoleAdmin",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 161,
														"src": "5768:12:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$",
															"typeString": "function (bytes32) view returns (bytes32)"
														}
													},
													"id": 192,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5768:18:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												}
											],
											"id": 193,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 189,
												"name": "onlyRole",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 53,
												"src": "5759:8:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "5759:28:0"
										}
									],
									"name": "revokeRole",
									"nameLocation": "5693:10:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 188,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "5750:8:0"
									},
									"parameters": {
										"id": 187,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 184,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "5712:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 201,
												"src": "5704:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 183,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5704:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 186,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "5726:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 201,
												"src": "5718:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 185,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5718:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5703:31:0"
									},
									"returnParameters": {
										"id": 194,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5788:0:0"
									},
									"scope": 335,
									"src": "5684:147:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										407
									],
									"body": {
										"id": 223,
										"nodeType": "Block",
										"src": "6445:137:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 214,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 211,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 206,
																"src": "6463:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 212,
																	"name": "_msgSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2341,
																	"src": "6474:10:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 213,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6474:12:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "6463:23:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636520726f6c657320666f722073656c66",
															"id": 215,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6488:49:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b",
																"typeString": "literal_string \"AccessControl: can only renounce roles for self\""
															},
															"value": "AccessControl: can only renounce roles for self"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b",
																"typeString": "literal_string \"AccessControl: can only renounce roles for self\""
															}
														],
														"id": 210,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "6455:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 216,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6455:83:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 217,
												"nodeType": "ExpressionStatement",
												"src": "6455:83:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 219,
															"name": "role",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 204,
															"src": "6561:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 220,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 206,
															"src": "6567:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 218,
														"name": "_revokeRole",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 329,
														"src": "6549:11:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$",
															"typeString": "function (bytes32,address)"
														}
													},
													"id": 221,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6549:26:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 222,
												"nodeType": "ExpressionStatement",
												"src": "6549:26:0"
											}
										]
									},
									"documentation": {
										"id": 202,
										"nodeType": "StructuredDocumentation",
										"src": "5837:526:0",
										"text": " @dev Revokes `role` from the calling account.\n Roles are often managed via {grantRole} and {revokeRole}: this function's\n purpose is to provide a mechanism for accounts to lose their privileges\n if they are compromised (such as when a trusted device is misplaced).\n If the calling account had been revoked `role`, emits a {RoleRevoked}\n event.\n Requirements:\n - the caller must be `account`.\n May emit a {RoleRevoked} event."
									},
									"functionSelector": "36568abe",
									"id": 224,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "renounceRole",
									"nameLocation": "6377:12:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 208,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "6436:8:0"
									},
									"parameters": {
										"id": 207,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 204,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "6398:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 224,
												"src": "6390:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 203,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6390:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 206,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "6412:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 224,
												"src": "6404:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 205,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6404:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6389:31:0"
									},
									"returnParameters": {
										"id": 209,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6445:0:0"
									},
									"scope": 335,
									"src": "6368:214:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 237,
										"nodeType": "Block",
										"src": "7335:42:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 233,
															"name": "role",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 227,
															"src": "7356:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 234,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 229,
															"src": "7362:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 232,
														"name": "_grantRole",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 298,
														"src": "7345:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$",
															"typeString": "function (bytes32,address)"
														}
													},
													"id": 235,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7345:25:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 236,
												"nodeType": "ExpressionStatement",
												"src": "7345:25:0"
											}
										]
									},
									"documentation": {
										"id": 225,
										"nodeType": "StructuredDocumentation",
										"src": "6588:674:0",
										"text": " @dev Grants `role` to `account`.\n If `account` had not been already granted `role`, emits a {RoleGranted}\n event. Note that unlike {grantRole}, this function doesn't perform any\n checks on the calling account.\n May emit a {RoleGranted} event.\n [WARNING]\n ====\n This function should only be called from the constructor when setting\n up the initial roles for the system.\n Using this function in any other way is effectively circumventing the admin\n system imposed by {AccessControl}.\n ====\n NOTE: This function is deprecated in favor of {_grantRole}."
									},
									"id": 238,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_setupRole",
									"nameLocation": "7276:10:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 230,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 227,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "7295:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 238,
												"src": "7287:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 226,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "7287:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 229,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "7309:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 238,
												"src": "7301:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 228,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7301:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7286:31:0"
									},
									"returnParameters": {
										"id": 231,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7335:0:0"
									},
									"scope": 335,
									"src": "7267:110:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 265,
										"nodeType": "Block",
										"src": "7575:174:0",
										"statements": [
											{
												"assignments": [
													247
												],
												"declarations": [
													{
														"constant": false,
														"id": 247,
														"mutability": "mutable",
														"name": "previousAdminRole",
														"nameLocation": "7593:17:0",
														"nodeType": "VariableDeclaration",
														"scope": 265,
														"src": "7585:25:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 246,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "7585:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 251,
												"initialValue": {
													"arguments": [
														{
															"id": 249,
															"name": "role",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 241,
															"src": "7626:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 248,
														"name": "getRoleAdmin",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 161,
														"src": "7613:12:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$",
															"typeString": "function (bytes32) view returns (bytes32)"
														}
													},
													"id": 250,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7613:18:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7585:46:0"
											},
											{
												"expression": {
													"id": 257,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"baseExpression": {
																"id": 252,
																"name": "_roles",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 39,
																"src": "7641:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_RoleData_$34_storage_$",
																	"typeString": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData storage ref)"
																}
															},
															"id": 254,
															"indexExpression": {
																"id": 253,
																"name": "role",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 241,
																"src": "7648:4:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "7641:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_RoleData_$34_storage",
																"typeString": "struct AccessControlUpgradeable.RoleData storage ref"
															}
														},
														"id": 255,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "adminRole",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 33,
														"src": "7641:22:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 256,
														"name": "adminRole",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 243,
														"src": "7666:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "7641:34:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"id": 258,
												"nodeType": "ExpressionStatement",
												"src": "7641:34:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 260,
															"name": "role",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 241,
															"src": "7707:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 261,
															"name": "previousAdminRole",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 247,
															"src": "7713:17:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 262,
															"name": "adminRole",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 243,
															"src": "7732:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 259,
														"name": "RoleAdminChanged",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 347,
														"src": "7690:16:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$__$",
															"typeString": "function (bytes32,bytes32,bytes32)"
														}
													},
													"id": 263,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7690:52:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 264,
												"nodeType": "EmitStatement",
												"src": "7685:57:0"
											}
										]
									},
									"documentation": {
										"id": 239,
										"nodeType": "StructuredDocumentation",
										"src": "7383:114:0",
										"text": " @dev Sets `adminRole` as ``role``'s admin role.\n Emits a {RoleAdminChanged} event."
									},
									"id": 266,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_setRoleAdmin",
									"nameLocation": "7511:13:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 244,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 241,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "7533:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 266,
												"src": "7525:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 240,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "7525:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 243,
												"mutability": "mutable",
												"name": "adminRole",
												"nameLocation": "7547:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 266,
												"src": "7539:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 242,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "7539:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7524:33:0"
									},
									"returnParameters": {
										"id": 245,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7575:0:0"
									},
									"scope": 335,
									"src": "7502:247:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 297,
										"nodeType": "Block",
										"src": "7985:165:0",
										"statements": [
											{
												"condition": {
													"id": 278,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "7999:23:0",
													"subExpression": {
														"arguments": [
															{
																"id": 275,
																"name": "role",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 269,
																"src": "8008:4:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															{
																"id": 276,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 271,
																"src": "8014:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"id": 274,
															"name": "hasRole",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 94,
															"src": "8000:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$",
																"typeString": "function (bytes32,address) view returns (bool)"
															}
														},
														"id": 277,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "8000:22:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 296,
												"nodeType": "IfStatement",
												"src": "7995:149:0",
												"trueBody": {
													"id": 295,
													"nodeType": "Block",
													"src": "8024:120:0",
													"statements": [
														{
															"expression": {
																"id": 286,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"expression": {
																			"baseExpression": {
																				"id": 279,
																				"name": "_roles",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 39,
																				"src": "8038:6:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_RoleData_$34_storage_$",
																					"typeString": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData storage ref)"
																				}
																			},
																			"id": 281,
																			"indexExpression": {
																				"id": 280,
																				"name": "role",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 269,
																				"src": "8045:4:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "8038:12:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_RoleData_$34_storage",
																				"typeString": "struct AccessControlUpgradeable.RoleData storage ref"
																			}
																		},
																		"id": 282,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "members",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 31,
																		"src": "8038:20:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																			"typeString": "mapping(address => bool)"
																		}
																	},
																	"id": 284,
																	"indexExpression": {
																		"id": 283,
																		"name": "account",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 271,
																		"src": "8059:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "8038:29:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "74727565",
																	"id": 285,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8070:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																"src": "8038:36:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 287,
															"nodeType": "ExpressionStatement",
															"src": "8038:36:0"
														},
														{
															"eventCall": {
																"arguments": [
																	{
																		"id": 289,
																		"name": "role",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 269,
																		"src": "8105:4:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	{
																		"id": 290,
																		"name": "account",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 271,
																		"src": "8111:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"arguments": [],
																		"expression": {
																			"argumentTypes": [],
																			"id": 291,
																			"name": "_msgSender",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2341,
																			"src": "8120:10:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																				"typeString": "function () view returns (address)"
																			}
																		},
																		"id": 292,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "8120:12:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 288,
																	"name": "RoleGranted",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 356,
																	"src": "8093:11:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_address_$returns$__$",
																		"typeString": "function (bytes32,address,address)"
																	}
																},
																"id": 293,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8093:40:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 294,
															"nodeType": "EmitStatement",
															"src": "8088:45:0"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 267,
										"nodeType": "StructuredDocumentation",
										"src": "7755:157:0",
										"text": " @dev Grants `role` to `account`.\n Internal function without access restriction.\n May emit a {RoleGranted} event."
									},
									"id": 298,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_grantRole",
									"nameLocation": "7926:10:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 272,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 269,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "7945:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 298,
												"src": "7937:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 268,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "7937:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 271,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "7959:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 298,
												"src": "7951:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 270,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7951:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7936:31:0"
									},
									"returnParameters": {
										"id": 273,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7985:0:0"
									},
									"scope": 335,
									"src": "7917:233:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 328,
										"nodeType": "Block",
										"src": "8390:165:0",
										"statements": [
											{
												"condition": {
													"arguments": [
														{
															"id": 307,
															"name": "role",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 301,
															"src": "8412:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 308,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 303,
															"src": "8418:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 306,
														"name": "hasRole",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 94,
														"src": "8404:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$",
															"typeString": "function (bytes32,address) view returns (bool)"
														}
													},
													"id": 309,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8404:22:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 327,
												"nodeType": "IfStatement",
												"src": "8400:149:0",
												"trueBody": {
													"id": 326,
													"nodeType": "Block",
													"src": "8428:121:0",
													"statements": [
														{
															"expression": {
																"id": 317,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"expression": {
																			"baseExpression": {
																				"id": 310,
																				"name": "_roles",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 39,
																				"src": "8442:6:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_RoleData_$34_storage_$",
																					"typeString": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData storage ref)"
																				}
																			},
																			"id": 312,
																			"indexExpression": {
																				"id": 311,
																				"name": "role",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 301,
																				"src": "8449:4:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "8442:12:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_RoleData_$34_storage",
																				"typeString": "struct AccessControlUpgradeable.RoleData storage ref"
																			}
																		},
																		"id": 313,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "members",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 31,
																		"src": "8442:20:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																			"typeString": "mapping(address => bool)"
																		}
																	},
																	"id": 315,
																	"indexExpression": {
																		"id": 314,
																		"name": "account",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 303,
																		"src": "8463:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "8442:29:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "66616c7365",
																	"id": 316,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8474:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "false"
																},
																"src": "8442:37:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 318,
															"nodeType": "ExpressionStatement",
															"src": "8442:37:0"
														},
														{
															"eventCall": {
																"arguments": [
																	{
																		"id": 320,
																		"name": "role",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 301,
																		"src": "8510:4:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	{
																		"id": 321,
																		"name": "account",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 303,
																		"src": "8516:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"arguments": [],
																		"expression": {
																			"argumentTypes": [],
																			"id": 322,
																			"name": "_msgSender",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2341,
																			"src": "8525:10:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																				"typeString": "function () view returns (address)"
																			}
																		},
																		"id": 323,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "8525:12:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 319,
																	"name": "RoleRevoked",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 365,
																	"src": "8498:11:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_address_$returns$__$",
																		"typeString": "function (bytes32,address,address)"
																	}
																},
																"id": 324,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8498:40:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 325,
															"nodeType": "EmitStatement",
															"src": "8493:45:0"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 299,
										"nodeType": "StructuredDocumentation",
										"src": "8156:160:0",
										"text": " @dev Revokes `role` from `account`.\n Internal function without access restriction.\n May emit a {RoleRevoked} event."
									},
									"id": 329,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_revokeRole",
									"nameLocation": "8330:11:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 304,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 301,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "8350:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 329,
												"src": "8342:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 300,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "8342:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 303,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "8364:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 329,
												"src": "8356:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 302,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8356:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8341:31:0"
									},
									"returnParameters": {
										"id": 305,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8390:0:0"
									},
									"scope": 335,
									"src": "8321:234:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"constant": false,
									"documentation": {
										"id": 330,
										"nodeType": "StructuredDocumentation",
										"src": "8561:254:0",
										"text": " @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
									},
									"id": 334,
									"mutability": "mutable",
									"name": "__gap",
									"nameLocation": "8840:5:0",
									"nodeType": "VariableDeclaration",
									"scope": 335,
									"src": "8820:25:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_array$_t_uint256_$49_storage",
										"typeString": "uint256[49]"
									},
									"typeName": {
										"baseType": {
											"id": 331,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "8820:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"id": 333,
										"length": {
											"hexValue": "3439",
											"id": 332,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "8828:2:0",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_49_by_1",
												"typeString": "int_const 49"
											},
											"value": "49"
										},
										"nodeType": "ArrayTypeName",
										"src": "8820:11:0",
										"typeDescriptions": {
											"typeIdentifier": "t_array$_t_uint256_$49_storage_ptr",
											"typeString": "uint256[49]"
										}
									},
									"visibility": "private"
								}
							],
							"scope": 336,
							"src": "2019:6829:0",
							"usedErrors": []
						}
					],
					"src": "108:8741:0"
				},
				"id": 0
			},
			"@openzeppelin/contracts-upgradeable@4.9.2/access/IAccessControlUpgradeable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable@4.9.2/access/IAccessControlUpgradeable.sol",
					"exportedSymbols": {
						"IAccessControlUpgradeable": [
							408
						]
					},
					"id": 409,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 337,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "94:23:1"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IAccessControlUpgradeable",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 338,
								"nodeType": "StructuredDocumentation",
								"src": "119:89:1",
								"text": " @dev External interface of AccessControl declared to support ERC165 detection."
							},
							"fullyImplemented": false,
							"id": 408,
							"linearizedBaseContracts": [
								408
							],
							"name": "IAccessControlUpgradeable",
							"nameLocation": "219:25:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 339,
										"nodeType": "StructuredDocumentation",
										"src": "251:292:1",
										"text": " @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n {RoleAdminChanged} not being emitted signaling this.\n _Available since v3.1._"
									},
									"id": 347,
									"name": "RoleAdminChanged",
									"nameLocation": "554:16:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 346,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 341,
												"indexed": true,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "587:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 347,
												"src": "571:20:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 340,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "571:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 343,
												"indexed": true,
												"mutability": "mutable",
												"name": "previousAdminRole",
												"nameLocation": "609:17:1",
												"nodeType": "VariableDeclaration",
												"scope": 347,
												"src": "593:33:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 342,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "593:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 345,
												"indexed": true,
												"mutability": "mutable",
												"name": "newAdminRole",
												"nameLocation": "644:12:1",
												"nodeType": "VariableDeclaration",
												"scope": 347,
												"src": "628:28:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 344,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "628:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "570:87:1"
									},
									"src": "548:110:1"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 348,
										"nodeType": "StructuredDocumentation",
										"src": "664:212:1",
										"text": " @dev Emitted when `account` is granted `role`.\n `sender` is the account that originated the contract call, an admin role\n bearer except when using {AccessControl-_setupRole}."
									},
									"id": 356,
									"name": "RoleGranted",
									"nameLocation": "887:11:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 355,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 350,
												"indexed": true,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "915:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 356,
												"src": "899:20:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 349,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "899:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 352,
												"indexed": true,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "937:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 356,
												"src": "921:23:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 351,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "921:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 354,
												"indexed": true,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "962:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 356,
												"src": "946:22:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 353,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "946:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "898:71:1"
									},
									"src": "881:89:1"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 357,
										"nodeType": "StructuredDocumentation",
										"src": "976:275:1",
										"text": " @dev Emitted when `account` is revoked `role`.\n `sender` is the account that originated the contract call:\n   - if using `revokeRole`, it is the admin role bearer\n   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
									},
									"id": 365,
									"name": "RoleRevoked",
									"nameLocation": "1262:11:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 364,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 359,
												"indexed": true,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "1290:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 365,
												"src": "1274:20:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 358,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1274:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 361,
												"indexed": true,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "1312:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 365,
												"src": "1296:23:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 360,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1296:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 363,
												"indexed": true,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "1337:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 365,
												"src": "1321:22:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 362,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1321:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1273:71:1"
									},
									"src": "1256:89:1"
								},
								{
									"documentation": {
										"id": 366,
										"nodeType": "StructuredDocumentation",
										"src": "1351:76:1",
										"text": " @dev Returns `true` if `account` has been granted `role`."
									},
									"functionSelector": "91d14854",
									"id": 375,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "hasRole",
									"nameLocation": "1441:7:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 371,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 368,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "1457:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 375,
												"src": "1449:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 367,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1449:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 370,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "1471:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 375,
												"src": "1463:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 369,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1463:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1448:31:1"
									},
									"returnParameters": {
										"id": 374,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 373,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 375,
												"src": "1503:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 372,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1503:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1502:6:1"
									},
									"scope": 408,
									"src": "1432:77:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 376,
										"nodeType": "StructuredDocumentation",
										"src": "1515:184:1",
										"text": " @dev Returns the admin role that controls `role`. See {grantRole} and\n {revokeRole}.\n To change a role's admin, use {AccessControl-_setRoleAdmin}."
									},
									"functionSelector": "248a9ca3",
									"id": 383,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getRoleAdmin",
									"nameLocation": "1713:12:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 379,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 378,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "1734:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 383,
												"src": "1726:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 377,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1726:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1725:14:1"
									},
									"returnParameters": {
										"id": 382,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 381,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 383,
												"src": "1763:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 380,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1763:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1762:9:1"
									},
									"scope": 408,
									"src": "1704:68:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 384,
										"nodeType": "StructuredDocumentation",
										"src": "1778:239:1",
										"text": " @dev Grants `role` to `account`.\n If `account` had not been already granted `role`, emits a {RoleGranted}\n event.\n Requirements:\n - the caller must have ``role``'s admin role."
									},
									"functionSelector": "2f2ff15d",
									"id": 391,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "grantRole",
									"nameLocation": "2031:9:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 389,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 386,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "2049:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 391,
												"src": "2041:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 385,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2041:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 388,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "2063:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 391,
												"src": "2055:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 387,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2055:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2040:31:1"
									},
									"returnParameters": {
										"id": 390,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2080:0:1"
									},
									"scope": 408,
									"src": "2022:59:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 392,
										"nodeType": "StructuredDocumentation",
										"src": "2087:223:1",
										"text": " @dev Revokes `role` from `account`.\n If `account` had been granted `role`, emits a {RoleRevoked} event.\n Requirements:\n - the caller must have ``role``'s admin role."
									},
									"functionSelector": "d547741f",
									"id": 399,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "revokeRole",
									"nameLocation": "2324:10:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 397,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 394,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "2343:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 399,
												"src": "2335:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 393,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2335:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 396,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "2357:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 399,
												"src": "2349:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 395,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2349:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2334:31:1"
									},
									"returnParameters": {
										"id": 398,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2374:0:1"
									},
									"scope": 408,
									"src": "2315:60:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 400,
										"nodeType": "StructuredDocumentation",
										"src": "2381:480:1",
										"text": " @dev Revokes `role` from the calling account.\n Roles are often managed via {grantRole} and {revokeRole}: this function's\n purpose is to provide a mechanism for accounts to lose their privileges\n if they are compromised (such as when a trusted device is misplaced).\n If the calling account had been granted `role`, emits a {RoleRevoked}\n event.\n Requirements:\n - the caller must be `account`."
									},
									"functionSelector": "36568abe",
									"id": 407,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "renounceRole",
									"nameLocation": "2875:12:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 405,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 402,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "2896:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 407,
												"src": "2888:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 401,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2888:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 404,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "2910:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 407,
												"src": "2902:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 403,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2902:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2887:31:1"
									},
									"returnParameters": {
										"id": 406,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2927:0:1"
									},
									"scope": 408,
									"src": "2866:62:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 409,
							"src": "209:2721:1",
							"usedErrors": []
						}
					],
					"src": "94:2837:1"
				},
				"id": 1
			},
			"@openzeppelin/contracts-upgradeable@4.9.2/interfaces/IERC1967Upgradeable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable@4.9.2/interfaces/IERC1967Upgradeable.sol",
					"exportedSymbols": {
						"IERC1967Upgradeable": [
							429
						]
					},
					"id": 430,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 410,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "107:23:2"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC1967Upgradeable",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 411,
								"nodeType": "StructuredDocumentation",
								"src": "132:133:2",
								"text": " @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\n _Available since v4.8.3._"
							},
							"fullyImplemented": true,
							"id": 429,
							"linearizedBaseContracts": [
								429
							],
							"name": "IERC1967Upgradeable",
							"nameLocation": "276:19:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 412,
										"nodeType": "StructuredDocumentation",
										"src": "302:68:2",
										"text": " @dev Emitted when the implementation is upgraded."
									},
									"id": 416,
									"name": "Upgraded",
									"nameLocation": "381:8:2",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 415,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 414,
												"indexed": true,
												"mutability": "mutable",
												"name": "implementation",
												"nameLocation": "406:14:2",
												"nodeType": "VariableDeclaration",
												"scope": 416,
												"src": "390:30:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 413,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "390:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "389:32:2"
									},
									"src": "375:47:2"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 417,
										"nodeType": "StructuredDocumentation",
										"src": "428:67:2",
										"text": " @dev Emitted when the admin account has changed."
									},
									"id": 423,
									"name": "AdminChanged",
									"nameLocation": "506:12:2",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 422,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 419,
												"indexed": false,
												"mutability": "mutable",
												"name": "previousAdmin",
												"nameLocation": "527:13:2",
												"nodeType": "VariableDeclaration",
												"scope": 423,
												"src": "519:21:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 418,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "519:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 421,
												"indexed": false,
												"mutability": "mutable",
												"name": "newAdmin",
												"nameLocation": "550:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 423,
												"src": "542:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 420,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "542:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "518:41:2"
									},
									"src": "500:60:2"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 424,
										"nodeType": "StructuredDocumentation",
										"src": "566:59:2",
										"text": " @dev Emitted when the beacon is changed."
									},
									"id": 428,
									"name": "BeaconUpgraded",
									"nameLocation": "636:14:2",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 427,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 426,
												"indexed": true,
												"mutability": "mutable",
												"name": "beacon",
												"nameLocation": "667:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 428,
												"src": "651:22:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 425,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "651:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "650:24:2"
									},
									"src": "630:45:2"
								}
							],
							"scope": 430,
							"src": "266:411:2",
							"usedErrors": []
						}
					],
					"src": "107:571:2"
				},
				"id": 2
			},
			"@openzeppelin/contracts-upgradeable@4.9.2/interfaces/draft-IERC1822Upgradeable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable@4.9.2/interfaces/draft-IERC1822Upgradeable.sol",
					"exportedSymbols": {
						"IERC1822ProxiableUpgradeable": [
							439
						]
					},
					"id": 440,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 431,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "113:23:3"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC1822ProxiableUpgradeable",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 432,
								"nodeType": "StructuredDocumentation",
								"src": "138:203:3",
								"text": " @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n proxy whose upgrades are fully controlled by the current implementation."
							},
							"fullyImplemented": false,
							"id": 439,
							"linearizedBaseContracts": [
								439
							],
							"name": "IERC1822ProxiableUpgradeable",
							"nameLocation": "352:28:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 433,
										"nodeType": "StructuredDocumentation",
										"src": "387:438:3",
										"text": " @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n address.\n IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n function revert if invoked through a proxy."
									},
									"functionSelector": "52d1902d",
									"id": 438,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "proxiableUUID",
									"nameLocation": "839:13:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 434,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "852:2:3"
									},
									"returnParameters": {
										"id": 437,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 436,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 438,
												"src": "878:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 435,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "878:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "877:9:3"
									},
									"scope": 439,
									"src": "830:57:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 440,
							"src": "342:547:3",
							"usedErrors": []
						}
					],
					"src": "113:777:3"
				},
				"id": 3
			},
			"@openzeppelin/contracts-upgradeable@4.9.2/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable@4.9.2/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol",
					"exportedSymbols": {
						"AddressUpgradeable": [
							2314
						],
						"ERC1967UpgradeUpgradeable": [
							763
						],
						"IBeaconUpgradeable": [
							773
						],
						"IERC1822ProxiableUpgradeable": [
							439
						],
						"IERC1967Upgradeable": [
							429
						],
						"Initializable": [
							942
						],
						"StorageSlotUpgradeable": [
							2466
						]
					},
					"id": 764,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 441,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".2"
							],
							"nodeType": "PragmaDirective",
							"src": "116:23:4"
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable@4.9.2/proxy/beacon/IBeaconUpgradeable.sol",
							"file": "../beacon/IBeaconUpgradeable.sol",
							"id": 442,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 764,
							"sourceUnit": 774,
							"src": "141:42:4",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable@4.9.2/interfaces/IERC1967Upgradeable.sol",
							"file": "../../interfaces/IERC1967Upgradeable.sol",
							"id": 443,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 764,
							"sourceUnit": 430,
							"src": "184:50:4",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable@4.9.2/interfaces/draft-IERC1822Upgradeable.sol",
							"file": "../../interfaces/draft-IERC1822Upgradeable.sol",
							"id": 444,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 764,
							"sourceUnit": 440,
							"src": "235:56:4",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable@4.9.2/utils/AddressUpgradeable.sol",
							"file": "../../utils/AddressUpgradeable.sol",
							"id": 445,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 764,
							"sourceUnit": 2315,
							"src": "292:44:4",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable@4.9.2/utils/StorageSlotUpgradeable.sol",
							"file": "../../utils/StorageSlotUpgradeable.sol",
							"id": 446,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 764,
							"sourceUnit": 2467,
							"src": "337:48:4",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/Initializable.sol",
							"file": "../utils/Initializable.sol",
							"id": 447,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 764,
							"sourceUnit": 943,
							"src": "386:36:4",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 449,
										"name": "Initializable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 942,
										"src": "656:13:4"
									},
									"id": 450,
									"nodeType": "InheritanceSpecifier",
									"src": "656:13:4"
								},
								{
									"baseName": {
										"id": 451,
										"name": "IERC1967Upgradeable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 429,
										"src": "671:19:4"
									},
									"id": 452,
									"nodeType": "InheritanceSpecifier",
									"src": "671:19:4"
								}
							],
							"canonicalName": "ERC1967UpgradeUpgradeable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 448,
								"nodeType": "StructuredDocumentation",
								"src": "424:184:4",
								"text": " @dev This abstract contract provides getters and event emitting update functions for\n https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n _Available since v4.1._"
							},
							"fullyImplemented": true,
							"id": 763,
							"linearizedBaseContracts": [
								763,
								429,
								942
							],
							"name": "ERC1967UpgradeUpgradeable",
							"nameLocation": "627:25:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 457,
										"nodeType": "Block",
										"src": "756:7:4",
										"statements": []
									},
									"id": 458,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 455,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 454,
												"name": "onlyInitializing",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 887,
												"src": "739:16:4"
											},
											"nodeType": "ModifierInvocation",
											"src": "739:16:4"
										}
									],
									"name": "__ERC1967Upgrade_init",
									"nameLocation": "706:21:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 453,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "727:2:4"
									},
									"returnParameters": {
										"id": 456,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "756:0:4"
									},
									"scope": 763,
									"src": "697:66:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 463,
										"nodeType": "Block",
										"src": "838:7:4",
										"statements": []
									},
									"id": 464,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 461,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 460,
												"name": "onlyInitializing",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 887,
												"src": "821:16:4"
											},
											"nodeType": "ModifierInvocation",
											"src": "821:16:4"
										}
									],
									"name": "__ERC1967Upgrade_init_unchained",
									"nameLocation": "778:31:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 459,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "809:2:4"
									},
									"returnParameters": {
										"id": 462,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "838:0:4"
									},
									"scope": 763,
									"src": "769:76:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 467,
									"mutability": "constant",
									"name": "_ROLLBACK_SLOT",
									"nameLocation": "954:14:4",
									"nodeType": "VariableDeclaration",
									"scope": 763,
									"src": "929:108:4",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 465,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "929:7:4",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"value": {
										"hexValue": "307834393130666466613136666564333236306564306537313437663763633664613131613630323038623562393430366431326136333536313466666439313433",
										"id": 466,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "971:66:4",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_33048860383849004559742813297059419343339852917517107368639918720169455489347_by_1",
											"typeString": "int_const 3304...(69 digits omitted)...9347"
										},
										"value": "0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143"
									},
									"visibility": "private"
								},
								{
									"constant": true,
									"documentation": {
										"id": 468,
										"nodeType": "StructuredDocumentation",
										"src": "1044:214:4",
										"text": " @dev Storage slot with the address of the current implementation.\n This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n validated in the constructor."
									},
									"id": 471,
									"mutability": "constant",
									"name": "_IMPLEMENTATION_SLOT",
									"nameLocation": "1289:20:4",
									"nodeType": "VariableDeclaration",
									"scope": 763,
									"src": "1263:115:4",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 469,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "1263:7:4",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"value": {
										"hexValue": "307833363038393461313362613161333231303636376338323834393264623938646361336532303736636333373335613932306133636135303564333832626263",
										"id": 470,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1312:66:4",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_24440054405305269366569402256811496959409073762505157381672968839269610695612_by_1",
											"typeString": "int_const 2444...(69 digits omitted)...5612"
										},
										"value": "0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc"
									},
									"visibility": "internal"
								},
								{
									"body": {
										"id": 483,
										"nodeType": "Block",
										"src": "1519:89:4",
										"statements": [
											{
												"expression": {
													"expression": {
														"arguments": [
															{
																"id": 479,
																"name": "_IMPLEMENTATION_SLOT",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 471,
																"src": "1574:20:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															],
															"expression": {
																"id": 477,
																"name": "StorageSlotUpgradeable",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2466,
																"src": "1536:22:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_StorageSlotUpgradeable_$2466_$",
																	"typeString": "type(library StorageSlotUpgradeable)"
																}
															},
															"id": 478,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "getAddressSlot",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2388,
															"src": "1536:37:4",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$2362_storage_ptr_$",
																"typeString": "function (bytes32) pure returns (struct StorageSlotUpgradeable.AddressSlot storage pointer)"
															}
														},
														"id": 480,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1536:59:4",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_AddressSlot_$2362_storage_ptr",
															"typeString": "struct StorageSlotUpgradeable.AddressSlot storage pointer"
														}
													},
													"id": 481,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "value",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 2361,
													"src": "1536:65:4",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 476,
												"id": 482,
												"nodeType": "Return",
												"src": "1529:72:4"
											}
										]
									},
									"documentation": {
										"id": 472,
										"nodeType": "StructuredDocumentation",
										"src": "1385:67:4",
										"text": " @dev Returns the current implementation address."
									},
									"id": 484,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_getImplementation",
									"nameLocation": "1466:18:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 473,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1484:2:4"
									},
									"returnParameters": {
										"id": 476,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 475,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 484,
												"src": "1510:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 474,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1510:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1509:9:4"
									},
									"scope": 763,
									"src": "1457:151:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 507,
										"nodeType": "Block",
										"src": "1762:218:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 493,
																	"name": "newImplementation",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 487,
																	"src": "1810:17:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"expression": {
																	"id": 491,
																	"name": "AddressUpgradeable",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2314,
																	"src": "1780:18:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_AddressUpgradeable_$2314_$",
																		"typeString": "type(library AddressUpgradeable)"
																	}
																},
																"id": 492,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "isContract",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2002,
																"src": "1780:29:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																	"typeString": "function (address) view returns (bool)"
																}
															},
															"id": 494,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1780:48:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "455243313936373a206e657720696d706c656d656e746174696f6e206973206e6f74206120636f6e7472616374",
															"id": 495,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1830:47:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65",
																"typeString": "literal_string \"ERC1967: new implementation is not a contract\""
															},
															"value": "ERC1967: new implementation is not a contract"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65",
																"typeString": "literal_string \"ERC1967: new implementation is not a contract\""
															}
														],
														"id": 490,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1772:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 496,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1772:106:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 497,
												"nodeType": "ExpressionStatement",
												"src": "1772:106:4"
											},
											{
												"expression": {
													"id": 505,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"arguments": [
																{
																	"id": 501,
																	"name": "_IMPLEMENTATION_SLOT",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 471,
																	"src": "1926:20:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																],
																"expression": {
																	"id": 498,
																	"name": "StorageSlotUpgradeable",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2466,
																	"src": "1888:22:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_StorageSlotUpgradeable_$2466_$",
																		"typeString": "type(library StorageSlotUpgradeable)"
																	}
																},
																"id": 500,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "getAddressSlot",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2388,
																"src": "1888:37:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$2362_storage_ptr_$",
																	"typeString": "function (bytes32) pure returns (struct StorageSlotUpgradeable.AddressSlot storage pointer)"
																}
															},
															"id": 502,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1888:59:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_AddressSlot_$2362_storage_ptr",
																"typeString": "struct StorageSlotUpgradeable.AddressSlot storage pointer"
															}
														},
														"id": 503,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "value",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2361,
														"src": "1888:65:4",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 504,
														"name": "newImplementation",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 487,
														"src": "1956:17:4",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1888:85:4",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 506,
												"nodeType": "ExpressionStatement",
												"src": "1888:85:4"
											}
										]
									},
									"documentation": {
										"id": 485,
										"nodeType": "StructuredDocumentation",
										"src": "1614:80:4",
										"text": " @dev Stores a new address in the EIP1967 implementation slot."
									},
									"id": 508,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_setImplementation",
									"nameLocation": "1708:18:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 488,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 487,
												"mutability": "mutable",
												"name": "newImplementation",
												"nameLocation": "1735:17:4",
												"nodeType": "VariableDeclaration",
												"scope": 508,
												"src": "1727:25:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 486,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1727:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1726:27:4"
									},
									"returnParameters": {
										"id": 489,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1762:0:4"
									},
									"scope": 763,
									"src": "1699:281:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 522,
										"nodeType": "Block",
										"src": "2142:96:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 515,
															"name": "newImplementation",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 511,
															"src": "2171:17:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 514,
														"name": "_setImplementation",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 508,
														"src": "2152:18:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 516,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2152:37:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 517,
												"nodeType": "ExpressionStatement",
												"src": "2152:37:4"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 519,
															"name": "newImplementation",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 511,
															"src": "2213:17:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 518,
														"name": "Upgraded",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 416,
														"src": "2204:8:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 520,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2204:27:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 521,
												"nodeType": "EmitStatement",
												"src": "2199:32:4"
											}
										]
									},
									"documentation": {
										"id": 509,
										"nodeType": "StructuredDocumentation",
										"src": "1986:95:4",
										"text": " @dev Perform implementation upgrade\n Emits an {Upgraded} event."
									},
									"id": 523,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_upgradeTo",
									"nameLocation": "2095:10:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 512,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 511,
												"mutability": "mutable",
												"name": "newImplementation",
												"nameLocation": "2114:17:4",
												"nodeType": "VariableDeclaration",
												"scope": 523,
												"src": "2106:25:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 510,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2106:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2105:27:4"
									},
									"returnParameters": {
										"id": 513,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2142:0:4"
									},
									"scope": 763,
									"src": "2086:152:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 552,
										"nodeType": "Block",
										"src": "2470:178:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 534,
															"name": "newImplementation",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 526,
															"src": "2491:17:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 533,
														"name": "_upgradeTo",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 523,
														"src": "2480:10:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 535,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2480:29:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 536,
												"nodeType": "ExpressionStatement",
												"src": "2480:29:4"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 542,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 540,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"id": 537,
																"name": "data",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 528,
																"src": "2523:4:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"id": 538,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "length",
															"nodeType": "MemberAccess",
															"src": "2523:11:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"hexValue": "30",
															"id": 539,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2537:1:4",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "2523:15:4",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "||",
													"rightExpression": {
														"id": 541,
														"name": "forceCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 530,
														"src": "2542:9:4",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "2523:28:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 551,
												"nodeType": "IfStatement",
												"src": "2519:123:4",
												"trueBody": {
													"id": 550,
													"nodeType": "Block",
													"src": "2553:89:4",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 546,
																		"name": "newImplementation",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 526,
																		"src": "2607:17:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 547,
																		"name": "data",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 528,
																		"src": "2626:4:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	],
																	"expression": {
																		"id": 543,
																		"name": "AddressUpgradeable",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2314,
																		"src": "2567:18:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_AddressUpgradeable_$2314_$",
																			"typeString": "type(library AddressUpgradeable)"
																		}
																	},
																	"id": 545,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "functionDelegateCall",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 2201,
																	"src": "2567:39:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$",
																		"typeString": "function (address,bytes memory) returns (bytes memory)"
																	}
																},
																"id": 548,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2567:64:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"id": 549,
															"nodeType": "ExpressionStatement",
															"src": "2567:64:4"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 524,
										"nodeType": "StructuredDocumentation",
										"src": "2244:123:4",
										"text": " @dev Perform implementation upgrade with additional setup call.\n Emits an {Upgraded} event."
									},
									"id": 553,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_upgradeToAndCall",
									"nameLocation": "2381:17:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 531,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 526,
												"mutability": "mutable",
												"name": "newImplementation",
												"nameLocation": "2407:17:4",
												"nodeType": "VariableDeclaration",
												"scope": 553,
												"src": "2399:25:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 525,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2399:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 528,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "2439:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 553,
												"src": "2426:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 527,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2426:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 530,
												"mutability": "mutable",
												"name": "forceCall",
												"nameLocation": "2450:9:4",
												"nodeType": "VariableDeclaration",
												"scope": 553,
												"src": "2445:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 529,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2445:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2398:62:4"
									},
									"returnParameters": {
										"id": 532,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2470:0:4"
									},
									"scope": 763,
									"src": "2372:276:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 605,
										"nodeType": "Block",
										"src": "2922:842:4",
										"statements": [
											{
												"condition": {
													"expression": {
														"arguments": [
															{
																"id": 565,
																"name": "_ROLLBACK_SLOT",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 467,
																"src": "3274:14:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															],
															"expression": {
																"id": 563,
																"name": "StorageSlotUpgradeable",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2466,
																"src": "3236:22:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_StorageSlotUpgradeable_$2466_$",
																	"typeString": "type(library StorageSlotUpgradeable)"
																}
															},
															"id": 564,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "getBooleanSlot",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2399,
															"src": "3236:37:4",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_bytes32_$returns$_t_struct$_BooleanSlot_$2365_storage_ptr_$",
																"typeString": "function (bytes32) pure returns (struct StorageSlotUpgradeable.BooleanSlot storage pointer)"
															}
														},
														"id": 566,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3236:53:4",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_BooleanSlot_$2365_storage_ptr",
															"typeString": "struct StorageSlotUpgradeable.BooleanSlot storage pointer"
														}
													},
													"id": 567,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "value",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 2364,
													"src": "3236:59:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 603,
													"nodeType": "Block",
													"src": "3365:393:4",
													"statements": [
														{
															"clauses": [
																{
																	"block": {
																		"id": 588,
																		"nodeType": "Block",
																		"src": "3470:115:4",
																		"statements": [
																			{
																				"expression": {
																					"arguments": [
																						{
																							"commonType": {
																								"typeIdentifier": "t_bytes32",
																								"typeString": "bytes32"
																							},
																							"id": 584,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": false,
																							"lValueRequested": false,
																							"leftExpression": {
																								"id": 582,
																								"name": "slot",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 579,
																								"src": "3496:4:4",
																								"typeDescriptions": {
																									"typeIdentifier": "t_bytes32",
																									"typeString": "bytes32"
																								}
																							},
																							"nodeType": "BinaryOperation",
																							"operator": "==",
																							"rightExpression": {
																								"id": 583,
																								"name": "_IMPLEMENTATION_SLOT",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 471,
																								"src": "3504:20:4",
																								"typeDescriptions": {
																									"typeIdentifier": "t_bytes32",
																									"typeString": "bytes32"
																								}
																							},
																							"src": "3496:28:4",
																							"typeDescriptions": {
																								"typeIdentifier": "t_bool",
																								"typeString": "bool"
																							}
																						},
																						{
																							"hexValue": "45524331393637557067726164653a20756e737570706f727465642070726f786961626c6555554944",
																							"id": 585,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"kind": "string",
																							"lValueRequested": false,
																							"nodeType": "Literal",
																							"src": "3526:43:4",
																							"typeDescriptions": {
																								"typeIdentifier": "t_stringliteral_76b6b6debfc5febf101145a79ecf0b0d2e89e397dfdab2bca99888370411152c",
																								"typeString": "literal_string \"ERC1967Upgrade: unsupported proxiableUUID\""
																							},
																							"value": "ERC1967Upgrade: unsupported proxiableUUID"
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_bool",
																								"typeString": "bool"
																							},
																							{
																								"typeIdentifier": "t_stringliteral_76b6b6debfc5febf101145a79ecf0b0d2e89e397dfdab2bca99888370411152c",
																								"typeString": "literal_string \"ERC1967Upgrade: unsupported proxiableUUID\""
																							}
																						],
																						"id": 581,
																						"name": "require",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [
																							4294967278,
																							4294967278
																						],
																						"referencedDeclaration": 4294967278,
																						"src": "3488:7:4",
																						"typeDescriptions": {
																							"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																							"typeString": "function (bool,string memory) pure"
																						}
																					},
																					"id": 586,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "functionCall",
																					"lValueRequested": false,
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "3488:82:4",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_tuple$__$",
																						"typeString": "tuple()"
																					}
																				},
																				"id": 587,
																				"nodeType": "ExpressionStatement",
																				"src": "3488:82:4"
																			}
																		]
																	},
																	"errorName": "",
																	"id": 589,
																	"nodeType": "TryCatchClause",
																	"parameters": {
																		"id": 580,
																		"nodeType": "ParameterList",
																		"parameters": [
																			{
																				"constant": false,
																				"id": 579,
																				"mutability": "mutable",
																				"name": "slot",
																				"nameLocation": "3464:4:4",
																				"nodeType": "VariableDeclaration",
																				"scope": 589,
																				"src": "3456:12:4",
																				"stateVariable": false,
																				"storageLocation": "default",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				},
																				"typeName": {
																					"id": 578,
																					"name": "bytes32",
																					"nodeType": "ElementaryTypeName",
																					"src": "3456:7:4",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes32",
																						"typeString": "bytes32"
																					}
																				},
																				"visibility": "internal"
																			}
																		],
																		"src": "3455:14:4"
																	},
																	"src": "3447:138:4"
																},
																{
																	"block": {
																		"id": 594,
																		"nodeType": "Block",
																		"src": "3592:89:4",
																		"statements": [
																			{
																				"expression": {
																					"arguments": [
																						{
																							"hexValue": "45524331393637557067726164653a206e657720696d706c656d656e746174696f6e206973206e6f742055555053",
																							"id": 591,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"kind": "string",
																							"lValueRequested": false,
																							"nodeType": "Literal",
																							"src": "3617:48:4",
																							"typeDescriptions": {
																								"typeIdentifier": "t_stringliteral_8e8e2fbcb586f700b5b14e2c4a650c8d83b9773c31c5fe8962070ea544e11f24",
																								"typeString": "literal_string \"ERC1967Upgrade: new implementation is not UUPS\""
																							},
																							"value": "ERC1967Upgrade: new implementation is not UUPS"
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_stringliteral_8e8e2fbcb586f700b5b14e2c4a650c8d83b9773c31c5fe8962070ea544e11f24",
																								"typeString": "literal_string \"ERC1967Upgrade: new implementation is not UUPS\""
																							}
																						],
																						"id": 590,
																						"name": "revert",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [
																							4294967277,
																							4294967277
																						],
																						"referencedDeclaration": 4294967277,
																						"src": "3610:6:4",
																						"typeDescriptions": {
																							"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																							"typeString": "function (string memory) pure"
																						}
																					},
																					"id": 592,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "functionCall",
																					"lValueRequested": false,
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "3610:56:4",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_tuple$__$",
																						"typeString": "tuple()"
																					}
																				},
																				"id": 593,
																				"nodeType": "ExpressionStatement",
																				"src": "3610:56:4"
																			}
																		]
																	},
																	"errorName": "",
																	"id": 595,
																	"nodeType": "TryCatchClause",
																	"src": "3586:95:4"
																}
															],
															"externalCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"expression": {
																		"arguments": [
																			{
																				"id": 574,
																				"name": "newImplementation",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 556,
																				"src": "3412:17:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			],
																			"id": 573,
																			"name": "IERC1822ProxiableUpgradeable",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 439,
																			"src": "3383:28:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IERC1822ProxiableUpgradeable_$439_$",
																				"typeString": "type(contract IERC1822ProxiableUpgradeable)"
																			}
																		},
																		"id": 575,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "3383:47:4",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC1822ProxiableUpgradeable_$439",
																			"typeString": "contract IERC1822ProxiableUpgradeable"
																		}
																	},
																	"id": 576,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "proxiableUUID",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 438,
																	"src": "3383:61:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_view$__$returns$_t_bytes32_$",
																		"typeString": "function () view external returns (bytes32)"
																	}
																},
																"id": 577,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3383:63:4",
																"tryCall": true,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"id": 596,
															"nodeType": "TryStatement",
															"src": "3379:302:4"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"id": 598,
																		"name": "newImplementation",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 556,
																		"src": "3712:17:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 599,
																		"name": "data",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 558,
																		"src": "3731:4:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	{
																		"id": 600,
																		"name": "forceCall",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 560,
																		"src": "3737:9:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		},
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	],
																	"id": 597,
																	"name": "_upgradeToAndCall",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 553,
																	"src": "3694:17:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_bool_$returns$__$",
																		"typeString": "function (address,bytes memory,bool)"
																	}
																},
																"id": 601,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3694:53:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 602,
															"nodeType": "ExpressionStatement",
															"src": "3694:53:4"
														}
													]
												},
												"id": 604,
												"nodeType": "IfStatement",
												"src": "3232:526:4",
												"trueBody": {
													"id": 572,
													"nodeType": "Block",
													"src": "3297:62:4",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 569,
																		"name": "newImplementation",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 556,
																		"src": "3330:17:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 568,
																	"name": "_setImplementation",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 508,
																	"src": "3311:18:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
																		"typeString": "function (address)"
																	}
																},
																"id": 570,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3311:37:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 571,
															"nodeType": "ExpressionStatement",
															"src": "3311:37:4"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 554,
										"nodeType": "StructuredDocumentation",
										"src": "2654:161:4",
										"text": " @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n Emits an {Upgraded} event."
									},
									"id": 606,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_upgradeToAndCallUUPS",
									"nameLocation": "2829:21:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 561,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 556,
												"mutability": "mutable",
												"name": "newImplementation",
												"nameLocation": "2859:17:4",
												"nodeType": "VariableDeclaration",
												"scope": 606,
												"src": "2851:25:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 555,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2851:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 558,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "2891:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 606,
												"src": "2878:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 557,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2878:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 560,
												"mutability": "mutable",
												"name": "forceCall",
												"nameLocation": "2902:9:4",
												"nodeType": "VariableDeclaration",
												"scope": 606,
												"src": "2897:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 559,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2897:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2850:62:4"
									},
									"returnParameters": {
										"id": 562,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2922:0:4"
									},
									"scope": 763,
									"src": "2820:944:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"constant": true,
									"documentation": {
										"id": 607,
										"nodeType": "StructuredDocumentation",
										"src": "3770:189:4",
										"text": " @dev Storage slot with the admin of the contract.\n This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n validated in the constructor."
									},
									"id": 610,
									"mutability": "constant",
									"name": "_ADMIN_SLOT",
									"nameLocation": "3990:11:4",
									"nodeType": "VariableDeclaration",
									"scope": 763,
									"src": "3964:106:4",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 608,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "3964:7:4",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"value": {
										"hexValue": "307862353331323736383461353638623331373361653133623966386136303136653234336536336236653865653131373864366137313738353062356436313033",
										"id": 609,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "4004:66:4",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_81955473079516046949633743016697847541294818689821282749996681496272635257091_by_1",
											"typeString": "int_const 8195...(69 digits omitted)...7091"
										},
										"value": "0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103"
									},
									"visibility": "internal"
								},
								{
									"body": {
										"id": 622,
										"nodeType": "Block",
										"src": "4185:80:4",
										"statements": [
											{
												"expression": {
													"expression": {
														"arguments": [
															{
																"id": 618,
																"name": "_ADMIN_SLOT",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 610,
																"src": "4240:11:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															],
															"expression": {
																"id": 616,
																"name": "StorageSlotUpgradeable",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2466,
																"src": "4202:22:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_StorageSlotUpgradeable_$2466_$",
																	"typeString": "type(library StorageSlotUpgradeable)"
																}
															},
															"id": 617,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "getAddressSlot",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2388,
															"src": "4202:37:4",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$2362_storage_ptr_$",
																"typeString": "function (bytes32) pure returns (struct StorageSlotUpgradeable.AddressSlot storage pointer)"
															}
														},
														"id": 619,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "4202:50:4",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_AddressSlot_$2362_storage_ptr",
															"typeString": "struct StorageSlotUpgradeable.AddressSlot storage pointer"
														}
													},
													"id": 620,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "value",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 2361,
													"src": "4202:56:4",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 615,
												"id": 621,
												"nodeType": "Return",
												"src": "4195:63:4"
											}
										]
									},
									"documentation": {
										"id": 611,
										"nodeType": "StructuredDocumentation",
										"src": "4077:50:4",
										"text": " @dev Returns the current admin."
									},
									"id": 623,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_getAdmin",
									"nameLocation": "4141:9:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 612,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4150:2:4"
									},
									"returnParameters": {
										"id": 615,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 614,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 623,
												"src": "4176:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 613,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4176:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4175:9:4"
									},
									"scope": 763,
									"src": "4132:133:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 648,
										"nodeType": "Block",
										"src": "4392:167:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 635,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 630,
																"name": "newAdmin",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 626,
																"src": "4410:8:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 633,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "4430:1:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 632,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "4422:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 631,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "4422:7:4",
																		"typeDescriptions": {}
																	}
																},
																"id": 634,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4422:10:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "4410:22:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "455243313936373a206e65772061646d696e20697320746865207a65726f2061646472657373",
															"id": 636,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4434:40:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_3820e16891102c1360a787e6e648431097d92537f969d458f5c94b56f8318be5",
																"typeString": "literal_string \"ERC1967: new admin is the zero address\""
															},
															"value": "ERC1967: new admin is the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_3820e16891102c1360a787e6e648431097d92537f969d458f5c94b56f8318be5",
																"typeString": "literal_string \"ERC1967: new admin is the zero address\""
															}
														],
														"id": 629,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4402:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 637,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4402:73:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 638,
												"nodeType": "ExpressionStatement",
												"src": "4402:73:4"
											},
											{
												"expression": {
													"id": 646,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"arguments": [
																{
																	"id": 642,
																	"name": "_ADMIN_SLOT",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 610,
																	"src": "4523:11:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																],
																"expression": {
																	"id": 639,
																	"name": "StorageSlotUpgradeable",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2466,
																	"src": "4485:22:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_StorageSlotUpgradeable_$2466_$",
																		"typeString": "type(library StorageSlotUpgradeable)"
																	}
																},
																"id": 641,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "getAddressSlot",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2388,
																"src": "4485:37:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$2362_storage_ptr_$",
																	"typeString": "function (bytes32) pure returns (struct StorageSlotUpgradeable.AddressSlot storage pointer)"
																}
															},
															"id": 643,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4485:50:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_AddressSlot_$2362_storage_ptr",
																"typeString": "struct StorageSlotUpgradeable.AddressSlot storage pointer"
															}
														},
														"id": 644,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "value",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2361,
														"src": "4485:56:4",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 645,
														"name": "newAdmin",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 626,
														"src": "4544:8:4",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "4485:67:4",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 647,
												"nodeType": "ExpressionStatement",
												"src": "4485:67:4"
											}
										]
									},
									"documentation": {
										"id": 624,
										"nodeType": "StructuredDocumentation",
										"src": "4271:71:4",
										"text": " @dev Stores a new address in the EIP1967 admin slot."
									},
									"id": 649,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_setAdmin",
									"nameLocation": "4356:9:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 627,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 626,
												"mutability": "mutable",
												"name": "newAdmin",
												"nameLocation": "4374:8:4",
												"nodeType": "VariableDeclaration",
												"scope": 649,
												"src": "4366:16:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 625,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4366:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4365:18:4"
									},
									"returnParameters": {
										"id": 628,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4392:0:4"
									},
									"scope": 763,
									"src": "4347:212:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 665,
										"nodeType": "Block",
										"src": "4719:86:4",
										"statements": [
											{
												"eventCall": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 656,
																"name": "_getAdmin",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 623,
																"src": "4747:9:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 657,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4747:11:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 658,
															"name": "newAdmin",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 652,
															"src": "4760:8:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 655,
														"name": "AdminChanged",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 423,
														"src": "4734:12:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 659,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4734:35:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 660,
												"nodeType": "EmitStatement",
												"src": "4729:40:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 662,
															"name": "newAdmin",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 652,
															"src": "4789:8:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 661,
														"name": "_setAdmin",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 649,
														"src": "4779:9:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 663,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4779:19:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 664,
												"nodeType": "ExpressionStatement",
												"src": "4779:19:4"
											}
										]
									},
									"documentation": {
										"id": 650,
										"nodeType": "StructuredDocumentation",
										"src": "4565:100:4",
										"text": " @dev Changes the admin of the proxy.\n Emits an {AdminChanged} event."
									},
									"id": 666,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_changeAdmin",
									"nameLocation": "4679:12:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 653,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 652,
												"mutability": "mutable",
												"name": "newAdmin",
												"nameLocation": "4700:8:4",
												"nodeType": "VariableDeclaration",
												"scope": 666,
												"src": "4692:16:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 651,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4692:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4691:18:4"
									},
									"returnParameters": {
										"id": 654,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4719:0:4"
									},
									"scope": 763,
									"src": "4670:135:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"constant": true,
									"documentation": {
										"id": 667,
										"nodeType": "StructuredDocumentation",
										"src": "4811:232:4",
										"text": " @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor."
									},
									"id": 670,
									"mutability": "constant",
									"name": "_BEACON_SLOT",
									"nameLocation": "5074:12:4",
									"nodeType": "VariableDeclaration",
									"scope": 763,
									"src": "5048:107:4",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 668,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "5048:7:4",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"value": {
										"hexValue": "307861336630616437346535343233616562666438306433656634333436353738333335613961373261656165653539666636636233353832623335313333643530",
										"id": 669,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "5089:66:4",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_74152234768234802001998023604048924213078445070507226371336425913862612794704_by_1",
											"typeString": "int_const 7415...(69 digits omitted)...4704"
										},
										"value": "0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50"
									},
									"visibility": "internal"
								},
								{
									"body": {
										"id": 682,
										"nodeType": "Block",
										"src": "5272:81:4",
										"statements": [
											{
												"expression": {
													"expression": {
														"arguments": [
															{
																"id": 678,
																"name": "_BEACON_SLOT",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 670,
																"src": "5327:12:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															],
															"expression": {
																"id": 676,
																"name": "StorageSlotUpgradeable",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2466,
																"src": "5289:22:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_StorageSlotUpgradeable_$2466_$",
																	"typeString": "type(library StorageSlotUpgradeable)"
																}
															},
															"id": 677,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "getAddressSlot",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2388,
															"src": "5289:37:4",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$2362_storage_ptr_$",
																"typeString": "function (bytes32) pure returns (struct StorageSlotUpgradeable.AddressSlot storage pointer)"
															}
														},
														"id": 679,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5289:51:4",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_AddressSlot_$2362_storage_ptr",
															"typeString": "struct StorageSlotUpgradeable.AddressSlot storage pointer"
														}
													},
													"id": 680,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "value",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 2361,
													"src": "5289:57:4",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 675,
												"id": 681,
												"nodeType": "Return",
												"src": "5282:64:4"
											}
										]
									},
									"documentation": {
										"id": 671,
										"nodeType": "StructuredDocumentation",
										"src": "5162:51:4",
										"text": " @dev Returns the current beacon."
									},
									"id": 683,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_getBeacon",
									"nameLocation": "5227:10:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 672,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5237:2:4"
									},
									"returnParameters": {
										"id": 675,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 674,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 683,
												"src": "5263:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 673,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5263:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5262:9:4"
									},
									"scope": 763,
									"src": "5218:135:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 718,
										"nodeType": "Block",
										"src": "5482:368:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 692,
																	"name": "newBeacon",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 686,
																	"src": "5530:9:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"expression": {
																	"id": 690,
																	"name": "AddressUpgradeable",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2314,
																	"src": "5500:18:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_AddressUpgradeable_$2314_$",
																		"typeString": "type(library AddressUpgradeable)"
																	}
																},
																"id": 691,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "isContract",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2002,
																"src": "5500:29:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																	"typeString": "function (address) view returns (bool)"
																}
															},
															"id": 693,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5500:40:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "455243313936373a206e657720626561636f6e206973206e6f74206120636f6e7472616374",
															"id": 694,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5542:39:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9589b7809634e4928033de18bb696e9af4ef71b703652af5245f2dbebf2f4470",
																"typeString": "literal_string \"ERC1967: new beacon is not a contract\""
															},
															"value": "ERC1967: new beacon is not a contract"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_9589b7809634e4928033de18bb696e9af4ef71b703652af5245f2dbebf2f4470",
																"typeString": "literal_string \"ERC1967: new beacon is not a contract\""
															}
														],
														"id": 689,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5492:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 695,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5492:90:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 696,
												"nodeType": "ExpressionStatement",
												"src": "5492:90:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"arguments": [],
																	"expression": {
																		"argumentTypes": [],
																		"expression": {
																			"arguments": [
																				{
																					"id": 701,
																					"name": "newBeacon",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 686,
																					"src": "5662:9:4",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				],
																				"id": 700,
																				"name": "IBeaconUpgradeable",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 773,
																				"src": "5643:18:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_contract$_IBeaconUpgradeable_$773_$",
																					"typeString": "type(contract IBeaconUpgradeable)"
																				}
																			},
																			"id": 702,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "5643:29:4",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IBeaconUpgradeable_$773",
																				"typeString": "contract IBeaconUpgradeable"
																			}
																		},
																		"id": 703,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "implementation",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 772,
																		"src": "5643:44:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_view$__$returns$_t_address_$",
																			"typeString": "function () view external returns (address)"
																		}
																	},
																	"id": 704,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "5643:46:4",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"expression": {
																	"id": 698,
																	"name": "AddressUpgradeable",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2314,
																	"src": "5613:18:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_AddressUpgradeable_$2314_$",
																		"typeString": "type(library AddressUpgradeable)"
																	}
																},
																"id": 699,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "isContract",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2002,
																"src": "5613:29:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																	"typeString": "function (address) view returns (bool)"
																}
															},
															"id": 705,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5613:77:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "455243313936373a20626561636f6e20696d706c656d656e746174696f6e206973206e6f74206120636f6e7472616374",
															"id": 706,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5704:50:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_f95fd1f5b5578816eb23f6ca0f2439b4b5e4094dc16e99c3b8e91603a83f93c8",
																"typeString": "literal_string \"ERC1967: beacon implementation is not a contract\""
															},
															"value": "ERC1967: beacon implementation is not a contract"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_f95fd1f5b5578816eb23f6ca0f2439b4b5e4094dc16e99c3b8e91603a83f93c8",
																"typeString": "literal_string \"ERC1967: beacon implementation is not a contract\""
															}
														],
														"id": 697,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5592:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 707,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5592:172:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 708,
												"nodeType": "ExpressionStatement",
												"src": "5592:172:4"
											},
											{
												"expression": {
													"id": 716,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"arguments": [
																{
																	"id": 712,
																	"name": "_BEACON_SLOT",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 670,
																	"src": "5812:12:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																],
																"expression": {
																	"id": 709,
																	"name": "StorageSlotUpgradeable",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2466,
																	"src": "5774:22:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_StorageSlotUpgradeable_$2466_$",
																		"typeString": "type(library StorageSlotUpgradeable)"
																	}
																},
																"id": 711,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "getAddressSlot",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2388,
																"src": "5774:37:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$2362_storage_ptr_$",
																	"typeString": "function (bytes32) pure returns (struct StorageSlotUpgradeable.AddressSlot storage pointer)"
																}
															},
															"id": 713,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5774:51:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_AddressSlot_$2362_storage_ptr",
																"typeString": "struct StorageSlotUpgradeable.AddressSlot storage pointer"
															}
														},
														"id": 714,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "value",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2361,
														"src": "5774:57:4",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 715,
														"name": "newBeacon",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 686,
														"src": "5834:9:4",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "5774:69:4",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 717,
												"nodeType": "ExpressionStatement",
												"src": "5774:69:4"
											}
										]
									},
									"documentation": {
										"id": 684,
										"nodeType": "StructuredDocumentation",
										"src": "5359:71:4",
										"text": " @dev Stores a new beacon in the EIP1967 beacon slot."
									},
									"id": 719,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_setBeacon",
									"nameLocation": "5444:10:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 687,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 686,
												"mutability": "mutable",
												"name": "newBeacon",
												"nameLocation": "5463:9:4",
												"nodeType": "VariableDeclaration",
												"scope": 719,
												"src": "5455:17:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 685,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5455:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5454:19:4"
									},
									"returnParameters": {
										"id": 688,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5482:0:4"
									},
									"scope": 763,
									"src": "5435:415:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 756,
										"nodeType": "Block",
										"src": "6249:239:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 730,
															"name": "newBeacon",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 722,
															"src": "6270:9:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 729,
														"name": "_setBeacon",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 719,
														"src": "6259:10:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 731,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6259:21:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 732,
												"nodeType": "ExpressionStatement",
												"src": "6259:21:4"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 734,
															"name": "newBeacon",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 722,
															"src": "6310:9:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 733,
														"name": "BeaconUpgraded",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 428,
														"src": "6295:14:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 735,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6295:25:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 736,
												"nodeType": "EmitStatement",
												"src": "6290:30:4"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 742,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 740,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"id": 737,
																"name": "data",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 724,
																"src": "6334:4:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"id": 738,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "length",
															"nodeType": "MemberAccess",
															"src": "6334:11:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"hexValue": "30",
															"id": 739,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6348:1:4",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "6334:15:4",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "||",
													"rightExpression": {
														"id": 741,
														"name": "forceCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 726,
														"src": "6353:9:4",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "6334:28:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 755,
												"nodeType": "IfStatement",
												"src": "6330:152:4",
												"trueBody": {
													"id": 754,
													"nodeType": "Block",
													"src": "6364:118:4",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [],
																		"expression": {
																			"argumentTypes": [],
																			"expression": {
																				"arguments": [
																					{
																						"id": 747,
																						"name": "newBeacon",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 722,
																						"src": "6437:9:4",
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					],
																					"id": 746,
																					"name": "IBeaconUpgradeable",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 773,
																					"src": "6418:18:4",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_contract$_IBeaconUpgradeable_$773_$",
																						"typeString": "type(contract IBeaconUpgradeable)"
																					}
																				},
																				"id": 748,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "typeConversion",
																				"lValueRequested": false,
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "6418:29:4",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_contract$_IBeaconUpgradeable_$773",
																					"typeString": "contract IBeaconUpgradeable"
																				}
																			},
																			"id": 749,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "implementation",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 772,
																			"src": "6418:44:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_external_view$__$returns$_t_address_$",
																				"typeString": "function () view external returns (address)"
																			}
																		},
																		"id": 750,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "6418:46:4",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 751,
																		"name": "data",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 724,
																		"src": "6466:4:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	],
																	"expression": {
																		"id": 743,
																		"name": "AddressUpgradeable",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2314,
																		"src": "6378:18:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_AddressUpgradeable_$2314_$",
																			"typeString": "type(library AddressUpgradeable)"
																		}
																	},
																	"id": 745,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "functionDelegateCall",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 2201,
																	"src": "6378:39:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$",
																		"typeString": "function (address,bytes memory) returns (bytes memory)"
																	}
																},
																"id": 752,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6378:93:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"id": 753,
															"nodeType": "ExpressionStatement",
															"src": "6378:93:4"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 720,
										"nodeType": "StructuredDocumentation",
										"src": "5856:292:4",
										"text": " @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n Emits a {BeaconUpgraded} event."
									},
									"id": 757,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_upgradeBeaconToAndCall",
									"nameLocation": "6162:23:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 727,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 722,
												"mutability": "mutable",
												"name": "newBeacon",
												"nameLocation": "6194:9:4",
												"nodeType": "VariableDeclaration",
												"scope": 757,
												"src": "6186:17:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 721,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6186:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 724,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6218:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 757,
												"src": "6205:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 723,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6205:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 726,
												"mutability": "mutable",
												"name": "forceCall",
												"nameLocation": "6229:9:4",
												"nodeType": "VariableDeclaration",
												"scope": 757,
												"src": "6224:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 725,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6224:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6185:54:4"
									},
									"returnParameters": {
										"id": 728,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6249:0:4"
									},
									"scope": 763,
									"src": "6153:335:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"constant": false,
									"documentation": {
										"id": 758,
										"nodeType": "StructuredDocumentation",
										"src": "6494:254:4",
										"text": " @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
									},
									"id": 762,
									"mutability": "mutable",
									"name": "__gap",
									"nameLocation": "6773:5:4",
									"nodeType": "VariableDeclaration",
									"scope": 763,
									"src": "6753:25:4",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_array$_t_uint256_$50_storage",
										"typeString": "uint256[50]"
									},
									"typeName": {
										"baseType": {
											"id": 759,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "6753:7:4",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"id": 761,
										"length": {
											"hexValue": "3530",
											"id": 760,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "6761:2:4",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_50_by_1",
												"typeString": "int_const 50"
											},
											"value": "50"
										},
										"nodeType": "ArrayTypeName",
										"src": "6753:11:4",
										"typeDescriptions": {
											"typeIdentifier": "t_array$_t_uint256_$50_storage_ptr",
											"typeString": "uint256[50]"
										}
									},
									"visibility": "private"
								}
							],
							"scope": 764,
							"src": "609:6172:4",
							"usedErrors": []
						}
					],
					"src": "116:6666:4"
				},
				"id": 4
			},
			"@openzeppelin/contracts-upgradeable@4.9.2/proxy/beacon/IBeaconUpgradeable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable@4.9.2/proxy/beacon/IBeaconUpgradeable.sol",
					"exportedSymbols": {
						"IBeaconUpgradeable": [
							773
						]
					},
					"id": 774,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 765,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "93:23:5"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IBeaconUpgradeable",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 766,
								"nodeType": "StructuredDocumentation",
								"src": "118:79:5",
								"text": " @dev This is the interface that {BeaconProxy} expects of its beacon."
							},
							"fullyImplemented": false,
							"id": 773,
							"linearizedBaseContracts": [
								773
							],
							"name": "IBeaconUpgradeable",
							"nameLocation": "208:18:5",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 767,
										"nodeType": "StructuredDocumentation",
										"src": "233:162:5",
										"text": " @dev Must return an address that can be used as a delegate call target.\n {BeaconProxy} will check that this address is a contract."
									},
									"functionSelector": "5c60da1b",
									"id": 772,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "implementation",
									"nameLocation": "409:14:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 768,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "423:2:5"
									},
									"returnParameters": {
										"id": 771,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 770,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 772,
												"src": "449:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 769,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "449:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "448:9:5"
									},
									"scope": 773,
									"src": "400:58:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 774,
							"src": "198:262:5",
							"usedErrors": []
						}
					],
					"src": "93:368:5"
				},
				"id": 5
			},
			"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/Initializable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/Initializable.sol",
					"exportedSymbols": {
						"AddressUpgradeable": [
							2314
						],
						"Initializable": [
							942
						]
					},
					"id": 943,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 775,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".2"
							],
							"nodeType": "PragmaDirective",
							"src": "113:23:6"
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable@4.9.2/utils/AddressUpgradeable.sol",
							"file": "../../utils/AddressUpgradeable.sol",
							"id": 776,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 943,
							"sourceUnit": 2315,
							"src": "138:44:6",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "Initializable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 777,
								"nodeType": "StructuredDocumentation",
								"src": "184:2209:6",
								"text": " @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n case an upgrade adds a module that needs to be initialized.\n For example:\n [.hljs-theme-light.nopadding]\n ```solidity\n contract MyToken is ERC20Upgradeable {\n     function initialize() initializer public {\n         __ERC20_init(\"MyToken\", \"MTK\");\n     }\n }\n contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n     function initializeV2() reinitializer(2) public {\n         __ERC20Permit_init(\"MyToken\");\n     }\n }\n ```\n TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n [CAUTION]\n ====\n Avoid leaving a contract uninitialized.\n An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n [.hljs-theme-light.nopadding]\n ```\n /// @custom:oz-upgrades-unsafe-allow constructor\n constructor() {\n     _disableInitializers();\n }\n ```\n ===="
							},
							"fullyImplemented": true,
							"id": 942,
							"linearizedBaseContracts": [
								942
							],
							"name": "Initializable",
							"nameLocation": "2412:13:6",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"documentation": {
										"id": 778,
										"nodeType": "StructuredDocumentation",
										"src": "2432:109:6",
										"text": " @dev Indicates that the contract has been initialized.\n @custom:oz-retyped-from bool"
									},
									"id": 780,
									"mutability": "mutable",
									"name": "_initialized",
									"nameLocation": "2560:12:6",
									"nodeType": "VariableDeclaration",
									"scope": 942,
									"src": "2546:26:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint8",
										"typeString": "uint8"
									},
									"typeName": {
										"id": 779,
										"name": "uint8",
										"nodeType": "ElementaryTypeName",
										"src": "2546:5:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"documentation": {
										"id": 781,
										"nodeType": "StructuredDocumentation",
										"src": "2579:91:6",
										"text": " @dev Indicates that the contract is in the process of being initialized."
									},
									"id": 783,
									"mutability": "mutable",
									"name": "_initializing",
									"nameLocation": "2688:13:6",
									"nodeType": "VariableDeclaration",
									"scope": 942,
									"src": "2675:26:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bool",
										"typeString": "bool"
									},
									"typeName": {
										"id": 782,
										"name": "bool",
										"nodeType": "ElementaryTypeName",
										"src": "2675:4:6",
										"typeDescriptions": {
											"typeIdentifier": "t_bool",
											"typeString": "bool"
										}
									},
									"visibility": "private"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 784,
										"nodeType": "StructuredDocumentation",
										"src": "2708:90:6",
										"text": " @dev Triggered when the contract has been initialized or reinitialized."
									},
									"id": 788,
									"name": "Initialized",
									"nameLocation": "2809:11:6",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 787,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 786,
												"indexed": false,
												"mutability": "mutable",
												"name": "version",
												"nameLocation": "2827:7:6",
												"nodeType": "VariableDeclaration",
												"scope": 788,
												"src": "2821:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 785,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "2821:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2820:15:6"
									},
									"src": "2803:33:6"
								},
								{
									"body": {
										"id": 843,
										"nodeType": "Block",
										"src": "3269:483:6",
										"statements": [
											{
												"assignments": [
													792
												],
												"declarations": [
													{
														"constant": false,
														"id": 792,
														"mutability": "mutable",
														"name": "isTopLevelCall",
														"nameLocation": "3284:14:6",
														"nodeType": "VariableDeclaration",
														"scope": 843,
														"src": "3279:19:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 791,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "3279:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 795,
												"initialValue": {
													"id": 794,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "3301:14:6",
													"subExpression": {
														"id": 793,
														"name": "_initializing",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 783,
														"src": "3302:13:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3279:36:6"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 816,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"id": 801,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 797,
																			"name": "isTopLevelCall",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 792,
																			"src": "3347:14:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "&&",
																		"rightExpression": {
																			"commonType": {
																				"typeIdentifier": "t_uint8",
																				"typeString": "uint8"
																			},
																			"id": 800,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 798,
																				"name": "_initialized",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 780,
																				"src": "3365:12:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint8",
																					"typeString": "uint8"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "<",
																			"rightExpression": {
																				"hexValue": "31",
																				"id": 799,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "3380:1:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_1_by_1",
																					"typeString": "int_const 1"
																				},
																				"value": "1"
																			},
																			"src": "3365:16:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"src": "3347:34:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 802,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "3346:36:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "||",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"id": 814,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 810,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "UnaryOperation",
																			"operator": "!",
																			"prefix": true,
																			"src": "3387:45:6",
																			"subExpression": {
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"id": 807,
																								"name": "this",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 4294967268,
																								"src": "3426:4:6",
																								"typeDescriptions": {
																									"typeIdentifier": "t_contract$_Initializable_$942",
																									"typeString": "contract Initializable"
																								}
																							}
																						],
																						"expression": {
																							"argumentTypes": [
																								{
																									"typeIdentifier": "t_contract$_Initializable_$942",
																									"typeString": "contract Initializable"
																								}
																							],
																							"id": 806,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"lValueRequested": false,
																							"nodeType": "ElementaryTypeNameExpression",
																							"src": "3418:7:6",
																							"typeDescriptions": {
																								"typeIdentifier": "t_type$_t_address_$",
																								"typeString": "type(address)"
																							},
																							"typeName": {
																								"id": 805,
																								"name": "address",
																								"nodeType": "ElementaryTypeName",
																								"src": "3418:7:6",
																								"typeDescriptions": {}
																							}
																						},
																						"id": 808,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"kind": "typeConversion",
																						"lValueRequested": false,
																						"names": [],
																						"nodeType": "FunctionCall",
																						"src": "3418:13:6",
																						"tryCall": false,
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					],
																					"expression": {
																						"id": 803,
																						"name": "AddressUpgradeable",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2314,
																						"src": "3388:18:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_contract$_AddressUpgradeable_$2314_$",
																							"typeString": "type(library AddressUpgradeable)"
																						}
																					},
																					"id": 804,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberName": "isContract",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 2002,
																					"src": "3388:29:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																						"typeString": "function (address) view returns (bool)"
																					}
																				},
																				"id": 809,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "3388:44:6",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "&&",
																		"rightExpression": {
																			"commonType": {
																				"typeIdentifier": "t_uint8",
																				"typeString": "uint8"
																			},
																			"id": 813,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 811,
																				"name": "_initialized",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 780,
																				"src": "3436:12:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint8",
																					"typeString": "uint8"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "==",
																			"rightExpression": {
																				"hexValue": "31",
																				"id": 812,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "3452:1:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_1_by_1",
																					"typeString": "int_const 1"
																				},
																				"value": "1"
																			},
																			"src": "3436:17:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"src": "3387:66:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 815,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "3386:68:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "3346:108:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564",
															"id": 817,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3468:48:6",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759",
																"typeString": "literal_string \"Initializable: contract is already initialized\""
															},
															"value": "Initializable: contract is already initialized"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759",
																"typeString": "literal_string \"Initializable: contract is already initialized\""
															}
														],
														"id": 796,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3325:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 818,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3325:201:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 819,
												"nodeType": "ExpressionStatement",
												"src": "3325:201:6"
											},
											{
												"expression": {
													"id": 822,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 820,
														"name": "_initialized",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 780,
														"src": "3536:12:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "31",
														"id": 821,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3551:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "3536:16:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"id": 823,
												"nodeType": "ExpressionStatement",
												"src": "3536:16:6"
											},
											{
												"condition": {
													"id": 824,
													"name": "isTopLevelCall",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 792,
													"src": "3566:14:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 830,
												"nodeType": "IfStatement",
												"src": "3562:65:6",
												"trueBody": {
													"id": 829,
													"nodeType": "Block",
													"src": "3582:45:6",
													"statements": [
														{
															"expression": {
																"id": 827,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 825,
																	"name": "_initializing",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 783,
																	"src": "3596:13:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "74727565",
																	"id": 826,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "3612:4:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																"src": "3596:20:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 828,
															"nodeType": "ExpressionStatement",
															"src": "3596:20:6"
														}
													]
												}
											},
											{
												"id": 831,
												"nodeType": "PlaceholderStatement",
												"src": "3636:1:6"
											},
											{
												"condition": {
													"id": 832,
													"name": "isTopLevelCall",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 792,
													"src": "3651:14:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 842,
												"nodeType": "IfStatement",
												"src": "3647:99:6",
												"trueBody": {
													"id": 841,
													"nodeType": "Block",
													"src": "3667:79:6",
													"statements": [
														{
															"expression": {
																"id": 835,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 833,
																	"name": "_initializing",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 783,
																	"src": "3681:13:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "66616c7365",
																	"id": 834,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "3697:5:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "false"
																},
																"src": "3681:21:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 836,
															"nodeType": "ExpressionStatement",
															"src": "3681:21:6"
														},
														{
															"eventCall": {
																"arguments": [
																	{
																		"hexValue": "31",
																		"id": 838,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "3733:1:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_1_by_1",
																			"typeString": "int_const 1"
																		},
																		"value": "1"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_1_by_1",
																			"typeString": "int_const 1"
																		}
																	],
																	"id": 837,
																	"name": "Initialized",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 788,
																	"src": "3721:11:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_event_nonpayable$_t_uint8_$returns$__$",
																		"typeString": "function (uint8)"
																	}
																},
																"id": 839,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3721:14:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 840,
															"nodeType": "EmitStatement",
															"src": "3716:19:6"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 789,
										"nodeType": "StructuredDocumentation",
										"src": "2842:399:6",
										"text": " @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n `onlyInitializing` functions can be used to initialize parent contracts.\n Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n constructor.\n Emits an {Initialized} event."
									},
									"id": 844,
									"name": "initializer",
									"nameLocation": "3255:11:6",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 790,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3266:2:6"
									},
									"src": "3246:506:6",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 876,
										"nodeType": "Block",
										"src": "4863:255:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 855,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 851,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "UnaryOperation",
																"operator": "!",
																"prefix": true,
																"src": "4881:14:6",
																"subExpression": {
																	"id": 850,
																	"name": "_initializing",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 783,
																	"src": "4882:13:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&&",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																},
																"id": 854,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 852,
																	"name": "_initialized",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 780,
																	"src": "4899:12:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"id": 853,
																	"name": "version",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 847,
																	"src": "4914:7:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"src": "4899:22:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "4881:40:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564",
															"id": 856,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4923:48:6",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759",
																"typeString": "literal_string \"Initializable: contract is already initialized\""
															},
															"value": "Initializable: contract is already initialized"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759",
																"typeString": "literal_string \"Initializable: contract is already initialized\""
															}
														],
														"id": 849,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4873:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 857,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4873:99:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 858,
												"nodeType": "ExpressionStatement",
												"src": "4873:99:6"
											},
											{
												"expression": {
													"id": 861,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 859,
														"name": "_initialized",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 780,
														"src": "4982:12:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 860,
														"name": "version",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 847,
														"src": "4997:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"src": "4982:22:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"id": 862,
												"nodeType": "ExpressionStatement",
												"src": "4982:22:6"
											},
											{
												"expression": {
													"id": 865,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 863,
														"name": "_initializing",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 783,
														"src": "5014:13:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "74727565",
														"id": 864,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "5030:4:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "true"
													},
													"src": "5014:20:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 866,
												"nodeType": "ExpressionStatement",
												"src": "5014:20:6"
											},
											{
												"id": 867,
												"nodeType": "PlaceholderStatement",
												"src": "5044:1:6"
											},
											{
												"expression": {
													"id": 870,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 868,
														"name": "_initializing",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 783,
														"src": "5055:13:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "66616c7365",
														"id": 869,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "5071:5:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "false"
													},
													"src": "5055:21:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 871,
												"nodeType": "ExpressionStatement",
												"src": "5055:21:6"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 873,
															"name": "version",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 847,
															"src": "5103:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														],
														"id": 872,
														"name": "Initialized",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 788,
														"src": "5091:11:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_uint8_$returns$__$",
															"typeString": "function (uint8)"
														}
													},
													"id": 874,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5091:20:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 875,
												"nodeType": "EmitStatement",
												"src": "5086:25:6"
											}
										]
									},
									"documentation": {
										"id": 845,
										"nodeType": "StructuredDocumentation",
										"src": "3758:1062:6",
										"text": " @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n used to initialize parent contracts.\n A reinitializer may be used after the original initialization step. This is essential to configure modules that\n are added through upgrades and that require initialization.\n When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n cannot be nested. If one is invoked in the context of another, execution will revert.\n Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n a contract, executing them in the right order is up to the developer or operator.\n WARNING: setting the version to 255 will prevent any future reinitialization.\n Emits an {Initialized} event."
									},
									"id": 877,
									"name": "reinitializer",
									"nameLocation": "4834:13:6",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 848,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 847,
												"mutability": "mutable",
												"name": "version",
												"nameLocation": "4854:7:6",
												"nodeType": "VariableDeclaration",
												"scope": 877,
												"src": "4848:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 846,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "4848:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4847:15:6"
									},
									"src": "4825:293:6",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 886,
										"nodeType": "Block",
										"src": "5356:97:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 881,
															"name": "_initializing",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 783,
															"src": "5374:13:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "496e697469616c697a61626c653a20636f6e7472616374206973206e6f7420696e697469616c697a696e67",
															"id": 882,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5389:45:6",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b",
																"typeString": "literal_string \"Initializable: contract is not initializing\""
															},
															"value": "Initializable: contract is not initializing"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b",
																"typeString": "literal_string \"Initializable: contract is not initializing\""
															}
														],
														"id": 880,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5366:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 883,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5366:69:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 884,
												"nodeType": "ExpressionStatement",
												"src": "5366:69:6"
											},
											{
												"id": 885,
												"nodeType": "PlaceholderStatement",
												"src": "5445:1:6"
											}
										]
									},
									"documentation": {
										"id": 878,
										"nodeType": "StructuredDocumentation",
										"src": "5124:199:6",
										"text": " @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n {initializer} and {reinitializer} modifiers, directly or indirectly."
									},
									"id": 887,
									"name": "onlyInitializing",
									"nameLocation": "5337:16:6",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 879,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5353:2:6"
									},
									"src": "5328:125:6",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 922,
										"nodeType": "Block",
										"src": "5988:231:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 893,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "UnaryOperation",
															"operator": "!",
															"prefix": true,
															"src": "6006:14:6",
															"subExpression": {
																"id": 892,
																"name": "_initializing",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 783,
																"src": "6007:13:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "496e697469616c697a61626c653a20636f6e747261637420697320696e697469616c697a696e67",
															"id": 894,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6022:41:6",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a",
																"typeString": "literal_string \"Initializable: contract is initializing\""
															},
															"value": "Initializable: contract is initializing"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a",
																"typeString": "literal_string \"Initializable: contract is initializing\""
															}
														],
														"id": 891,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5998:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 895,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5998:66:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 896,
												"nodeType": "ExpressionStatement",
												"src": "5998:66:6"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													},
													"id": 903,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 897,
														"name": "_initialized",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 780,
														"src": "6078:12:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 900,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "6099:5:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint8_$",
																		"typeString": "type(uint8)"
																	},
																	"typeName": {
																		"id": 899,
																		"name": "uint8",
																		"nodeType": "ElementaryTypeName",
																		"src": "6099:5:6",
																		"typeDescriptions": {}
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_type$_t_uint8_$",
																		"typeString": "type(uint8)"
																	}
																],
																"id": 898,
																"name": "type",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967269,
																"src": "6094:4:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																	"typeString": "function () pure"
																}
															},
															"id": 901,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6094:11:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_magic_meta_type_t_uint8",
																"typeString": "type(uint8)"
															}
														},
														"id": 902,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberName": "max",
														"nodeType": "MemberAccess",
														"src": "6094:15:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"src": "6078:31:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 921,
												"nodeType": "IfStatement",
												"src": "6074:139:6",
												"trueBody": {
													"id": 920,
													"nodeType": "Block",
													"src": "6111:102:6",
													"statements": [
														{
															"expression": {
																"id": 910,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 904,
																	"name": "_initialized",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 780,
																	"src": "6125:12:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"expression": {
																		"arguments": [
																			{
																				"id": 907,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "6145:5:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_uint8_$",
																					"typeString": "type(uint8)"
																				},
																				"typeName": {
																					"id": 906,
																					"name": "uint8",
																					"nodeType": "ElementaryTypeName",
																					"src": "6145:5:6",
																					"typeDescriptions": {}
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_type$_t_uint8_$",
																					"typeString": "type(uint8)"
																				}
																			],
																			"id": 905,
																			"name": "type",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967269,
																			"src": "6140:4:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																				"typeString": "function () pure"
																			}
																		},
																		"id": 908,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "6140:11:6",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_meta_type_t_uint8",
																			"typeString": "type(uint8)"
																		}
																	},
																	"id": 909,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberName": "max",
																	"nodeType": "MemberAccess",
																	"src": "6140:15:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"src": "6125:30:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"id": 911,
															"nodeType": "ExpressionStatement",
															"src": "6125:30:6"
														},
														{
															"eventCall": {
																"arguments": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"id": 915,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "ElementaryTypeNameExpression",
																					"src": "6191:5:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_uint8_$",
																						"typeString": "type(uint8)"
																					},
																					"typeName": {
																						"id": 914,
																						"name": "uint8",
																						"nodeType": "ElementaryTypeName",
																						"src": "6191:5:6",
																						"typeDescriptions": {}
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_type$_t_uint8_$",
																						"typeString": "type(uint8)"
																					}
																				],
																				"id": 913,
																				"name": "type",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967269,
																				"src": "6186:4:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																					"typeString": "function () pure"
																				}
																			},
																			"id": 916,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "6186:11:6",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_meta_type_t_uint8",
																				"typeString": "type(uint8)"
																			}
																		},
																		"id": 917,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberName": "max",
																		"nodeType": "MemberAccess",
																		"src": "6186:15:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	],
																	"id": 912,
																	"name": "Initialized",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 788,
																	"src": "6174:11:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_event_nonpayable$_t_uint8_$returns$__$",
																		"typeString": "function (uint8)"
																	}
																},
																"id": 918,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6174:28:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 919,
															"nodeType": "EmitStatement",
															"src": "6169:33:6"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 888,
										"nodeType": "StructuredDocumentation",
										"src": "5459:475:6",
										"text": " @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n through proxies.\n Emits an {Initialized} event the first time it is successfully executed."
									},
									"id": 923,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_disableInitializers",
									"nameLocation": "5948:20:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 889,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5968:2:6"
									},
									"returnParameters": {
										"id": 890,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5988:0:6"
									},
									"scope": 942,
									"src": "5939:280:6",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 931,
										"nodeType": "Block",
										"src": "6393:36:6",
										"statements": [
											{
												"expression": {
													"id": 929,
													"name": "_initialized",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 780,
													"src": "6410:12:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"functionReturnParameters": 928,
												"id": 930,
												"nodeType": "Return",
												"src": "6403:19:6"
											}
										]
									},
									"documentation": {
										"id": 924,
										"nodeType": "StructuredDocumentation",
										"src": "6225:99:6",
										"text": " @dev Returns the highest version that has been initialized. See {reinitializer}."
									},
									"id": 932,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_getInitializedVersion",
									"nameLocation": "6338:22:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 925,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6360:2:6"
									},
									"returnParameters": {
										"id": 928,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 927,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 932,
												"src": "6386:5:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 926,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "6386:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6385:7:6"
									},
									"scope": 942,
									"src": "6329:100:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 940,
										"nodeType": "Block",
										"src": "6601:37:6",
										"statements": [
											{
												"expression": {
													"id": 938,
													"name": "_initializing",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 783,
													"src": "6618:13:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 937,
												"id": 939,
												"nodeType": "Return",
												"src": "6611:20:6"
											}
										]
									},
									"documentation": {
										"id": 933,
										"nodeType": "StructuredDocumentation",
										"src": "6435:105:6",
										"text": " @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}."
									},
									"id": 941,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_isInitializing",
									"nameLocation": "6554:15:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 934,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6569:2:6"
									},
									"returnParameters": {
										"id": 937,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 936,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 941,
												"src": "6595:4:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 935,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6595:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6594:6:6"
									},
									"scope": 942,
									"src": "6545:93:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 943,
							"src": "2394:4246:6",
							"usedErrors": []
						}
					],
					"src": "113:6528:6"
				},
				"id": 6
			},
			"@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/UUPSUpgradeable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/UUPSUpgradeable.sol",
					"exportedSymbols": {
						"AddressUpgradeable": [
							2314
						],
						"ERC1967UpgradeUpgradeable": [
							763
						],
						"IBeaconUpgradeable": [
							773
						],
						"IERC1822ProxiableUpgradeable": [
							439
						],
						"IERC1967Upgradeable": [
							429
						],
						"Initializable": [
							942
						],
						"StorageSlotUpgradeable": [
							2466
						],
						"UUPSUpgradeable": [
							1078
						]
					},
					"id": 1079,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 944,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "115:23:7"
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable@4.9.2/interfaces/draft-IERC1822Upgradeable.sol",
							"file": "../../interfaces/draft-IERC1822Upgradeable.sol",
							"id": 945,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1079,
							"sourceUnit": 440,
							"src": "140:56:7",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable@4.9.2/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol",
							"file": "../ERC1967/ERC1967UpgradeUpgradeable.sol",
							"id": 946,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1079,
							"sourceUnit": 764,
							"src": "197:50:7",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/Initializable.sol",
							"file": "./Initializable.sol",
							"id": 947,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1079,
							"sourceUnit": 943,
							"src": "248:29:7",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 949,
										"name": "Initializable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 942,
										"src": "965:13:7"
									},
									"id": 950,
									"nodeType": "InheritanceSpecifier",
									"src": "965:13:7"
								},
								{
									"baseName": {
										"id": 951,
										"name": "IERC1822ProxiableUpgradeable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 439,
										"src": "980:28:7"
									},
									"id": 952,
									"nodeType": "InheritanceSpecifier",
									"src": "980:28:7"
								},
								{
									"baseName": {
										"id": 953,
										"name": "ERC1967UpgradeUpgradeable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 763,
										"src": "1010:25:7"
									},
									"id": 954,
									"nodeType": "InheritanceSpecifier",
									"src": "1010:25:7"
								}
							],
							"canonicalName": "UUPSUpgradeable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 948,
								"nodeType": "StructuredDocumentation",
								"src": "279:648:7",
								"text": " @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\n {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\n A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\n reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\n `UUPSUpgradeable` with a custom implementation of upgrades.\n The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\n _Available since v4.1._"
							},
							"fullyImplemented": false,
							"id": 1078,
							"linearizedBaseContracts": [
								1078,
								763,
								429,
								439,
								942
							],
							"name": "UUPSUpgradeable",
							"nameLocation": "946:15:7",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 959,
										"nodeType": "Block",
										"src": "1102:7:7",
										"statements": []
									},
									"id": 960,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 957,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 956,
												"name": "onlyInitializing",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 887,
												"src": "1085:16:7"
											},
											"nodeType": "ModifierInvocation",
											"src": "1085:16:7"
										}
									],
									"name": "__UUPSUpgradeable_init",
									"nameLocation": "1051:22:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 955,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1073:2:7"
									},
									"returnParameters": {
										"id": 958,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1102:0:7"
									},
									"scope": 1078,
									"src": "1042:67:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 965,
										"nodeType": "Block",
										"src": "1185:7:7",
										"statements": []
									},
									"id": 966,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 963,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 962,
												"name": "onlyInitializing",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 887,
												"src": "1168:16:7"
											},
											"nodeType": "ModifierInvocation",
											"src": "1168:16:7"
										}
									],
									"name": "__UUPSUpgradeable_init_unchained",
									"nameLocation": "1124:32:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 961,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1156:2:7"
									},
									"returnParameters": {
										"id": 964,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1185:0:7"
									},
									"scope": 1078,
									"src": "1115:77:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"constant": false,
									"documentation": {
										"id": 967,
										"nodeType": "StructuredDocumentation",
										"src": "1197:87:7",
										"text": "@custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment"
									},
									"id": 973,
									"mutability": "immutable",
									"name": "__self",
									"nameLocation": "1315:6:7",
									"nodeType": "VariableDeclaration",
									"scope": 1078,
									"src": "1289:48:7",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 968,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "1289:7:7",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"value": {
										"arguments": [
											{
												"id": 971,
												"name": "this",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 4294967268,
												"src": "1332:4:7",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_UUPSUpgradeable_$1078",
													"typeString": "contract UUPSUpgradeable"
												}
											}
										],
										"expression": {
											"argumentTypes": [
												{
													"typeIdentifier": "t_contract$_UUPSUpgradeable_$1078",
													"typeString": "contract UUPSUpgradeable"
												}
											],
											"id": 970,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"lValueRequested": false,
											"nodeType": "ElementaryTypeNameExpression",
											"src": "1324:7:7",
											"typeDescriptions": {
												"typeIdentifier": "t_type$_t_address_$",
												"typeString": "type(address)"
											},
											"typeName": {
												"id": 969,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1324:7:7",
												"typeDescriptions": {}
											}
										},
										"id": 972,
										"isConstant": false,
										"isLValue": false,
										"isPure": false,
										"kind": "typeConversion",
										"lValueRequested": false,
										"names": [],
										"nodeType": "FunctionCall",
										"src": "1324:13:7",
										"tryCall": false,
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 995,
										"nodeType": "Block",
										"src": "1863:205:7",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 982,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [
																	{
																		"id": 979,
																		"name": "this",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967268,
																		"src": "1889:4:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_UUPSUpgradeable_$1078",
																			"typeString": "contract UUPSUpgradeable"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_UUPSUpgradeable_$1078",
																			"typeString": "contract UUPSUpgradeable"
																		}
																	],
																	"id": 978,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "1881:7:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 977,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "1881:7:7",
																		"typeDescriptions": {}
																	}
																},
																"id": 980,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1881:13:7",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"id": 981,
																"name": "__self",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 973,
																"src": "1898:6:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "1881:23:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682064656c656761746563616c6c",
															"id": 983,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1906:46:7",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_36e108fa7a809b52ab1951dd91c117a7bc9ac5250bdf1aa162d4e104f7edf9eb",
																"typeString": "literal_string \"Function must be called through delegatecall\""
															},
															"value": "Function must be called through delegatecall"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_36e108fa7a809b52ab1951dd91c117a7bc9ac5250bdf1aa162d4e104f7edf9eb",
																"typeString": "literal_string \"Function must be called through delegatecall\""
															}
														],
														"id": 976,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1873:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 984,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1873:80:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 985,
												"nodeType": "ExpressionStatement",
												"src": "1873:80:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 990,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 987,
																	"name": "_getImplementation",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 484,
																	"src": "1971:18:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 988,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1971:20:7",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"id": 989,
																"name": "__self",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 973,
																"src": "1995:6:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "1971:30:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "46756e6374696f6e206d7573742062652063616c6c6564207468726f756768206163746976652070726f7879",
															"id": 991,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2003:46:7",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_52f1ead4d9653e13afbd2e90ef2587c30187cd50b2e97d784e3f7a7541247434",
																"typeString": "literal_string \"Function must be called through active proxy\""
															},
															"value": "Function must be called through active proxy"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_52f1ead4d9653e13afbd2e90ef2587c30187cd50b2e97d784e3f7a7541247434",
																"typeString": "literal_string \"Function must be called through active proxy\""
															}
														],
														"id": 986,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1963:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 992,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1963:87:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 993,
												"nodeType": "ExpressionStatement",
												"src": "1963:87:7"
											},
											{
												"id": 994,
												"nodeType": "PlaceholderStatement",
												"src": "2060:1:7"
											}
										]
									},
									"documentation": {
										"id": 974,
										"nodeType": "StructuredDocumentation",
										"src": "1344:493:7",
										"text": " @dev Check that the execution is being performed through a delegatecall call and that the execution context is\n a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\n for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\n function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\n fail."
									},
									"id": 996,
									"name": "onlyProxy",
									"nameLocation": "1851:9:7",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 975,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1860:2:7"
									},
									"src": "1842:226:7",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1010,
										"nodeType": "Block",
										"src": "2298:120:7",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 1005,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [
																	{
																		"id": 1002,
																		"name": "this",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967268,
																		"src": "2324:4:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_UUPSUpgradeable_$1078",
																			"typeString": "contract UUPSUpgradeable"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_UUPSUpgradeable_$1078",
																			"typeString": "contract UUPSUpgradeable"
																		}
																	],
																	"id": 1001,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2316:7:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 1000,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "2316:7:7",
																		"typeDescriptions": {}
																	}
																},
																"id": 1003,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2316:13:7",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"id": 1004,
																"name": "__self",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 973,
																"src": "2333:6:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "2316:23:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "555550535570677261646561626c653a206d757374206e6f742062652063616c6c6564207468726f7567682064656c656761746563616c6c",
															"id": 1006,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2341:58:7",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_67f0151b4ad1dcfa0e3302a0cd6019f51582ef1807b37dceb00bd852a514f7f4",
																"typeString": "literal_string \"UUPSUpgradeable: must not be called through delegatecall\""
															},
															"value": "UUPSUpgradeable: must not be called through delegatecall"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_67f0151b4ad1dcfa0e3302a0cd6019f51582ef1807b37dceb00bd852a514f7f4",
																"typeString": "literal_string \"UUPSUpgradeable: must not be called through delegatecall\""
															}
														],
														"id": 999,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2308:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1007,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2308:92:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1008,
												"nodeType": "ExpressionStatement",
												"src": "2308:92:7"
											},
											{
												"id": 1009,
												"nodeType": "PlaceholderStatement",
												"src": "2410:1:7"
											}
										]
									},
									"documentation": {
										"id": 997,
										"nodeType": "StructuredDocumentation",
										"src": "2074:195:7",
										"text": " @dev Check that the execution is not being performed through a delegate call. This allows a function to be\n callable on the implementing contract but not through proxies."
									},
									"id": 1011,
									"name": "notDelegated",
									"nameLocation": "2283:12:7",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 998,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2295:2:7"
									},
									"src": "2274:144:7",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										438
									],
									"body": {
										"id": 1022,
										"nodeType": "Block",
										"src": "3093:44:7",
										"statements": [
											{
												"expression": {
													"id": 1020,
													"name": "_IMPLEMENTATION_SLOT",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 471,
													"src": "3110:20:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 1019,
												"id": 1021,
												"nodeType": "Return",
												"src": "3103:27:7"
											}
										]
									},
									"documentation": {
										"id": 1012,
										"nodeType": "StructuredDocumentation",
										"src": "2424:577:7",
										"text": " @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\n implementation. It is used to validate the implementation's compatibility when performing an upgrade.\n IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
									},
									"functionSelector": "52d1902d",
									"id": 1023,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1016,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1015,
												"name": "notDelegated",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1011,
												"src": "3062:12:7"
											},
											"nodeType": "ModifierInvocation",
											"src": "3062:12:7"
										}
									],
									"name": "proxiableUUID",
									"nameLocation": "3015:13:7",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1014,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3053:8:7"
									},
									"parameters": {
										"id": 1013,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3028:2:7"
									},
									"returnParameters": {
										"id": 1019,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1018,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1023,
												"src": "3084:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1017,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3084:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3083:9:7"
									},
									"scope": 1078,
									"src": "3006:131:7",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1044,
										"nodeType": "Block",
										"src": "3458:124:7",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1032,
															"name": "newImplementation",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1026,
															"src": "3486:17:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1031,
														"name": "_authorizeUpgrade",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1072,
														"src": "3468:17:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 1033,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3468:36:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1034,
												"nodeType": "ExpressionStatement",
												"src": "3468:36:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1036,
															"name": "newImplementation",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1026,
															"src": "3536:17:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 1039,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "3565:1:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 1038,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "NewExpression",
																"src": "3555:9:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (uint256) pure returns (bytes memory)"
																},
																"typeName": {
																	"id": 1037,
																	"name": "bytes",
																	"nodeType": "ElementaryTypeName",
																	"src": "3559:5:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_storage_ptr",
																		"typeString": "bytes"
																	}
																}
															},
															"id": 1040,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3555:12:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "66616c7365",
															"id": 1041,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3569:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "false"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 1035,
														"name": "_upgradeToAndCallUUPS",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 606,
														"src": "3514:21:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_bool_$returns$__$",
															"typeString": "function (address,bytes memory,bool)"
														}
													},
													"id": 1042,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3514:61:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1043,
												"nodeType": "ExpressionStatement",
												"src": "3514:61:7"
											}
										]
									},
									"documentation": {
										"id": 1024,
										"nodeType": "StructuredDocumentation",
										"src": "3143:239:7",
										"text": " @dev Upgrade the implementation of the proxy to `newImplementation`.\n Calls {_authorizeUpgrade}.\n Emits an {Upgraded} event.\n @custom:oz-upgrades-unsafe-allow-reachable delegatecall"
									},
									"functionSelector": "3659cfe6",
									"id": 1045,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1029,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1028,
												"name": "onlyProxy",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 996,
												"src": "3448:9:7"
											},
											"nodeType": "ModifierInvocation",
											"src": "3448:9:7"
										}
									],
									"name": "upgradeTo",
									"nameLocation": "3396:9:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1027,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1026,
												"mutability": "mutable",
												"name": "newImplementation",
												"nameLocation": "3414:17:7",
												"nodeType": "VariableDeclaration",
												"scope": 1045,
												"src": "3406:25:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1025,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3406:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3405:27:7"
									},
									"returnParameters": {
										"id": 1030,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3458:0:7"
									},
									"scope": 1078,
									"src": "3387:195:7",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1065,
										"nodeType": "Block",
										"src": "4006:115:7",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1056,
															"name": "newImplementation",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1048,
															"src": "4034:17:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1055,
														"name": "_authorizeUpgrade",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1072,
														"src": "4016:17:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 1057,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4016:36:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1058,
												"nodeType": "ExpressionStatement",
												"src": "4016:36:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1060,
															"name": "newImplementation",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1048,
															"src": "4084:17:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1061,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1050,
															"src": "4103:4:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "74727565",
															"id": 1062,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4109:4:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 1059,
														"name": "_upgradeToAndCallUUPS",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 606,
														"src": "4062:21:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_bool_$returns$__$",
															"typeString": "function (address,bytes memory,bool)"
														}
													},
													"id": 1063,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4062:52:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1064,
												"nodeType": "ExpressionStatement",
												"src": "4062:52:7"
											}
										]
									},
									"documentation": {
										"id": 1046,
										"nodeType": "StructuredDocumentation",
										"src": "3588:308:7",
										"text": " @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\n encoded in `data`.\n Calls {_authorizeUpgrade}.\n Emits an {Upgraded} event.\n @custom:oz-upgrades-unsafe-allow-reachable delegatecall"
									},
									"functionSelector": "4f1ef286",
									"id": 1066,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1053,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1052,
												"name": "onlyProxy",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 996,
												"src": "3996:9:7"
											},
											"nodeType": "ModifierInvocation",
											"src": "3996:9:7"
										}
									],
									"name": "upgradeToAndCall",
									"nameLocation": "3910:16:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1051,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1048,
												"mutability": "mutable",
												"name": "newImplementation",
												"nameLocation": "3935:17:7",
												"nodeType": "VariableDeclaration",
												"scope": 1066,
												"src": "3927:25:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1047,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3927:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1050,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3967:4:7",
												"nodeType": "VariableDeclaration",
												"scope": 1066,
												"src": "3954:17:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1049,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3954:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3926:46:7"
									},
									"returnParameters": {
										"id": 1054,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4006:0:7"
									},
									"scope": 1078,
									"src": "3901:220:7",
									"stateMutability": "payable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"documentation": {
										"id": 1067,
										"nodeType": "StructuredDocumentation",
										"src": "4127:397:7",
										"text": " @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\n {upgradeTo} and {upgradeToAndCall}.\n Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\n ```solidity\n function _authorizeUpgrade(address) internal override onlyOwner {}\n ```"
									},
									"id": 1072,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "_authorizeUpgrade",
									"nameLocation": "4538:17:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1070,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1069,
												"mutability": "mutable",
												"name": "newImplementation",
												"nameLocation": "4564:17:7",
												"nodeType": "VariableDeclaration",
												"scope": 1072,
												"src": "4556:25:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1068,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4556:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4555:27:7"
									},
									"returnParameters": {
										"id": 1071,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4599:0:7"
									},
									"scope": 1078,
									"src": "4529:71:7",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"constant": false,
									"documentation": {
										"id": 1073,
										"nodeType": "StructuredDocumentation",
										"src": "4606:254:7",
										"text": " @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
									},
									"id": 1077,
									"mutability": "mutable",
									"name": "__gap",
									"nameLocation": "4885:5:7",
									"nodeType": "VariableDeclaration",
									"scope": 1078,
									"src": "4865:25:7",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_array$_t_uint256_$50_storage",
										"typeString": "uint256[50]"
									},
									"typeName": {
										"baseType": {
											"id": 1074,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "4865:7:7",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"id": 1076,
										"length": {
											"hexValue": "3530",
											"id": 1075,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "4873:2:7",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_50_by_1",
												"typeString": "int_const 50"
											},
											"value": "50"
										},
										"nodeType": "ArrayTypeName",
										"src": "4865:11:7",
										"typeDescriptions": {
											"typeIdentifier": "t_array$_t_uint256_$50_storage_ptr",
											"typeString": "uint256[50]"
										}
									},
									"visibility": "private"
								}
							],
							"scope": 1079,
							"src": "928:3965:7",
							"usedErrors": []
						}
					],
					"src": "115:4779:7"
				},
				"id": 7
			},
			"@openzeppelin/contracts-upgradeable@4.9.2/security/PausableUpgradeable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable@4.9.2/security/PausableUpgradeable.sol",
					"exportedSymbols": {
						"AddressUpgradeable": [
							2314
						],
						"ContextUpgradeable": [
							2356
						],
						"Initializable": [
							942
						],
						"PausableUpgradeable": [
							1205
						]
					},
					"id": 1206,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1080,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "105:23:8"
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable@4.9.2/utils/ContextUpgradeable.sol",
							"file": "../utils/ContextUpgradeable.sol",
							"id": 1081,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1206,
							"sourceUnit": 2357,
							"src": "130:41:8",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/Initializable.sol",
							"file": "../proxy/utils/Initializable.sol",
							"id": 1082,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1206,
							"sourceUnit": 943,
							"src": "172:42:8",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 1084,
										"name": "Initializable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 942,
										"src": "697:13:8"
									},
									"id": 1085,
									"nodeType": "InheritanceSpecifier",
									"src": "697:13:8"
								},
								{
									"baseName": {
										"id": 1086,
										"name": "ContextUpgradeable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 2356,
										"src": "712:18:8"
									},
									"id": 1087,
									"nodeType": "InheritanceSpecifier",
									"src": "712:18:8"
								}
							],
							"canonicalName": "PausableUpgradeable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 1083,
								"nodeType": "StructuredDocumentation",
								"src": "216:439:8",
								"text": " @dev Contract module which allows children to implement an emergency stop\n mechanism that can be triggered by an authorized account.\n This module is used through inheritance. It will make available the\n modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n the functions of your contract. Note that they will not be pausable by\n simply including this module, only once the modifiers are put in place."
							},
							"fullyImplemented": true,
							"id": 1205,
							"linearizedBaseContracts": [
								1205,
								2356,
								942
							],
							"name": "PausableUpgradeable",
							"nameLocation": "674:19:8",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 1088,
										"nodeType": "StructuredDocumentation",
										"src": "737:73:8",
										"text": " @dev Emitted when the pause is triggered by `account`."
									},
									"id": 1092,
									"name": "Paused",
									"nameLocation": "821:6:8",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1091,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1090,
												"indexed": false,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "836:7:8",
												"nodeType": "VariableDeclaration",
												"scope": 1092,
												"src": "828:15:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1089,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "828:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "827:17:8"
									},
									"src": "815:30:8"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1093,
										"nodeType": "StructuredDocumentation",
										"src": "851:70:8",
										"text": " @dev Emitted when the pause is lifted by `account`."
									},
									"id": 1097,
									"name": "Unpaused",
									"nameLocation": "932:8:8",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1096,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1095,
												"indexed": false,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "949:7:8",
												"nodeType": "VariableDeclaration",
												"scope": 1097,
												"src": "941:15:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1094,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "941:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "940:17:8"
									},
									"src": "926:32:8"
								},
								{
									"constant": false,
									"id": 1099,
									"mutability": "mutable",
									"name": "_paused",
									"nameLocation": "977:7:8",
									"nodeType": "VariableDeclaration",
									"scope": 1205,
									"src": "964:20:8",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bool",
										"typeString": "bool"
									},
									"typeName": {
										"id": 1098,
										"name": "bool",
										"nodeType": "ElementaryTypeName",
										"src": "964:4:8",
										"typeDescriptions": {
											"typeIdentifier": "t_bool",
											"typeString": "bool"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 1108,
										"nodeType": "Block",
										"src": "1116:44:8",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1105,
														"name": "__Pausable_init_unchained",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1119,
														"src": "1126:25:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 1106,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1126:27:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1107,
												"nodeType": "ExpressionStatement",
												"src": "1126:27:8"
											}
										]
									},
									"documentation": {
										"id": 1100,
										"nodeType": "StructuredDocumentation",
										"src": "991:67:8",
										"text": " @dev Initializes the contract in unpaused state."
									},
									"id": 1109,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1103,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1102,
												"name": "onlyInitializing",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 887,
												"src": "1099:16:8"
											},
											"nodeType": "ModifierInvocation",
											"src": "1099:16:8"
										}
									],
									"name": "__Pausable_init",
									"nameLocation": "1072:15:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1101,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1087:2:8"
									},
									"returnParameters": {
										"id": 1104,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1116:0:8"
									},
									"scope": 1205,
									"src": "1063:97:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1118,
										"nodeType": "Block",
										"src": "1229:32:8",
										"statements": [
											{
												"expression": {
													"id": 1116,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1114,
														"name": "_paused",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1099,
														"src": "1239:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "66616c7365",
														"id": 1115,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1249:5:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "false"
													},
													"src": "1239:15:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1117,
												"nodeType": "ExpressionStatement",
												"src": "1239:15:8"
											}
										]
									},
									"id": 1119,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1112,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1111,
												"name": "onlyInitializing",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 887,
												"src": "1212:16:8"
											},
											"nodeType": "ModifierInvocation",
											"src": "1212:16:8"
										}
									],
									"name": "__Pausable_init_unchained",
									"nameLocation": "1175:25:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1110,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1200:2:8"
									},
									"returnParameters": {
										"id": 1113,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1229:0:8"
									},
									"scope": 1205,
									"src": "1166:95:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1126,
										"nodeType": "Block",
										"src": "1472:47:8",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1122,
														"name": "_requireNotPaused",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1156,
														"src": "1482:17:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 1123,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1482:19:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1124,
												"nodeType": "ExpressionStatement",
												"src": "1482:19:8"
											},
											{
												"id": 1125,
												"nodeType": "PlaceholderStatement",
												"src": "1511:1:8"
											}
										]
									},
									"documentation": {
										"id": 1120,
										"nodeType": "StructuredDocumentation",
										"src": "1267:175:8",
										"text": " @dev Modifier to make a function callable only when the contract is not paused.\n Requirements:\n - The contract must not be paused."
									},
									"id": 1127,
									"name": "whenNotPaused",
									"nameLocation": "1456:13:8",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 1121,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1469:2:8"
									},
									"src": "1447:72:8",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1134,
										"nodeType": "Block",
										"src": "1719:44:8",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1130,
														"name": "_requirePaused",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1167,
														"src": "1729:14:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 1131,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1729:16:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1132,
												"nodeType": "ExpressionStatement",
												"src": "1729:16:8"
											},
											{
												"id": 1133,
												"nodeType": "PlaceholderStatement",
												"src": "1755:1:8"
											}
										]
									},
									"documentation": {
										"id": 1128,
										"nodeType": "StructuredDocumentation",
										"src": "1525:167:8",
										"text": " @dev Modifier to make a function callable only when the contract is paused.\n Requirements:\n - The contract must be paused."
									},
									"id": 1135,
									"name": "whenPaused",
									"nameLocation": "1706:10:8",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 1129,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1716:2:8"
									},
									"src": "1697:66:8",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1143,
										"nodeType": "Block",
										"src": "1911:31:8",
										"statements": [
											{
												"expression": {
													"id": 1141,
													"name": "_paused",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1099,
													"src": "1928:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1140,
												"id": 1142,
												"nodeType": "Return",
												"src": "1921:14:8"
											}
										]
									},
									"documentation": {
										"id": 1136,
										"nodeType": "StructuredDocumentation",
										"src": "1769:84:8",
										"text": " @dev Returns true if the contract is paused, and false otherwise."
									},
									"functionSelector": "5c975abb",
									"id": 1144,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "paused",
									"nameLocation": "1867:6:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1137,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1873:2:8"
									},
									"returnParameters": {
										"id": 1140,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1139,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1144,
												"src": "1905:4:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1138,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1905:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1904:6:8"
									},
									"scope": 1205,
									"src": "1858:84:8",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1155,
										"nodeType": "Block",
										"src": "2061:55:8",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1151,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "UnaryOperation",
															"operator": "!",
															"prefix": true,
															"src": "2079:9:8",
															"subExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1149,
																	"name": "paused",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1144,
																	"src": "2080:6:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_bool_$",
																		"typeString": "function () view returns (bool)"
																	}
																},
																"id": 1150,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2080:8:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5061757361626c653a20706175736564",
															"id": 1152,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2090:18:8",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a",
																"typeString": "literal_string \"Pausable: paused\""
															},
															"value": "Pausable: paused"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a",
																"typeString": "literal_string \"Pausable: paused\""
															}
														],
														"id": 1148,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2071:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1153,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2071:38:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1154,
												"nodeType": "ExpressionStatement",
												"src": "2071:38:8"
											}
										]
									},
									"documentation": {
										"id": 1145,
										"nodeType": "StructuredDocumentation",
										"src": "1948:57:8",
										"text": " @dev Throws if the contract is paused."
									},
									"id": 1156,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_requireNotPaused",
									"nameLocation": "2019:17:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1146,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2036:2:8"
									},
									"returnParameters": {
										"id": 1147,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2061:0:8"
									},
									"scope": 1205,
									"src": "2010:106:8",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1166,
										"nodeType": "Block",
										"src": "2236:58:8",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 1161,
																"name": "paused",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1144,
																"src": "2254:6:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_bool_$",
																	"typeString": "function () view returns (bool)"
																}
															},
															"id": 1162,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2254:8:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5061757361626c653a206e6f7420706175736564",
															"id": 1163,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2264:22:8",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a",
																"typeString": "literal_string \"Pausable: not paused\""
															},
															"value": "Pausable: not paused"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a",
																"typeString": "literal_string \"Pausable: not paused\""
															}
														],
														"id": 1160,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2246:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1164,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2246:41:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1165,
												"nodeType": "ExpressionStatement",
												"src": "2246:41:8"
											}
										]
									},
									"documentation": {
										"id": 1157,
										"nodeType": "StructuredDocumentation",
										"src": "2122:61:8",
										"text": " @dev Throws if the contract is not paused."
									},
									"id": 1167,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_requirePaused",
									"nameLocation": "2197:14:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1158,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2211:2:8"
									},
									"returnParameters": {
										"id": 1159,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2236:0:8"
									},
									"scope": 1205,
									"src": "2188:106:8",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1182,
										"nodeType": "Block",
										"src": "2478:66:8",
										"statements": [
											{
												"expression": {
													"id": 1175,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1173,
														"name": "_paused",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1099,
														"src": "2488:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "74727565",
														"id": 1174,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2498:4:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "true"
													},
													"src": "2488:14:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1176,
												"nodeType": "ExpressionStatement",
												"src": "2488:14:8"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 1178,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2341,
																"src": "2524:10:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 1179,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2524:12:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1177,
														"name": "Paused",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1092,
														"src": "2517:6:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 1180,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2517:20:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1181,
												"nodeType": "EmitStatement",
												"src": "2512:25:8"
											}
										]
									},
									"documentation": {
										"id": 1168,
										"nodeType": "StructuredDocumentation",
										"src": "2300:124:8",
										"text": " @dev Triggers stopped state.\n Requirements:\n - The contract must not be paused."
									},
									"id": 1183,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1171,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1170,
												"name": "whenNotPaused",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1127,
												"src": "2464:13:8"
											},
											"nodeType": "ModifierInvocation",
											"src": "2464:13:8"
										}
									],
									"name": "_pause",
									"nameLocation": "2438:6:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1169,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2444:2:8"
									},
									"returnParameters": {
										"id": 1172,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2478:0:8"
									},
									"scope": 1205,
									"src": "2429:115:8",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1198,
										"nodeType": "Block",
										"src": "2724:69:8",
										"statements": [
											{
												"expression": {
													"id": 1191,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1189,
														"name": "_paused",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1099,
														"src": "2734:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "66616c7365",
														"id": 1190,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2744:5:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "false"
													},
													"src": "2734:15:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1192,
												"nodeType": "ExpressionStatement",
												"src": "2734:15:8"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 1194,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2341,
																"src": "2773:10:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 1195,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2773:12:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1193,
														"name": "Unpaused",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1097,
														"src": "2764:8:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 1196,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2764:22:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1197,
												"nodeType": "EmitStatement",
												"src": "2759:27:8"
											}
										]
									},
									"documentation": {
										"id": 1184,
										"nodeType": "StructuredDocumentation",
										"src": "2550:121:8",
										"text": " @dev Returns to normal state.\n Requirements:\n - The contract must be paused."
									},
									"id": 1199,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1187,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1186,
												"name": "whenPaused",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1135,
												"src": "2713:10:8"
											},
											"nodeType": "ModifierInvocation",
											"src": "2713:10:8"
										}
									],
									"name": "_unpause",
									"nameLocation": "2685:8:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1185,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2693:2:8"
									},
									"returnParameters": {
										"id": 1188,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2724:0:8"
									},
									"scope": 1205,
									"src": "2676:117:8",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"constant": false,
									"documentation": {
										"id": 1200,
										"nodeType": "StructuredDocumentation",
										"src": "2799:254:8",
										"text": " @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
									},
									"id": 1204,
									"mutability": "mutable",
									"name": "__gap",
									"nameLocation": "3078:5:8",
									"nodeType": "VariableDeclaration",
									"scope": 1205,
									"src": "3058:25:8",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_array$_t_uint256_$49_storage",
										"typeString": "uint256[49]"
									},
									"typeName": {
										"baseType": {
											"id": 1201,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "3058:7:8",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"id": 1203,
										"length": {
											"hexValue": "3439",
											"id": 1202,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "3066:2:8",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_49_by_1",
												"typeString": "int_const 49"
											},
											"value": "49"
										},
										"nodeType": "ArrayTypeName",
										"src": "3058:11:8",
										"typeDescriptions": {
											"typeIdentifier": "t_array$_t_uint256_$49_storage_ptr",
											"typeString": "uint256[49]"
										}
									},
									"visibility": "private"
								}
							],
							"scope": 1206,
							"src": "656:2430:8",
							"usedErrors": []
						}
					],
					"src": "105:2982:8"
				},
				"id": 8
			},
			"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol",
					"exportedSymbols": {
						"AddressUpgradeable": [
							2314
						],
						"ContextUpgradeable": [
							2356
						],
						"ERC20Upgradeable": [
							1817
						],
						"IERC20MetadataUpgradeable": [
							1984
						],
						"IERC20Upgradeable": [
							1895
						],
						"Initializable": [
							942
						]
					},
					"id": 1818,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1207,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "105:23:9"
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/IERC20Upgradeable.sol",
							"file": "./IERC20Upgradeable.sol",
							"id": 1208,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1818,
							"sourceUnit": 1896,
							"src": "130:33:9",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/extensions/IERC20MetadataUpgradeable.sol",
							"file": "./extensions/IERC20MetadataUpgradeable.sol",
							"id": 1209,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1818,
							"sourceUnit": 1985,
							"src": "164:52:9",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable@4.9.2/utils/ContextUpgradeable.sol",
							"file": "../../utils/ContextUpgradeable.sol",
							"id": 1210,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1818,
							"sourceUnit": 2357,
							"src": "217:44:9",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/Initializable.sol",
							"file": "../../proxy/utils/Initializable.sol",
							"id": 1211,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1818,
							"sourceUnit": 943,
							"src": "262:45:9",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1213,
										"name": "Initializable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 942,
										"src": "1640:13:9"
									},
									"id": 1214,
									"nodeType": "InheritanceSpecifier",
									"src": "1640:13:9"
								},
								{
									"baseName": {
										"id": 1215,
										"name": "ContextUpgradeable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 2356,
										"src": "1655:18:9"
									},
									"id": 1216,
									"nodeType": "InheritanceSpecifier",
									"src": "1655:18:9"
								},
								{
									"baseName": {
										"id": 1217,
										"name": "IERC20Upgradeable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1895,
										"src": "1675:17:9"
									},
									"id": 1218,
									"nodeType": "InheritanceSpecifier",
									"src": "1675:17:9"
								},
								{
									"baseName": {
										"id": 1219,
										"name": "IERC20MetadataUpgradeable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1984,
										"src": "1694:25:9"
									},
									"id": 1220,
									"nodeType": "InheritanceSpecifier",
									"src": "1694:25:9"
								}
							],
							"canonicalName": "ERC20Upgradeable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 1212,
								"nodeType": "StructuredDocumentation",
								"src": "309:1301:9",
								"text": " @dev Implementation of the {IERC20} interface.\n This implementation is agnostic to the way tokens are created. This means\n that a supply mechanism has to be added in a derived contract using {_mint}.\n For a generic mechanism see {ERC20PresetMinterPauser}.\n TIP: For a detailed writeup see our guide\n https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n to implement supply mechanisms].\n The default value of {decimals} is 18. To change this, you should override\n this function so it returns a different value.\n We have followed general OpenZeppelin Contracts guidelines: functions revert\n instead returning `false` on failure. This behavior is nonetheless\n conventional and does not conflict with the expectations of ERC20\n applications.\n Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n This allows applications to reconstruct the allowance for all accounts just\n by listening to said events. Other implementations of the EIP may not emit\n these events, as it isn't required by the specification.\n Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n functions have been added to mitigate the well-known issues around setting\n allowances. See {IERC20-approve}."
							},
							"fullyImplemented": true,
							"id": 1817,
							"linearizedBaseContracts": [
								1817,
								1984,
								1895,
								2356,
								942
							],
							"name": "ERC20Upgradeable",
							"nameLocation": "1620:16:9",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 1224,
									"mutability": "mutable",
									"name": "_balances",
									"nameLocation": "1762:9:9",
									"nodeType": "VariableDeclaration",
									"scope": 1817,
									"src": "1726:45:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 1223,
										"keyType": {
											"id": 1221,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1734:7:9",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1726:27:9",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueType": {
											"id": 1222,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1745:7:9",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 1230,
									"mutability": "mutable",
									"name": "_allowances",
									"nameLocation": "1834:11:9",
									"nodeType": "VariableDeclaration",
									"scope": 1817,
									"src": "1778:67:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
										"typeString": "mapping(address => mapping(address => uint256))"
									},
									"typeName": {
										"id": 1229,
										"keyType": {
											"id": 1225,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1786:7:9",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1778:47:9",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
											"typeString": "mapping(address => mapping(address => uint256))"
										},
										"valueType": {
											"id": 1228,
											"keyType": {
												"id": 1226,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1805:7:9",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"nodeType": "Mapping",
											"src": "1797:27:9",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
												"typeString": "mapping(address => uint256)"
											},
											"valueType": {
												"id": 1227,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1816:7:9",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 1232,
									"mutability": "mutable",
									"name": "_totalSupply",
									"nameLocation": "1868:12:9",
									"nodeType": "VariableDeclaration",
									"scope": 1817,
									"src": "1852:28:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 1231,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1852:7:9",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 1234,
									"mutability": "mutable",
									"name": "_name",
									"nameLocation": "1902:5:9",
									"nodeType": "VariableDeclaration",
									"scope": 1817,
									"src": "1887:20:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 1233,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "1887:6:9",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 1236,
									"mutability": "mutable",
									"name": "_symbol",
									"nameLocation": "1928:7:9",
									"nodeType": "VariableDeclaration",
									"scope": 1817,
									"src": "1913:22:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 1235,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "1913:6:9",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 1251,
										"nodeType": "Block",
										"src": "2210:55:9",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1247,
															"name": "name_",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1239,
															"src": "2243:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														{
															"id": 1248,
															"name": "symbol_",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1241,
															"src": "2250:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 1246,
														"name": "__ERC20_init_unchained",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1270,
														"src": "2220:22:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (string memory,string memory)"
														}
													},
													"id": 1249,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2220:38:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1250,
												"nodeType": "ExpressionStatement",
												"src": "2220:38:9"
											}
										]
									},
									"documentation": {
										"id": 1237,
										"nodeType": "StructuredDocumentation",
										"src": "1942:171:9",
										"text": " @dev Sets the values for {name} and {symbol}.\n All two of these values are immutable: they can only be set once during\n construction."
									},
									"id": 1252,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1244,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1243,
												"name": "onlyInitializing",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 887,
												"src": "2193:16:9"
											},
											"nodeType": "ModifierInvocation",
											"src": "2193:16:9"
										}
									],
									"name": "__ERC20_init",
									"nameLocation": "2127:12:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1242,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1239,
												"mutability": "mutable",
												"name": "name_",
												"nameLocation": "2154:5:9",
												"nodeType": "VariableDeclaration",
												"scope": 1252,
												"src": "2140:19:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1238,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2140:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1241,
												"mutability": "mutable",
												"name": "symbol_",
												"nameLocation": "2175:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 1252,
												"src": "2161:21:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1240,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2161:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2139:44:9"
									},
									"returnParameters": {
										"id": 1245,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2210:0:9"
									},
									"scope": 1817,
									"src": "2118:147:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1269,
										"nodeType": "Block",
										"src": "2373:57:9",
										"statements": [
											{
												"expression": {
													"id": 1263,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1261,
														"name": "_name",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1234,
														"src": "2383:5:9",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1262,
														"name": "name_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1254,
														"src": "2391:5:9",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "2383:13:9",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 1264,
												"nodeType": "ExpressionStatement",
												"src": "2383:13:9"
											},
											{
												"expression": {
													"id": 1267,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1265,
														"name": "_symbol",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1236,
														"src": "2406:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1266,
														"name": "symbol_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1256,
														"src": "2416:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "2406:17:9",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 1268,
												"nodeType": "ExpressionStatement",
												"src": "2406:17:9"
											}
										]
									},
									"id": 1270,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1259,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1258,
												"name": "onlyInitializing",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 887,
												"src": "2356:16:9"
											},
											"nodeType": "ModifierInvocation",
											"src": "2356:16:9"
										}
									],
									"name": "__ERC20_init_unchained",
									"nameLocation": "2280:22:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1257,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1254,
												"mutability": "mutable",
												"name": "name_",
												"nameLocation": "2317:5:9",
												"nodeType": "VariableDeclaration",
												"scope": 1270,
												"src": "2303:19:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1253,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2303:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1256,
												"mutability": "mutable",
												"name": "symbol_",
												"nameLocation": "2338:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 1270,
												"src": "2324:21:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1255,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2324:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2302:44:9"
									},
									"returnParameters": {
										"id": 1260,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2373:0:9"
									},
									"scope": 1817,
									"src": "2271:159:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										1971
									],
									"body": {
										"id": 1279,
										"nodeType": "Block",
										"src": "2564:29:9",
										"statements": [
											{
												"expression": {
													"id": 1277,
													"name": "_name",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1234,
													"src": "2581:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 1276,
												"id": 1278,
												"nodeType": "Return",
												"src": "2574:12:9"
											}
										]
									},
									"documentation": {
										"id": 1271,
										"nodeType": "StructuredDocumentation",
										"src": "2436:54:9",
										"text": " @dev Returns the name of the token."
									},
									"functionSelector": "06fdde03",
									"id": 1280,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "2504:4:9",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1273,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "2531:8:9"
									},
									"parameters": {
										"id": 1272,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2508:2:9"
									},
									"returnParameters": {
										"id": 1276,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1275,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1280,
												"src": "2549:13:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1274,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2549:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2548:15:9"
									},
									"scope": 1817,
									"src": "2495:98:9",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1977
									],
									"body": {
										"id": 1289,
										"nodeType": "Block",
										"src": "2777:31:9",
										"statements": [
											{
												"expression": {
													"id": 1287,
													"name": "_symbol",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1236,
													"src": "2794:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 1286,
												"id": 1288,
												"nodeType": "Return",
												"src": "2787:14:9"
											}
										]
									},
									"documentation": {
										"id": 1281,
										"nodeType": "StructuredDocumentation",
										"src": "2599:102:9",
										"text": " @dev Returns the symbol of the token, usually a shorter version of the\n name."
									},
									"functionSelector": "95d89b41",
									"id": 1290,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "2715:6:9",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1283,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "2744:8:9"
									},
									"parameters": {
										"id": 1282,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2721:2:9"
									},
									"returnParameters": {
										"id": 1286,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1285,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1290,
												"src": "2762:13:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1284,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2762:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2761:15:9"
									},
									"scope": 1817,
									"src": "2706:102:9",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1983
									],
									"body": {
										"id": 1299,
										"nodeType": "Block",
										"src": "3506:26:9",
										"statements": [
											{
												"expression": {
													"hexValue": "3138",
													"id": 1297,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "3523:2:9",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_18_by_1",
														"typeString": "int_const 18"
													},
													"value": "18"
												},
												"functionReturnParameters": 1296,
												"id": 1298,
												"nodeType": "Return",
												"src": "3516:9:9"
											}
										]
									},
									"documentation": {
										"id": 1291,
										"nodeType": "StructuredDocumentation",
										"src": "2814:622:9",
										"text": " @dev Returns the number of decimals used to get its user representation.\n For example, if `decimals` equals `2`, a balance of `505` tokens should\n be displayed to a user as `5.05` (`505 / 10 ** 2`).\n Tokens usually opt for a value of 18, imitating the relationship between\n Ether and Wei. This is the default value returned by this function, unless\n it's overridden.\n NOTE: This information is only used for _display_ purposes: it in\n no way affects any of the arithmetic of the contract, including\n {IERC20-balanceOf} and {IERC20-transfer}."
									},
									"functionSelector": "313ce567",
									"id": 1300,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nameLocation": "3450:8:9",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1293,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3481:8:9"
									},
									"parameters": {
										"id": 1292,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3458:2:9"
									},
									"returnParameters": {
										"id": 1296,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1295,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1300,
												"src": "3499:5:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1294,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "3499:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3498:7:9"
									},
									"scope": 1817,
									"src": "3441:91:9",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1844
									],
									"body": {
										"id": 1309,
										"nodeType": "Block",
										"src": "3662:36:9",
										"statements": [
											{
												"expression": {
													"id": 1307,
													"name": "_totalSupply",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1232,
													"src": "3679:12:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1306,
												"id": 1308,
												"nodeType": "Return",
												"src": "3672:19:9"
											}
										]
									},
									"documentation": {
										"id": 1301,
										"nodeType": "StructuredDocumentation",
										"src": "3538:49:9",
										"text": " @dev See {IERC20-totalSupply}."
									},
									"functionSelector": "18160ddd",
									"id": 1310,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "3601:11:9",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1303,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3635:8:9"
									},
									"parameters": {
										"id": 1302,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3612:2:9"
									},
									"returnParameters": {
										"id": 1306,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1305,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1310,
												"src": "3653:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1304,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3653:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3652:9:9"
									},
									"scope": 1817,
									"src": "3592:106:9",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1852
									],
									"body": {
										"id": 1323,
										"nodeType": "Block",
										"src": "3839:42:9",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"id": 1319,
														"name": "_balances",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1224,
														"src": "3856:9:9",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 1321,
													"indexExpression": {
														"id": 1320,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1313,
														"src": "3866:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "3856:18:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1318,
												"id": 1322,
												"nodeType": "Return",
												"src": "3849:25:9"
											}
										]
									},
									"documentation": {
										"id": 1311,
										"nodeType": "StructuredDocumentation",
										"src": "3704:47:9",
										"text": " @dev See {IERC20-balanceOf}."
									},
									"functionSelector": "70a08231",
									"id": 1324,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "3765:9:9",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1315,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3812:8:9"
									},
									"parameters": {
										"id": 1314,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1313,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "3783:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 1324,
												"src": "3775:15:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1312,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3775:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3774:17:9"
									},
									"returnParameters": {
										"id": 1318,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1317,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1324,
												"src": "3830:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1316,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3830:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3829:9:9"
									},
									"scope": 1817,
									"src": "3756:125:9",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1862
									],
									"body": {
										"id": 1348,
										"nodeType": "Block",
										"src": "4162:104:9",
										"statements": [
											{
												"assignments": [
													1336
												],
												"declarations": [
													{
														"constant": false,
														"id": 1336,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "4180:5:9",
														"nodeType": "VariableDeclaration",
														"scope": 1348,
														"src": "4172:13:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1335,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "4172:7:9",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1339,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1337,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2341,
														"src": "4188:10:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 1338,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4188:12:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4172:28:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1341,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1336,
															"src": "4220:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1342,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1327,
															"src": "4227:2:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1343,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1329,
															"src": "4231:6:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1340,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1572,
														"src": "4210:9:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1344,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4210:28:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1345,
												"nodeType": "ExpressionStatement",
												"src": "4210:28:9"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 1346,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "4255:4:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 1334,
												"id": 1347,
												"nodeType": "Return",
												"src": "4248:11:9"
											}
										]
									},
									"documentation": {
										"id": 1325,
										"nodeType": "StructuredDocumentation",
										"src": "3887:185:9",
										"text": " @dev See {IERC20-transfer}.\n Requirements:\n - `to` cannot be the zero address.\n - the caller must have a balance of at least `amount`."
									},
									"functionSelector": "a9059cbb",
									"id": 1349,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "4086:8:9",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1331,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "4138:8:9"
									},
									"parameters": {
										"id": 1330,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1327,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "4103:2:9",
												"nodeType": "VariableDeclaration",
												"scope": 1349,
												"src": "4095:10:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1326,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4095:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1329,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "4115:6:9",
												"nodeType": "VariableDeclaration",
												"scope": 1349,
												"src": "4107:14:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1328,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4107:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4094:28:9"
									},
									"returnParameters": {
										"id": 1334,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1333,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1349,
												"src": "4156:4:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1332,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4156:4:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4155:6:9"
									},
									"scope": 1817,
									"src": "4077:189:9",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1872
									],
									"body": {
										"id": 1366,
										"nodeType": "Block",
										"src": "4422:51:9",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"baseExpression": {
															"id": 1360,
															"name": "_allowances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1230,
															"src": "4439:11:9",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																"typeString": "mapping(address => mapping(address => uint256))"
															}
														},
														"id": 1362,
														"indexExpression": {
															"id": 1361,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1352,
															"src": "4451:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "4439:18:9",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 1364,
													"indexExpression": {
														"id": 1363,
														"name": "spender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1354,
														"src": "4458:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "4439:27:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1359,
												"id": 1365,
												"nodeType": "Return",
												"src": "4432:34:9"
											}
										]
									},
									"documentation": {
										"id": 1350,
										"nodeType": "StructuredDocumentation",
										"src": "4272:47:9",
										"text": " @dev See {IERC20-allowance}."
									},
									"functionSelector": "dd62ed3e",
									"id": 1367,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "4333:9:9",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1356,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "4395:8:9"
									},
									"parameters": {
										"id": 1355,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1352,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "4351:5:9",
												"nodeType": "VariableDeclaration",
												"scope": 1367,
												"src": "4343:13:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1351,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4343:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1354,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "4366:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 1367,
												"src": "4358:15:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1353,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4358:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4342:32:9"
									},
									"returnParameters": {
										"id": 1359,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1358,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1367,
												"src": "4413:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1357,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4413:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4412:9:9"
									},
									"scope": 1817,
									"src": "4324:149:9",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1882
									],
									"body": {
										"id": 1391,
										"nodeType": "Block",
										"src": "4870:108:9",
										"statements": [
											{
												"assignments": [
													1379
												],
												"declarations": [
													{
														"constant": false,
														"id": 1379,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "4888:5:9",
														"nodeType": "VariableDeclaration",
														"scope": 1391,
														"src": "4880:13:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1378,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "4880:7:9",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1382,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1380,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2341,
														"src": "4896:10:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 1381,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4896:12:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4880:28:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1384,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1379,
															"src": "4927:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1385,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1370,
															"src": "4934:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1386,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1372,
															"src": "4943:6:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1383,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1746,
														"src": "4918:8:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1387,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4918:32:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1388,
												"nodeType": "ExpressionStatement",
												"src": "4918:32:9"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 1389,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "4967:4:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 1377,
												"id": 1390,
												"nodeType": "Return",
												"src": "4960:11:9"
											}
										]
									},
									"documentation": {
										"id": 1368,
										"nodeType": "StructuredDocumentation",
										"src": "4479:297:9",
										"text": " @dev See {IERC20-approve}.\n NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n `transferFrom`. This is semantically equivalent to an infinite approval.\n Requirements:\n - `spender` cannot be the zero address."
									},
									"functionSelector": "095ea7b3",
									"id": 1392,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "4790:7:9",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1374,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "4846:8:9"
									},
									"parameters": {
										"id": 1373,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1370,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "4806:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 1392,
												"src": "4798:15:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1369,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4798:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1372,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "4823:6:9",
												"nodeType": "VariableDeclaration",
												"scope": 1392,
												"src": "4815:14:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1371,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4815:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4797:33:9"
									},
									"returnParameters": {
										"id": 1377,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1376,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1392,
												"src": "4864:4:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1375,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4864:4:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4863:6:9"
									},
									"scope": 1817,
									"src": "4781:197:9",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1894
									],
									"body": {
										"id": 1424,
										"nodeType": "Block",
										"src": "5643:153:9",
										"statements": [
											{
												"assignments": [
													1406
												],
												"declarations": [
													{
														"constant": false,
														"id": 1406,
														"mutability": "mutable",
														"name": "spender",
														"nameLocation": "5661:7:9",
														"nodeType": "VariableDeclaration",
														"scope": 1424,
														"src": "5653:15:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1405,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "5653:7:9",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1409,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1407,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2341,
														"src": "5671:10:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 1408,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5671:12:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5653:30:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1411,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1395,
															"src": "5709:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1412,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1406,
															"src": "5715:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1413,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1399,
															"src": "5724:6:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1410,
														"name": "_spendAllowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1789,
														"src": "5693:15:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1414,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5693:38:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1415,
												"nodeType": "ExpressionStatement",
												"src": "5693:38:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1417,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1395,
															"src": "5751:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1418,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1397,
															"src": "5757:2:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1419,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1399,
															"src": "5761:6:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1416,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1572,
														"src": "5741:9:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1420,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5741:27:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1421,
												"nodeType": "ExpressionStatement",
												"src": "5741:27:9"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 1422,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "5785:4:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 1404,
												"id": 1423,
												"nodeType": "Return",
												"src": "5778:11:9"
											}
										]
									},
									"documentation": {
										"id": 1393,
										"nodeType": "StructuredDocumentation",
										"src": "4984:551:9",
										"text": " @dev See {IERC20-transferFrom}.\n Emits an {Approval} event indicating the updated allowance. This is not\n required by the EIP. See the note at the beginning of {ERC20}.\n NOTE: Does not update the allowance if the current allowance\n is the maximum `uint256`.\n Requirements:\n - `from` and `to` cannot be the zero address.\n - `from` must have a balance of at least `amount`.\n - the caller must have allowance for ``from``'s tokens of at least\n `amount`."
									},
									"functionSelector": "23b872dd",
									"id": 1425,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "5549:12:9",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1401,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "5619:8:9"
									},
									"parameters": {
										"id": 1400,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1395,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "5570:4:9",
												"nodeType": "VariableDeclaration",
												"scope": 1425,
												"src": "5562:12:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1394,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5562:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1397,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "5584:2:9",
												"nodeType": "VariableDeclaration",
												"scope": 1425,
												"src": "5576:10:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1396,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5576:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1399,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "5596:6:9",
												"nodeType": "VariableDeclaration",
												"scope": 1425,
												"src": "5588:14:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1398,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5588:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5561:42:9"
									},
									"returnParameters": {
										"id": 1404,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1403,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1425,
												"src": "5637:4:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1402,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "5637:4:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5636:6:9"
									},
									"scope": 1817,
									"src": "5540:256:9",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1453,
										"nodeType": "Block",
										"src": "6285:140:9",
										"statements": [
											{
												"assignments": [
													1436
												],
												"declarations": [
													{
														"constant": false,
														"id": 1436,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "6303:5:9",
														"nodeType": "VariableDeclaration",
														"scope": 1453,
														"src": "6295:13:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1435,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "6295:7:9",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1439,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1437,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2341,
														"src": "6311:10:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 1438,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6311:12:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6295:28:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1441,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1436,
															"src": "6342:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1442,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1428,
															"src": "6349:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1448,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [
																	{
																		"id": 1444,
																		"name": "owner",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1436,
																		"src": "6368:5:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 1445,
																		"name": "spender",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1428,
																		"src": "6375:7:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 1443,
																	"name": "allowance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1367,
																	"src": "6358:9:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$",
																		"typeString": "function (address,address) view returns (uint256)"
																	}
																},
																"id": 1446,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6358:25:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"id": 1447,
																"name": "addedValue",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1430,
																"src": "6386:10:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "6358:38:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1440,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1746,
														"src": "6333:8:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1449,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6333:64:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1450,
												"nodeType": "ExpressionStatement",
												"src": "6333:64:9"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 1451,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "6414:4:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 1434,
												"id": 1452,
												"nodeType": "Return",
												"src": "6407:11:9"
											}
										]
									},
									"documentation": {
										"id": 1426,
										"nodeType": "StructuredDocumentation",
										"src": "5802:384:9",
										"text": " @dev Atomically increases the allowance granted to `spender` by the caller.\n This is an alternative to {approve} that can be used as a mitigation for\n problems described in {IERC20-approve}.\n Emits an {Approval} event indicating the updated allowance.\n Requirements:\n - `spender` cannot be the zero address."
									},
									"functionSelector": "39509351",
									"id": 1454,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "increaseAllowance",
									"nameLocation": "6200:17:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1431,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1428,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "6226:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 1454,
												"src": "6218:15:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1427,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6218:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1430,
												"mutability": "mutable",
												"name": "addedValue",
												"nameLocation": "6243:10:9",
												"nodeType": "VariableDeclaration",
												"scope": 1454,
												"src": "6235:18:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1429,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6235:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6217:37:9"
									},
									"returnParameters": {
										"id": 1434,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1433,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1454,
												"src": "6279:4:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1432,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6279:4:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6278:6:9"
									},
									"scope": 1817,
									"src": "6191:234:9",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1494,
										"nodeType": "Block",
										"src": "7011:328:9",
										"statements": [
											{
												"assignments": [
													1465
												],
												"declarations": [
													{
														"constant": false,
														"id": 1465,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "7029:5:9",
														"nodeType": "VariableDeclaration",
														"scope": 1494,
														"src": "7021:13:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1464,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "7021:7:9",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1468,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1466,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2341,
														"src": "7037:10:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 1467,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7037:12:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7021:28:9"
											},
											{
												"assignments": [
													1470
												],
												"declarations": [
													{
														"constant": false,
														"id": 1470,
														"mutability": "mutable",
														"name": "currentAllowance",
														"nameLocation": "7067:16:9",
														"nodeType": "VariableDeclaration",
														"scope": 1494,
														"src": "7059:24:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1469,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "7059:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1475,
												"initialValue": {
													"arguments": [
														{
															"id": 1472,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1465,
															"src": "7096:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1473,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1457,
															"src": "7103:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1471,
														"name": "allowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1367,
														"src": "7086:9:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address,address) view returns (uint256)"
														}
													},
													"id": 1474,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7086:25:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7059:52:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1479,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1477,
																"name": "currentAllowance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1470,
																"src": "7129:16:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 1478,
																"name": "subtractedValue",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1459,
																"src": "7149:15:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7129:35:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f",
															"id": 1480,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7166:39:9",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8",
																"typeString": "literal_string \"ERC20: decreased allowance below zero\""
															},
															"value": "ERC20: decreased allowance below zero"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8",
																"typeString": "literal_string \"ERC20: decreased allowance below zero\""
															}
														],
														"id": 1476,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7121:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1481,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7121:85:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1482,
												"nodeType": "ExpressionStatement",
												"src": "7121:85:9"
											},
											{
												"id": 1491,
												"nodeType": "UncheckedBlock",
												"src": "7216:95:9",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"id": 1484,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1465,
																	"src": "7249:5:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 1485,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1457,
																	"src": "7256:7:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1488,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1486,
																		"name": "currentAllowance",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1470,
																		"src": "7265:16:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "-",
																	"rightExpression": {
																		"id": 1487,
																		"name": "subtractedValue",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1459,
																		"src": "7284:15:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "7265:34:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1483,
																"name": "_approve",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1746,
																"src": "7240:8:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
																	"typeString": "function (address,address,uint256)"
																}
															},
															"id": 1489,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "7240:60:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 1490,
														"nodeType": "ExpressionStatement",
														"src": "7240:60:9"
													}
												]
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 1492,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "7328:4:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 1463,
												"id": 1493,
												"nodeType": "Return",
												"src": "7321:11:9"
											}
										]
									},
									"documentation": {
										"id": 1455,
										"nodeType": "StructuredDocumentation",
										"src": "6431:476:9",
										"text": " @dev Atomically decreases the allowance granted to `spender` by the caller.\n This is an alternative to {approve} that can be used as a mitigation for\n problems described in {IERC20-approve}.\n Emits an {Approval} event indicating the updated allowance.\n Requirements:\n - `spender` cannot be the zero address.\n - `spender` must have allowance for the caller of at least\n `subtractedValue`."
									},
									"functionSelector": "a457c2d7",
									"id": 1495,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "decreaseAllowance",
									"nameLocation": "6921:17:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1460,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1457,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "6947:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 1495,
												"src": "6939:15:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1456,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6939:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1459,
												"mutability": "mutable",
												"name": "subtractedValue",
												"nameLocation": "6964:15:9",
												"nodeType": "VariableDeclaration",
												"scope": 1495,
												"src": "6956:23:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1458,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6956:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6938:42:9"
									},
									"returnParameters": {
										"id": 1463,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1462,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1495,
												"src": "7005:4:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1461,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "7005:4:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7004:6:9"
									},
									"scope": 1817,
									"src": "6912:427:9",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1571,
										"nodeType": "Block",
										"src": "7871:710:9",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 1511,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1506,
																"name": "from",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1498,
																"src": "7889:4:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 1509,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "7905:1:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 1508,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "7897:7:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 1507,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "7897:7:9",
																		"typeDescriptions": {}
																	}
																},
																"id": 1510,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7897:10:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "7889:18:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a207472616e736665722066726f6d20746865207a65726f2061646472657373",
															"id": 1512,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7909:39:9",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea",
																"typeString": "literal_string \"ERC20: transfer from the zero address\""
															},
															"value": "ERC20: transfer from the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea",
																"typeString": "literal_string \"ERC20: transfer from the zero address\""
															}
														],
														"id": 1505,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7881:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1513,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7881:68:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1514,
												"nodeType": "ExpressionStatement",
												"src": "7881:68:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 1521,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1516,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1500,
																"src": "7967:2:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 1519,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "7981:1:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 1518,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "7973:7:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 1517,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "7973:7:9",
																		"typeDescriptions": {}
																	}
																},
																"id": 1520,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7973:10:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "7967:16:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a207472616e7366657220746f20746865207a65726f2061646472657373",
															"id": 1522,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7985:37:9",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f",
																"typeString": "literal_string \"ERC20: transfer to the zero address\""
															},
															"value": "ERC20: transfer to the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f",
																"typeString": "literal_string \"ERC20: transfer to the zero address\""
															}
														],
														"id": 1515,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7959:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1523,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7959:64:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1524,
												"nodeType": "ExpressionStatement",
												"src": "7959:64:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1526,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1498,
															"src": "8055:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1527,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1500,
															"src": "8061:2:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1528,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1502,
															"src": "8065:6:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1525,
														"name": "_beforeTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1800,
														"src": "8034:20:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1529,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8034:38:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1530,
												"nodeType": "ExpressionStatement",
												"src": "8034:38:9"
											},
											{
												"assignments": [
													1532
												],
												"declarations": [
													{
														"constant": false,
														"id": 1532,
														"mutability": "mutable",
														"name": "fromBalance",
														"nameLocation": "8091:11:9",
														"nodeType": "VariableDeclaration",
														"scope": 1571,
														"src": "8083:19:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1531,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "8083:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1536,
												"initialValue": {
													"baseExpression": {
														"id": 1533,
														"name": "_balances",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1224,
														"src": "8105:9:9",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 1535,
													"indexExpression": {
														"id": 1534,
														"name": "from",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1498,
														"src": "8115:4:9",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "8105:15:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8083:37:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1540,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1538,
																"name": "fromBalance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1532,
																"src": "8138:11:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 1539,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1502,
																"src": "8153:6:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "8138:21:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e6365",
															"id": 1541,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8161:40:9",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6",
																"typeString": "literal_string \"ERC20: transfer amount exceeds balance\""
															},
															"value": "ERC20: transfer amount exceeds balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6",
																"typeString": "literal_string \"ERC20: transfer amount exceeds balance\""
															}
														],
														"id": 1537,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "8130:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1542,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8130:72:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1543,
												"nodeType": "ExpressionStatement",
												"src": "8130:72:9"
											},
											{
												"id": 1558,
												"nodeType": "UncheckedBlock",
												"src": "8212:273:9",
												"statements": [
													{
														"expression": {
															"id": 1550,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"baseExpression": {
																	"id": 1544,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1224,
																	"src": "8236:9:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 1546,
																"indexExpression": {
																	"id": 1545,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1498,
																	"src": "8246:4:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"nodeType": "IndexAccess",
																"src": "8236:15:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1549,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1547,
																	"name": "fromBalance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1532,
																	"src": "8254:11:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"id": 1548,
																	"name": "amount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1502,
																	"src": "8268:6:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "8254:20:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "8236:38:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1551,
														"nodeType": "ExpressionStatement",
														"src": "8236:38:9"
													},
													{
														"expression": {
															"id": 1556,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"baseExpression": {
																	"id": 1552,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1224,
																	"src": "8451:9:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 1554,
																"indexExpression": {
																	"id": 1553,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1500,
																	"src": "8461:2:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"nodeType": "IndexAccess",
																"src": "8451:13:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "+=",
															"rightHandSide": {
																"id": 1555,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1502,
																"src": "8468:6:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "8451:23:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1557,
														"nodeType": "ExpressionStatement",
														"src": "8451:23:9"
													}
												]
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 1560,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1498,
															"src": "8509:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1561,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1500,
															"src": "8515:2:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1562,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1502,
															"src": "8519:6:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1559,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1829,
														"src": "8500:8:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1563,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8500:26:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1564,
												"nodeType": "EmitStatement",
												"src": "8495:31:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1566,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1498,
															"src": "8557:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1567,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1500,
															"src": "8563:2:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1568,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1502,
															"src": "8567:6:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1565,
														"name": "_afterTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1811,
														"src": "8537:19:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1569,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8537:37:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1570,
												"nodeType": "ExpressionStatement",
												"src": "8537:37:9"
											}
										]
									},
									"documentation": {
										"id": 1496,
										"nodeType": "StructuredDocumentation",
										"src": "7345:443:9",
										"text": " @dev Moves `amount` of tokens from `from` to `to`.\n This internal function is equivalent to {transfer}, and can be used to\n e.g. implement automatic token fees, slashing mechanisms, etc.\n Emits a {Transfer} event.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `from` must have a balance of at least `amount`."
									},
									"id": 1572,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transfer",
									"nameLocation": "7802:9:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1503,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1498,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "7820:4:9",
												"nodeType": "VariableDeclaration",
												"scope": 1572,
												"src": "7812:12:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1497,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7812:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1500,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "7834:2:9",
												"nodeType": "VariableDeclaration",
												"scope": 1572,
												"src": "7826:10:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1499,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7826:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1502,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "7846:6:9",
												"nodeType": "VariableDeclaration",
												"scope": 1572,
												"src": "7838:14:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1501,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7838:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7811:42:9"
									},
									"returnParameters": {
										"id": 1504,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7871:0:9"
									},
									"scope": 1817,
									"src": "7793:788:9",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1628,
										"nodeType": "Block",
										"src": "8922:470:9",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 1586,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1581,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1575,
																"src": "8940:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 1584,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "8959:1:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 1583,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "8951:7:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 1582,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "8951:7:9",
																		"typeDescriptions": {}
																	}
																},
																"id": 1585,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8951:10:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "8940:21:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a206d696e7420746f20746865207a65726f2061646472657373",
															"id": 1587,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8963:33:9",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e",
																"typeString": "literal_string \"ERC20: mint to the zero address\""
															},
															"value": "ERC20: mint to the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e",
																"typeString": "literal_string \"ERC20: mint to the zero address\""
															}
														],
														"id": 1580,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "8932:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1588,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8932:65:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1589,
												"nodeType": "ExpressionStatement",
												"src": "8932:65:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 1593,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9037:1:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 1592,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "9029:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1591,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "9029:7:9",
																	"typeDescriptions": {}
																}
															},
															"id": 1594,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9029:10:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1595,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1575,
															"src": "9041:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1596,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1577,
															"src": "9050:6:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1590,
														"name": "_beforeTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1800,
														"src": "9008:20:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1597,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9008:49:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1598,
												"nodeType": "ExpressionStatement",
												"src": "9008:49:9"
											},
											{
												"expression": {
													"id": 1601,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1599,
														"name": "_totalSupply",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1232,
														"src": "9068:12:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 1600,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1577,
														"src": "9084:6:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "9068:22:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1602,
												"nodeType": "ExpressionStatement",
												"src": "9068:22:9"
											},
											{
												"id": 1609,
												"nodeType": "UncheckedBlock",
												"src": "9100:175:9",
												"statements": [
													{
														"expression": {
															"id": 1607,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"baseExpression": {
																	"id": 1603,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1224,
																	"src": "9236:9:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 1605,
																"indexExpression": {
																	"id": 1604,
																	"name": "account",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1575,
																	"src": "9246:7:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"nodeType": "IndexAccess",
																"src": "9236:18:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "+=",
															"rightHandSide": {
																"id": 1606,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1577,
																"src": "9258:6:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "9236:28:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1608,
														"nodeType": "ExpressionStatement",
														"src": "9236:28:9"
													}
												]
											},
											{
												"eventCall": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 1613,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9306:1:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 1612,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "9298:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1611,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "9298:7:9",
																	"typeDescriptions": {}
																}
															},
															"id": 1614,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9298:10:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1615,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1575,
															"src": "9310:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1616,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1577,
															"src": "9319:6:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1610,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1829,
														"src": "9289:8:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1617,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9289:37:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1618,
												"nodeType": "EmitStatement",
												"src": "9284:42:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 1622,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9365:1:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 1621,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "9357:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1620,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "9357:7:9",
																	"typeDescriptions": {}
																}
															},
															"id": 1623,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9357:10:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1624,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1575,
															"src": "9369:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1625,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1577,
															"src": "9378:6:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1619,
														"name": "_afterTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1811,
														"src": "9337:19:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1626,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9337:48:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1627,
												"nodeType": "ExpressionStatement",
												"src": "9337:48:9"
											}
										]
									},
									"documentation": {
										"id": 1573,
										"nodeType": "StructuredDocumentation",
										"src": "8587:265:9",
										"text": "@dev Creates `amount` tokens and assigns them to `account`, increasing\n the total supply.\n Emits a {Transfer} event with `from` set to the zero address.\n Requirements:\n - `account` cannot be the zero address."
									},
									"id": 1629,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_mint",
									"nameLocation": "8866:5:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1578,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1575,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "8880:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 1629,
												"src": "8872:15:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1574,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8872:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1577,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "8897:6:9",
												"nodeType": "VariableDeclaration",
												"scope": 1629,
												"src": "8889:14:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1576,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8889:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8871:33:9"
									},
									"returnParameters": {
										"id": 1579,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8922:0:9"
									},
									"scope": 1817,
									"src": "8857:535:9",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1700,
										"nodeType": "Block",
										"src": "9777:594:9",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 1643,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1638,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1632,
																"src": "9795:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 1641,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "9814:1:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 1640,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "9806:7:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 1639,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "9806:7:9",
																		"typeDescriptions": {}
																	}
																},
																"id": 1642,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9806:10:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "9795:21:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a206275726e2066726f6d20746865207a65726f2061646472657373",
															"id": 1644,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9818:35:9",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f",
																"typeString": "literal_string \"ERC20: burn from the zero address\""
															},
															"value": "ERC20: burn from the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f",
																"typeString": "literal_string \"ERC20: burn from the zero address\""
															}
														],
														"id": 1637,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "9787:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1645,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9787:67:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1646,
												"nodeType": "ExpressionStatement",
												"src": "9787:67:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1648,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1632,
															"src": "9886:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 1651,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9903:1:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 1650,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "9895:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1649,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "9895:7:9",
																	"typeDescriptions": {}
																}
															},
															"id": 1652,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9895:10:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1653,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1634,
															"src": "9907:6:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1647,
														"name": "_beforeTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1800,
														"src": "9865:20:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1654,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9865:49:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1655,
												"nodeType": "ExpressionStatement",
												"src": "9865:49:9"
											},
											{
												"assignments": [
													1657
												],
												"declarations": [
													{
														"constant": false,
														"id": 1657,
														"mutability": "mutable",
														"name": "accountBalance",
														"nameLocation": "9933:14:9",
														"nodeType": "VariableDeclaration",
														"scope": 1700,
														"src": "9925:22:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1656,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "9925:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1661,
												"initialValue": {
													"baseExpression": {
														"id": 1658,
														"name": "_balances",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1224,
														"src": "9950:9:9",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 1660,
													"indexExpression": {
														"id": 1659,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1632,
														"src": "9960:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "9950:18:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "9925:43:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1665,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1663,
																"name": "accountBalance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1657,
																"src": "9986:14:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 1664,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1634,
																"src": "10004:6:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "9986:24:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a206275726e20616d6f756e7420657863656564732062616c616e6365",
															"id": 1666,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "10012:36:9",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd",
																"typeString": "literal_string \"ERC20: burn amount exceeds balance\""
															},
															"value": "ERC20: burn amount exceeds balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd",
																"typeString": "literal_string \"ERC20: burn amount exceeds balance\""
															}
														],
														"id": 1662,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "9978:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1667,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9978:71:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1668,
												"nodeType": "ExpressionStatement",
												"src": "9978:71:9"
											},
											{
												"id": 1681,
												"nodeType": "UncheckedBlock",
												"src": "10059:194:9",
												"statements": [
													{
														"expression": {
															"id": 1675,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"baseExpression": {
																	"id": 1669,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1224,
																	"src": "10083:9:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 1671,
																"indexExpression": {
																	"id": 1670,
																	"name": "account",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1632,
																	"src": "10093:7:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"nodeType": "IndexAccess",
																"src": "10083:18:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1674,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1672,
																	"name": "accountBalance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1657,
																	"src": "10104:14:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"id": 1673,
																	"name": "amount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1634,
																	"src": "10121:6:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "10104:23:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "10083:44:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1676,
														"nodeType": "ExpressionStatement",
														"src": "10083:44:9"
													},
													{
														"expression": {
															"id": 1679,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 1677,
																"name": "_totalSupply",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1232,
																"src": "10220:12:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "-=",
															"rightHandSide": {
																"id": 1678,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1634,
																"src": "10236:6:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "10220:22:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1680,
														"nodeType": "ExpressionStatement",
														"src": "10220:22:9"
													}
												]
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 1683,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1632,
															"src": "10277:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 1686,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10294:1:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 1685,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "10286:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1684,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "10286:7:9",
																	"typeDescriptions": {}
																}
															},
															"id": 1687,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10286:10:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1688,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1634,
															"src": "10298:6:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1682,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1829,
														"src": "10268:8:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1689,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10268:37:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1690,
												"nodeType": "EmitStatement",
												"src": "10263:42:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1692,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1632,
															"src": "10336:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 1695,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10353:1:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 1694,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "10345:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1693,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "10345:7:9",
																	"typeDescriptions": {}
																}
															},
															"id": 1696,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10345:10:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1697,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1634,
															"src": "10357:6:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1691,
														"name": "_afterTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1811,
														"src": "10316:19:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1698,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10316:48:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1699,
												"nodeType": "ExpressionStatement",
												"src": "10316:48:9"
											}
										]
									},
									"documentation": {
										"id": 1630,
										"nodeType": "StructuredDocumentation",
										"src": "9398:309:9",
										"text": " @dev Destroys `amount` tokens from `account`, reducing the\n total supply.\n Emits a {Transfer} event with `to` set to the zero address.\n Requirements:\n - `account` cannot be the zero address.\n - `account` must have at least `amount` tokens."
									},
									"id": 1701,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_burn",
									"nameLocation": "9721:5:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1635,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1632,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "9735:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 1701,
												"src": "9727:15:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1631,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9727:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1634,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "9752:6:9",
												"nodeType": "VariableDeclaration",
												"scope": 1701,
												"src": "9744:14:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1633,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9744:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9726:33:9"
									},
									"returnParameters": {
										"id": 1636,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9777:0:9"
									},
									"scope": 1817,
									"src": "9712:659:9",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1745,
										"nodeType": "Block",
										"src": "10877:257:9",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 1717,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1712,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1704,
																"src": "10895:5:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 1715,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "10912:1:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 1714,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "10904:7:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 1713,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "10904:7:9",
																		"typeDescriptions": {}
																	}
																},
																"id": 1716,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10904:10:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "10895:19:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a20617070726f76652066726f6d20746865207a65726f2061646472657373",
															"id": 1718,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "10916:38:9",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208",
																"typeString": "literal_string \"ERC20: approve from the zero address\""
															},
															"value": "ERC20: approve from the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208",
																"typeString": "literal_string \"ERC20: approve from the zero address\""
															}
														],
														"id": 1711,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "10887:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1719,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10887:68:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1720,
												"nodeType": "ExpressionStatement",
												"src": "10887:68:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 1727,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1722,
																"name": "spender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1706,
																"src": "10973:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 1725,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "10992:1:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 1724,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "10984:7:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 1723,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "10984:7:9",
																		"typeDescriptions": {}
																	}
																},
																"id": 1726,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10984:10:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "10973:21:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a20617070726f766520746f20746865207a65726f2061646472657373",
															"id": 1728,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "10996:36:9",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029",
																"typeString": "literal_string \"ERC20: approve to the zero address\""
															},
															"value": "ERC20: approve to the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029",
																"typeString": "literal_string \"ERC20: approve to the zero address\""
															}
														],
														"id": 1721,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "10965:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1729,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10965:68:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1730,
												"nodeType": "ExpressionStatement",
												"src": "10965:68:9"
											},
											{
												"expression": {
													"id": 1737,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"baseExpression": {
																"id": 1731,
																"name": "_allowances",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1230,
																"src": "11044:11:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																	"typeString": "mapping(address => mapping(address => uint256))"
																}
															},
															"id": 1734,
															"indexExpression": {
																"id": 1732,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1704,
																"src": "11056:5:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "11044:18:9",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 1735,
														"indexExpression": {
															"id": 1733,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1706,
															"src": "11063:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "11044:27:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1736,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1708,
														"src": "11074:6:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "11044:36:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1738,
												"nodeType": "ExpressionStatement",
												"src": "11044:36:9"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 1740,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1704,
															"src": "11104:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1741,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1706,
															"src": "11111:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1742,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1708,
															"src": "11120:6:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1739,
														"name": "Approval",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1838,
														"src": "11095:8:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1743,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11095:32:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1744,
												"nodeType": "EmitStatement",
												"src": "11090:37:9"
											}
										]
									},
									"documentation": {
										"id": 1702,
										"nodeType": "StructuredDocumentation",
										"src": "10377:412:9",
										"text": " @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n This internal function is equivalent to `approve`, and can be used to\n e.g. set automatic allowances for certain subsystems, etc.\n Emits an {Approval} event.\n Requirements:\n - `owner` cannot be the zero address.\n - `spender` cannot be the zero address."
									},
									"id": 1746,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_approve",
									"nameLocation": "10803:8:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1709,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1704,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "10820:5:9",
												"nodeType": "VariableDeclaration",
												"scope": 1746,
												"src": "10812:13:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1703,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10812:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1706,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "10835:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 1746,
												"src": "10827:15:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1705,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10827:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1708,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "10852:6:9",
												"nodeType": "VariableDeclaration",
												"scope": 1746,
												"src": "10844:14:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1707,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10844:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10811:48:9"
									},
									"returnParameters": {
										"id": 1710,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10877:0:9"
									},
									"scope": 1817,
									"src": "10794:340:9",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1788,
										"nodeType": "Block",
										"src": "11505:321:9",
										"statements": [
											{
												"assignments": [
													1757
												],
												"declarations": [
													{
														"constant": false,
														"id": 1757,
														"mutability": "mutable",
														"name": "currentAllowance",
														"nameLocation": "11523:16:9",
														"nodeType": "VariableDeclaration",
														"scope": 1788,
														"src": "11515:24:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1756,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "11515:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1762,
												"initialValue": {
													"arguments": [
														{
															"id": 1759,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1749,
															"src": "11552:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1760,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1751,
															"src": "11559:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1758,
														"name": "allowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1367,
														"src": "11542:9:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address,address) view returns (uint256)"
														}
													},
													"id": 1761,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11542:25:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "11515:52:9"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1769,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1763,
														"name": "currentAllowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1757,
														"src": "11581:16:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 1766,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "11606:7:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	},
																	"typeName": {
																		"id": 1765,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "11606:7:9",
																		"typeDescriptions": {}
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	}
																],
																"id": 1764,
																"name": "type",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967269,
																"src": "11601:4:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																	"typeString": "function () pure"
																}
															},
															"id": 1767,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "11601:13:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_magic_meta_type_t_uint256",
																"typeString": "type(uint256)"
															}
														},
														"id": 1768,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberName": "max",
														"nodeType": "MemberAccess",
														"src": "11601:17:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "11581:37:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1787,
												"nodeType": "IfStatement",
												"src": "11577:243:9",
												"trueBody": {
													"id": 1786,
													"nodeType": "Block",
													"src": "11620:200:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1773,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1771,
																			"name": "currentAllowance",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1757,
																			"src": "11642:16:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": ">=",
																		"rightExpression": {
																			"id": 1772,
																			"name": "amount",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1753,
																			"src": "11662:6:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "11642:26:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "45524332303a20696e73756666696369656e7420616c6c6f77616e6365",
																		"id": 1774,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "11670:31:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe",
																			"typeString": "literal_string \"ERC20: insufficient allowance\""
																		},
																		"value": "ERC20: insufficient allowance"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe",
																			"typeString": "literal_string \"ERC20: insufficient allowance\""
																		}
																	],
																	"id": 1770,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "11634:7:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 1775,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "11634:68:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1776,
															"nodeType": "ExpressionStatement",
															"src": "11634:68:9"
														},
														{
															"id": 1785,
															"nodeType": "UncheckedBlock",
															"src": "11716:94:9",
															"statements": [
																{
																	"expression": {
																		"arguments": [
																			{
																				"id": 1778,
																				"name": "owner",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1749,
																				"src": "11753:5:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"id": 1779,
																				"name": "spender",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1751,
																				"src": "11760:7:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1782,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 1780,
																					"name": "currentAllowance",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1757,
																					"src": "11769:16:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "-",
																				"rightExpression": {
																					"id": 1781,
																					"name": "amount",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1753,
																					"src": "11788:6:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "11769:25:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"id": 1777,
																			"name": "_approve",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1746,
																			"src": "11744:8:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
																				"typeString": "function (address,address,uint256)"
																			}
																		},
																		"id": 1783,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "11744:51:9",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_tuple$__$",
																			"typeString": "tuple()"
																		}
																	},
																	"id": 1784,
																	"nodeType": "ExpressionStatement",
																	"src": "11744:51:9"
																}
															]
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1747,
										"nodeType": "StructuredDocumentation",
										"src": "11140:270:9",
										"text": " @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n Does not update the allowance amount in case of infinite allowance.\n Revert if not enough allowance is available.\n Might emit an {Approval} event."
									},
									"id": 1789,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_spendAllowance",
									"nameLocation": "11424:15:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1754,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1749,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "11448:5:9",
												"nodeType": "VariableDeclaration",
												"scope": 1789,
												"src": "11440:13:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1748,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11440:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1751,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "11463:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 1789,
												"src": "11455:15:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1750,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11455:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1753,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "11480:6:9",
												"nodeType": "VariableDeclaration",
												"scope": 1789,
												"src": "11472:14:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1752,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11472:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11439:48:9"
									},
									"returnParameters": {
										"id": 1755,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "11505:0:9"
									},
									"scope": 1817,
									"src": "11415:411:9",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1799,
										"nodeType": "Block",
										"src": "12499:2:9",
										"statements": []
									},
									"documentation": {
										"id": 1790,
										"nodeType": "StructuredDocumentation",
										"src": "11832:573:9",
										"text": " @dev Hook that is called before any transfer of tokens. This includes\n minting and burning.\n Calling conditions:\n - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n will be transferred to `to`.\n - when `from` is zero, `amount` tokens will be minted for `to`.\n - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n - `from` and `to` are never both zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."
									},
									"id": 1800,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_beforeTokenTransfer",
									"nameLocation": "12419:20:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1797,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1792,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "12448:4:9",
												"nodeType": "VariableDeclaration",
												"scope": 1800,
												"src": "12440:12:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1791,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12440:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1794,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "12462:2:9",
												"nodeType": "VariableDeclaration",
												"scope": 1800,
												"src": "12454:10:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1793,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12454:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1796,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "12474:6:9",
												"nodeType": "VariableDeclaration",
												"scope": 1800,
												"src": "12466:14:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1795,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12466:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12439:42:9"
									},
									"returnParameters": {
										"id": 1798,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "12499:0:9"
									},
									"scope": 1817,
									"src": "12410:91:9",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1810,
										"nodeType": "Block",
										"src": "13177:2:9",
										"statements": []
									},
									"documentation": {
										"id": 1801,
										"nodeType": "StructuredDocumentation",
										"src": "12507:577:9",
										"text": " @dev Hook that is called after any transfer of tokens. This includes\n minting and burning.\n Calling conditions:\n - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n has been transferred to `to`.\n - when `from` is zero, `amount` tokens have been minted for `to`.\n - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n - `from` and `to` are never both zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."
									},
									"id": 1811,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_afterTokenTransfer",
									"nameLocation": "13098:19:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1808,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1803,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "13126:4:9",
												"nodeType": "VariableDeclaration",
												"scope": 1811,
												"src": "13118:12:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1802,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "13118:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1805,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "13140:2:9",
												"nodeType": "VariableDeclaration",
												"scope": 1811,
												"src": "13132:10:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1804,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "13132:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1807,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "13152:6:9",
												"nodeType": "VariableDeclaration",
												"scope": 1811,
												"src": "13144:14:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1806,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13144:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13117:42:9"
									},
									"returnParameters": {
										"id": 1809,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "13177:0:9"
									},
									"scope": 1817,
									"src": "13089:90:9",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"constant": false,
									"documentation": {
										"id": 1812,
										"nodeType": "StructuredDocumentation",
										"src": "13185:254:9",
										"text": " @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
									},
									"id": 1816,
									"mutability": "mutable",
									"name": "__gap",
									"nameLocation": "13464:5:9",
									"nodeType": "VariableDeclaration",
									"scope": 1817,
									"src": "13444:25:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_array$_t_uint256_$45_storage",
										"typeString": "uint256[45]"
									},
									"typeName": {
										"baseType": {
											"id": 1813,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "13444:7:9",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"id": 1815,
										"length": {
											"hexValue": "3435",
											"id": 1814,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "13452:2:9",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_45_by_1",
												"typeString": "int_const 45"
											},
											"value": "45"
										},
										"nodeType": "ArrayTypeName",
										"src": "13444:11:9",
										"typeDescriptions": {
											"typeIdentifier": "t_array$_t_uint256_$45_storage_ptr",
											"typeString": "uint256[45]"
										}
									},
									"visibility": "private"
								}
							],
							"scope": 1818,
							"src": "1611:11861:9",
							"usedErrors": []
						}
					],
					"src": "105:13368:9"
				},
				"id": 9
			},
			"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/IERC20Upgradeable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/IERC20Upgradeable.sol",
					"exportedSymbols": {
						"IERC20Upgradeable": [
							1895
						]
					},
					"id": 1896,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1819,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "106:23:10"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20Upgradeable",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1820,
								"nodeType": "StructuredDocumentation",
								"src": "131:70:10",
								"text": " @dev Interface of the ERC20 standard as defined in the EIP."
							},
							"fullyImplemented": false,
							"id": 1895,
							"linearizedBaseContracts": [
								1895
							],
							"name": "IERC20Upgradeable",
							"nameLocation": "212:17:10",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 1821,
										"nodeType": "StructuredDocumentation",
										"src": "236:158:10",
										"text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
									},
									"id": 1829,
									"name": "Transfer",
									"nameLocation": "405:8:10",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1828,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1823,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "430:4:10",
												"nodeType": "VariableDeclaration",
												"scope": 1829,
												"src": "414:20:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1822,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "414:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1825,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "452:2:10",
												"nodeType": "VariableDeclaration",
												"scope": 1829,
												"src": "436:18:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1824,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "436:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1827,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "464:5:10",
												"nodeType": "VariableDeclaration",
												"scope": 1829,
												"src": "456:13:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1826,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "456:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "413:57:10"
									},
									"src": "399:72:10"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1830,
										"nodeType": "StructuredDocumentation",
										"src": "477:148:10",
										"text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
									},
									"id": 1838,
									"name": "Approval",
									"nameLocation": "636:8:10",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1837,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1832,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "661:5:10",
												"nodeType": "VariableDeclaration",
												"scope": 1838,
												"src": "645:21:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1831,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "645:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1834,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "684:7:10",
												"nodeType": "VariableDeclaration",
												"scope": 1838,
												"src": "668:23:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1833,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "668:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1836,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "701:5:10",
												"nodeType": "VariableDeclaration",
												"scope": 1838,
												"src": "693:13:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1835,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "693:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "644:63:10"
									},
									"src": "630:78:10"
								},
								{
									"documentation": {
										"id": 1839,
										"nodeType": "StructuredDocumentation",
										"src": "714:66:10",
										"text": " @dev Returns the amount of tokens in existence."
									},
									"functionSelector": "18160ddd",
									"id": 1844,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "794:11:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1840,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "805:2:10"
									},
									"returnParameters": {
										"id": 1843,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1842,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1844,
												"src": "831:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1841,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "831:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "830:9:10"
									},
									"scope": 1895,
									"src": "785:55:10",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1845,
										"nodeType": "StructuredDocumentation",
										"src": "846:72:10",
										"text": " @dev Returns the amount of tokens owned by `account`."
									},
									"functionSelector": "70a08231",
									"id": 1852,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "932:9:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1848,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1847,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "950:7:10",
												"nodeType": "VariableDeclaration",
												"scope": 1852,
												"src": "942:15:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1846,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "942:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "941:17:10"
									},
									"returnParameters": {
										"id": 1851,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1850,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1852,
												"src": "982:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1849,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "982:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "981:9:10"
									},
									"scope": 1895,
									"src": "923:68:10",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1853,
										"nodeType": "StructuredDocumentation",
										"src": "997:202:10",
										"text": " @dev Moves `amount` tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "a9059cbb",
									"id": 1862,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "1213:8:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1858,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1855,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1230:2:10",
												"nodeType": "VariableDeclaration",
												"scope": 1862,
												"src": "1222:10:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1854,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1222:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1857,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "1242:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 1862,
												"src": "1234:14:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1856,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1234:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1221:28:10"
									},
									"returnParameters": {
										"id": 1861,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1860,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1862,
												"src": "1268:4:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1859,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1268:4:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1267:6:10"
									},
									"scope": 1895,
									"src": "1204:70:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1863,
										"nodeType": "StructuredDocumentation",
										"src": "1280:264:10",
										"text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
									},
									"functionSelector": "dd62ed3e",
									"id": 1872,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "1558:9:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1868,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1865,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1576:5:10",
												"nodeType": "VariableDeclaration",
												"scope": 1872,
												"src": "1568:13:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1864,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1568:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1867,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1591:7:10",
												"nodeType": "VariableDeclaration",
												"scope": 1872,
												"src": "1583:15:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1866,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1583:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1567:32:10"
									},
									"returnParameters": {
										"id": 1871,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1870,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1872,
												"src": "1623:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1869,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1623:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1622:9:10"
									},
									"scope": 1895,
									"src": "1549:83:10",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1873,
										"nodeType": "StructuredDocumentation",
										"src": "1638:642:10",
										"text": " @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 1882,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "2294:7:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1878,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1875,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2310:7:10",
												"nodeType": "VariableDeclaration",
												"scope": 1882,
												"src": "2302:15:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1874,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2302:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1877,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2327:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 1882,
												"src": "2319:14:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1876,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2319:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2301:33:10"
									},
									"returnParameters": {
										"id": 1881,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1880,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1882,
												"src": "2353:4:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1879,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2353:4:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2352:6:10"
									},
									"scope": 1895,
									"src": "2285:74:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1883,
										"nodeType": "StructuredDocumentation",
										"src": "2365:287:10",
										"text": " @dev Moves `amount` tokens from `from` to `to` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 1894,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "2666:12:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1890,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1885,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2687:4:10",
												"nodeType": "VariableDeclaration",
												"scope": 1894,
												"src": "2679:12:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1884,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2679:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1887,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2701:2:10",
												"nodeType": "VariableDeclaration",
												"scope": 1894,
												"src": "2693:10:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1886,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2693:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1889,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2713:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 1894,
												"src": "2705:14:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1888,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2705:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2678:42:10"
									},
									"returnParameters": {
										"id": 1893,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1892,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1894,
												"src": "2739:4:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1891,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2739:4:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2738:6:10"
									},
									"scope": 1895,
									"src": "2657:88:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1896,
							"src": "202:2545:10",
							"usedErrors": []
						}
					],
					"src": "106:2642:10"
				},
				"id": 10
			},
			"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/extensions/ERC20BurnableUpgradeable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/extensions/ERC20BurnableUpgradeable.sol",
					"exportedSymbols": {
						"AddressUpgradeable": [
							2314
						],
						"ContextUpgradeable": [
							2356
						],
						"ERC20BurnableUpgradeable": [
							1959
						],
						"ERC20Upgradeable": [
							1817
						],
						"IERC20MetadataUpgradeable": [
							1984
						],
						"IERC20Upgradeable": [
							1895
						],
						"Initializable": [
							942
						]
					},
					"id": 1960,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1897,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "124:23:11"
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol",
							"file": "../ERC20Upgradeable.sol",
							"id": 1898,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1960,
							"sourceUnit": 1818,
							"src": "149:33:11",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable@4.9.2/utils/ContextUpgradeable.sol",
							"file": "../../../utils/ContextUpgradeable.sol",
							"id": 1899,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1960,
							"sourceUnit": 2357,
							"src": "183:47:11",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/Initializable.sol",
							"file": "../../../proxy/utils/Initializable.sol",
							"id": 1900,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1960,
							"sourceUnit": 943,
							"src": "231:48:11",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 1902,
										"name": "Initializable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 942,
										"src": "536:13:11"
									},
									"id": 1903,
									"nodeType": "InheritanceSpecifier",
									"src": "536:13:11"
								},
								{
									"baseName": {
										"id": 1904,
										"name": "ContextUpgradeable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 2356,
										"src": "551:18:11"
									},
									"id": 1905,
									"nodeType": "InheritanceSpecifier",
									"src": "551:18:11"
								},
								{
									"baseName": {
										"id": 1906,
										"name": "ERC20Upgradeable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1817,
										"src": "571:16:11"
									},
									"id": 1907,
									"nodeType": "InheritanceSpecifier",
									"src": "571:16:11"
								}
							],
							"canonicalName": "ERC20BurnableUpgradeable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 1901,
								"nodeType": "StructuredDocumentation",
								"src": "281:208:11",
								"text": " @dev Extension of {ERC20} that allows token holders to destroy both their own\n tokens and those that they have an allowance for, in a way that can be\n recognized off-chain (via event analysis)."
							},
							"fullyImplemented": true,
							"id": 1959,
							"linearizedBaseContracts": [
								1959,
								1817,
								1984,
								1895,
								2356,
								942
							],
							"name": "ERC20BurnableUpgradeable",
							"nameLocation": "508:24:11",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 1912,
										"nodeType": "Block",
										"src": "652:7:11",
										"statements": []
									},
									"id": 1913,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1910,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1909,
												"name": "onlyInitializing",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 887,
												"src": "635:16:11"
											},
											"nodeType": "ModifierInvocation",
											"src": "635:16:11"
										}
									],
									"name": "__ERC20Burnable_init",
									"nameLocation": "603:20:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1908,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "623:2:11"
									},
									"returnParameters": {
										"id": 1911,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "652:0:11"
									},
									"scope": 1959,
									"src": "594:65:11",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1918,
										"nodeType": "Block",
										"src": "733:7:11",
										"statements": []
									},
									"id": 1919,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1916,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1915,
												"name": "onlyInitializing",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 887,
												"src": "716:16:11"
											},
											"nodeType": "ModifierInvocation",
											"src": "716:16:11"
										}
									],
									"name": "__ERC20Burnable_init_unchained",
									"nameLocation": "674:30:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1914,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "704:2:11"
									},
									"returnParameters": {
										"id": 1917,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "733:0:11"
									},
									"scope": 1959,
									"src": "665:75:11",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1931,
										"nodeType": "Block",
										"src": "893:44:11",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 1926,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2341,
																"src": "909:10:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 1927,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "909:12:11",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1928,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1922,
															"src": "923:6:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1925,
														"name": "_burn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1701,
														"src": "903:5:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 1929,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "903:27:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1930,
												"nodeType": "ExpressionStatement",
												"src": "903:27:11"
											}
										]
									},
									"documentation": {
										"id": 1920,
										"nodeType": "StructuredDocumentation",
										"src": "745:98:11",
										"text": " @dev Destroys `amount` tokens from the caller.\n See {ERC20-_burn}."
									},
									"functionSelector": "42966c68",
									"id": 1932,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "burn",
									"nameLocation": "857:4:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1923,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1922,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "870:6:11",
												"nodeType": "VariableDeclaration",
												"scope": 1932,
												"src": "862:14:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1921,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "862:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "861:16:11"
									},
									"returnParameters": {
										"id": 1924,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "893:0:11"
									},
									"scope": 1959,
									"src": "848:89:11",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1952,
										"nodeType": "Block",
										"src": "1309:95:11",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1941,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1935,
															"src": "1335:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 1942,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2341,
																"src": "1344:10:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 1943,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1344:12:11",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1944,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1937,
															"src": "1358:6:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1940,
														"name": "_spendAllowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1789,
														"src": "1319:15:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1945,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1319:46:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1946,
												"nodeType": "ExpressionStatement",
												"src": "1319:46:11"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1948,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1935,
															"src": "1381:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1949,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1937,
															"src": "1390:6:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1947,
														"name": "_burn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1701,
														"src": "1375:5:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 1950,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1375:22:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1951,
												"nodeType": "ExpressionStatement",
												"src": "1375:22:11"
											}
										]
									},
									"documentation": {
										"id": 1933,
										"nodeType": "StructuredDocumentation",
										"src": "943:295:11",
										"text": " @dev Destroys `amount` tokens from `account`, deducting from the caller's\n allowance.\n See {ERC20-_burn} and {ERC20-allowance}.\n Requirements:\n - the caller must have allowance for ``accounts``'s tokens of at least\n `amount`."
									},
									"functionSelector": "79cc6790",
									"id": 1953,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "burnFrom",
									"nameLocation": "1252:8:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1938,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1935,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "1269:7:11",
												"nodeType": "VariableDeclaration",
												"scope": 1953,
												"src": "1261:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1934,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1261:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1937,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "1286:6:11",
												"nodeType": "VariableDeclaration",
												"scope": 1953,
												"src": "1278:14:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1936,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1278:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1260:33:11"
									},
									"returnParameters": {
										"id": 1939,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1309:0:11"
									},
									"scope": 1959,
									"src": "1243:161:11",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"constant": false,
									"documentation": {
										"id": 1954,
										"nodeType": "StructuredDocumentation",
										"src": "1410:254:11",
										"text": " @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
									},
									"id": 1958,
									"mutability": "mutable",
									"name": "__gap",
									"nameLocation": "1689:5:11",
									"nodeType": "VariableDeclaration",
									"scope": 1959,
									"src": "1669:25:11",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_array$_t_uint256_$50_storage",
										"typeString": "uint256[50]"
									},
									"typeName": {
										"baseType": {
											"id": 1955,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1669:7:11",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"id": 1957,
										"length": {
											"hexValue": "3530",
											"id": 1956,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "1677:2:11",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_50_by_1",
												"typeString": "int_const 50"
											},
											"value": "50"
										},
										"nodeType": "ArrayTypeName",
										"src": "1669:11:11",
										"typeDescriptions": {
											"typeIdentifier": "t_array$_t_uint256_$50_storage_ptr",
											"typeString": "uint256[50]"
										}
									},
									"visibility": "private"
								}
							],
							"scope": 1960,
							"src": "490:1207:11",
							"usedErrors": []
						}
					],
					"src": "124:1574:11"
				},
				"id": 11
			},
			"@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/extensions/IERC20MetadataUpgradeable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/extensions/IERC20MetadataUpgradeable.sol",
					"exportedSymbols": {
						"IERC20MetadataUpgradeable": [
							1984
						],
						"IERC20Upgradeable": [
							1895
						]
					},
					"id": 1985,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1961,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "110:23:12"
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/IERC20Upgradeable.sol",
							"file": "../IERC20Upgradeable.sol",
							"id": 1962,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1985,
							"sourceUnit": 1896,
							"src": "135:34:12",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1964,
										"name": "IERC20Upgradeable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1895,
										"src": "327:17:12"
									},
									"id": 1965,
									"nodeType": "InheritanceSpecifier",
									"src": "327:17:12"
								}
							],
							"canonicalName": "IERC20MetadataUpgradeable",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1963,
								"nodeType": "StructuredDocumentation",
								"src": "171:116:12",
								"text": " @dev Interface for the optional metadata functions from the ERC20 standard.\n _Available since v4.1._"
							},
							"fullyImplemented": false,
							"id": 1984,
							"linearizedBaseContracts": [
								1984,
								1895
							],
							"name": "IERC20MetadataUpgradeable",
							"nameLocation": "298:25:12",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1966,
										"nodeType": "StructuredDocumentation",
										"src": "351:54:12",
										"text": " @dev Returns the name of the token."
									},
									"functionSelector": "06fdde03",
									"id": 1971,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "419:4:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1967,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "423:2:12"
									},
									"returnParameters": {
										"id": 1970,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1969,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1971,
												"src": "449:13:12",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1968,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "449:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "448:15:12"
									},
									"scope": 1984,
									"src": "410:54:12",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1972,
										"nodeType": "StructuredDocumentation",
										"src": "470:56:12",
										"text": " @dev Returns the symbol of the token."
									},
									"functionSelector": "95d89b41",
									"id": 1977,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "540:6:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1973,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "546:2:12"
									},
									"returnParameters": {
										"id": 1976,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1975,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1977,
												"src": "572:13:12",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1974,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "572:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "571:15:12"
									},
									"scope": 1984,
									"src": "531:56:12",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1978,
										"nodeType": "StructuredDocumentation",
										"src": "593:65:12",
										"text": " @dev Returns the decimals places of the token."
									},
									"functionSelector": "313ce567",
									"id": 1983,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nameLocation": "672:8:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1979,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "680:2:12"
									},
									"returnParameters": {
										"id": 1982,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1981,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1983,
												"src": "706:5:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1980,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "706:5:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "705:7:12"
									},
									"scope": 1984,
									"src": "663:50:12",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1985,
							"src": "288:427:12",
							"usedErrors": []
						}
					],
					"src": "110:606:12"
				},
				"id": 12
			},
			"@openzeppelin/contracts-upgradeable@4.9.2/utils/AddressUpgradeable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable@4.9.2/utils/AddressUpgradeable.sol",
					"exportedSymbols": {
						"AddressUpgradeable": [
							2314
						]
					},
					"id": 2315,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1986,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".1"
							],
							"nodeType": "PragmaDirective",
							"src": "101:23:13"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "AddressUpgradeable",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 1987,
								"nodeType": "StructuredDocumentation",
								"src": "126:67:13",
								"text": " @dev Collection of functions related to the address type"
							},
							"fullyImplemented": true,
							"id": 2314,
							"linearizedBaseContracts": [
								2314
							],
							"name": "AddressUpgradeable",
							"nameLocation": "202:18:13",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 2001,
										"nodeType": "Block",
										"src": "1489:254:13",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1999,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"expression": {
																"id": 1995,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1990,
																"src": "1713:7:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 1996,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "code",
															"nodeType": "MemberAccess",
															"src": "1713:12:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 1997,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "1713:19:13",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 1998,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1735:1:13",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1713:23:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1994,
												"id": 2000,
												"nodeType": "Return",
												"src": "1706:30:13"
											}
										]
									},
									"documentation": {
										"id": 1988,
										"nodeType": "StructuredDocumentation",
										"src": "227:1191:13",
										"text": " @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n Furthermore, `isContract` will also return true if the target contract within\n the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n which only has an effect at the end of a transaction.\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="
									},
									"id": 2002,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "isContract",
									"nameLocation": "1432:10:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1991,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1990,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "1451:7:13",
												"nodeType": "VariableDeclaration",
												"scope": 2002,
												"src": "1443:15:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1989,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1443:7:13",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1442:17:13"
									},
									"returnParameters": {
										"id": 1994,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1993,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2002,
												"src": "1483:4:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1992,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1483:4:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1482:6:13"
									},
									"scope": 2314,
									"src": "1423:320:13",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2035,
										"nodeType": "Block",
										"src": "2729:241:13",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2017,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 2013,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "2755:4:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_AddressUpgradeable_$2314",
																				"typeString": "library AddressUpgradeable"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_AddressUpgradeable_$2314",
																				"typeString": "library AddressUpgradeable"
																			}
																		],
																		"id": 2012,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2747:7:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 2011,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "2747:7:13",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 2014,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2747:13:13",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 2015,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "2747:21:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 2016,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2007,
																"src": "2772:6:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2747:31:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20696e73756666696369656e742062616c616e6365",
															"id": 2018,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2780:31:13",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
																"typeString": "literal_string \"Address: insufficient balance\""
															},
															"value": "Address: insufficient balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
																"typeString": "literal_string \"Address: insufficient balance\""
															}
														],
														"id": 2010,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2739:7:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2019,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2739:73:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2020,
												"nodeType": "ExpressionStatement",
												"src": "2739:73:13"
											},
											{
												"assignments": [
													2022,
													null
												],
												"declarations": [
													{
														"constant": false,
														"id": 2022,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "2829:7:13",
														"nodeType": "VariableDeclaration",
														"scope": 2035,
														"src": "2824:12:13",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 2021,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "2824:4:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													null
												],
												"id": 2029,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "",
															"id": 2027,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2872:2:13",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																	"typeString": "literal_string \"\""
																}
															],
															"expression": {
																"id": 2023,
																"name": "recipient",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2005,
																"src": "2842:9:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"id": 2024,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "2842:14:13",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 2026,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 2025,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2007,
																"src": "2864:6:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "2842:29:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 2028,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2842:33:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2823:52:13"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 2031,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2022,
															"src": "2893:7:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564",
															"id": 2032,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2902:60:13",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
																"typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
															},
															"value": "Address: unable to send value, recipient may have reverted"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
																"typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
															}
														],
														"id": 2030,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2885:7:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2033,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2885:78:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2034,
												"nodeType": "ExpressionStatement",
												"src": "2885:78:13"
											}
										]
									},
									"documentation": {
										"id": 2003,
										"nodeType": "StructuredDocumentation",
										"src": "1749:904:13",
										"text": " @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."
									},
									"id": 2036,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sendValue",
									"nameLocation": "2667:9:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2008,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2005,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "2693:9:13",
												"nodeType": "VariableDeclaration",
												"scope": 2036,
												"src": "2677:25:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												},
												"typeName": {
													"id": 2004,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2677:15:13",
													"stateMutability": "payable",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2007,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2712:6:13",
												"nodeType": "VariableDeclaration",
												"scope": 2036,
												"src": "2704:14:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2006,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2704:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2676:43:13"
									},
									"returnParameters": {
										"id": 2009,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2729:0:13"
									},
									"scope": 2314,
									"src": "2658:312:13",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2053,
										"nodeType": "Block",
										"src": "3801:96:13",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 2047,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2039,
															"src": "3840:6:13",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2048,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2041,
															"src": "3848:4:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "30",
															"id": 2049,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3854:1:13",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564",
															"id": 2050,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3857:32:13",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
																"typeString": "literal_string \"Address: low-level call failed\""
															},
															"value": "Address: low-level call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
																"typeString": "literal_string \"Address: low-level call failed\""
															}
														],
														"id": 2046,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															2094,
															2138
														],
														"referencedDeclaration": 2138,
														"src": "3818:21:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 2051,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3818:72:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 2045,
												"id": 2052,
												"nodeType": "Return",
												"src": "3811:79:13"
											}
										]
									},
									"documentation": {
										"id": 2037,
										"nodeType": "StructuredDocumentation",
										"src": "2976:731:13",
										"text": " @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"
									},
									"id": 2054,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nameLocation": "3721:12:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2042,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2039,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "3742:6:13",
												"nodeType": "VariableDeclaration",
												"scope": 2054,
												"src": "3734:14:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2038,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3734:7:13",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2041,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3763:4:13",
												"nodeType": "VariableDeclaration",
												"scope": 2054,
												"src": "3750:17:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2040,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3750:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3733:35:13"
									},
									"returnParameters": {
										"id": 2045,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2044,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2054,
												"src": "3787:12:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2043,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3787:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3786:14:13"
									},
									"scope": 2314,
									"src": "3712:185:13",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2073,
										"nodeType": "Block",
										"src": "4266:76:13",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 2067,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2057,
															"src": "4305:6:13",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2068,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2059,
															"src": "4313:4:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "30",
															"id": 2069,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4319:1:13",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"id": 2070,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2061,
															"src": "4322:12:13",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 2066,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															2094,
															2138
														],
														"referencedDeclaration": 2138,
														"src": "4283:21:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 2071,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4283:52:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 2065,
												"id": 2072,
												"nodeType": "Return",
												"src": "4276:59:13"
											}
										]
									},
									"documentation": {
										"id": 2055,
										"nodeType": "StructuredDocumentation",
										"src": "3903:211:13",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
									},
									"id": 2074,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nameLocation": "4128:12:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2062,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2057,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "4158:6:13",
												"nodeType": "VariableDeclaration",
												"scope": 2074,
												"src": "4150:14:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2056,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4150:7:13",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2059,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "4187:4:13",
												"nodeType": "VariableDeclaration",
												"scope": 2074,
												"src": "4174:17:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2058,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4174:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2061,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "4215:12:13",
												"nodeType": "VariableDeclaration",
												"scope": 2074,
												"src": "4201:26:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2060,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "4201:6:13",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4140:93:13"
									},
									"returnParameters": {
										"id": 2065,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2064,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2074,
												"src": "4252:12:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2063,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4252:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4251:14:13"
									},
									"scope": 2314,
									"src": "4119:223:13",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2093,
										"nodeType": "Block",
										"src": "4817:111:13",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 2087,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2077,
															"src": "4856:6:13",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2088,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2079,
															"src": "4864:4:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 2089,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2081,
															"src": "4870:5:13",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564",
															"id": 2090,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4877:43:13",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
																"typeString": "literal_string \"Address: low-level call with value failed\""
															},
															"value": "Address: low-level call with value failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
																"typeString": "literal_string \"Address: low-level call with value failed\""
															}
														],
														"id": 2086,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															2094,
															2138
														],
														"referencedDeclaration": 2138,
														"src": "4834:21:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 2091,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4834:87:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 2085,
												"id": 2092,
												"nodeType": "Return",
												"src": "4827:94:13"
											}
										]
									},
									"documentation": {
										"id": 2075,
										"nodeType": "StructuredDocumentation",
										"src": "4348:351:13",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"
									},
									"id": 2094,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nameLocation": "4713:21:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2082,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2077,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "4743:6:13",
												"nodeType": "VariableDeclaration",
												"scope": 2094,
												"src": "4735:14:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2076,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4735:7:13",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2079,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "4764:4:13",
												"nodeType": "VariableDeclaration",
												"scope": 2094,
												"src": "4751:17:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2078,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4751:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2081,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "4778:5:13",
												"nodeType": "VariableDeclaration",
												"scope": 2094,
												"src": "4770:13:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2080,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4770:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4734:50:13"
									},
									"returnParameters": {
										"id": 2085,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2084,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2094,
												"src": "4803:12:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2083,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4803:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4802:14:13"
									},
									"scope": 2314,
									"src": "4704:224:13",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2137,
										"nodeType": "Block",
										"src": "5355:267:13",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2115,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 2111,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "5381:4:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_AddressUpgradeable_$2314",
																				"typeString": "library AddressUpgradeable"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_AddressUpgradeable_$2314",
																				"typeString": "library AddressUpgradeable"
																			}
																		],
																		"id": 2110,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "5373:7:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 2109,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "5373:7:13",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 2112,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "5373:13:13",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 2113,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "5373:21:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 2114,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2101,
																"src": "5398:5:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5373:30:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c",
															"id": 2116,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5405:40:13",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																"typeString": "literal_string \"Address: insufficient balance for call\""
															},
															"value": "Address: insufficient balance for call"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																"typeString": "literal_string \"Address: insufficient balance for call\""
															}
														],
														"id": 2108,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5365:7:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2117,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5365:81:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2118,
												"nodeType": "ExpressionStatement",
												"src": "5365:81:13"
											},
											{
												"assignments": [
													2120,
													2122
												],
												"declarations": [
													{
														"constant": false,
														"id": 2120,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "5462:7:13",
														"nodeType": "VariableDeclaration",
														"scope": 2137,
														"src": "5457:12:13",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 2119,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "5457:4:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 2122,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "5484:10:13",
														"nodeType": "VariableDeclaration",
														"scope": 2137,
														"src": "5471:23:13",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 2121,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "5471:5:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2129,
												"initialValue": {
													"arguments": [
														{
															"id": 2127,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2099,
															"src": "5524:4:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"expression": {
																"id": 2123,
																"name": "target",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2097,
																"src": "5498:6:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 2124,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "5498:11:13",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 2126,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 2125,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2101,
																"src": "5517:5:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "5498:25:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 2128,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5498:31:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5456:73:13"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 2131,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2097,
															"src": "5573:6:13",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2132,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2120,
															"src": "5581:7:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 2133,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2122,
															"src": "5590:10:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 2134,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2103,
															"src": "5602:12:13",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 2130,
														"name": "verifyCallResultFromTarget",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2269,
														"src": "5546:26:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bool,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 2135,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5546:69:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 2107,
												"id": 2136,
												"nodeType": "Return",
												"src": "5539:76:13"
											}
										]
									},
									"documentation": {
										"id": 2095,
										"nodeType": "StructuredDocumentation",
										"src": "4934:237:13",
										"text": " @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
									},
									"id": 2138,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nameLocation": "5185:21:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2104,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2097,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "5224:6:13",
												"nodeType": "VariableDeclaration",
												"scope": 2138,
												"src": "5216:14:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2096,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5216:7:13",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2099,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5253:4:13",
												"nodeType": "VariableDeclaration",
												"scope": 2138,
												"src": "5240:17:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2098,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5240:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2101,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "5275:5:13",
												"nodeType": "VariableDeclaration",
												"scope": 2138,
												"src": "5267:13:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2100,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5267:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2103,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "5304:12:13",
												"nodeType": "VariableDeclaration",
												"scope": 2138,
												"src": "5290:26:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2102,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5290:6:13",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5206:116:13"
									},
									"returnParameters": {
										"id": 2107,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2106,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2138,
												"src": "5341:12:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2105,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5341:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5340:14:13"
									},
									"scope": 2314,
									"src": "5176:446:13",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2154,
										"nodeType": "Block",
										"src": "5899:97:13",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 2149,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2141,
															"src": "5935:6:13",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2150,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2143,
															"src": "5943:4:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564",
															"id": 2151,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5949:39:13",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
																"typeString": "literal_string \"Address: low-level static call failed\""
															},
															"value": "Address: low-level static call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
																"typeString": "literal_string \"Address: low-level static call failed\""
															}
														],
														"id": 2148,
														"name": "functionStaticCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															2155,
															2184
														],
														"referencedDeclaration": 2184,
														"src": "5916:18:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 2152,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5916:73:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 2147,
												"id": 2153,
												"nodeType": "Return",
												"src": "5909:80:13"
											}
										]
									},
									"documentation": {
										"id": 2139,
										"nodeType": "StructuredDocumentation",
										"src": "5628:166:13",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
									},
									"id": 2155,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nameLocation": "5808:18:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2144,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2141,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "5835:6:13",
												"nodeType": "VariableDeclaration",
												"scope": 2155,
												"src": "5827:14:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2140,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5827:7:13",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2143,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5856:4:13",
												"nodeType": "VariableDeclaration",
												"scope": 2155,
												"src": "5843:17:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2142,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5843:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5826:35:13"
									},
									"returnParameters": {
										"id": 2147,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2146,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2155,
												"src": "5885:12:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2145,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5885:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5884:14:13"
									},
									"scope": 2314,
									"src": "5799:197:13",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2183,
										"nodeType": "Block",
										"src": "6338:168:13",
										"statements": [
											{
												"assignments": [
													2168,
													2170
												],
												"declarations": [
													{
														"constant": false,
														"id": 2168,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "6354:7:13",
														"nodeType": "VariableDeclaration",
														"scope": 2183,
														"src": "6349:12:13",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 2167,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "6349:4:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 2170,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "6376:10:13",
														"nodeType": "VariableDeclaration",
														"scope": 2183,
														"src": "6363:23:13",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 2169,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "6363:5:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2175,
												"initialValue": {
													"arguments": [
														{
															"id": 2173,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2160,
															"src": "6408:4:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 2171,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2158,
															"src": "6390:6:13",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 2172,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "staticcall",
														"nodeType": "MemberAccess",
														"src": "6390:17:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) view returns (bool,bytes memory)"
														}
													},
													"id": 2174,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6390:23:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6348:65:13"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 2177,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2158,
															"src": "6457:6:13",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2178,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2168,
															"src": "6465:7:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 2179,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2170,
															"src": "6474:10:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 2180,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2162,
															"src": "6486:12:13",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 2176,
														"name": "verifyCallResultFromTarget",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2269,
														"src": "6430:26:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bool,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 2181,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6430:69:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 2166,
												"id": 2182,
												"nodeType": "Return",
												"src": "6423:76:13"
											}
										]
									},
									"documentation": {
										"id": 2156,
										"nodeType": "StructuredDocumentation",
										"src": "6002:173:13",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
									},
									"id": 2184,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nameLocation": "6189:18:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2163,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2158,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "6225:6:13",
												"nodeType": "VariableDeclaration",
												"scope": 2184,
												"src": "6217:14:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2157,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6217:7:13",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2160,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6254:4:13",
												"nodeType": "VariableDeclaration",
												"scope": 2184,
												"src": "6241:17:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2159,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6241:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2162,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "6282:12:13",
												"nodeType": "VariableDeclaration",
												"scope": 2184,
												"src": "6268:26:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2161,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6268:6:13",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6207:93:13"
									},
									"returnParameters": {
										"id": 2166,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2165,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2184,
												"src": "6324:12:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2164,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6324:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6323:14:13"
									},
									"scope": 2314,
									"src": "6180:326:13",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2200,
										"nodeType": "Block",
										"src": "6782:101:13",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 2195,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2187,
															"src": "6820:6:13",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2196,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2189,
															"src": "6828:4:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564",
															"id": 2197,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6834:41:13",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398",
																"typeString": "literal_string \"Address: low-level delegate call failed\""
															},
															"value": "Address: low-level delegate call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398",
																"typeString": "literal_string \"Address: low-level delegate call failed\""
															}
														],
														"id": 2194,
														"name": "functionDelegateCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															2201,
															2230
														],
														"referencedDeclaration": 2230,
														"src": "6799:20:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
														}
													},
													"id": 2198,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6799:77:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 2193,
												"id": 2199,
												"nodeType": "Return",
												"src": "6792:84:13"
											}
										]
									},
									"documentation": {
										"id": 2185,
										"nodeType": "StructuredDocumentation",
										"src": "6512:168:13",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"
									},
									"id": 2201,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionDelegateCall",
									"nameLocation": "6694:20:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2190,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2187,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "6723:6:13",
												"nodeType": "VariableDeclaration",
												"scope": 2201,
												"src": "6715:14:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2186,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6715:7:13",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2189,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6744:4:13",
												"nodeType": "VariableDeclaration",
												"scope": 2201,
												"src": "6731:17:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2188,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6731:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6714:35:13"
									},
									"returnParameters": {
										"id": 2193,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2192,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2201,
												"src": "6768:12:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2191,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6768:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6767:14:13"
									},
									"scope": 2314,
									"src": "6685:198:13",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2229,
										"nodeType": "Block",
										"src": "7224:170:13",
										"statements": [
											{
												"assignments": [
													2214,
													2216
												],
												"declarations": [
													{
														"constant": false,
														"id": 2214,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "7240:7:13",
														"nodeType": "VariableDeclaration",
														"scope": 2229,
														"src": "7235:12:13",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 2213,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "7235:4:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 2216,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "7262:10:13",
														"nodeType": "VariableDeclaration",
														"scope": 2229,
														"src": "7249:23:13",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 2215,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "7249:5:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2221,
												"initialValue": {
													"arguments": [
														{
															"id": 2219,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2206,
															"src": "7296:4:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 2217,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2204,
															"src": "7276:6:13",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 2218,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "delegatecall",
														"nodeType": "MemberAccess",
														"src": "7276:19:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) returns (bool,bytes memory)"
														}
													},
													"id": 2220,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7276:25:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7234:67:13"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 2223,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2204,
															"src": "7345:6:13",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2224,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2214,
															"src": "7353:7:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 2225,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2216,
															"src": "7362:10:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 2226,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2208,
															"src": "7374:12:13",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 2222,
														"name": "verifyCallResultFromTarget",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2269,
														"src": "7318:26:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bool,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 2227,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7318:69:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 2212,
												"id": 2228,
												"nodeType": "Return",
												"src": "7311:76:13"
											}
										]
									},
									"documentation": {
										"id": 2202,
										"nodeType": "StructuredDocumentation",
										"src": "6889:175:13",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"
									},
									"id": 2230,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionDelegateCall",
									"nameLocation": "7078:20:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2209,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2204,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "7116:6:13",
												"nodeType": "VariableDeclaration",
												"scope": 2230,
												"src": "7108:14:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2203,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7108:7:13",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2206,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "7145:4:13",
												"nodeType": "VariableDeclaration",
												"scope": 2230,
												"src": "7132:17:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2205,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7132:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2208,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "7173:12:13",
												"nodeType": "VariableDeclaration",
												"scope": 2230,
												"src": "7159:26:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2207,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "7159:6:13",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7098:93:13"
									},
									"returnParameters": {
										"id": 2212,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2211,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2230,
												"src": "7210:12:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2210,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7210:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7209:14:13"
									},
									"scope": 2314,
									"src": "7069:325:13",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2268,
										"nodeType": "Block",
										"src": "7876:434:13",
										"statements": [
											{
												"condition": {
													"id": 2244,
													"name": "success",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 2235,
													"src": "7890:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 2266,
													"nodeType": "Block",
													"src": "8246:58:13",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 2262,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2237,
																		"src": "8268:10:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	{
																		"id": 2263,
																		"name": "errorMessage",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2239,
																		"src": "8280:12:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		},
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 2261,
																	"name": "_revert",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2313,
																	"src": "8260:7:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bytes memory,string memory) pure"
																	}
																},
																"id": 2264,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8260:33:13",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 2265,
															"nodeType": "ExpressionStatement",
															"src": "8260:33:13"
														}
													]
												},
												"id": 2267,
												"nodeType": "IfStatement",
												"src": "7886:418:13",
												"trueBody": {
													"id": 2260,
													"nodeType": "Block",
													"src": "7899:341:13",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2248,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 2245,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2237,
																		"src": "7917:10:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 2246,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "length",
																	"nodeType": "MemberAccess",
																	"src": "7917:17:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 2247,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7938:1:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "7917:22:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 2257,
															"nodeType": "IfStatement",
															"src": "7913:286:13",
															"trueBody": {
																"id": 2256,
																"nodeType": "Block",
																"src": "7941:258:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"id": 2251,
																							"name": "target",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 2233,
																							"src": "8143:6:13",
																							"typeDescriptions": {
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						],
																						"id": 2250,
																						"name": "isContract",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2002,
																						"src": "8132:10:13",
																						"typeDescriptions": {
																							"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																							"typeString": "function (address) view returns (bool)"
																						}
																					},
																					"id": 2252,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "functionCall",
																					"lValueRequested": false,
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "8132:18:13",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					}
																				},
																				{
																					"hexValue": "416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374",
																					"id": 2253,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "string",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "8152:31:13",
																					"typeDescriptions": {
																						"typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																						"typeString": "literal_string \"Address: call to non-contract\""
																					},
																					"value": "Address: call to non-contract"
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					},
																					{
																						"typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																						"typeString": "literal_string \"Address: call to non-contract\""
																					}
																				],
																				"id": 2249,
																				"name": "require",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [
																					4294967278,
																					4294967278
																				],
																				"referencedDeclaration": 4294967278,
																				"src": "8124:7:13",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																					"typeString": "function (bool,string memory) pure"
																				}
																			},
																			"id": 2254,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "8124:60:13",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 2255,
																		"nodeType": "ExpressionStatement",
																		"src": "8124:60:13"
																	}
																]
															}
														},
														{
															"expression": {
																"id": 2258,
																"name": "returndata",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2237,
																"src": "8219:10:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"functionReturnParameters": 2243,
															"id": 2259,
															"nodeType": "Return",
															"src": "8212:17:13"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 2231,
										"nodeType": "StructuredDocumentation",
										"src": "7400:277:13",
										"text": " @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n _Available since v4.8._"
									},
									"id": 2269,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verifyCallResultFromTarget",
									"nameLocation": "7691:26:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2240,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2233,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "7735:6:13",
												"nodeType": "VariableDeclaration",
												"scope": 2269,
												"src": "7727:14:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2232,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7727:7:13",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2235,
												"mutability": "mutable",
												"name": "success",
												"nameLocation": "7756:7:13",
												"nodeType": "VariableDeclaration",
												"scope": 2269,
												"src": "7751:12:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2234,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "7751:4:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2237,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "7786:10:13",
												"nodeType": "VariableDeclaration",
												"scope": 2269,
												"src": "7773:23:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2236,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7773:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2239,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "7820:12:13",
												"nodeType": "VariableDeclaration",
												"scope": 2269,
												"src": "7806:26:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2238,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "7806:6:13",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7717:121:13"
									},
									"returnParameters": {
										"id": 2243,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2242,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2269,
												"src": "7862:12:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2241,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7862:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7861:14:13"
									},
									"scope": 2314,
									"src": "7682:628:13",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2292,
										"nodeType": "Block",
										"src": "8691:135:13",
										"statements": [
											{
												"condition": {
													"id": 2281,
													"name": "success",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 2272,
													"src": "8705:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 2290,
													"nodeType": "Block",
													"src": "8762:58:13",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 2286,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2274,
																		"src": "8784:10:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	{
																		"id": 2287,
																		"name": "errorMessage",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2276,
																		"src": "8796:12:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		},
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 2285,
																	"name": "_revert",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2313,
																	"src": "8776:7:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bytes memory,string memory) pure"
																	}
																},
																"id": 2288,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8776:33:13",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 2289,
															"nodeType": "ExpressionStatement",
															"src": "8776:33:13"
														}
													]
												},
												"id": 2291,
												"nodeType": "IfStatement",
												"src": "8701:119:13",
												"trueBody": {
													"id": 2284,
													"nodeType": "Block",
													"src": "8714:42:13",
													"statements": [
														{
															"expression": {
																"id": 2282,
																"name": "returndata",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2274,
																"src": "8735:10:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"functionReturnParameters": 2280,
															"id": 2283,
															"nodeType": "Return",
															"src": "8728:17:13"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 2270,
										"nodeType": "StructuredDocumentation",
										"src": "8316:210:13",
										"text": " @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason or using the provided one.\n _Available since v4.3._"
									},
									"id": 2293,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verifyCallResult",
									"nameLocation": "8540:16:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2277,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2272,
												"mutability": "mutable",
												"name": "success",
												"nameLocation": "8571:7:13",
												"nodeType": "VariableDeclaration",
												"scope": 2293,
												"src": "8566:12:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2271,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "8566:4:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2274,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "8601:10:13",
												"nodeType": "VariableDeclaration",
												"scope": 2293,
												"src": "8588:23:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2273,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "8588:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2276,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "8635:12:13",
												"nodeType": "VariableDeclaration",
												"scope": 2293,
												"src": "8621:26:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2275,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "8621:6:13",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8556:97:13"
									},
									"returnParameters": {
										"id": 2280,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2279,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2293,
												"src": "8677:12:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2278,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "8677:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8676:14:13"
									},
									"scope": 2314,
									"src": "8531:295:13",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2312,
										"nodeType": "Block",
										"src": "8915:457:13",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2303,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 2300,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2295,
															"src": "8991:10:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 2301,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "8991:17:13",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 2302,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "9011:1:13",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "8991:21:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 2310,
													"nodeType": "Block",
													"src": "9321:45:13",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 2307,
																		"name": "errorMessage",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2297,
																		"src": "9342:12:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 2306,
																	"name": "revert",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967277,
																		4294967277
																	],
																	"referencedDeclaration": 4294967277,
																	"src": "9335:6:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (string memory) pure"
																	}
																},
																"id": 2308,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9335:20:13",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 2309,
															"nodeType": "ExpressionStatement",
															"src": "9335:20:13"
														}
													]
												},
												"id": 2311,
												"nodeType": "IfStatement",
												"src": "8987:379:13",
												"trueBody": {
													"id": 2305,
													"nodeType": "Block",
													"src": "9014:301:13",
													"statements": [
														{
															"AST": {
																"nodeType": "YulBlock",
																"src": "9172:133:13",
																"statements": [
																	{
																		"nodeType": "YulVariableDeclaration",
																		"src": "9190:40:13",
																		"value": {
																			"arguments": [
																				{
																					"name": "returndata",
																					"nodeType": "YulIdentifier",
																					"src": "9219:10:13"
																				}
																			],
																			"functionName": {
																				"name": "mload",
																				"nodeType": "YulIdentifier",
																				"src": "9213:5:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "9213:17:13"
																		},
																		"variables": [
																			{
																				"name": "returndata_size",
																				"nodeType": "YulTypedName",
																				"src": "9194:15:13",
																				"type": ""
																			}
																		]
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "9258:2:13",
																							"type": "",
																							"value": "32"
																						},
																						{
																							"name": "returndata",
																							"nodeType": "YulIdentifier",
																							"src": "9262:10:13"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "9254:3:13"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "9254:19:13"
																				},
																				{
																					"name": "returndata_size",
																					"nodeType": "YulIdentifier",
																					"src": "9275:15:13"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "9247:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "9247:44:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "9247:44:13"
																	}
																]
															},
															"documentation": "@solidity memory-safe-assembly",
															"evmVersion": "london",
															"externalReferences": [
																{
																	"declaration": 2295,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "9219:10:13",
																	"valueSize": 1
																},
																{
																	"declaration": 2295,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "9262:10:13",
																	"valueSize": 1
																}
															],
															"id": 2304,
															"nodeType": "InlineAssembly",
															"src": "9163:142:13"
														}
													]
												}
											}
										]
									},
									"id": 2313,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_revert",
									"nameLocation": "8841:7:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2298,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2295,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "8862:10:13",
												"nodeType": "VariableDeclaration",
												"scope": 2313,
												"src": "8849:23:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2294,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "8849:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2297,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "8888:12:13",
												"nodeType": "VariableDeclaration",
												"scope": 2313,
												"src": "8874:26:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2296,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "8874:6:13",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8848:53:13"
									},
									"returnParameters": {
										"id": 2299,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8915:0:13"
									},
									"scope": 2314,
									"src": "8832:540:13",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 2315,
							"src": "194:9180:13",
							"usedErrors": []
						}
					],
					"src": "101:9274:13"
				},
				"id": 13
			},
			"@openzeppelin/contracts-upgradeable@4.9.2/utils/ContextUpgradeable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable@4.9.2/utils/ContextUpgradeable.sol",
					"exportedSymbols": {
						"AddressUpgradeable": [
							2314
						],
						"ContextUpgradeable": [
							2356
						],
						"Initializable": [
							942
						]
					},
					"id": 2357,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2316,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "86:23:14"
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/Initializable.sol",
							"file": "../proxy/utils/Initializable.sol",
							"id": 2317,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2357,
							"sourceUnit": 943,
							"src": "110:42:14",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 2319,
										"name": "Initializable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 942,
										"src": "691:13:14"
									},
									"id": 2320,
									"nodeType": "InheritanceSpecifier",
									"src": "691:13:14"
								}
							],
							"canonicalName": "ContextUpgradeable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 2318,
								"nodeType": "StructuredDocumentation",
								"src": "154:496:14",
								"text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
							},
							"fullyImplemented": true,
							"id": 2356,
							"linearizedBaseContracts": [
								2356,
								942
							],
							"name": "ContextUpgradeable",
							"nameLocation": "669:18:14",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 2325,
										"nodeType": "Block",
										"src": "763:7:14",
										"statements": []
									},
									"id": 2326,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 2323,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 2322,
												"name": "onlyInitializing",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 887,
												"src": "746:16:14"
											},
											"nodeType": "ModifierInvocation",
											"src": "746:16:14"
										}
									],
									"name": "__Context_init",
									"nameLocation": "720:14:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2321,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "734:2:14"
									},
									"returnParameters": {
										"id": 2324,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "763:0:14"
									},
									"scope": 2356,
									"src": "711:59:14",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2331,
										"nodeType": "Block",
										"src": "838:7:14",
										"statements": []
									},
									"id": 2332,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 2329,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 2328,
												"name": "onlyInitializing",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 887,
												"src": "821:16:14"
											},
											"nodeType": "ModifierInvocation",
											"src": "821:16:14"
										}
									],
									"name": "__Context_init_unchained",
									"nameLocation": "785:24:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2327,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "809:2:14"
									},
									"returnParameters": {
										"id": 2330,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "838:0:14"
									},
									"scope": 2356,
									"src": "776:69:14",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2340,
										"nodeType": "Block",
										"src": "912:34:14",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 2337,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "929:3:14",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 2338,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "929:10:14",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 2336,
												"id": 2339,
												"nodeType": "Return",
												"src": "922:17:14"
											}
										]
									},
									"id": 2341,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nameLocation": "859:10:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2333,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "869:2:14"
									},
									"returnParameters": {
										"id": 2336,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2335,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2341,
												"src": "903:7:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2334,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "903:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "902:9:14"
									},
									"scope": 2356,
									"src": "850:96:14",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2349,
										"nodeType": "Block",
										"src": "1019:32:14",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 2346,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "1036:3:14",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 2347,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "data",
													"nodeType": "MemberAccess",
													"src": "1036:8:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 2345,
												"id": 2348,
												"nodeType": "Return",
												"src": "1029:15:14"
											}
										]
									},
									"id": 2350,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nameLocation": "961:8:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2342,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "969:2:14"
									},
									"returnParameters": {
										"id": 2345,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2344,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2350,
												"src": "1003:14:14",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2343,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1003:5:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1002:16:14"
									},
									"scope": 2356,
									"src": "952:99:14",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"constant": false,
									"documentation": {
										"id": 2351,
										"nodeType": "StructuredDocumentation",
										"src": "1057:254:14",
										"text": " @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
									},
									"id": 2355,
									"mutability": "mutable",
									"name": "__gap",
									"nameLocation": "1336:5:14",
									"nodeType": "VariableDeclaration",
									"scope": 2356,
									"src": "1316:25:14",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_array$_t_uint256_$50_storage",
										"typeString": "uint256[50]"
									},
									"typeName": {
										"baseType": {
											"id": 2352,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1316:7:14",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"id": 2354,
										"length": {
											"hexValue": "3530",
											"id": 2353,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "1324:2:14",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_50_by_1",
												"typeString": "int_const 50"
											},
											"value": "50"
										},
										"nodeType": "ArrayTypeName",
										"src": "1316:11:14",
										"typeDescriptions": {
											"typeIdentifier": "t_array$_t_uint256_$50_storage_ptr",
											"typeString": "uint256[50]"
										}
									},
									"visibility": "private"
								}
							],
							"scope": 2357,
							"src": "651:693:14",
							"usedErrors": []
						}
					],
					"src": "86:1259:14"
				},
				"id": 14
			},
			"@openzeppelin/contracts-upgradeable@4.9.2/utils/StorageSlotUpgradeable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable@4.9.2/utils/StorageSlotUpgradeable.sol",
					"exportedSymbols": {
						"StorageSlotUpgradeable": [
							2466
						]
					},
					"id": 2467,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2358,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "193:23:15"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "StorageSlotUpgradeable",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 2359,
								"nodeType": "StructuredDocumentation",
								"src": "218:1201:15",
								"text": " @dev Library for reading and writing primitive types to specific storage slots.\n Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n This library helps with reading and writing to such slots without the need for inline assembly.\n The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n Example usage to set ERC1967 implementation slot:\n ```solidity\n contract ERC1967 {\n     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n     function _getImplementation() internal view returns (address) {\n         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n     }\n     function _setImplementation(address newImplementation) internal {\n         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n     }\n }\n ```\n _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\n _Available since v4.9 for `string`, `bytes`._"
							},
							"fullyImplemented": true,
							"id": 2466,
							"linearizedBaseContracts": [
								2466
							],
							"name": "StorageSlotUpgradeable",
							"nameLocation": "1428:22:15",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "StorageSlotUpgradeable.AddressSlot",
									"id": 2362,
									"members": [
										{
											"constant": false,
											"id": 2361,
											"mutability": "mutable",
											"name": "value",
											"nameLocation": "1494:5:15",
											"nodeType": "VariableDeclaration",
											"scope": 2362,
											"src": "1486:13:15",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 2360,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1486:7:15",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "AddressSlot",
									"nameLocation": "1464:11:15",
									"nodeType": "StructDefinition",
									"scope": 2466,
									"src": "1457:49:15",
									"visibility": "public"
								},
								{
									"canonicalName": "StorageSlotUpgradeable.BooleanSlot",
									"id": 2365,
									"members": [
										{
											"constant": false,
											"id": 2364,
											"mutability": "mutable",
											"name": "value",
											"nameLocation": "1546:5:15",
											"nodeType": "VariableDeclaration",
											"scope": 2365,
											"src": "1541:10:15",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											},
											"typeName": {
												"id": 2363,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "1541:4:15",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "BooleanSlot",
									"nameLocation": "1519:11:15",
									"nodeType": "StructDefinition",
									"scope": 2466,
									"src": "1512:46:15",
									"visibility": "public"
								},
								{
									"canonicalName": "StorageSlotUpgradeable.Bytes32Slot",
									"id": 2368,
									"members": [
										{
											"constant": false,
											"id": 2367,
											"mutability": "mutable",
											"name": "value",
											"nameLocation": "1601:5:15",
											"nodeType": "VariableDeclaration",
											"scope": 2368,
											"src": "1593:13:15",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes32",
												"typeString": "bytes32"
											},
											"typeName": {
												"id": 2366,
												"name": "bytes32",
												"nodeType": "ElementaryTypeName",
												"src": "1593:7:15",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Bytes32Slot",
									"nameLocation": "1571:11:15",
									"nodeType": "StructDefinition",
									"scope": 2466,
									"src": "1564:49:15",
									"visibility": "public"
								},
								{
									"canonicalName": "StorageSlotUpgradeable.Uint256Slot",
									"id": 2371,
									"members": [
										{
											"constant": false,
											"id": 2370,
											"mutability": "mutable",
											"name": "value",
											"nameLocation": "1656:5:15",
											"nodeType": "VariableDeclaration",
											"scope": 2371,
											"src": "1648:13:15",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 2369,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1648:7:15",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Uint256Slot",
									"nameLocation": "1626:11:15",
									"nodeType": "StructDefinition",
									"scope": 2466,
									"src": "1619:49:15",
									"visibility": "public"
								},
								{
									"canonicalName": "StorageSlotUpgradeable.StringSlot",
									"id": 2374,
									"members": [
										{
											"constant": false,
											"id": 2373,
											"mutability": "mutable",
											"name": "value",
											"nameLocation": "1709:5:15",
											"nodeType": "VariableDeclaration",
											"scope": 2374,
											"src": "1702:12:15",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_string_storage_ptr",
												"typeString": "string"
											},
											"typeName": {
												"id": 2372,
												"name": "string",
												"nodeType": "ElementaryTypeName",
												"src": "1702:6:15",
												"typeDescriptions": {
													"typeIdentifier": "t_string_storage_ptr",
													"typeString": "string"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "StringSlot",
									"nameLocation": "1681:10:15",
									"nodeType": "StructDefinition",
									"scope": 2466,
									"src": "1674:47:15",
									"visibility": "public"
								},
								{
									"canonicalName": "StorageSlotUpgradeable.BytesSlot",
									"id": 2377,
									"members": [
										{
											"constant": false,
											"id": 2376,
											"mutability": "mutable",
											"name": "value",
											"nameLocation": "1760:5:15",
											"nodeType": "VariableDeclaration",
											"scope": 2377,
											"src": "1754:11:15",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes_storage_ptr",
												"typeString": "bytes"
											},
											"typeName": {
												"id": 2375,
												"name": "bytes",
												"nodeType": "ElementaryTypeName",
												"src": "1754:5:15",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_storage_ptr",
													"typeString": "bytes"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "BytesSlot",
									"nameLocation": "1734:9:15",
									"nodeType": "StructDefinition",
									"scope": 2466,
									"src": "1727:45:15",
									"visibility": "public"
								},
								{
									"body": {
										"id": 2387,
										"nodeType": "Block",
										"src": "1954:106:15",
										"statements": [
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "2016:38:15",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2030:14:15",
															"value": {
																"name": "slot",
																"nodeType": "YulIdentifier",
																"src": "2040:4:15"
															},
															"variableNames": [
																{
																	"name": "r.slot",
																	"nodeType": "YulIdentifier",
																	"src": "2030:6:15"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "london",
												"externalReferences": [
													{
														"declaration": 2384,
														"isOffset": false,
														"isSlot": true,
														"src": "2030:6:15",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 2380,
														"isOffset": false,
														"isSlot": false,
														"src": "2040:4:15",
														"valueSize": 1
													}
												],
												"id": 2386,
												"nodeType": "InlineAssembly",
												"src": "2007:47:15"
											}
										]
									},
									"documentation": {
										"id": 2378,
										"nodeType": "StructuredDocumentation",
										"src": "1778:87:15",
										"text": " @dev Returns an `AddressSlot` with member `value` located at `slot`."
									},
									"id": 2388,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getAddressSlot",
									"nameLocation": "1879:14:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2381,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2380,
												"mutability": "mutable",
												"name": "slot",
												"nameLocation": "1902:4:15",
												"nodeType": "VariableDeclaration",
												"scope": 2388,
												"src": "1894:12:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2379,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1894:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1893:14:15"
									},
									"returnParameters": {
										"id": 2385,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2384,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "1951:1:15",
												"nodeType": "VariableDeclaration",
												"scope": 2388,
												"src": "1931:21:15",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_AddressSlot_$2362_storage_ptr",
													"typeString": "struct StorageSlotUpgradeable.AddressSlot"
												},
												"typeName": {
													"id": 2383,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2382,
														"name": "AddressSlot",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2362,
														"src": "1931:11:15"
													},
													"referencedDeclaration": 2362,
													"src": "1931:11:15",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_AddressSlot_$2362_storage_ptr",
														"typeString": "struct StorageSlotUpgradeable.AddressSlot"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1930:23:15"
									},
									"scope": 2466,
									"src": "1870:190:15",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2398,
										"nodeType": "Block",
										"src": "2242:106:15",
										"statements": [
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "2304:38:15",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2318:14:15",
															"value": {
																"name": "slot",
																"nodeType": "YulIdentifier",
																"src": "2328:4:15"
															},
															"variableNames": [
																{
																	"name": "r.slot",
																	"nodeType": "YulIdentifier",
																	"src": "2318:6:15"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "london",
												"externalReferences": [
													{
														"declaration": 2395,
														"isOffset": false,
														"isSlot": true,
														"src": "2318:6:15",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 2391,
														"isOffset": false,
														"isSlot": false,
														"src": "2328:4:15",
														"valueSize": 1
													}
												],
												"id": 2397,
												"nodeType": "InlineAssembly",
												"src": "2295:47:15"
											}
										]
									},
									"documentation": {
										"id": 2389,
										"nodeType": "StructuredDocumentation",
										"src": "2066:87:15",
										"text": " @dev Returns an `BooleanSlot` with member `value` located at `slot`."
									},
									"id": 2399,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getBooleanSlot",
									"nameLocation": "2167:14:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2392,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2391,
												"mutability": "mutable",
												"name": "slot",
												"nameLocation": "2190:4:15",
												"nodeType": "VariableDeclaration",
												"scope": 2399,
												"src": "2182:12:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2390,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2182:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2181:14:15"
									},
									"returnParameters": {
										"id": 2396,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2395,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "2239:1:15",
												"nodeType": "VariableDeclaration",
												"scope": 2399,
												"src": "2219:21:15",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_BooleanSlot_$2365_storage_ptr",
													"typeString": "struct StorageSlotUpgradeable.BooleanSlot"
												},
												"typeName": {
													"id": 2394,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2393,
														"name": "BooleanSlot",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2365,
														"src": "2219:11:15"
													},
													"referencedDeclaration": 2365,
													"src": "2219:11:15",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_BooleanSlot_$2365_storage_ptr",
														"typeString": "struct StorageSlotUpgradeable.BooleanSlot"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2218:23:15"
									},
									"scope": 2466,
									"src": "2158:190:15",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2409,
										"nodeType": "Block",
										"src": "2530:106:15",
										"statements": [
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "2592:38:15",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2606:14:15",
															"value": {
																"name": "slot",
																"nodeType": "YulIdentifier",
																"src": "2616:4:15"
															},
															"variableNames": [
																{
																	"name": "r.slot",
																	"nodeType": "YulIdentifier",
																	"src": "2606:6:15"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "london",
												"externalReferences": [
													{
														"declaration": 2406,
														"isOffset": false,
														"isSlot": true,
														"src": "2606:6:15",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 2402,
														"isOffset": false,
														"isSlot": false,
														"src": "2616:4:15",
														"valueSize": 1
													}
												],
												"id": 2408,
												"nodeType": "InlineAssembly",
												"src": "2583:47:15"
											}
										]
									},
									"documentation": {
										"id": 2400,
										"nodeType": "StructuredDocumentation",
										"src": "2354:87:15",
										"text": " @dev Returns an `Bytes32Slot` with member `value` located at `slot`."
									},
									"id": 2410,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getBytes32Slot",
									"nameLocation": "2455:14:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2403,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2402,
												"mutability": "mutable",
												"name": "slot",
												"nameLocation": "2478:4:15",
												"nodeType": "VariableDeclaration",
												"scope": 2410,
												"src": "2470:12:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2401,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2470:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2469:14:15"
									},
									"returnParameters": {
										"id": 2407,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2406,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "2527:1:15",
												"nodeType": "VariableDeclaration",
												"scope": 2410,
												"src": "2507:21:15",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Bytes32Slot_$2368_storage_ptr",
													"typeString": "struct StorageSlotUpgradeable.Bytes32Slot"
												},
												"typeName": {
													"id": 2405,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2404,
														"name": "Bytes32Slot",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2368,
														"src": "2507:11:15"
													},
													"referencedDeclaration": 2368,
													"src": "2507:11:15",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Bytes32Slot_$2368_storage_ptr",
														"typeString": "struct StorageSlotUpgradeable.Bytes32Slot"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2506:23:15"
									},
									"scope": 2466,
									"src": "2446:190:15",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2420,
										"nodeType": "Block",
										"src": "2818:106:15",
										"statements": [
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "2880:38:15",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2894:14:15",
															"value": {
																"name": "slot",
																"nodeType": "YulIdentifier",
																"src": "2904:4:15"
															},
															"variableNames": [
																{
																	"name": "r.slot",
																	"nodeType": "YulIdentifier",
																	"src": "2894:6:15"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "london",
												"externalReferences": [
													{
														"declaration": 2417,
														"isOffset": false,
														"isSlot": true,
														"src": "2894:6:15",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 2413,
														"isOffset": false,
														"isSlot": false,
														"src": "2904:4:15",
														"valueSize": 1
													}
												],
												"id": 2419,
												"nodeType": "InlineAssembly",
												"src": "2871:47:15"
											}
										]
									},
									"documentation": {
										"id": 2411,
										"nodeType": "StructuredDocumentation",
										"src": "2642:87:15",
										"text": " @dev Returns an `Uint256Slot` with member `value` located at `slot`."
									},
									"id": 2421,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getUint256Slot",
									"nameLocation": "2743:14:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2414,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2413,
												"mutability": "mutable",
												"name": "slot",
												"nameLocation": "2766:4:15",
												"nodeType": "VariableDeclaration",
												"scope": 2421,
												"src": "2758:12:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2412,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2758:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2757:14:15"
									},
									"returnParameters": {
										"id": 2418,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2417,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "2815:1:15",
												"nodeType": "VariableDeclaration",
												"scope": 2421,
												"src": "2795:21:15",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Uint256Slot_$2371_storage_ptr",
													"typeString": "struct StorageSlotUpgradeable.Uint256Slot"
												},
												"typeName": {
													"id": 2416,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2415,
														"name": "Uint256Slot",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2371,
														"src": "2795:11:15"
													},
													"referencedDeclaration": 2371,
													"src": "2795:11:15",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Uint256Slot_$2371_storage_ptr",
														"typeString": "struct StorageSlotUpgradeable.Uint256Slot"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2794:23:15"
									},
									"scope": 2466,
									"src": "2734:190:15",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2431,
										"nodeType": "Block",
										"src": "3103:106:15",
										"statements": [
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "3165:38:15",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3179:14:15",
															"value": {
																"name": "slot",
																"nodeType": "YulIdentifier",
																"src": "3189:4:15"
															},
															"variableNames": [
																{
																	"name": "r.slot",
																	"nodeType": "YulIdentifier",
																	"src": "3179:6:15"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "london",
												"externalReferences": [
													{
														"declaration": 2428,
														"isOffset": false,
														"isSlot": true,
														"src": "3179:6:15",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 2424,
														"isOffset": false,
														"isSlot": false,
														"src": "3189:4:15",
														"valueSize": 1
													}
												],
												"id": 2430,
												"nodeType": "InlineAssembly",
												"src": "3156:47:15"
											}
										]
									},
									"documentation": {
										"id": 2422,
										"nodeType": "StructuredDocumentation",
										"src": "2930:86:15",
										"text": " @dev Returns an `StringSlot` with member `value` located at `slot`."
									},
									"id": 2432,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getStringSlot",
									"nameLocation": "3030:13:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2425,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2424,
												"mutability": "mutable",
												"name": "slot",
												"nameLocation": "3052:4:15",
												"nodeType": "VariableDeclaration",
												"scope": 2432,
												"src": "3044:12:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2423,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3044:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3043:14:15"
									},
									"returnParameters": {
										"id": 2429,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2428,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "3100:1:15",
												"nodeType": "VariableDeclaration",
												"scope": 2432,
												"src": "3081:20:15",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_StringSlot_$2374_storage_ptr",
													"typeString": "struct StorageSlotUpgradeable.StringSlot"
												},
												"typeName": {
													"id": 2427,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2426,
														"name": "StringSlot",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2374,
														"src": "3081:10:15"
													},
													"referencedDeclaration": 2374,
													"src": "3081:10:15",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_StringSlot_$2374_storage_ptr",
														"typeString": "struct StorageSlotUpgradeable.StringSlot"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3080:22:15"
									},
									"scope": 2466,
									"src": "3021:188:15",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2442,
										"nodeType": "Block",
										"src": "3411:112:15",
										"statements": [
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "3473:44:15",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3487:20:15",
															"value": {
																"name": "store.slot",
																"nodeType": "YulIdentifier",
																"src": "3497:10:15"
															},
															"variableNames": [
																{
																	"name": "r.slot",
																	"nodeType": "YulIdentifier",
																	"src": "3487:6:15"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "london",
												"externalReferences": [
													{
														"declaration": 2439,
														"isOffset": false,
														"isSlot": true,
														"src": "3487:6:15",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 2435,
														"isOffset": false,
														"isSlot": true,
														"src": "3497:10:15",
														"suffix": "slot",
														"valueSize": 1
													}
												],
												"id": 2441,
												"nodeType": "InlineAssembly",
												"src": "3464:53:15"
											}
										]
									},
									"documentation": {
										"id": 2433,
										"nodeType": "StructuredDocumentation",
										"src": "3215:101:15",
										"text": " @dev Returns an `StringSlot` representation of the string storage pointer `store`."
									},
									"id": 2443,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getStringSlot",
									"nameLocation": "3330:13:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2436,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2435,
												"mutability": "mutable",
												"name": "store",
												"nameLocation": "3359:5:15",
												"nodeType": "VariableDeclaration",
												"scope": 2443,
												"src": "3344:20:15",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_string_storage_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2434,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3344:6:15",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3343:22:15"
									},
									"returnParameters": {
										"id": 2440,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2439,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "3408:1:15",
												"nodeType": "VariableDeclaration",
												"scope": 2443,
												"src": "3389:20:15",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_StringSlot_$2374_storage_ptr",
													"typeString": "struct StorageSlotUpgradeable.StringSlot"
												},
												"typeName": {
													"id": 2438,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2437,
														"name": "StringSlot",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2374,
														"src": "3389:10:15"
													},
													"referencedDeclaration": 2374,
													"src": "3389:10:15",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_StringSlot_$2374_storage_ptr",
														"typeString": "struct StorageSlotUpgradeable.StringSlot"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3388:22:15"
									},
									"scope": 2466,
									"src": "3321:202:15",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2453,
										"nodeType": "Block",
										"src": "3699:106:15",
										"statements": [
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "3761:38:15",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3775:14:15",
															"value": {
																"name": "slot",
																"nodeType": "YulIdentifier",
																"src": "3785:4:15"
															},
															"variableNames": [
																{
																	"name": "r.slot",
																	"nodeType": "YulIdentifier",
																	"src": "3775:6:15"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "london",
												"externalReferences": [
													{
														"declaration": 2450,
														"isOffset": false,
														"isSlot": true,
														"src": "3775:6:15",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 2446,
														"isOffset": false,
														"isSlot": false,
														"src": "3785:4:15",
														"valueSize": 1
													}
												],
												"id": 2452,
												"nodeType": "InlineAssembly",
												"src": "3752:47:15"
											}
										]
									},
									"documentation": {
										"id": 2444,
										"nodeType": "StructuredDocumentation",
										"src": "3529:85:15",
										"text": " @dev Returns an `BytesSlot` with member `value` located at `slot`."
									},
									"id": 2454,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getBytesSlot",
									"nameLocation": "3628:12:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2447,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2446,
												"mutability": "mutable",
												"name": "slot",
												"nameLocation": "3649:4:15",
												"nodeType": "VariableDeclaration",
												"scope": 2454,
												"src": "3641:12:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2445,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3641:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3640:14:15"
									},
									"returnParameters": {
										"id": 2451,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2450,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "3696:1:15",
												"nodeType": "VariableDeclaration",
												"scope": 2454,
												"src": "3678:19:15",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_BytesSlot_$2377_storage_ptr",
													"typeString": "struct StorageSlotUpgradeable.BytesSlot"
												},
												"typeName": {
													"id": 2449,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2448,
														"name": "BytesSlot",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2377,
														"src": "3678:9:15"
													},
													"referencedDeclaration": 2377,
													"src": "3678:9:15",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_BytesSlot_$2377_storage_ptr",
														"typeString": "struct StorageSlotUpgradeable.BytesSlot"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3677:21:15"
									},
									"scope": 2466,
									"src": "3619:186:15",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2464,
										"nodeType": "Block",
										"src": "4002:112:15",
										"statements": [
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "4064:44:15",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4078:20:15",
															"value": {
																"name": "store.slot",
																"nodeType": "YulIdentifier",
																"src": "4088:10:15"
															},
															"variableNames": [
																{
																	"name": "r.slot",
																	"nodeType": "YulIdentifier",
																	"src": "4078:6:15"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "london",
												"externalReferences": [
													{
														"declaration": 2461,
														"isOffset": false,
														"isSlot": true,
														"src": "4078:6:15",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 2457,
														"isOffset": false,
														"isSlot": true,
														"src": "4088:10:15",
														"suffix": "slot",
														"valueSize": 1
													}
												],
												"id": 2463,
												"nodeType": "InlineAssembly",
												"src": "4055:53:15"
											}
										]
									},
									"documentation": {
										"id": 2455,
										"nodeType": "StructuredDocumentation",
										"src": "3811:99:15",
										"text": " @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`."
									},
									"id": 2465,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getBytesSlot",
									"nameLocation": "3924:12:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2458,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2457,
												"mutability": "mutable",
												"name": "store",
												"nameLocation": "3951:5:15",
												"nodeType": "VariableDeclaration",
												"scope": 2465,
												"src": "3937:19:15",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_storage_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2456,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3937:5:15",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3936:21:15"
									},
									"returnParameters": {
										"id": 2462,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2461,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "3999:1:15",
												"nodeType": "VariableDeclaration",
												"scope": 2465,
												"src": "3981:19:15",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_BytesSlot_$2377_storage_ptr",
													"typeString": "struct StorageSlotUpgradeable.BytesSlot"
												},
												"typeName": {
													"id": 2460,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2459,
														"name": "BytesSlot",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2377,
														"src": "3981:9:15"
													},
													"referencedDeclaration": 2377,
													"src": "3981:9:15",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_BytesSlot_$2377_storage_ptr",
														"typeString": "struct StorageSlotUpgradeable.BytesSlot"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3980:21:15"
									},
									"scope": 2466,
									"src": "3915:199:15",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 2467,
							"src": "1420:2696:15",
							"usedErrors": []
						}
					],
					"src": "193:3924:15"
				},
				"id": 15
			},
			"@openzeppelin/contracts-upgradeable@4.9.2/utils/StringsUpgradeable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable@4.9.2/utils/StringsUpgradeable.sol",
					"exportedSymbols": {
						"MathUpgradeable": [
							3617
						],
						"SignedMathUpgradeable": [
							3722
						],
						"StringsUpgradeable": [
							2695
						]
					},
					"id": 2696,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2468,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "101:23:16"
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable@4.9.2/utils/math/MathUpgradeable.sol",
							"file": "./math/MathUpgradeable.sol",
							"id": 2469,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2696,
							"sourceUnit": 3618,
							"src": "126:36:16",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable@4.9.2/utils/math/SignedMathUpgradeable.sol",
							"file": "./math/SignedMathUpgradeable.sol",
							"id": 2470,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2696,
							"sourceUnit": 3723,
							"src": "163:42:16",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "StringsUpgradeable",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 2471,
								"nodeType": "StructuredDocumentation",
								"src": "207:34:16",
								"text": " @dev String operations."
							},
							"fullyImplemented": true,
							"id": 2695,
							"linearizedBaseContracts": [
								2695
							],
							"name": "StringsUpgradeable",
							"nameLocation": "250:18:16",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 2474,
									"mutability": "constant",
									"name": "_SYMBOLS",
									"nameLocation": "300:8:16",
									"nodeType": "VariableDeclaration",
									"scope": 2695,
									"src": "275:54:16",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes16",
										"typeString": "bytes16"
									},
									"typeName": {
										"id": 2472,
										"name": "bytes16",
										"nodeType": "ElementaryTypeName",
										"src": "275:7:16",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes16",
											"typeString": "bytes16"
										}
									},
									"value": {
										"hexValue": "30313233343536373839616263646566",
										"id": 2473,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "string",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "311:18:16",
										"typeDescriptions": {
											"typeIdentifier": "t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f",
											"typeString": "literal_string \"0123456789abcdef\""
										},
										"value": "0123456789abcdef"
									},
									"visibility": "private"
								},
								{
									"constant": true,
									"id": 2477,
									"mutability": "constant",
									"name": "_ADDRESS_LENGTH",
									"nameLocation": "358:15:16",
									"nodeType": "VariableDeclaration",
									"scope": 2695,
									"src": "335:43:16",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint8",
										"typeString": "uint8"
									},
									"typeName": {
										"id": 2475,
										"name": "uint8",
										"nodeType": "ElementaryTypeName",
										"src": "335:5:16",
										"typeDescriptions": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										}
									},
									"value": {
										"hexValue": "3230",
										"id": 2476,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "376:2:16",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_20_by_1",
											"typeString": "int_const 20"
										},
										"value": "20"
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 2524,
										"nodeType": "Block",
										"src": "551:636:16",
										"statements": [
											{
												"id": 2523,
												"nodeType": "UncheckedBlock",
												"src": "561:620:16",
												"statements": [
													{
														"assignments": [
															2486
														],
														"declarations": [
															{
																"constant": false,
																"id": 2486,
																"mutability": "mutable",
																"name": "length",
																"nameLocation": "593:6:16",
																"nodeType": "VariableDeclaration",
																"scope": 2523,
																"src": "585:14:16",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2485,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "585:7:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2493,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2492,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [
																	{
																		"id": 2489,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2480,
																		"src": "624:5:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"id": 2487,
																		"name": "MathUpgradeable",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3617,
																		"src": "602:15:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_MathUpgradeable_$3617_$",
																			"typeString": "type(library MathUpgradeable)"
																		}
																	},
																	"id": 2488,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "log10",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 3454,
																	"src": "602:21:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																		"typeString": "function (uint256) pure returns (uint256)"
																	}
																},
																"id": 2490,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "602:28:16",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"hexValue": "31",
																"id": 2491,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "633:1:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"src": "602:32:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "585:49:16"
													},
													{
														"assignments": [
															2495
														],
														"declarations": [
															{
																"constant": false,
																"id": 2495,
																"mutability": "mutable",
																"name": "buffer",
																"nameLocation": "662:6:16",
																"nodeType": "VariableDeclaration",
																"scope": 2523,
																"src": "648:20:16",
																"stateVariable": false,
																"storageLocation": "memory",
																"typeDescriptions": {
																	"typeIdentifier": "t_string_memory_ptr",
																	"typeString": "string"
																},
																"typeName": {
																	"id": 2494,
																	"name": "string",
																	"nodeType": "ElementaryTypeName",
																	"src": "648:6:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_storage_ptr",
																		"typeString": "string"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2500,
														"initialValue": {
															"arguments": [
																{
																	"id": 2498,
																	"name": "length",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2486,
																	"src": "682:6:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 2497,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "NewExpression",
																"src": "671:10:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$",
																	"typeString": "function (uint256) pure returns (string memory)"
																},
																"typeName": {
																	"id": 2496,
																	"name": "string",
																	"nodeType": "ElementaryTypeName",
																	"src": "675:6:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_storage_ptr",
																		"typeString": "string"
																	}
																}
															},
															"id": 2499,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "671:18:16",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "648:41:16"
													},
													{
														"assignments": [
															2502
														],
														"declarations": [
															{
																"constant": false,
																"id": 2502,
																"mutability": "mutable",
																"name": "ptr",
																"nameLocation": "711:3:16",
																"nodeType": "VariableDeclaration",
																"scope": 2523,
																"src": "703:11:16",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2501,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "703:7:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2503,
														"nodeType": "VariableDeclarationStatement",
														"src": "703:11:16"
													},
													{
														"AST": {
															"nodeType": "YulBlock",
															"src": "784:67:16",
															"statements": [
																{
																	"nodeType": "YulAssignment",
																	"src": "802:35:16",
																	"value": {
																		"arguments": [
																			{
																				"name": "buffer",
																				"nodeType": "YulIdentifier",
																				"src": "813:6:16"
																			},
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "825:2:16",
																						"type": "",
																						"value": "32"
																					},
																					{
																						"name": "length",
																						"nodeType": "YulIdentifier",
																						"src": "829:6:16"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "821:3:16"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "821:15:16"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "809:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "809:28:16"
																	},
																	"variableNames": [
																		{
																			"name": "ptr",
																			"nodeType": "YulIdentifier",
																			"src": "802:3:16"
																		}
																	]
																}
															]
														},
														"documentation": "@solidity memory-safe-assembly",
														"evmVersion": "london",
														"externalReferences": [
															{
																"declaration": 2495,
																"isOffset": false,
																"isSlot": false,
																"src": "813:6:16",
																"valueSize": 1
															},
															{
																"declaration": 2486,
																"isOffset": false,
																"isSlot": false,
																"src": "829:6:16",
																"valueSize": 1
															},
															{
																"declaration": 2502,
																"isOffset": false,
																"isSlot": false,
																"src": "802:3:16",
																"valueSize": 1
															}
														],
														"id": 2504,
														"nodeType": "InlineAssembly",
														"src": "775:76:16"
													},
													{
														"body": {
															"id": 2519,
															"nodeType": "Block",
															"src": "877:267:16",
															"statements": [
																{
																	"expression": {
																		"id": 2507,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "UnaryOperation",
																		"operator": "--",
																		"prefix": false,
																		"src": "895:5:16",
																		"subExpression": {
																			"id": 2506,
																			"name": "ptr",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2502,
																			"src": "895:3:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2508,
																	"nodeType": "ExpressionStatement",
																	"src": "895:5:16"
																},
																{
																	"AST": {
																		"nodeType": "YulBlock",
																		"src": "978:84:16",
																		"statements": [
																			{
																				"expression": {
																					"arguments": [
																						{
																							"name": "ptr",
																							"nodeType": "YulIdentifier",
																							"src": "1008:3:16"
																						},
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"name": "value",
																											"nodeType": "YulIdentifier",
																											"src": "1022:5:16"
																										},
																										{
																											"kind": "number",
																											"nodeType": "YulLiteral",
																											"src": "1029:2:16",
																											"type": "",
																											"value": "10"
																										}
																									],
																									"functionName": {
																										"name": "mod",
																										"nodeType": "YulIdentifier",
																										"src": "1018:3:16"
																									},
																									"nodeType": "YulFunctionCall",
																									"src": "1018:14:16"
																								},
																								{
																									"name": "_SYMBOLS",
																									"nodeType": "YulIdentifier",
																									"src": "1034:8:16"
																								}
																							],
																							"functionName": {
																								"name": "byte",
																								"nodeType": "YulIdentifier",
																								"src": "1013:4:16"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "1013:30:16"
																						}
																					],
																					"functionName": {
																						"name": "mstore8",
																						"nodeType": "YulIdentifier",
																						"src": "1000:7:16"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "1000:44:16"
																				},
																				"nodeType": "YulExpressionStatement",
																				"src": "1000:44:16"
																			}
																		]
																	},
																	"documentation": "@solidity memory-safe-assembly",
																	"evmVersion": "london",
																	"externalReferences": [
																		{
																			"declaration": 2474,
																			"isOffset": false,
																			"isSlot": false,
																			"src": "1034:8:16",
																			"valueSize": 1
																		},
																		{
																			"declaration": 2502,
																			"isOffset": false,
																			"isSlot": false,
																			"src": "1008:3:16",
																			"valueSize": 1
																		},
																		{
																			"declaration": 2480,
																			"isOffset": false,
																			"isSlot": false,
																			"src": "1022:5:16",
																			"valueSize": 1
																		}
																	],
																	"id": 2509,
																	"nodeType": "InlineAssembly",
																	"src": "969:93:16"
																},
																{
																	"expression": {
																		"id": 2512,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2510,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2480,
																			"src": "1079:5:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"hexValue": "3130",
																			"id": 2511,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1088:2:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_10_by_1",
																				"typeString": "int_const 10"
																			},
																			"value": "10"
																		},
																		"src": "1079:11:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2513,
																	"nodeType": "ExpressionStatement",
																	"src": "1079:11:16"
																},
																{
																	"condition": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2516,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2514,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2480,
																			"src": "1112:5:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 2515,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1121:1:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "1112:10:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"id": 2518,
																	"nodeType": "IfStatement",
																	"src": "1108:21:16",
																	"trueBody": {
																		"id": 2517,
																		"nodeType": "Break",
																		"src": "1124:5:16"
																	}
																}
															]
														},
														"condition": {
															"hexValue": "74727565",
															"id": 2505,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "871:4:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														},
														"id": 2520,
														"nodeType": "WhileStatement",
														"src": "864:280:16"
													},
													{
														"expression": {
															"id": 2521,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2495,
															"src": "1164:6:16",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														"functionReturnParameters": 2484,
														"id": 2522,
														"nodeType": "Return",
														"src": "1157:13:16"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2478,
										"nodeType": "StructuredDocumentation",
										"src": "385:90:16",
										"text": " @dev Converts a `uint256` to its ASCII `string` decimal representation."
									},
									"id": 2525,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toString",
									"nameLocation": "489:8:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2481,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2480,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "506:5:16",
												"nodeType": "VariableDeclaration",
												"scope": 2525,
												"src": "498:13:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2479,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "498:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "497:15:16"
									},
									"returnParameters": {
										"id": 2484,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2483,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2525,
												"src": "536:13:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2482,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "536:6:16",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "535:15:16"
									},
									"scope": 2695,
									"src": "480:707:16",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2552,
										"nodeType": "Block",
										"src": "1357:114:16",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"condition": {
																		"commonType": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		},
																		"id": 2539,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2537,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2528,
																			"src": "1398:5:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "<",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 2538,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1406:1:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "1398:9:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"falseExpression": {
																		"hexValue": "",
																		"id": 2541,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1416:2:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																			"typeString": "literal_string \"\""
																		},
																		"value": ""
																	},
																	"id": 2542,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "Conditional",
																	"src": "1398:20:16",
																	"trueExpression": {
																		"hexValue": "2d",
																		"id": 2540,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1410:3:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_d3b8281179950f98149eefdb158d0e1acb56f56e8e343aa9fefafa7e36959561",
																			"typeString": "literal_string \"-\""
																		},
																		"value": "-"
																	},
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																},
																{
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"id": 2546,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2528,
																					"src": "1455:5:16",
																					"typeDescriptions": {
																						"typeIdentifier": "t_int256",
																						"typeString": "int256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_int256",
																						"typeString": "int256"
																					}
																				],
																				"expression": {
																					"id": 2544,
																					"name": "SignedMathUpgradeable",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3722,
																					"src": "1429:21:16",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_contract$_SignedMathUpgradeable_$3722_$",
																						"typeString": "type(library SignedMathUpgradeable)"
																					}
																				},
																				"id": 2545,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "abs",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 3721,
																				"src": "1429:25:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_internal_pure$_t_int256_$returns$_t_uint256_$",
																					"typeString": "function (int256) pure returns (uint256)"
																				}
																			},
																			"id": 2547,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "1429:32:16",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"id": 2543,
																		"name": "toString",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [
																			2525,
																			2553
																		],
																		"referencedDeclaration": 2525,
																		"src": "1420:8:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$",
																			"typeString": "function (uint256) pure returns (string memory)"
																		}
																	},
																	"id": 2548,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "1420:42:16",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	},
																	{
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																],
																"expression": {
																	"id": 2535,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "1381:3:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 2536,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodePacked",
																"nodeType": "MemberAccess",
																"src": "1381:16:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 2549,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1381:82:16",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 2534,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "1374:6:16",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_string_storage_ptr_$",
															"typeString": "type(string storage pointer)"
														},
														"typeName": {
															"id": 2533,
															"name": "string",
															"nodeType": "ElementaryTypeName",
															"src": "1374:6:16",
															"typeDescriptions": {}
														}
													},
													"id": 2550,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1374:90:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 2532,
												"id": 2551,
												"nodeType": "Return",
												"src": "1367:97:16"
											}
										]
									},
									"documentation": {
										"id": 2526,
										"nodeType": "StructuredDocumentation",
										"src": "1193:89:16",
										"text": " @dev Converts a `int256` to its ASCII `string` decimal representation."
									},
									"id": 2553,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toString",
									"nameLocation": "1296:8:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2529,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2528,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1312:5:16",
												"nodeType": "VariableDeclaration",
												"scope": 2553,
												"src": "1305:12:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 2527,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "1305:6:16",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1304:14:16"
									},
									"returnParameters": {
										"id": 2532,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2531,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2553,
												"src": "1342:13:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2530,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1342:6:16",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1341:15:16"
									},
									"scope": 2695,
									"src": "1287:184:16",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2572,
										"nodeType": "Block",
										"src": "1650:111:16",
										"statements": [
											{
												"id": 2571,
												"nodeType": "UncheckedBlock",
												"src": "1660:95:16",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"id": 2562,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2556,
																	"src": "1703:5:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2568,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"arguments": [
																			{
																				"id": 2565,
																				"name": "value",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2556,
																				"src": "1733:5:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"expression": {
																				"id": 2563,
																				"name": "MathUpgradeable",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3617,
																				"src": "1710:15:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_contract$_MathUpgradeable_$3617_$",
																					"typeString": "type(library MathUpgradeable)"
																				}
																			},
																			"id": 2564,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "log256",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 3577,
																			"src": "1710:22:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																				"typeString": "function (uint256) pure returns (uint256)"
																			}
																		},
																		"id": 2566,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "1710:29:16",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "+",
																	"rightExpression": {
																		"hexValue": "31",
																		"id": 2567,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1742:1:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_1_by_1",
																			"typeString": "int_const 1"
																		},
																		"value": "1"
																	},
																	"src": "1710:33:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 2561,
																"name": "toHexString",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	2573,
																	2649,
																	2669
																],
																"referencedDeclaration": 2649,
																"src": "1691:11:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$",
																	"typeString": "function (uint256,uint256) pure returns (string memory)"
																}
															},
															"id": 2569,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1691:53:16",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														"functionReturnParameters": 2560,
														"id": 2570,
														"nodeType": "Return",
														"src": "1684:60:16"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2554,
										"nodeType": "StructuredDocumentation",
										"src": "1477:94:16",
										"text": " @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."
									},
									"id": 2573,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toHexString",
									"nameLocation": "1585:11:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2557,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2556,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1605:5:16",
												"nodeType": "VariableDeclaration",
												"scope": 2573,
												"src": "1597:13:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2555,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1597:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1596:15:16"
									},
									"returnParameters": {
										"id": 2560,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2559,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2573,
												"src": "1635:13:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2558,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1635:6:16",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1634:15:16"
									},
									"scope": 2695,
									"src": "1576:185:16",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2648,
										"nodeType": "Block",
										"src": "1974:347:16",
										"statements": [
											{
												"assignments": [
													2584
												],
												"declarations": [
													{
														"constant": false,
														"id": 2584,
														"mutability": "mutable",
														"name": "buffer",
														"nameLocation": "1997:6:16",
														"nodeType": "VariableDeclaration",
														"scope": 2648,
														"src": "1984:19:16",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 2583,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "1984:5:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2593,
												"initialValue": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2591,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2589,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 2587,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2016:1:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"id": 2588,
																	"name": "length",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2578,
																	"src": "2020:6:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "2016:10:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"hexValue": "32",
																"id": 2590,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2029:1:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_2_by_1",
																	"typeString": "int_const 2"
																},
																"value": "2"
															},
															"src": "2016:14:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 2586,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "NewExpression",
														"src": "2006:9:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (uint256) pure returns (bytes memory)"
														},
														"typeName": {
															"id": 2585,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "2010:5:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														}
													},
													"id": 2592,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2006:25:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1984:47:16"
											},
											{
												"expression": {
													"id": 2598,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 2594,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2584,
															"src": "2041:6:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 2596,
														"indexExpression": {
															"hexValue": "30",
															"id": 2595,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2048:1:16",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "2041:9:16",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes1",
															"typeString": "bytes1"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "30",
														"id": 2597,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "string",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2053:3:16",
														"typeDescriptions": {
															"typeIdentifier": "t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d",
															"typeString": "literal_string \"0\""
														},
														"value": "0"
													},
													"src": "2041:15:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes1",
														"typeString": "bytes1"
													}
												},
												"id": 2599,
												"nodeType": "ExpressionStatement",
												"src": "2041:15:16"
											},
											{
												"expression": {
													"id": 2604,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 2600,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2584,
															"src": "2066:6:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 2602,
														"indexExpression": {
															"hexValue": "31",
															"id": 2601,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2073:1:16",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "2066:9:16",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes1",
															"typeString": "bytes1"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "78",
														"id": 2603,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "string",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2078:3:16",
														"typeDescriptions": {
															"typeIdentifier": "t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83",
															"typeString": "literal_string \"x\""
														},
														"value": "x"
													},
													"src": "2066:15:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes1",
														"typeString": "bytes1"
													}
												},
												"id": 2605,
												"nodeType": "ExpressionStatement",
												"src": "2066:15:16"
											},
											{
												"body": {
													"id": 2634,
													"nodeType": "Block",
													"src": "2136:83:16",
													"statements": [
														{
															"expression": {
																"id": 2628,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"id": 2620,
																		"name": "buffer",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2584,
																		"src": "2150:6:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 2622,
																	"indexExpression": {
																		"id": 2621,
																		"name": "i",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2607,
																		"src": "2157:1:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "2150:9:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes1",
																		"typeString": "bytes1"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"baseExpression": {
																		"id": 2623,
																		"name": "_SYMBOLS",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2474,
																		"src": "2162:8:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes16",
																			"typeString": "bytes16"
																		}
																	},
																	"id": 2627,
																	"indexExpression": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2626,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2624,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2576,
																			"src": "2171:5:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "&",
																		"rightExpression": {
																			"hexValue": "307866",
																			"id": 2625,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2179:3:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_15_by_1",
																				"typeString": "int_const 15"
																			},
																			"value": "0xf"
																		},
																		"src": "2171:11:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "2162:21:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes1",
																		"typeString": "bytes1"
																	}
																},
																"src": "2150:33:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes1",
																	"typeString": "bytes1"
																}
															},
															"id": 2629,
															"nodeType": "ExpressionStatement",
															"src": "2150:33:16"
														},
														{
															"expression": {
																"id": 2632,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 2630,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2576,
																	"src": "2197:5:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": ">>=",
																"rightHandSide": {
																	"hexValue": "34",
																	"id": 2631,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2207:1:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_4_by_1",
																		"typeString": "int_const 4"
																	},
																	"value": "4"
																},
																"src": "2197:11:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 2633,
															"nodeType": "ExpressionStatement",
															"src": "2197:11:16"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2616,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2614,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2607,
														"src": "2124:1:16",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "31",
														"id": 2615,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2128:1:16",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "2124:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2635,
												"initializationExpression": {
													"assignments": [
														2607
													],
													"declarations": [
														{
															"constant": false,
															"id": 2607,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "2104:1:16",
															"nodeType": "VariableDeclaration",
															"scope": 2635,
															"src": "2096:9:16",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 2606,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "2096:7:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 2613,
													"initialValue": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2612,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2610,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"hexValue": "32",
																"id": 2608,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2108:1:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_2_by_1",
																	"typeString": "int_const 2"
																},
																"value": "2"
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 2609,
																"name": "length",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2578,
																"src": "2112:6:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2108:10:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "+",
														"rightExpression": {
															"hexValue": "31",
															"id": 2611,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2121:1:16",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"src": "2108:14:16",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "2096:26:16"
												},
												"loopExpression": {
													"expression": {
														"id": 2618,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "--",
														"prefix": true,
														"src": "2131:3:16",
														"subExpression": {
															"id": 2617,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2607,
															"src": "2133:1:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2619,
													"nodeType": "ExpressionStatement",
													"src": "2131:3:16"
												},
												"nodeType": "ForStatement",
												"src": "2091:128:16"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2639,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2637,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2576,
																"src": "2236:5:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 2638,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2245:1:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "2236:10:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "537472696e67733a20686578206c656e67746820696e73756666696369656e74",
															"id": 2640,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2248:34:16",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2",
																"typeString": "literal_string \"Strings: hex length insufficient\""
															},
															"value": "Strings: hex length insufficient"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2",
																"typeString": "literal_string \"Strings: hex length insufficient\""
															}
														],
														"id": 2636,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2228:7:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2641,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2228:55:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2642,
												"nodeType": "ExpressionStatement",
												"src": "2228:55:16"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 2645,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2584,
															"src": "2307:6:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 2644,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "2300:6:16",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_string_storage_ptr_$",
															"typeString": "type(string storage pointer)"
														},
														"typeName": {
															"id": 2643,
															"name": "string",
															"nodeType": "ElementaryTypeName",
															"src": "2300:6:16",
															"typeDescriptions": {}
														}
													},
													"id": 2646,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2300:14:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 2582,
												"id": 2647,
												"nodeType": "Return",
												"src": "2293:21:16"
											}
										]
									},
									"documentation": {
										"id": 2574,
										"nodeType": "StructuredDocumentation",
										"src": "1767:112:16",
										"text": " @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."
									},
									"id": 2649,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toHexString",
									"nameLocation": "1893:11:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2579,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2576,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1913:5:16",
												"nodeType": "VariableDeclaration",
												"scope": 2649,
												"src": "1905:13:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2575,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1905:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2578,
												"mutability": "mutable",
												"name": "length",
												"nameLocation": "1928:6:16",
												"nodeType": "VariableDeclaration",
												"scope": 2649,
												"src": "1920:14:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2577,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1920:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1904:31:16"
									},
									"returnParameters": {
										"id": 2582,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2581,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2649,
												"src": "1959:13:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2580,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1959:6:16",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1958:15:16"
									},
									"scope": 2695,
									"src": "1884:437:16",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2668,
										"nodeType": "Block",
										"src": "2546:76:16",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 2662,
																			"name": "addr",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2652,
																			"src": "2591:4:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		],
																		"id": 2661,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2583:7:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_uint160_$",
																			"typeString": "type(uint160)"
																		},
																		"typeName": {
																			"id": 2660,
																			"name": "uint160",
																			"nodeType": "ElementaryTypeName",
																			"src": "2583:7:16",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 2663,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2583:13:16",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																],
																"id": 2659,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2575:7:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_uint256_$",
																	"typeString": "type(uint256)"
																},
																"typeName": {
																	"id": 2658,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "2575:7:16",
																	"typeDescriptions": {}
																}
															},
															"id": 2664,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2575:22:16",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 2665,
															"name": "_ADDRESS_LENGTH",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2477,
															"src": "2599:15:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														],
														"id": 2657,
														"name": "toHexString",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															2573,
															2649,
															2669
														],
														"referencedDeclaration": 2649,
														"src": "2563:11:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$",
															"typeString": "function (uint256,uint256) pure returns (string memory)"
														}
													},
													"id": 2666,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2563:52:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 2656,
												"id": 2667,
												"nodeType": "Return",
												"src": "2556:59:16"
											}
										]
									},
									"documentation": {
										"id": 2650,
										"nodeType": "StructuredDocumentation",
										"src": "2327:141:16",
										"text": " @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation."
									},
									"id": 2669,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toHexString",
									"nameLocation": "2482:11:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2653,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2652,
												"mutability": "mutable",
												"name": "addr",
												"nameLocation": "2502:4:16",
												"nodeType": "VariableDeclaration",
												"scope": 2669,
												"src": "2494:12:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2651,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2494:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2493:14:16"
									},
									"returnParameters": {
										"id": 2656,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2655,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2669,
												"src": "2531:13:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2654,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2531:6:16",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2530:15:16"
									},
									"scope": 2695,
									"src": "2473:149:16",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2693,
										"nodeType": "Block",
										"src": "2777:66:16",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													},
													"id": 2691,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"arguments": [
																	{
																		"id": 2682,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2672,
																		"src": "2810:1:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 2681,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2804:5:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																		"typeString": "type(bytes storage pointer)"
																	},
																	"typeName": {
																		"id": 2680,
																		"name": "bytes",
																		"nodeType": "ElementaryTypeName",
																		"src": "2804:5:16",
																		"typeDescriptions": {}
																	}
																},
																"id": 2683,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2804:8:16",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"id": 2679,
															"name": "keccak256",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967288,
															"src": "2794:9:16",
															"typeDescriptions": {
																"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
																"typeString": "function (bytes memory) pure returns (bytes32)"
															}
														},
														"id": 2684,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2794:19:16",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"arguments": [
																	{
																		"id": 2688,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2674,
																		"src": "2833:1:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 2687,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2827:5:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																		"typeString": "type(bytes storage pointer)"
																	},
																	"typeName": {
																		"id": 2686,
																		"name": "bytes",
																		"nodeType": "ElementaryTypeName",
																		"src": "2827:5:16",
																		"typeDescriptions": {}
																	}
																},
																"id": 2689,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2827:8:16",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"id": 2685,
															"name": "keccak256",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967288,
															"src": "2817:9:16",
															"typeDescriptions": {
																"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
																"typeString": "function (bytes memory) pure returns (bytes32)"
															}
														},
														"id": 2690,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2817:19:16",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "2794:42:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 2678,
												"id": 2692,
												"nodeType": "Return",
												"src": "2787:49:16"
											}
										]
									},
									"documentation": {
										"id": 2670,
										"nodeType": "StructuredDocumentation",
										"src": "2628:66:16",
										"text": " @dev Returns true if the two strings are equal."
									},
									"id": 2694,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "equal",
									"nameLocation": "2708:5:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2675,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2672,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "2728:1:16",
												"nodeType": "VariableDeclaration",
												"scope": 2694,
												"src": "2714:15:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2671,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2714:6:16",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2674,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "2745:1:16",
												"nodeType": "VariableDeclaration",
												"scope": 2694,
												"src": "2731:15:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2673,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2731:6:16",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2713:34:16"
									},
									"returnParameters": {
										"id": 2678,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2677,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2694,
												"src": "2771:4:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2676,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2771:4:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2770:6:16"
									},
									"scope": 2695,
									"src": "2699:144:16",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 2696,
							"src": "242:2603:16",
							"usedErrors": []
						}
					],
					"src": "101:2745:16"
				},
				"id": 16
			},
			"@openzeppelin/contracts-upgradeable@4.9.2/utils/introspection/ERC165Upgradeable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable@4.9.2/utils/introspection/ERC165Upgradeable.sol",
					"exportedSymbols": {
						"AddressUpgradeable": [
							2314
						],
						"ERC165Upgradeable": [
							2739
						],
						"IERC165Upgradeable": [
							2751
						],
						"Initializable": [
							942
						]
					},
					"id": 2740,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2697,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "99:23:17"
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable@4.9.2/utils/introspection/IERC165Upgradeable.sol",
							"file": "./IERC165Upgradeable.sol",
							"id": 2698,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2740,
							"sourceUnit": 2752,
							"src": "124:34:17",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/Initializable.sol",
							"file": "../../proxy/utils/Initializable.sol",
							"id": 2699,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2740,
							"sourceUnit": 943,
							"src": "159:45:17",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 2701,
										"name": "Initializable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 942,
										"src": "822:13:17"
									},
									"id": 2702,
									"nodeType": "InheritanceSpecifier",
									"src": "822:13:17"
								},
								{
									"baseName": {
										"id": 2703,
										"name": "IERC165Upgradeable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 2751,
										"src": "837:18:17"
									},
									"id": 2704,
									"nodeType": "InheritanceSpecifier",
									"src": "837:18:17"
								}
							],
							"canonicalName": "ERC165Upgradeable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 2700,
								"nodeType": "StructuredDocumentation",
								"src": "206:576:17",
								"text": " @dev Implementation of the {IERC165} interface.\n Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n for the additional interface id that will be supported. For example:\n ```solidity\n function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n }\n ```\n Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation."
							},
							"fullyImplemented": true,
							"id": 2739,
							"linearizedBaseContracts": [
								2739,
								2751,
								942
							],
							"name": "ERC165Upgradeable",
							"nameLocation": "801:17:17",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 2709,
										"nodeType": "Block",
										"src": "913:7:17",
										"statements": []
									},
									"id": 2710,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 2707,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 2706,
												"name": "onlyInitializing",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 887,
												"src": "896:16:17"
											},
											"nodeType": "ModifierInvocation",
											"src": "896:16:17"
										}
									],
									"name": "__ERC165_init",
									"nameLocation": "871:13:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2705,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "884:2:17"
									},
									"returnParameters": {
										"id": 2708,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "913:0:17"
									},
									"scope": 2739,
									"src": "862:58:17",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2715,
										"nodeType": "Block",
										"src": "987:7:17",
										"statements": []
									},
									"id": 2716,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 2713,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 2712,
												"name": "onlyInitializing",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 887,
												"src": "970:16:17"
											},
											"nodeType": "ModifierInvocation",
											"src": "970:16:17"
										}
									],
									"name": "__ERC165_init_unchained",
									"nameLocation": "935:23:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2711,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "958:2:17"
									},
									"returnParameters": {
										"id": 2714,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "987:0:17"
									},
									"scope": 2739,
									"src": "926:68:17",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										2750
									],
									"body": {
										"id": 2732,
										"nodeType": "Block",
										"src": "1151:75:17",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													},
													"id": 2730,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2725,
														"name": "interfaceId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2719,
														"src": "1168:11:17",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes4",
															"typeString": "bytes4"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 2727,
																	"name": "IERC165Upgradeable",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2751,
																	"src": "1188:18:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_IERC165Upgradeable_$2751_$",
																		"typeString": "type(contract IERC165Upgradeable)"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_type$_t_contract$_IERC165Upgradeable_$2751_$",
																		"typeString": "type(contract IERC165Upgradeable)"
																	}
																],
																"id": 2726,
																"name": "type",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967269,
																"src": "1183:4:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																	"typeString": "function () pure"
																}
															},
															"id": 2728,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1183:24:17",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_magic_meta_type_t_contract$_IERC165Upgradeable_$2751",
																"typeString": "type(contract IERC165Upgradeable)"
															}
														},
														"id": 2729,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberName": "interfaceId",
														"nodeType": "MemberAccess",
														"src": "1183:36:17",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes4",
															"typeString": "bytes4"
														}
													},
													"src": "1168:51:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 2724,
												"id": 2731,
												"nodeType": "Return",
												"src": "1161:58:17"
											}
										]
									},
									"documentation": {
										"id": 2717,
										"nodeType": "StructuredDocumentation",
										"src": "999:56:17",
										"text": " @dev See {IERC165-supportsInterface}."
									},
									"functionSelector": "01ffc9a7",
									"id": 2733,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "supportsInterface",
									"nameLocation": "1069:17:17",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 2721,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "1127:8:17"
									},
									"parameters": {
										"id": 2720,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2719,
												"mutability": "mutable",
												"name": "interfaceId",
												"nameLocation": "1094:11:17",
												"nodeType": "VariableDeclaration",
												"scope": 2733,
												"src": "1087:18:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 2718,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "1087:6:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1086:20:17"
									},
									"returnParameters": {
										"id": 2724,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2723,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2733,
												"src": "1145:4:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2722,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1145:4:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1144:6:17"
									},
									"scope": 2739,
									"src": "1060:166:17",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"constant": false,
									"documentation": {
										"id": 2734,
										"nodeType": "StructuredDocumentation",
										"src": "1232:254:17",
										"text": " @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
									},
									"id": 2738,
									"mutability": "mutable",
									"name": "__gap",
									"nameLocation": "1511:5:17",
									"nodeType": "VariableDeclaration",
									"scope": 2739,
									"src": "1491:25:17",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_array$_t_uint256_$50_storage",
										"typeString": "uint256[50]"
									},
									"typeName": {
										"baseType": {
											"id": 2735,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1491:7:17",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"id": 2737,
										"length": {
											"hexValue": "3530",
											"id": 2736,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "1499:2:17",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_50_by_1",
												"typeString": "int_const 50"
											},
											"value": "50"
										},
										"nodeType": "ArrayTypeName",
										"src": "1491:11:17",
										"typeDescriptions": {
											"typeIdentifier": "t_array$_t_uint256_$50_storage_ptr",
											"typeString": "uint256[50]"
										}
									},
									"visibility": "private"
								}
							],
							"scope": 2740,
							"src": "783:736:17",
							"usedErrors": []
						}
					],
					"src": "99:1421:17"
				},
				"id": 17
			},
			"@openzeppelin/contracts-upgradeable@4.9.2/utils/introspection/IERC165Upgradeable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable@4.9.2/utils/introspection/IERC165Upgradeable.sol",
					"exportedSymbols": {
						"IERC165Upgradeable": [
							2751
						]
					},
					"id": 2752,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2741,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "100:23:18"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC165Upgradeable",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 2742,
								"nodeType": "StructuredDocumentation",
								"src": "125:279:18",
								"text": " @dev Interface of the ERC165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[EIP].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."
							},
							"fullyImplemented": false,
							"id": 2751,
							"linearizedBaseContracts": [
								2751
							],
							"name": "IERC165Upgradeable",
							"nameLocation": "415:18:18",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 2743,
										"nodeType": "StructuredDocumentation",
										"src": "440:340:18",
										"text": " @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."
									},
									"functionSelector": "01ffc9a7",
									"id": 2750,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "supportsInterface",
									"nameLocation": "794:17:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2746,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2745,
												"mutability": "mutable",
												"name": "interfaceId",
												"nameLocation": "819:11:18",
												"nodeType": "VariableDeclaration",
												"scope": 2750,
												"src": "812:18:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 2744,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "812:6:18",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "811:20:18"
									},
									"returnParameters": {
										"id": 2749,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2748,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2750,
												"src": "855:4:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2747,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "855:4:18",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "854:6:18"
									},
									"scope": 2751,
									"src": "785:76:18",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 2752,
							"src": "405:458:18",
							"usedErrors": []
						}
					],
					"src": "100:764:18"
				},
				"id": 18
			},
			"@openzeppelin/contracts-upgradeable@4.9.2/utils/math/MathUpgradeable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable@4.9.2/utils/math/MathUpgradeable.sol",
					"exportedSymbols": {
						"MathUpgradeable": [
							3617
						]
					},
					"id": 3618,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2753,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "103:23:19"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "MathUpgradeable",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 2754,
								"nodeType": "StructuredDocumentation",
								"src": "128:73:19",
								"text": " @dev Standard math utilities missing in the Solidity language."
							},
							"fullyImplemented": true,
							"id": 3617,
							"linearizedBaseContracts": [
								3617
							],
							"name": "MathUpgradeable",
							"nameLocation": "210:15:19",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "MathUpgradeable.Rounding",
									"id": 2758,
									"members": [
										{
											"id": 2755,
											"name": "Down",
											"nameLocation": "256:4:19",
											"nodeType": "EnumValue",
											"src": "256:4:19"
										},
										{
											"id": 2756,
											"name": "Up",
											"nameLocation": "298:2:19",
											"nodeType": "EnumValue",
											"src": "298:2:19"
										},
										{
											"id": 2757,
											"name": "Zero",
											"nameLocation": "329:4:19",
											"nodeType": "EnumValue",
											"src": "329:4:19"
										}
									],
									"name": "Rounding",
									"nameLocation": "237:8:19",
									"nodeType": "EnumDefinition",
									"src": "232:122:19"
								},
								{
									"body": {
										"id": 2775,
										"nodeType": "Block",
										"src": "491:37:19",
										"statements": [
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2770,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2768,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2761,
															"src": "508:1:19",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"id": 2769,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2763,
															"src": "512:1:19",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "508:5:19",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"id": 2772,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2763,
														"src": "520:1:19",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2773,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "508:13:19",
													"trueExpression": {
														"id": 2771,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2761,
														"src": "516:1:19",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2767,
												"id": 2774,
												"nodeType": "Return",
												"src": "501:20:19"
											}
										]
									},
									"documentation": {
										"id": 2759,
										"nodeType": "StructuredDocumentation",
										"src": "360:59:19",
										"text": " @dev Returns the largest of two numbers."
									},
									"id": 2776,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "max",
									"nameLocation": "433:3:19",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2764,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2761,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "445:1:19",
												"nodeType": "VariableDeclaration",
												"scope": 2776,
												"src": "437:9:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2760,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "437:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2763,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "456:1:19",
												"nodeType": "VariableDeclaration",
												"scope": 2776,
												"src": "448:9:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2762,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "448:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "436:22:19"
									},
									"returnParameters": {
										"id": 2767,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2766,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2776,
												"src": "482:7:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2765,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "482:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "481:9:19"
									},
									"scope": 3617,
									"src": "424:104:19",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2793,
										"nodeType": "Block",
										"src": "666:37:19",
										"statements": [
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2788,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2786,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2779,
															"src": "683:1:19",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "<",
														"rightExpression": {
															"id": 2787,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2781,
															"src": "687:1:19",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "683:5:19",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"id": 2790,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2781,
														"src": "695:1:19",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2791,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "683:13:19",
													"trueExpression": {
														"id": 2789,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2779,
														"src": "691:1:19",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2785,
												"id": 2792,
												"nodeType": "Return",
												"src": "676:20:19"
											}
										]
									},
									"documentation": {
										"id": 2777,
										"nodeType": "StructuredDocumentation",
										"src": "534:60:19",
										"text": " @dev Returns the smallest of two numbers."
									},
									"id": 2794,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "min",
									"nameLocation": "608:3:19",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2782,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2779,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "620:1:19",
												"nodeType": "VariableDeclaration",
												"scope": 2794,
												"src": "612:9:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2778,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "612:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2781,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "631:1:19",
												"nodeType": "VariableDeclaration",
												"scope": 2794,
												"src": "623:9:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2780,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "623:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "611:22:19"
									},
									"returnParameters": {
										"id": 2785,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2784,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2794,
												"src": "657:7:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2783,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "657:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "656:9:19"
									},
									"scope": 3617,
									"src": "599:104:19",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2816,
										"nodeType": "Block",
										"src": "887:82:19",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2814,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2806,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2804,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2797,
																	"src": "942:1:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "&",
																"rightExpression": {
																	"id": 2805,
																	"name": "b",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2799,
																	"src": "946:1:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "942:5:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 2807,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "941:7:19",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2813,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"components": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2810,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2808,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2797,
																		"src": "952:1:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "^",
																	"rightExpression": {
																		"id": 2809,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2799,
																		"src": "956:1:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "952:5:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 2811,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "951:7:19",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "/",
														"rightExpression": {
															"hexValue": "32",
															"id": 2812,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "961:1:19",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2_by_1",
																"typeString": "int_const 2"
															},
															"value": "2"
														},
														"src": "951:11:19",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "941:21:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2803,
												"id": 2815,
												"nodeType": "Return",
												"src": "934:28:19"
											}
										]
									},
									"documentation": {
										"id": 2795,
										"nodeType": "StructuredDocumentation",
										"src": "709:102:19",
										"text": " @dev Returns the average of two numbers. The result is rounded towards\n zero."
									},
									"id": 2817,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "average",
									"nameLocation": "825:7:19",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2800,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2797,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "841:1:19",
												"nodeType": "VariableDeclaration",
												"scope": 2817,
												"src": "833:9:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2796,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "833:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2799,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "852:1:19",
												"nodeType": "VariableDeclaration",
												"scope": 2817,
												"src": "844:9:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2798,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "844:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "832:22:19"
									},
									"returnParameters": {
										"id": 2803,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2802,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2817,
												"src": "878:7:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2801,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "878:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "877:9:19"
									},
									"scope": 3617,
									"src": "816:153:19",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2841,
										"nodeType": "Block",
										"src": "1239:123:19",
										"statements": [
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2829,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2827,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2820,
															"src": "1327:1:19",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"hexValue": "30",
															"id": 2828,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1332:1:19",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "1327:6:19",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2838,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2836,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2833,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2831,
																			"name": "a",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2820,
																			"src": "1341:1:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "-",
																		"rightExpression": {
																			"hexValue": "31",
																			"id": 2832,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1345:1:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "1341:5:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 2834,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1340:7:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "/",
															"rightExpression": {
																"id": 2835,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2822,
																"src": "1350:1:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1340:11:19",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "+",
														"rightExpression": {
															"hexValue": "31",
															"id": 2837,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1354:1:19",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"src": "1340:15:19",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2839,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "1327:28:19",
													"trueExpression": {
														"hexValue": "30",
														"id": 2830,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1336:1:19",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2826,
												"id": 2840,
												"nodeType": "Return",
												"src": "1320:35:19"
											}
										]
									},
									"documentation": {
										"id": 2818,
										"nodeType": "StructuredDocumentation",
										"src": "975:188:19",
										"text": " @dev Returns the ceiling of the division of two numbers.\n This differs from standard division with `/` in that it rounds up instead\n of rounding down."
									},
									"id": 2842,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "ceilDiv",
									"nameLocation": "1177:7:19",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2823,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2820,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "1193:1:19",
												"nodeType": "VariableDeclaration",
												"scope": 2842,
												"src": "1185:9:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2819,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1185:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2822,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "1204:1:19",
												"nodeType": "VariableDeclaration",
												"scope": 2842,
												"src": "1196:9:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2821,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1196:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1184:22:19"
									},
									"returnParameters": {
										"id": 2826,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2825,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2842,
												"src": "1230:7:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2824,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1230:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1229:9:19"
									},
									"scope": 3617,
									"src": "1168:194:19",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2964,
										"nodeType": "Block",
										"src": "1776:4115:19",
										"statements": [
											{
												"id": 2963,
												"nodeType": "UncheckedBlock",
												"src": "1786:4099:19",
												"statements": [
													{
														"assignments": [
															2855
														],
														"declarations": [
															{
																"constant": false,
																"id": 2855,
																"mutability": "mutable",
																"name": "prod0",
																"nameLocation": "2115:5:19",
																"nodeType": "VariableDeclaration",
																"scope": 2963,
																"src": "2107:13:19",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2854,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "2107:7:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2856,
														"nodeType": "VariableDeclarationStatement",
														"src": "2107:13:19"
													},
													{
														"assignments": [
															2858
														],
														"declarations": [
															{
																"constant": false,
																"id": 2858,
																"mutability": "mutable",
																"name": "prod1",
																"nameLocation": "2187:5:19",
																"nodeType": "VariableDeclaration",
																"scope": 2963,
																"src": "2179:13:19",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2857,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "2179:7:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2859,
														"nodeType": "VariableDeclarationStatement",
														"src": "2179:13:19"
													},
													{
														"AST": {
															"nodeType": "YulBlock",
															"src": "2259:157:19",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "2277:30:19",
																	"value": {
																		"arguments": [
																			{
																				"name": "x",
																				"nodeType": "YulIdentifier",
																				"src": "2294:1:19"
																			},
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "2297:1:19"
																			},
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "2304:1:19",
																						"type": "",
																						"value": "0"
																					}
																				],
																				"functionName": {
																					"name": "not",
																					"nodeType": "YulIdentifier",
																					"src": "2300:3:19"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2300:6:19"
																			}
																		],
																		"functionName": {
																			"name": "mulmod",
																			"nodeType": "YulIdentifier",
																			"src": "2287:6:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2287:20:19"
																	},
																	"variables": [
																		{
																			"name": "mm",
																			"nodeType": "YulTypedName",
																			"src": "2281:2:19",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "2324:18:19",
																	"value": {
																		"arguments": [
																			{
																				"name": "x",
																				"nodeType": "YulIdentifier",
																				"src": "2337:1:19"
																			},
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "2340:1:19"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "2333:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2333:9:19"
																	},
																	"variableNames": [
																		{
																			"name": "prod0",
																			"nodeType": "YulIdentifier",
																			"src": "2324:5:19"
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "2359:43:19",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "mm",
																						"nodeType": "YulIdentifier",
																						"src": "2376:2:19"
																					},
																					{
																						"name": "prod0",
																						"nodeType": "YulIdentifier",
																						"src": "2380:5:19"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "2372:3:19"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2372:14:19"
																			},
																			{
																				"arguments": [
																					{
																						"name": "mm",
																						"nodeType": "YulIdentifier",
																						"src": "2391:2:19"
																					},
																					{
																						"name": "prod0",
																						"nodeType": "YulIdentifier",
																						"src": "2395:5:19"
																					}
																				],
																				"functionName": {
																					"name": "lt",
																					"nodeType": "YulIdentifier",
																					"src": "2388:2:19"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2388:13:19"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2368:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2368:34:19"
																	},
																	"variableNames": [
																		{
																			"name": "prod1",
																			"nodeType": "YulIdentifier",
																			"src": "2359:5:19"
																		}
																	]
																}
															]
														},
														"evmVersion": "london",
														"externalReferences": [
															{
																"declaration": 2855,
																"isOffset": false,
																"isSlot": false,
																"src": "2324:5:19",
																"valueSize": 1
															},
															{
																"declaration": 2855,
																"isOffset": false,
																"isSlot": false,
																"src": "2380:5:19",
																"valueSize": 1
															},
															{
																"declaration": 2855,
																"isOffset": false,
																"isSlot": false,
																"src": "2395:5:19",
																"valueSize": 1
															},
															{
																"declaration": 2858,
																"isOffset": false,
																"isSlot": false,
																"src": "2359:5:19",
																"valueSize": 1
															},
															{
																"declaration": 2845,
																"isOffset": false,
																"isSlot": false,
																"src": "2294:1:19",
																"valueSize": 1
															},
															{
																"declaration": 2845,
																"isOffset": false,
																"isSlot": false,
																"src": "2337:1:19",
																"valueSize": 1
															},
															{
																"declaration": 2847,
																"isOffset": false,
																"isSlot": false,
																"src": "2297:1:19",
																"valueSize": 1
															},
															{
																"declaration": 2847,
																"isOffset": false,
																"isSlot": false,
																"src": "2340:1:19",
																"valueSize": 1
															}
														],
														"id": 2860,
														"nodeType": "InlineAssembly",
														"src": "2250:166:19"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2863,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2861,
																"name": "prod1",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2858,
																"src": "2497:5:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 2862,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2506:1:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "2497:10:19",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2869,
														"nodeType": "IfStatement",
														"src": "2493:368:19",
														"trueBody": {
															"id": 2868,
															"nodeType": "Block",
															"src": "2509:352:19",
															"statements": [
																{
																	"expression": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2866,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2864,
																			"name": "prod0",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2855,
																			"src": "2827:5:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "/",
																		"rightExpression": {
																			"id": 2865,
																			"name": "denominator",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2849,
																			"src": "2835:11:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "2827:19:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"functionReturnParameters": 2853,
																	"id": 2867,
																	"nodeType": "Return",
																	"src": "2820:26:19"
																}
															]
														}
													},
													{
														"expression": {
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2873,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2871,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2849,
																		"src": "2971:11:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": ">",
																	"rightExpression": {
																		"id": 2872,
																		"name": "prod1",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2858,
																		"src": "2985:5:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2971:19:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																{
																	"hexValue": "4d6174683a206d756c446976206f766572666c6f77",
																	"id": 2874,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "string",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2992:23:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_stringliteral_d87093691d63b122ac2c14d1b11554b287e2431cf2b03550b3be7cffb0f86851",
																		"typeString": "literal_string \"Math: mulDiv overflow\""
																	},
																	"value": "Math: mulDiv overflow"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	{
																		"typeIdentifier": "t_stringliteral_d87093691d63b122ac2c14d1b11554b287e2431cf2b03550b3be7cffb0f86851",
																		"typeString": "literal_string \"Math: mulDiv overflow\""
																	}
																],
																"id": 2870,
																"name": "require",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	4294967278,
																	4294967278
																],
																"referencedDeclaration": 4294967278,
																"src": "2963:7:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																	"typeString": "function (bool,string memory) pure"
																}
															},
															"id": 2875,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2963:53:19",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 2876,
														"nodeType": "ExpressionStatement",
														"src": "2963:53:19"
													},
													{
														"assignments": [
															2878
														],
														"declarations": [
															{
																"constant": false,
																"id": 2878,
																"mutability": "mutable",
																"name": "remainder",
																"nameLocation": "3280:9:19",
																"nodeType": "VariableDeclaration",
																"scope": 2963,
																"src": "3272:17:19",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2877,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "3272:7:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2879,
														"nodeType": "VariableDeclarationStatement",
														"src": "3272:17:19"
													},
													{
														"AST": {
															"nodeType": "YulBlock",
															"src": "3312:291:19",
															"statements": [
																{
																	"nodeType": "YulAssignment",
																	"src": "3381:38:19",
																	"value": {
																		"arguments": [
																			{
																				"name": "x",
																				"nodeType": "YulIdentifier",
																				"src": "3401:1:19"
																			},
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "3404:1:19"
																			},
																			{
																				"name": "denominator",
																				"nodeType": "YulIdentifier",
																				"src": "3407:11:19"
																			}
																		],
																		"functionName": {
																			"name": "mulmod",
																			"nodeType": "YulIdentifier",
																			"src": "3394:6:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3394:25:19"
																	},
																	"variableNames": [
																		{
																			"name": "remainder",
																			"nodeType": "YulIdentifier",
																			"src": "3381:9:19"
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "3501:41:19",
																	"value": {
																		"arguments": [
																			{
																				"name": "prod1",
																				"nodeType": "YulIdentifier",
																				"src": "3514:5:19"
																			},
																			{
																				"arguments": [
																					{
																						"name": "remainder",
																						"nodeType": "YulIdentifier",
																						"src": "3524:9:19"
																					},
																					{
																						"name": "prod0",
																						"nodeType": "YulIdentifier",
																						"src": "3535:5:19"
																					}
																				],
																				"functionName": {
																					"name": "gt",
																					"nodeType": "YulIdentifier",
																					"src": "3521:2:19"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3521:20:19"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "3510:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3510:32:19"
																	},
																	"variableNames": [
																		{
																			"name": "prod1",
																			"nodeType": "YulIdentifier",
																			"src": "3501:5:19"
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "3559:30:19",
																	"value": {
																		"arguments": [
																			{
																				"name": "prod0",
																				"nodeType": "YulIdentifier",
																				"src": "3572:5:19"
																			},
																			{
																				"name": "remainder",
																				"nodeType": "YulIdentifier",
																				"src": "3579:9:19"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "3568:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3568:21:19"
																	},
																	"variableNames": [
																		{
																			"name": "prod0",
																			"nodeType": "YulIdentifier",
																			"src": "3559:5:19"
																		}
																	]
																}
															]
														},
														"evmVersion": "london",
														"externalReferences": [
															{
																"declaration": 2849,
																"isOffset": false,
																"isSlot": false,
																"src": "3407:11:19",
																"valueSize": 1
															},
															{
																"declaration": 2855,
																"isOffset": false,
																"isSlot": false,
																"src": "3535:5:19",
																"valueSize": 1
															},
															{
																"declaration": 2855,
																"isOffset": false,
																"isSlot": false,
																"src": "3559:5:19",
																"valueSize": 1
															},
															{
																"declaration": 2855,
																"isOffset": false,
																"isSlot": false,
																"src": "3572:5:19",
																"valueSize": 1
															},
															{
																"declaration": 2858,
																"isOffset": false,
																"isSlot": false,
																"src": "3501:5:19",
																"valueSize": 1
															},
															{
																"declaration": 2858,
																"isOffset": false,
																"isSlot": false,
																"src": "3514:5:19",
																"valueSize": 1
															},
															{
																"declaration": 2878,
																"isOffset": false,
																"isSlot": false,
																"src": "3381:9:19",
																"valueSize": 1
															},
															{
																"declaration": 2878,
																"isOffset": false,
																"isSlot": false,
																"src": "3524:9:19",
																"valueSize": 1
															},
															{
																"declaration": 2878,
																"isOffset": false,
																"isSlot": false,
																"src": "3579:9:19",
																"valueSize": 1
															},
															{
																"declaration": 2845,
																"isOffset": false,
																"isSlot": false,
																"src": "3401:1:19",
																"valueSize": 1
															},
															{
																"declaration": 2847,
																"isOffset": false,
																"isSlot": false,
																"src": "3404:1:19",
																"valueSize": 1
															}
														],
														"id": 2880,
														"nodeType": "InlineAssembly",
														"src": "3303:300:19"
													},
													{
														"assignments": [
															2882
														],
														"declarations": [
															{
																"constant": false,
																"id": 2882,
																"mutability": "mutable",
																"name": "twos",
																"nameLocation": "3918:4:19",
																"nodeType": "VariableDeclaration",
																"scope": 2963,
																"src": "3910:12:19",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2881,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "3910:7:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2890,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2889,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2883,
																"name": "denominator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2849,
																"src": "3925:11:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2887,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2885,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "UnaryOperation",
																			"operator": "~",
																			"prefix": true,
																			"src": "3940:12:19",
																			"subExpression": {
																				"id": 2884,
																				"name": "denominator",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2849,
																				"src": "3941:11:19",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "+",
																		"rightExpression": {
																			"hexValue": "31",
																			"id": 2886,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "3955:1:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "3940:16:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 2888,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "3939:18:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3925:32:19",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "3910:47:19"
													},
													{
														"AST": {
															"nodeType": "YulBlock",
															"src": "3980:362:19",
															"statements": [
																{
																	"nodeType": "YulAssignment",
																	"src": "4045:37:19",
																	"value": {
																		"arguments": [
																			{
																				"name": "denominator",
																				"nodeType": "YulIdentifier",
																				"src": "4064:11:19"
																			},
																			{
																				"name": "twos",
																				"nodeType": "YulIdentifier",
																				"src": "4077:4:19"
																			}
																		],
																		"functionName": {
																			"name": "div",
																			"nodeType": "YulIdentifier",
																			"src": "4060:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4060:22:19"
																	},
																	"variableNames": [
																		{
																			"name": "denominator",
																			"nodeType": "YulIdentifier",
																			"src": "4045:11:19"
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "4149:25:19",
																	"value": {
																		"arguments": [
																			{
																				"name": "prod0",
																				"nodeType": "YulIdentifier",
																				"src": "4162:5:19"
																			},
																			{
																				"name": "twos",
																				"nodeType": "YulIdentifier",
																				"src": "4169:4:19"
																			}
																		],
																		"functionName": {
																			"name": "div",
																			"nodeType": "YulIdentifier",
																			"src": "4158:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4158:16:19"
																	},
																	"variableNames": [
																		{
																			"name": "prod0",
																			"nodeType": "YulIdentifier",
																			"src": "4149:5:19"
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "4289:39:19",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "4309:1:19",
																								"type": "",
																								"value": "0"
																							},
																							{
																								"name": "twos",
																								"nodeType": "YulIdentifier",
																								"src": "4312:4:19"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "4305:3:19"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "4305:12:19"
																					},
																					{
																						"name": "twos",
																						"nodeType": "YulIdentifier",
																						"src": "4319:4:19"
																					}
																				],
																				"functionName": {
																					"name": "div",
																					"nodeType": "YulIdentifier",
																					"src": "4301:3:19"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4301:23:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4326:1:19",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4297:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4297:31:19"
																	},
																	"variableNames": [
																		{
																			"name": "twos",
																			"nodeType": "YulIdentifier",
																			"src": "4289:4:19"
																		}
																	]
																}
															]
														},
														"evmVersion": "london",
														"externalReferences": [
															{
																"declaration": 2849,
																"isOffset": false,
																"isSlot": false,
																"src": "4045:11:19",
																"valueSize": 1
															},
															{
																"declaration": 2849,
																"isOffset": false,
																"isSlot": false,
																"src": "4064:11:19",
																"valueSize": 1
															},
															{
																"declaration": 2855,
																"isOffset": false,
																"isSlot": false,
																"src": "4149:5:19",
																"valueSize": 1
															},
															{
																"declaration": 2855,
																"isOffset": false,
																"isSlot": false,
																"src": "4162:5:19",
																"valueSize": 1
															},
															{
																"declaration": 2882,
																"isOffset": false,
																"isSlot": false,
																"src": "4077:4:19",
																"valueSize": 1
															},
															{
																"declaration": 2882,
																"isOffset": false,
																"isSlot": false,
																"src": "4169:4:19",
																"valueSize": 1
															},
															{
																"declaration": 2882,
																"isOffset": false,
																"isSlot": false,
																"src": "4289:4:19",
																"valueSize": 1
															},
															{
																"declaration": 2882,
																"isOffset": false,
																"isSlot": false,
																"src": "4312:4:19",
																"valueSize": 1
															},
															{
																"declaration": 2882,
																"isOffset": false,
																"isSlot": false,
																"src": "4319:4:19",
																"valueSize": 1
															}
														],
														"id": 2891,
														"nodeType": "InlineAssembly",
														"src": "3971:371:19"
													},
													{
														"expression": {
															"id": 2896,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2892,
																"name": "prod0",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2855,
																"src": "4408:5:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "|=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2895,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2893,
																	"name": "prod1",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2858,
																	"src": "4417:5:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"id": 2894,
																	"name": "twos",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2882,
																	"src": "4425:4:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "4417:12:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4408:21:19",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2897,
														"nodeType": "ExpressionStatement",
														"src": "4408:21:19"
													},
													{
														"assignments": [
															2899
														],
														"declarations": [
															{
																"constant": false,
																"id": 2899,
																"mutability": "mutable",
																"name": "inverse",
																"nameLocation": "4755:7:19",
																"nodeType": "VariableDeclaration",
																"scope": 2963,
																"src": "4747:15:19",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2898,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "4747:7:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2906,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2905,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2902,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"hexValue": "33",
																			"id": 2900,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "4766:1:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_3_by_1",
																				"typeString": "int_const 3"
																			},
																			"value": "3"
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"id": 2901,
																			"name": "denominator",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2849,
																			"src": "4770:11:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "4766:15:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 2903,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "4765:17:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "^",
															"rightExpression": {
																"hexValue": "32",
																"id": 2904,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "4785:1:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_2_by_1",
																	"typeString": "int_const 2"
																},
																"value": "2"
															},
															"src": "4765:21:19",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "4747:39:19"
													},
													{
														"expression": {
															"id": 2913,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2907,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2899,
																"src": "5003:7:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2912,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 2908,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5014:1:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2911,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2909,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2849,
																		"src": "5018:11:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 2910,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2899,
																		"src": "5032:7:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "5018:21:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "5014:25:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5003:36:19",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2914,
														"nodeType": "ExpressionStatement",
														"src": "5003:36:19"
													},
													{
														"expression": {
															"id": 2921,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2915,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2899,
																"src": "5072:7:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2920,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 2916,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5083:1:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2919,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2917,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2849,
																		"src": "5087:11:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 2918,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2899,
																		"src": "5101:7:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "5087:21:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "5083:25:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5072:36:19",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2922,
														"nodeType": "ExpressionStatement",
														"src": "5072:36:19"
													},
													{
														"expression": {
															"id": 2929,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2923,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2899,
																"src": "5142:7:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2928,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 2924,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5153:1:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2927,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2925,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2849,
																		"src": "5157:11:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 2926,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2899,
																		"src": "5171:7:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "5157:21:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "5153:25:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5142:36:19",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2930,
														"nodeType": "ExpressionStatement",
														"src": "5142:36:19"
													},
													{
														"expression": {
															"id": 2937,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2931,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2899,
																"src": "5212:7:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2936,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 2932,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5223:1:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2935,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2933,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2849,
																		"src": "5227:11:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 2934,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2899,
																		"src": "5241:7:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "5227:21:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "5223:25:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5212:36:19",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2938,
														"nodeType": "ExpressionStatement",
														"src": "5212:36:19"
													},
													{
														"expression": {
															"id": 2945,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2939,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2899,
																"src": "5282:7:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2944,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 2940,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5293:1:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2943,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2941,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2849,
																		"src": "5297:11:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 2942,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2899,
																		"src": "5311:7:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "5297:21:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "5293:25:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5282:36:19",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2946,
														"nodeType": "ExpressionStatement",
														"src": "5282:36:19"
													},
													{
														"expression": {
															"id": 2953,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2947,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2899,
																"src": "5353:7:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2952,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 2948,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5364:1:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2951,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2949,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2849,
																		"src": "5368:11:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 2950,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2899,
																		"src": "5382:7:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "5368:21:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "5364:25:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5353:36:19",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2954,
														"nodeType": "ExpressionStatement",
														"src": "5353:36:19"
													},
													{
														"expression": {
															"id": 2959,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2955,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2852,
																"src": "5823:6:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2958,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2956,
																	"name": "prod0",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2855,
																	"src": "5832:5:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"id": 2957,
																	"name": "inverse",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2899,
																	"src": "5840:7:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "5832:15:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5823:24:19",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2960,
														"nodeType": "ExpressionStatement",
														"src": "5823:24:19"
													},
													{
														"expression": {
															"id": 2961,
															"name": "result",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2852,
															"src": "5868:6:19",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 2853,
														"id": 2962,
														"nodeType": "Return",
														"src": "5861:13:19"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2843,
										"nodeType": "StructuredDocumentation",
										"src": "1368:305:19",
										"text": " @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n with further edits by Uniswap Labs also under MIT license."
									},
									"id": 2965,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mulDiv",
									"nameLocation": "1687:6:19",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2850,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2845,
												"mutability": "mutable",
												"name": "x",
												"nameLocation": "1702:1:19",
												"nodeType": "VariableDeclaration",
												"scope": 2965,
												"src": "1694:9:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2844,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1694:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2847,
												"mutability": "mutable",
												"name": "y",
												"nameLocation": "1713:1:19",
												"nodeType": "VariableDeclaration",
												"scope": 2965,
												"src": "1705:9:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2846,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1705:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2849,
												"mutability": "mutable",
												"name": "denominator",
												"nameLocation": "1724:11:19",
												"nodeType": "VariableDeclaration",
												"scope": 2965,
												"src": "1716:19:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2848,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1716:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1693:43:19"
									},
									"returnParameters": {
										"id": 2853,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2852,
												"mutability": "mutable",
												"name": "result",
												"nameLocation": "1768:6:19",
												"nodeType": "VariableDeclaration",
												"scope": 2965,
												"src": "1760:14:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2851,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1760:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1759:16:19"
									},
									"scope": 3617,
									"src": "1678:4213:19",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3008,
										"nodeType": "Block",
										"src": "6133:189:19",
										"statements": [
											{
												"assignments": [
													2981
												],
												"declarations": [
													{
														"constant": false,
														"id": 2981,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "6151:6:19",
														"nodeType": "VariableDeclaration",
														"scope": 3008,
														"src": "6143:14:19",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2980,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "6143:7:19",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2987,
												"initialValue": {
													"arguments": [
														{
															"id": 2983,
															"name": "x",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2968,
															"src": "6167:1:19",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 2984,
															"name": "y",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2970,
															"src": "6170:1:19",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 2985,
															"name": "denominator",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2972,
															"src": "6173:11:19",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 2982,
														"name": "mulDiv",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															2965,
															3009
														],
														"referencedDeclaration": 2965,
														"src": "6160:6:19",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
														}
													},
													"id": 2986,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6160:25:19",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6143:42:19"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 2999,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_enum$_Rounding_$2758",
															"typeString": "enum MathUpgradeable.Rounding"
														},
														"id": 2991,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2988,
															"name": "rounding",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2975,
															"src": "6199:8:19",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_Rounding_$2758",
																"typeString": "enum MathUpgradeable.Rounding"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"expression": {
																"id": 2989,
																"name": "Rounding",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2758,
																"src": "6211:8:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_enum$_Rounding_$2758_$",
																	"typeString": "type(enum MathUpgradeable.Rounding)"
																}
															},
															"id": 2990,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberName": "Up",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2756,
															"src": "6211:11:19",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_Rounding_$2758",
																"typeString": "enum MathUpgradeable.Rounding"
															}
														},
														"src": "6199:23:19",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2998,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"arguments": [
																{
																	"id": 2993,
																	"name": "x",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2968,
																	"src": "6233:1:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 2994,
																	"name": "y",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2970,
																	"src": "6236:1:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 2995,
																	"name": "denominator",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2972,
																	"src": "6239:11:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 2992,
																"name": "mulmod",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967280,
																"src": "6226:6:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
																}
															},
															"id": 2996,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6226:25:19",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"hexValue": "30",
															"id": 2997,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6254:1:19",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "6226:29:19",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "6199:56:19",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 3005,
												"nodeType": "IfStatement",
												"src": "6195:98:19",
												"trueBody": {
													"id": 3004,
													"nodeType": "Block",
													"src": "6257:36:19",
													"statements": [
														{
															"expression": {
																"id": 3002,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 3000,
																	"name": "result",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2981,
																	"src": "6271:6:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "+=",
																"rightHandSide": {
																	"hexValue": "31",
																	"id": 3001,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "6281:1:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "6271:11:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 3003,
															"nodeType": "ExpressionStatement",
															"src": "6271:11:19"
														}
													]
												}
											},
											{
												"expression": {
													"id": 3006,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 2981,
													"src": "6309:6:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2979,
												"id": 3007,
												"nodeType": "Return",
												"src": "6302:13:19"
											}
										]
									},
									"documentation": {
										"id": 2966,
										"nodeType": "StructuredDocumentation",
										"src": "5897:121:19",
										"text": " @notice Calculates x * y / denominator with full precision, following the selected rounding direction."
									},
									"id": 3009,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mulDiv",
									"nameLocation": "6032:6:19",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2976,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2968,
												"mutability": "mutable",
												"name": "x",
												"nameLocation": "6047:1:19",
												"nodeType": "VariableDeclaration",
												"scope": 3009,
												"src": "6039:9:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2967,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6039:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2970,
												"mutability": "mutable",
												"name": "y",
												"nameLocation": "6058:1:19",
												"nodeType": "VariableDeclaration",
												"scope": 3009,
												"src": "6050:9:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2969,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6050:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2972,
												"mutability": "mutable",
												"name": "denominator",
												"nameLocation": "6069:11:19",
												"nodeType": "VariableDeclaration",
												"scope": 3009,
												"src": "6061:19:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2971,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6061:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2975,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "6091:8:19",
												"nodeType": "VariableDeclaration",
												"scope": 3009,
												"src": "6082:17:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$2758",
													"typeString": "enum MathUpgradeable.Rounding"
												},
												"typeName": {
													"id": 2974,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2973,
														"name": "Rounding",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2758,
														"src": "6082:8:19"
													},
													"referencedDeclaration": 2758,
													"src": "6082:8:19",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$2758",
														"typeString": "enum MathUpgradeable.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6038:62:19"
									},
									"returnParameters": {
										"id": 2979,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2978,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3009,
												"src": "6124:7:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2977,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6124:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6123:9:19"
									},
									"scope": 3617,
									"src": "6023:299:19",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3120,
										"nodeType": "Block",
										"src": "6598:1585:19",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 3019,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 3017,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3012,
														"src": "6612:1:19",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 3018,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "6617:1:19",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "6612:6:19",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 3023,
												"nodeType": "IfStatement",
												"src": "6608:45:19",
												"trueBody": {
													"id": 3022,
													"nodeType": "Block",
													"src": "6620:33:19",
													"statements": [
														{
															"expression": {
																"hexValue": "30",
																"id": 3020,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6641:1:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"functionReturnParameters": 3016,
															"id": 3021,
															"nodeType": "Return",
															"src": "6634:8:19"
														}
													]
												}
											},
											{
												"assignments": [
													3025
												],
												"declarations": [
													{
														"constant": false,
														"id": 3025,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "7340:6:19",
														"nodeType": "VariableDeclaration",
														"scope": 3120,
														"src": "7332:14:19",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 3024,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "7332:7:19",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3034,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 3033,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"hexValue": "31",
														"id": 3026,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "7349:1:19",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"nodeType": "BinaryOperation",
													"operator": "<<",
													"rightExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3031,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"arguments": [
																		{
																			"id": 3028,
																			"name": "a",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3012,
																			"src": "7360:1:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"id": 3027,
																		"name": "log2",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [
																			3289,
																			3325
																		],
																		"referencedDeclaration": 3289,
																		"src": "7355:4:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																			"typeString": "function (uint256) pure returns (uint256)"
																		}
																	},
																	"id": 3029,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "7355:7:19",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 3030,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7366:1:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "7355:12:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 3032,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "7354:14:19",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "7349:19:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7332:36:19"
											},
											{
												"id": 3119,
												"nodeType": "UncheckedBlock",
												"src": "7769:408:19",
												"statements": [
													{
														"expression": {
															"id": 3044,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 3035,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3025,
																"src": "7793:6:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3043,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 3040,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 3036,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3025,
																				"src": "7803:6:19",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 3039,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 3037,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3012,
																					"src": "7812:1:19",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 3038,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3025,
																					"src": "7816:6:19",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "7812:10:19",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "7803:19:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 3041,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "7802:21:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 3042,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7827:1:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "7802:26:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7793:35:19",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 3045,
														"nodeType": "ExpressionStatement",
														"src": "7793:35:19"
													},
													{
														"expression": {
															"id": 3055,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 3046,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3025,
																"src": "7842:6:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3054,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 3051,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 3047,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3025,
																				"src": "7852:6:19",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 3050,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 3048,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3012,
																					"src": "7861:1:19",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 3049,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3025,
																					"src": "7865:6:19",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "7861:10:19",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "7852:19:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 3052,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "7851:21:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 3053,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7876:1:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "7851:26:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7842:35:19",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 3056,
														"nodeType": "ExpressionStatement",
														"src": "7842:35:19"
													},
													{
														"expression": {
															"id": 3066,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 3057,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3025,
																"src": "7891:6:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3065,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 3062,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 3058,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3025,
																				"src": "7901:6:19",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 3061,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 3059,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3012,
																					"src": "7910:1:19",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 3060,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3025,
																					"src": "7914:6:19",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "7910:10:19",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "7901:19:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 3063,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "7900:21:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 3064,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7925:1:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "7900:26:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7891:35:19",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 3067,
														"nodeType": "ExpressionStatement",
														"src": "7891:35:19"
													},
													{
														"expression": {
															"id": 3077,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 3068,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3025,
																"src": "7940:6:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3076,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 3073,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 3069,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3025,
																				"src": "7950:6:19",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 3072,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 3070,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3012,
																					"src": "7959:1:19",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 3071,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3025,
																					"src": "7963:6:19",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "7959:10:19",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "7950:19:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 3074,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "7949:21:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 3075,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7974:1:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "7949:26:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7940:35:19",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 3078,
														"nodeType": "ExpressionStatement",
														"src": "7940:35:19"
													},
													{
														"expression": {
															"id": 3088,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 3079,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3025,
																"src": "7989:6:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3087,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 3084,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 3080,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3025,
																				"src": "7999:6:19",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 3083,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 3081,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3012,
																					"src": "8008:1:19",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 3082,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3025,
																					"src": "8012:6:19",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "8008:10:19",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "7999:19:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 3085,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "7998:21:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 3086,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8023:1:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "7998:26:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7989:35:19",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 3089,
														"nodeType": "ExpressionStatement",
														"src": "7989:35:19"
													},
													{
														"expression": {
															"id": 3099,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 3090,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3025,
																"src": "8038:6:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3098,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 3095,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 3091,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3025,
																				"src": "8048:6:19",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 3094,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 3092,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3012,
																					"src": "8057:1:19",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 3093,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3025,
																					"src": "8061:6:19",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "8057:10:19",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "8048:19:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 3096,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "8047:21:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 3097,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8072:1:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "8047:26:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "8038:35:19",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 3100,
														"nodeType": "ExpressionStatement",
														"src": "8038:35:19"
													},
													{
														"expression": {
															"id": 3110,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 3101,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3025,
																"src": "8087:6:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3109,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 3106,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 3102,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3025,
																				"src": "8097:6:19",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 3105,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 3103,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3012,
																					"src": "8106:1:19",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 3104,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3025,
																					"src": "8110:6:19",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "8106:10:19",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "8097:19:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 3107,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "8096:21:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 3108,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8121:1:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "8096:26:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "8087:35:19",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 3111,
														"nodeType": "ExpressionStatement",
														"src": "8087:35:19"
													},
													{
														"expression": {
															"arguments": [
																{
																	"id": 3113,
																	"name": "result",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3025,
																	"src": "8147:6:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 3116,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 3114,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3012,
																		"src": "8155:1:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "/",
																	"rightExpression": {
																		"id": 3115,
																		"name": "result",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3025,
																		"src": "8159:6:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "8155:10:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 3112,
																"name": "min",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2794,
																"src": "8143:3:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256,uint256) pure returns (uint256)"
																}
															},
															"id": 3117,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8143:23:19",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 3016,
														"id": 3118,
														"nodeType": "Return",
														"src": "8136:30:19"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 3010,
										"nodeType": "StructuredDocumentation",
										"src": "6328:208:19",
										"text": " @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11)."
									},
									"id": 3121,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sqrt",
									"nameLocation": "6550:4:19",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3013,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3012,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "6563:1:19",
												"nodeType": "VariableDeclaration",
												"scope": 3121,
												"src": "6555:9:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3011,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6555:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6554:11:19"
									},
									"returnParameters": {
										"id": 3016,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3015,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3121,
												"src": "6589:7:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3014,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6589:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6588:9:19"
									},
									"scope": 3617,
									"src": "6541:1642:19",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3156,
										"nodeType": "Block",
										"src": "8359:161:19",
										"statements": [
											{
												"id": 3155,
												"nodeType": "UncheckedBlock",
												"src": "8369:145:19",
												"statements": [
													{
														"assignments": [
															3133
														],
														"declarations": [
															{
																"constant": false,
																"id": 3133,
																"mutability": "mutable",
																"name": "result",
																"nameLocation": "8401:6:19",
																"nodeType": "VariableDeclaration",
																"scope": 3155,
																"src": "8393:14:19",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 3132,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "8393:7:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 3137,
														"initialValue": {
															"arguments": [
																{
																	"id": 3135,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3124,
																	"src": "8415:1:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 3134,
																"name": "sqrt",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	3121,
																	3157
																],
																"referencedDeclaration": 3121,
																"src": "8410:4:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256) pure returns (uint256)"
																}
															},
															"id": 3136,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8410:7:19",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "8393:24:19"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3153,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3138,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3133,
																"src": "8438:6:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"components": [
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 3148,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"commonType": {
																					"typeIdentifier": "t_enum$_Rounding_$2758",
																					"typeString": "enum MathUpgradeable.Rounding"
																				},
																				"id": 3142,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 3139,
																					"name": "rounding",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3127,
																					"src": "8448:8:19",
																					"typeDescriptions": {
																						"typeIdentifier": "t_enum$_Rounding_$2758",
																						"typeString": "enum MathUpgradeable.Rounding"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "==",
																				"rightExpression": {
																					"expression": {
																						"id": 3140,
																						"name": "Rounding",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2758,
																						"src": "8460:8:19",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_enum$_Rounding_$2758_$",
																							"typeString": "type(enum MathUpgradeable.Rounding)"
																						}
																					},
																					"id": 3141,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"memberName": "Up",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 2756,
																					"src": "8460:11:19",
																					"typeDescriptions": {
																						"typeIdentifier": "t_enum$_Rounding_$2758",
																						"typeString": "enum MathUpgradeable.Rounding"
																					}
																				},
																				"src": "8448:23:19",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "&&",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 3147,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 3145,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"id": 3143,
																						"name": "result",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 3133,
																						"src": "8475:6:19",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "*",
																					"rightExpression": {
																						"id": 3144,
																						"name": "result",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 3133,
																						"src": "8484:6:19",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "8475:15:19",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 3146,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3124,
																					"src": "8493:1:19",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "8475:19:19",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "8448:46:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"hexValue": "30",
																			"id": 3150,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8501:1:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"id": 3151,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "8448:54:19",
																		"trueExpression": {
																			"hexValue": "31",
																			"id": 3149,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8497:1:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"id": 3152,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "8447:56:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"src": "8438:65:19",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 3131,
														"id": 3154,
														"nodeType": "Return",
														"src": "8431:72:19"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 3122,
										"nodeType": "StructuredDocumentation",
										"src": "8189:89:19",
										"text": " @notice Calculates sqrt(a), following the selected rounding direction."
									},
									"id": 3157,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sqrt",
									"nameLocation": "8292:4:19",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3128,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3124,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "8305:1:19",
												"nodeType": "VariableDeclaration",
												"scope": 3157,
												"src": "8297:9:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3123,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8297:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3127,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "8317:8:19",
												"nodeType": "VariableDeclaration",
												"scope": 3157,
												"src": "8308:17:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$2758",
													"typeString": "enum MathUpgradeable.Rounding"
												},
												"typeName": {
													"id": 3126,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3125,
														"name": "Rounding",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2758,
														"src": "8308:8:19"
													},
													"referencedDeclaration": 2758,
													"src": "8308:8:19",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$2758",
														"typeString": "enum MathUpgradeable.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8296:30:19"
									},
									"returnParameters": {
										"id": 3131,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3130,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3157,
												"src": "8350:7:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3129,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8350:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8349:9:19"
									},
									"scope": 3617,
									"src": "8283:237:19",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3288,
										"nodeType": "Block",
										"src": "8705:922:19",
										"statements": [
											{
												"assignments": [
													3166
												],
												"declarations": [
													{
														"constant": false,
														"id": 3166,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "8723:6:19",
														"nodeType": "VariableDeclaration",
														"scope": 3288,
														"src": "8715:14:19",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 3165,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "8715:7:19",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3168,
												"initialValue": {
													"hexValue": "30",
													"id": 3167,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "8732:1:19",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8715:18:19"
											},
											{
												"id": 3285,
												"nodeType": "UncheckedBlock",
												"src": "8743:855:19",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3173,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3171,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3169,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3160,
																	"src": "8771:5:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "313238",
																	"id": 3170,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8780:3:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_128_by_1",
																		"typeString": "int_const 128"
																	},
																	"value": "128"
																},
																"src": "8771:12:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3172,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8786:1:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "8771:16:19",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3183,
														"nodeType": "IfStatement",
														"src": "8767:99:19",
														"trueBody": {
															"id": 3182,
															"nodeType": "Block",
															"src": "8789:77:19",
															"statements": [
																{
																	"expression": {
																		"id": 3176,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3174,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3160,
																			"src": "8807:5:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "313238",
																			"id": 3175,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8817:3:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_128_by_1",
																				"typeString": "int_const 128"
																			},
																			"value": "128"
																		},
																		"src": "8807:13:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3177,
																	"nodeType": "ExpressionStatement",
																	"src": "8807:13:19"
																},
																{
																	"expression": {
																		"id": 3180,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3178,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3166,
																			"src": "8838:6:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "313238",
																			"id": 3179,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8848:3:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_128_by_1",
																				"typeString": "int_const 128"
																			},
																			"value": "128"
																		},
																		"src": "8838:13:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3181,
																	"nodeType": "ExpressionStatement",
																	"src": "8838:13:19"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3188,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3186,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3184,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3160,
																	"src": "8883:5:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3634",
																	"id": 3185,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8892:2:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_64_by_1",
																		"typeString": "int_const 64"
																	},
																	"value": "64"
																},
																"src": "8883:11:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3187,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8897:1:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "8883:15:19",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3198,
														"nodeType": "IfStatement",
														"src": "8879:96:19",
														"trueBody": {
															"id": 3197,
															"nodeType": "Block",
															"src": "8900:75:19",
															"statements": [
																{
																	"expression": {
																		"id": 3191,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3189,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3160,
																			"src": "8918:5:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3634",
																			"id": 3190,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8928:2:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_64_by_1",
																				"typeString": "int_const 64"
																			},
																			"value": "64"
																		},
																		"src": "8918:12:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3192,
																	"nodeType": "ExpressionStatement",
																	"src": "8918:12:19"
																},
																{
																	"expression": {
																		"id": 3195,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3193,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3166,
																			"src": "8948:6:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3634",
																			"id": 3194,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8958:2:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_64_by_1",
																				"typeString": "int_const 64"
																			},
																			"value": "64"
																		},
																		"src": "8948:12:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3196,
																	"nodeType": "ExpressionStatement",
																	"src": "8948:12:19"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3203,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3201,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3199,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3160,
																	"src": "8992:5:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3332",
																	"id": 3200,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9001:2:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_32_by_1",
																		"typeString": "int_const 32"
																	},
																	"value": "32"
																},
																"src": "8992:11:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3202,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "9006:1:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "8992:15:19",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3213,
														"nodeType": "IfStatement",
														"src": "8988:96:19",
														"trueBody": {
															"id": 3212,
															"nodeType": "Block",
															"src": "9009:75:19",
															"statements": [
																{
																	"expression": {
																		"id": 3206,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3204,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3160,
																			"src": "9027:5:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3332",
																			"id": 3205,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9037:2:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_32_by_1",
																				"typeString": "int_const 32"
																			},
																			"value": "32"
																		},
																		"src": "9027:12:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3207,
																	"nodeType": "ExpressionStatement",
																	"src": "9027:12:19"
																},
																{
																	"expression": {
																		"id": 3210,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3208,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3166,
																			"src": "9057:6:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3332",
																			"id": 3209,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9067:2:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_32_by_1",
																				"typeString": "int_const 32"
																			},
																			"value": "32"
																		},
																		"src": "9057:12:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3211,
																	"nodeType": "ExpressionStatement",
																	"src": "9057:12:19"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3218,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3216,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3214,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3160,
																	"src": "9101:5:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3136",
																	"id": 3215,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9110:2:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_16_by_1",
																		"typeString": "int_const 16"
																	},
																	"value": "16"
																},
																"src": "9101:11:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3217,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "9115:1:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "9101:15:19",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3228,
														"nodeType": "IfStatement",
														"src": "9097:96:19",
														"trueBody": {
															"id": 3227,
															"nodeType": "Block",
															"src": "9118:75:19",
															"statements": [
																{
																	"expression": {
																		"id": 3221,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3219,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3160,
																			"src": "9136:5:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 3220,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9146:2:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "9136:12:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3222,
																	"nodeType": "ExpressionStatement",
																	"src": "9136:12:19"
																},
																{
																	"expression": {
																		"id": 3225,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3223,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3166,
																			"src": "9166:6:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 3224,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9176:2:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "9166:12:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3226,
																	"nodeType": "ExpressionStatement",
																	"src": "9166:12:19"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3233,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3231,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3229,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3160,
																	"src": "9210:5:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "38",
																	"id": 3230,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9219:1:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_8_by_1",
																		"typeString": "int_const 8"
																	},
																	"value": "8"
																},
																"src": "9210:10:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3232,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "9223:1:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "9210:14:19",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3243,
														"nodeType": "IfStatement",
														"src": "9206:93:19",
														"trueBody": {
															"id": 3242,
															"nodeType": "Block",
															"src": "9226:73:19",
															"statements": [
																{
																	"expression": {
																		"id": 3236,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3234,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3160,
																			"src": "9244:5:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "38",
																			"id": 3235,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9254:1:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_8_by_1",
																				"typeString": "int_const 8"
																			},
																			"value": "8"
																		},
																		"src": "9244:11:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3237,
																	"nodeType": "ExpressionStatement",
																	"src": "9244:11:19"
																},
																{
																	"expression": {
																		"id": 3240,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3238,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3166,
																			"src": "9273:6:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "38",
																			"id": 3239,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9283:1:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_8_by_1",
																				"typeString": "int_const 8"
																			},
																			"value": "8"
																		},
																		"src": "9273:11:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3241,
																	"nodeType": "ExpressionStatement",
																	"src": "9273:11:19"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3248,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3246,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3244,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3160,
																	"src": "9316:5:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "34",
																	"id": 3245,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9325:1:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_4_by_1",
																		"typeString": "int_const 4"
																	},
																	"value": "4"
																},
																"src": "9316:10:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3247,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "9329:1:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "9316:14:19",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3258,
														"nodeType": "IfStatement",
														"src": "9312:93:19",
														"trueBody": {
															"id": 3257,
															"nodeType": "Block",
															"src": "9332:73:19",
															"statements": [
																{
																	"expression": {
																		"id": 3251,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3249,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3160,
																			"src": "9350:5:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "34",
																			"id": 3250,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9360:1:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_4_by_1",
																				"typeString": "int_const 4"
																			},
																			"value": "4"
																		},
																		"src": "9350:11:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3252,
																	"nodeType": "ExpressionStatement",
																	"src": "9350:11:19"
																},
																{
																	"expression": {
																		"id": 3255,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3253,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3166,
																			"src": "9379:6:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "34",
																			"id": 3254,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9389:1:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_4_by_1",
																				"typeString": "int_const 4"
																			},
																			"value": "4"
																		},
																		"src": "9379:11:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3256,
																	"nodeType": "ExpressionStatement",
																	"src": "9379:11:19"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3263,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3261,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3259,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3160,
																	"src": "9422:5:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "32",
																	"id": 3260,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9431:1:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"src": "9422:10:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3262,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "9435:1:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "9422:14:19",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3273,
														"nodeType": "IfStatement",
														"src": "9418:93:19",
														"trueBody": {
															"id": 3272,
															"nodeType": "Block",
															"src": "9438:73:19",
															"statements": [
																{
																	"expression": {
																		"id": 3266,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3264,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3160,
																			"src": "9456:5:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "32",
																			"id": 3265,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9466:1:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_2_by_1",
																				"typeString": "int_const 2"
																			},
																			"value": "2"
																		},
																		"src": "9456:11:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3267,
																	"nodeType": "ExpressionStatement",
																	"src": "9456:11:19"
																},
																{
																	"expression": {
																		"id": 3270,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3268,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3166,
																			"src": "9485:6:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "32",
																			"id": 3269,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9495:1:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_2_by_1",
																				"typeString": "int_const 2"
																			},
																			"value": "2"
																		},
																		"src": "9485:11:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3271,
																	"nodeType": "ExpressionStatement",
																	"src": "9485:11:19"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3278,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3276,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3274,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3160,
																	"src": "9528:5:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 3275,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9537:1:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "9528:10:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3277,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "9541:1:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "9528:14:19",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3284,
														"nodeType": "IfStatement",
														"src": "9524:64:19",
														"trueBody": {
															"id": 3283,
															"nodeType": "Block",
															"src": "9544:44:19",
															"statements": [
																{
																	"expression": {
																		"id": 3281,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3279,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3166,
																			"src": "9562:6:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "31",
																			"id": 3280,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9572:1:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "9562:11:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3282,
																	"nodeType": "ExpressionStatement",
																	"src": "9562:11:19"
																}
															]
														}
													}
												]
											},
											{
												"expression": {
													"id": 3286,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 3166,
													"src": "9614:6:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 3164,
												"id": 3287,
												"nodeType": "Return",
												"src": "9607:13:19"
											}
										]
									},
									"documentation": {
										"id": 3158,
										"nodeType": "StructuredDocumentation",
										"src": "8526:113:19",
										"text": " @dev Return the log in base 2, rounded down, of a positive value.\n Returns 0 if given 0."
									},
									"id": 3289,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log2",
									"nameLocation": "8653:4:19",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3161,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3160,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "8666:5:19",
												"nodeType": "VariableDeclaration",
												"scope": 3289,
												"src": "8658:13:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3159,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8658:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8657:15:19"
									},
									"returnParameters": {
										"id": 3164,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3163,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3289,
												"src": "8696:7:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3162,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8696:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8695:9:19"
									},
									"scope": 3617,
									"src": "8644:983:19",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3324,
										"nodeType": "Block",
										"src": "9860:165:19",
										"statements": [
											{
												"id": 3323,
												"nodeType": "UncheckedBlock",
												"src": "9870:149:19",
												"statements": [
													{
														"assignments": [
															3301
														],
														"declarations": [
															{
																"constant": false,
																"id": 3301,
																"mutability": "mutable",
																"name": "result",
																"nameLocation": "9902:6:19",
																"nodeType": "VariableDeclaration",
																"scope": 3323,
																"src": "9894:14:19",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 3300,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "9894:7:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 3305,
														"initialValue": {
															"arguments": [
																{
																	"id": 3303,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3292,
																	"src": "9916:5:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 3302,
																"name": "log2",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	3289,
																	3325
																],
																"referencedDeclaration": 3289,
																"src": "9911:4:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256) pure returns (uint256)"
																}
															},
															"id": 3304,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9911:11:19",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "9894:28:19"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3321,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3306,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3301,
																"src": "9943:6:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"components": [
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 3316,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"commonType": {
																					"typeIdentifier": "t_enum$_Rounding_$2758",
																					"typeString": "enum MathUpgradeable.Rounding"
																				},
																				"id": 3310,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 3307,
																					"name": "rounding",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3295,
																					"src": "9953:8:19",
																					"typeDescriptions": {
																						"typeIdentifier": "t_enum$_Rounding_$2758",
																						"typeString": "enum MathUpgradeable.Rounding"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "==",
																				"rightExpression": {
																					"expression": {
																						"id": 3308,
																						"name": "Rounding",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2758,
																						"src": "9965:8:19",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_enum$_Rounding_$2758_$",
																							"typeString": "type(enum MathUpgradeable.Rounding)"
																						}
																					},
																					"id": 3309,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"memberName": "Up",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 2756,
																					"src": "9965:11:19",
																					"typeDescriptions": {
																						"typeIdentifier": "t_enum$_Rounding_$2758",
																						"typeString": "enum MathUpgradeable.Rounding"
																					}
																				},
																				"src": "9953:23:19",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "&&",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 3315,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 3313,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"hexValue": "31",
																						"id": 3311,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "9980:1:19",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_1_by_1",
																							"typeString": "int_const 1"
																						},
																						"value": "1"
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "<<",
																					"rightExpression": {
																						"id": 3312,
																						"name": "result",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 3301,
																						"src": "9985:6:19",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "9980:11:19",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 3314,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3292,
																					"src": "9994:5:19",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "9980:19:19",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "9953:46:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"hexValue": "30",
																			"id": 3318,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10006:1:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"id": 3319,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "9953:54:19",
																		"trueExpression": {
																			"hexValue": "31",
																			"id": 3317,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10002:1:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"id": 3320,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "9952:56:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"src": "9943:65:19",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 3299,
														"id": 3322,
														"nodeType": "Return",
														"src": "9936:72:19"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 3290,
										"nodeType": "StructuredDocumentation",
										"src": "9633:142:19",
										"text": " @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."
									},
									"id": 3325,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log2",
									"nameLocation": "9789:4:19",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3296,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3292,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "9802:5:19",
												"nodeType": "VariableDeclaration",
												"scope": 3325,
												"src": "9794:13:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3291,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9794:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3295,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "9818:8:19",
												"nodeType": "VariableDeclaration",
												"scope": 3325,
												"src": "9809:17:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$2758",
													"typeString": "enum MathUpgradeable.Rounding"
												},
												"typeName": {
													"id": 3294,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3293,
														"name": "Rounding",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2758,
														"src": "9809:8:19"
													},
													"referencedDeclaration": 2758,
													"src": "9809:8:19",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$2758",
														"typeString": "enum MathUpgradeable.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9793:34:19"
									},
									"returnParameters": {
										"id": 3299,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3298,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3325,
												"src": "9851:7:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3297,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9851:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9850:9:19"
									},
									"scope": 3617,
									"src": "9780:245:19",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3453,
										"nodeType": "Block",
										"src": "10212:854:19",
										"statements": [
											{
												"assignments": [
													3334
												],
												"declarations": [
													{
														"constant": false,
														"id": 3334,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "10230:6:19",
														"nodeType": "VariableDeclaration",
														"scope": 3453,
														"src": "10222:14:19",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 3333,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "10222:7:19",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3336,
												"initialValue": {
													"hexValue": "30",
													"id": 3335,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "10239:1:19",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "10222:18:19"
											},
											{
												"id": 3450,
												"nodeType": "UncheckedBlock",
												"src": "10250:787:19",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3341,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3337,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3328,
																"src": "10278:5:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1",
																	"typeString": "int_const 1000...(57 digits omitted)...0000"
																},
																"id": 3340,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 3338,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10287:2:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "3634",
																	"id": 3339,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10293:2:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_64_by_1",
																		"typeString": "int_const 64"
																	},
																	"value": "64"
																},
																"src": "10287:8:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1",
																	"typeString": "int_const 1000...(57 digits omitted)...0000"
																}
															},
															"src": "10278:17:19",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3353,
														"nodeType": "IfStatement",
														"src": "10274:103:19",
														"trueBody": {
															"id": 3352,
															"nodeType": "Block",
															"src": "10297:80:19",
															"statements": [
																{
																	"expression": {
																		"id": 3346,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3342,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3328,
																			"src": "10315:5:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1",
																				"typeString": "int_const 1000...(57 digits omitted)...0000"
																			},
																			"id": 3345,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 3343,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10324:2:19",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "3634",
																				"id": 3344,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10330:2:19",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_64_by_1",
																					"typeString": "int_const 64"
																				},
																				"value": "64"
																			},
																			"src": "10324:8:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1",
																				"typeString": "int_const 1000...(57 digits omitted)...0000"
																			}
																		},
																		"src": "10315:17:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3347,
																	"nodeType": "ExpressionStatement",
																	"src": "10315:17:19"
																},
																{
																	"expression": {
																		"id": 3350,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3348,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3334,
																			"src": "10350:6:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3634",
																			"id": 3349,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10360:2:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_64_by_1",
																				"typeString": "int_const 64"
																			},
																			"value": "64"
																		},
																		"src": "10350:12:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3351,
																	"nodeType": "ExpressionStatement",
																	"src": "10350:12:19"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3358,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3354,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3328,
																"src": "10394:5:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_100000000000000000000000000000000_by_1",
																	"typeString": "int_const 1000...(25 digits omitted)...0000"
																},
																"id": 3357,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 3355,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10403:2:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "3332",
																	"id": 3356,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10409:2:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_32_by_1",
																		"typeString": "int_const 32"
																	},
																	"value": "32"
																},
																"src": "10403:8:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_100000000000000000000000000000000_by_1",
																	"typeString": "int_const 1000...(25 digits omitted)...0000"
																}
															},
															"src": "10394:17:19",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3370,
														"nodeType": "IfStatement",
														"src": "10390:103:19",
														"trueBody": {
															"id": 3369,
															"nodeType": "Block",
															"src": "10413:80:19",
															"statements": [
																{
																	"expression": {
																		"id": 3363,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3359,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3328,
																			"src": "10431:5:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_100000000000000000000000000000000_by_1",
																				"typeString": "int_const 1000...(25 digits omitted)...0000"
																			},
																			"id": 3362,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 3360,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10440:2:19",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "3332",
																				"id": 3361,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10446:2:19",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_32_by_1",
																					"typeString": "int_const 32"
																				},
																				"value": "32"
																			},
																			"src": "10440:8:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_100000000000000000000000000000000_by_1",
																				"typeString": "int_const 1000...(25 digits omitted)...0000"
																			}
																		},
																		"src": "10431:17:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3364,
																	"nodeType": "ExpressionStatement",
																	"src": "10431:17:19"
																},
																{
																	"expression": {
																		"id": 3367,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3365,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3334,
																			"src": "10466:6:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3332",
																			"id": 3366,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10476:2:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_32_by_1",
																				"typeString": "int_const 32"
																			},
																			"value": "32"
																		},
																		"src": "10466:12:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3368,
																	"nodeType": "ExpressionStatement",
																	"src": "10466:12:19"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3375,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3371,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3328,
																"src": "10510:5:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_10000000000000000_by_1",
																	"typeString": "int_const 10000000000000000"
																},
																"id": 3374,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 3372,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10519:2:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "3136",
																	"id": 3373,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10525:2:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_16_by_1",
																		"typeString": "int_const 16"
																	},
																	"value": "16"
																},
																"src": "10519:8:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10000000000000000_by_1",
																	"typeString": "int_const 10000000000000000"
																}
															},
															"src": "10510:17:19",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3387,
														"nodeType": "IfStatement",
														"src": "10506:103:19",
														"trueBody": {
															"id": 3386,
															"nodeType": "Block",
															"src": "10529:80:19",
															"statements": [
																{
																	"expression": {
																		"id": 3380,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3376,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3328,
																			"src": "10547:5:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_10000000000000000_by_1",
																				"typeString": "int_const 10000000000000000"
																			},
																			"id": 3379,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 3377,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10556:2:19",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "3136",
																				"id": 3378,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10562:2:19",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_16_by_1",
																					"typeString": "int_const 16"
																				},
																				"value": "16"
																			},
																			"src": "10556:8:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_10000000000000000_by_1",
																				"typeString": "int_const 10000000000000000"
																			}
																		},
																		"src": "10547:17:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3381,
																	"nodeType": "ExpressionStatement",
																	"src": "10547:17:19"
																},
																{
																	"expression": {
																		"id": 3384,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3382,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3334,
																			"src": "10582:6:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 3383,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10592:2:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "10582:12:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3385,
																	"nodeType": "ExpressionStatement",
																	"src": "10582:12:19"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3392,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3388,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3328,
																"src": "10626:5:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_100000000_by_1",
																	"typeString": "int_const 100000000"
																},
																"id": 3391,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 3389,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10635:2:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "38",
																	"id": 3390,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10641:1:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_8_by_1",
																		"typeString": "int_const 8"
																	},
																	"value": "8"
																},
																"src": "10635:7:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_100000000_by_1",
																	"typeString": "int_const 100000000"
																}
															},
															"src": "10626:16:19",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3404,
														"nodeType": "IfStatement",
														"src": "10622:100:19",
														"trueBody": {
															"id": 3403,
															"nodeType": "Block",
															"src": "10644:78:19",
															"statements": [
																{
																	"expression": {
																		"id": 3397,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3393,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3328,
																			"src": "10662:5:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_100000000_by_1",
																				"typeString": "int_const 100000000"
																			},
																			"id": 3396,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 3394,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10671:2:19",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "38",
																				"id": 3395,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10677:1:19",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_8_by_1",
																					"typeString": "int_const 8"
																				},
																				"value": "8"
																			},
																			"src": "10671:7:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_100000000_by_1",
																				"typeString": "int_const 100000000"
																			}
																		},
																		"src": "10662:16:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3398,
																	"nodeType": "ExpressionStatement",
																	"src": "10662:16:19"
																},
																{
																	"expression": {
																		"id": 3401,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3399,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3334,
																			"src": "10696:6:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "38",
																			"id": 3400,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10706:1:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_8_by_1",
																				"typeString": "int_const 8"
																			},
																			"value": "8"
																		},
																		"src": "10696:11:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3402,
																	"nodeType": "ExpressionStatement",
																	"src": "10696:11:19"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3409,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3405,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3328,
																"src": "10739:5:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_10000_by_1",
																	"typeString": "int_const 10000"
																},
																"id": 3408,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 3406,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10748:2:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "34",
																	"id": 3407,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10754:1:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_4_by_1",
																		"typeString": "int_const 4"
																	},
																	"value": "4"
																},
																"src": "10748:7:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10000_by_1",
																	"typeString": "int_const 10000"
																}
															},
															"src": "10739:16:19",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3421,
														"nodeType": "IfStatement",
														"src": "10735:100:19",
														"trueBody": {
															"id": 3420,
															"nodeType": "Block",
															"src": "10757:78:19",
															"statements": [
																{
																	"expression": {
																		"id": 3414,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3410,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3328,
																			"src": "10775:5:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_10000_by_1",
																				"typeString": "int_const 10000"
																			},
																			"id": 3413,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 3411,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10784:2:19",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "34",
																				"id": 3412,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10790:1:19",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_4_by_1",
																					"typeString": "int_const 4"
																				},
																				"value": "4"
																			},
																			"src": "10784:7:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_10000_by_1",
																				"typeString": "int_const 10000"
																			}
																		},
																		"src": "10775:16:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3415,
																	"nodeType": "ExpressionStatement",
																	"src": "10775:16:19"
																},
																{
																	"expression": {
																		"id": 3418,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3416,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3334,
																			"src": "10809:6:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "34",
																			"id": 3417,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10819:1:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_4_by_1",
																				"typeString": "int_const 4"
																			},
																			"value": "4"
																		},
																		"src": "10809:11:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3419,
																	"nodeType": "ExpressionStatement",
																	"src": "10809:11:19"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3426,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3422,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3328,
																"src": "10852:5:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_100_by_1",
																	"typeString": "int_const 100"
																},
																"id": 3425,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 3423,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10861:2:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "32",
																	"id": 3424,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10867:1:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"src": "10861:7:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_100_by_1",
																	"typeString": "int_const 100"
																}
															},
															"src": "10852:16:19",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3438,
														"nodeType": "IfStatement",
														"src": "10848:100:19",
														"trueBody": {
															"id": 3437,
															"nodeType": "Block",
															"src": "10870:78:19",
															"statements": [
																{
																	"expression": {
																		"id": 3431,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3427,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3328,
																			"src": "10888:5:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_100_by_1",
																				"typeString": "int_const 100"
																			},
																			"id": 3430,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 3428,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10897:2:19",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "32",
																				"id": 3429,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10903:1:19",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_2_by_1",
																					"typeString": "int_const 2"
																				},
																				"value": "2"
																			},
																			"src": "10897:7:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_100_by_1",
																				"typeString": "int_const 100"
																			}
																		},
																		"src": "10888:16:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3432,
																	"nodeType": "ExpressionStatement",
																	"src": "10888:16:19"
																},
																{
																	"expression": {
																		"id": 3435,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3433,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3334,
																			"src": "10922:6:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "32",
																			"id": 3434,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10932:1:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_2_by_1",
																				"typeString": "int_const 2"
																			},
																			"value": "2"
																		},
																		"src": "10922:11:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3436,
																	"nodeType": "ExpressionStatement",
																	"src": "10922:11:19"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3443,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3439,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3328,
																"src": "10965:5:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_10_by_1",
																	"typeString": "int_const 10"
																},
																"id": 3442,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 3440,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10974:2:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 3441,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10980:1:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "10974:7:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10_by_1",
																	"typeString": "int_const 10"
																}
															},
															"src": "10965:16:19",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3449,
														"nodeType": "IfStatement",
														"src": "10961:66:19",
														"trueBody": {
															"id": 3448,
															"nodeType": "Block",
															"src": "10983:44:19",
															"statements": [
																{
																	"expression": {
																		"id": 3446,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3444,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3334,
																			"src": "11001:6:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "31",
																			"id": 3445,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11011:1:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "11001:11:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3447,
																	"nodeType": "ExpressionStatement",
																	"src": "11001:11:19"
																}
															]
														}
													}
												]
											},
											{
												"expression": {
													"id": 3451,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 3334,
													"src": "11053:6:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 3332,
												"id": 3452,
												"nodeType": "Return",
												"src": "11046:13:19"
											}
										]
									},
									"documentation": {
										"id": 3326,
										"nodeType": "StructuredDocumentation",
										"src": "10031:114:19",
										"text": " @dev Return the log in base 10, rounded down, of a positive value.\n Returns 0 if given 0."
									},
									"id": 3454,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log10",
									"nameLocation": "10159:5:19",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3329,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3328,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "10173:5:19",
												"nodeType": "VariableDeclaration",
												"scope": 3454,
												"src": "10165:13:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3327,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10165:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10164:15:19"
									},
									"returnParameters": {
										"id": 3332,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3331,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3454,
												"src": "10203:7:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3330,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10203:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10202:9:19"
									},
									"scope": 3617,
									"src": "10150:916:19",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3489,
										"nodeType": "Block",
										"src": "11301:167:19",
										"statements": [
											{
												"id": 3488,
												"nodeType": "UncheckedBlock",
												"src": "11311:151:19",
												"statements": [
													{
														"assignments": [
															3466
														],
														"declarations": [
															{
																"constant": false,
																"id": 3466,
																"mutability": "mutable",
																"name": "result",
																"nameLocation": "11343:6:19",
																"nodeType": "VariableDeclaration",
																"scope": 3488,
																"src": "11335:14:19",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 3465,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "11335:7:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 3470,
														"initialValue": {
															"arguments": [
																{
																	"id": 3468,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3457,
																	"src": "11358:5:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 3467,
																"name": "log10",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	3454,
																	3490
																],
																"referencedDeclaration": 3454,
																"src": "11352:5:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256) pure returns (uint256)"
																}
															},
															"id": 3469,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "11352:12:19",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "11335:29:19"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3486,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3471,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3466,
																"src": "11385:6:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"components": [
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 3481,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"commonType": {
																					"typeIdentifier": "t_enum$_Rounding_$2758",
																					"typeString": "enum MathUpgradeable.Rounding"
																				},
																				"id": 3475,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 3472,
																					"name": "rounding",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3460,
																					"src": "11395:8:19",
																					"typeDescriptions": {
																						"typeIdentifier": "t_enum$_Rounding_$2758",
																						"typeString": "enum MathUpgradeable.Rounding"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "==",
																				"rightExpression": {
																					"expression": {
																						"id": 3473,
																						"name": "Rounding",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2758,
																						"src": "11407:8:19",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_enum$_Rounding_$2758_$",
																							"typeString": "type(enum MathUpgradeable.Rounding)"
																						}
																					},
																					"id": 3474,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"memberName": "Up",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 2756,
																					"src": "11407:11:19",
																					"typeDescriptions": {
																						"typeIdentifier": "t_enum$_Rounding_$2758",
																						"typeString": "enum MathUpgradeable.Rounding"
																					}
																				},
																				"src": "11395:23:19",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "&&",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 3480,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 3478,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"hexValue": "3130",
																						"id": 3476,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "11422:2:19",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_10_by_1",
																							"typeString": "int_const 10"
																						},
																						"value": "10"
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "**",
																					"rightExpression": {
																						"id": 3477,
																						"name": "result",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 3466,
																						"src": "11428:6:19",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "11422:12:19",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 3479,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3457,
																					"src": "11437:5:19",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "11422:20:19",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "11395:47:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"hexValue": "30",
																			"id": 3483,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11449:1:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"id": 3484,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "11395:55:19",
																		"trueExpression": {
																			"hexValue": "31",
																			"id": 3482,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11445:1:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"id": 3485,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "11394:57:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"src": "11385:66:19",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 3464,
														"id": 3487,
														"nodeType": "Return",
														"src": "11378:73:19"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 3455,
										"nodeType": "StructuredDocumentation",
										"src": "11072:143:19",
										"text": " @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."
									},
									"id": 3490,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log10",
									"nameLocation": "11229:5:19",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3461,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3457,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "11243:5:19",
												"nodeType": "VariableDeclaration",
												"scope": 3490,
												"src": "11235:13:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3456,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11235:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3460,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "11259:8:19",
												"nodeType": "VariableDeclaration",
												"scope": 3490,
												"src": "11250:17:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$2758",
													"typeString": "enum MathUpgradeable.Rounding"
												},
												"typeName": {
													"id": 3459,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3458,
														"name": "Rounding",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2758,
														"src": "11250:8:19"
													},
													"referencedDeclaration": 2758,
													"src": "11250:8:19",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$2758",
														"typeString": "enum MathUpgradeable.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11234:34:19"
									},
									"returnParameters": {
										"id": 3464,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3463,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3490,
												"src": "11292:7:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3462,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11292:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11291:9:19"
									},
									"scope": 3617,
									"src": "11220:248:19",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3576,
										"nodeType": "Block",
										"src": "11782:600:19",
										"statements": [
											{
												"assignments": [
													3499
												],
												"declarations": [
													{
														"constant": false,
														"id": 3499,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "11800:6:19",
														"nodeType": "VariableDeclaration",
														"scope": 3576,
														"src": "11792:14:19",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 3498,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "11792:7:19",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3501,
												"initialValue": {
													"hexValue": "30",
													"id": 3500,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "11809:1:19",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "11792:18:19"
											},
											{
												"id": 3573,
												"nodeType": "UncheckedBlock",
												"src": "11820:533:19",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3506,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3504,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3502,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3493,
																	"src": "11848:5:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "313238",
																	"id": 3503,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11857:3:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_128_by_1",
																		"typeString": "int_const 128"
																	},
																	"value": "128"
																},
																"src": "11848:12:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3505,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11863:1:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11848:16:19",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3516,
														"nodeType": "IfStatement",
														"src": "11844:98:19",
														"trueBody": {
															"id": 3515,
															"nodeType": "Block",
															"src": "11866:76:19",
															"statements": [
																{
																	"expression": {
																		"id": 3509,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3507,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3493,
																			"src": "11884:5:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "313238",
																			"id": 3508,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11894:3:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_128_by_1",
																				"typeString": "int_const 128"
																			},
																			"value": "128"
																		},
																		"src": "11884:13:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3510,
																	"nodeType": "ExpressionStatement",
																	"src": "11884:13:19"
																},
																{
																	"expression": {
																		"id": 3513,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3511,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3499,
																			"src": "11915:6:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 3512,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11925:2:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "11915:12:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3514,
																	"nodeType": "ExpressionStatement",
																	"src": "11915:12:19"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3521,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3519,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3517,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3493,
																	"src": "11959:5:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3634",
																	"id": 3518,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11968:2:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_64_by_1",
																		"typeString": "int_const 64"
																	},
																	"value": "64"
																},
																"src": "11959:11:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3520,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11973:1:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11959:15:19",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3531,
														"nodeType": "IfStatement",
														"src": "11955:95:19",
														"trueBody": {
															"id": 3530,
															"nodeType": "Block",
															"src": "11976:74:19",
															"statements": [
																{
																	"expression": {
																		"id": 3524,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3522,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3493,
																			"src": "11994:5:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3634",
																			"id": 3523,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12004:2:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_64_by_1",
																				"typeString": "int_const 64"
																			},
																			"value": "64"
																		},
																		"src": "11994:12:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3525,
																	"nodeType": "ExpressionStatement",
																	"src": "11994:12:19"
																},
																{
																	"expression": {
																		"id": 3528,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3526,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3499,
																			"src": "12024:6:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "38",
																			"id": 3527,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12034:1:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_8_by_1",
																				"typeString": "int_const 8"
																			},
																			"value": "8"
																		},
																		"src": "12024:11:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3529,
																	"nodeType": "ExpressionStatement",
																	"src": "12024:11:19"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3536,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3534,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3532,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3493,
																	"src": "12067:5:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3332",
																	"id": 3533,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12076:2:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_32_by_1",
																		"typeString": "int_const 32"
																	},
																	"value": "32"
																},
																"src": "12067:11:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3535,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "12081:1:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "12067:15:19",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3546,
														"nodeType": "IfStatement",
														"src": "12063:95:19",
														"trueBody": {
															"id": 3545,
															"nodeType": "Block",
															"src": "12084:74:19",
															"statements": [
																{
																	"expression": {
																		"id": 3539,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3537,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3493,
																			"src": "12102:5:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3332",
																			"id": 3538,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12112:2:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_32_by_1",
																				"typeString": "int_const 32"
																			},
																			"value": "32"
																		},
																		"src": "12102:12:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3540,
																	"nodeType": "ExpressionStatement",
																	"src": "12102:12:19"
																},
																{
																	"expression": {
																		"id": 3543,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3541,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3499,
																			"src": "12132:6:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "34",
																			"id": 3542,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12142:1:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_4_by_1",
																				"typeString": "int_const 4"
																			},
																			"value": "4"
																		},
																		"src": "12132:11:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3544,
																	"nodeType": "ExpressionStatement",
																	"src": "12132:11:19"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3551,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3549,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3547,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3493,
																	"src": "12175:5:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3136",
																	"id": 3548,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12184:2:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_16_by_1",
																		"typeString": "int_const 16"
																	},
																	"value": "16"
																},
																"src": "12175:11:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3550,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "12189:1:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "12175:15:19",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3561,
														"nodeType": "IfStatement",
														"src": "12171:95:19",
														"trueBody": {
															"id": 3560,
															"nodeType": "Block",
															"src": "12192:74:19",
															"statements": [
																{
																	"expression": {
																		"id": 3554,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3552,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3493,
																			"src": "12210:5:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 3553,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12220:2:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "12210:12:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3555,
																	"nodeType": "ExpressionStatement",
																	"src": "12210:12:19"
																},
																{
																	"expression": {
																		"id": 3558,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3556,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3499,
																			"src": "12240:6:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "32",
																			"id": 3557,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12250:1:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_2_by_1",
																				"typeString": "int_const 2"
																			},
																			"value": "2"
																		},
																		"src": "12240:11:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3559,
																	"nodeType": "ExpressionStatement",
																	"src": "12240:11:19"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3566,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3564,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3562,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3493,
																	"src": "12283:5:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "38",
																	"id": 3563,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12292:1:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_8_by_1",
																		"typeString": "int_const 8"
																	},
																	"value": "8"
																},
																"src": "12283:10:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3565,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "12296:1:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "12283:14:19",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3572,
														"nodeType": "IfStatement",
														"src": "12279:64:19",
														"trueBody": {
															"id": 3571,
															"nodeType": "Block",
															"src": "12299:44:19",
															"statements": [
																{
																	"expression": {
																		"id": 3569,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3567,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3499,
																			"src": "12317:6:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "31",
																			"id": 3568,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12327:1:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "12317:11:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3570,
																	"nodeType": "ExpressionStatement",
																	"src": "12317:11:19"
																}
															]
														}
													}
												]
											},
											{
												"expression": {
													"id": 3574,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 3499,
													"src": "12369:6:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 3497,
												"id": 3575,
												"nodeType": "Return",
												"src": "12362:13:19"
											}
										]
									},
									"documentation": {
										"id": 3491,
										"nodeType": "StructuredDocumentation",
										"src": "11474:240:19",
										"text": " @dev Return the log in base 256, rounded down, of a positive value.\n Returns 0 if given 0.\n Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string."
									},
									"id": 3577,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log256",
									"nameLocation": "11728:6:19",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3494,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3493,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "11743:5:19",
												"nodeType": "VariableDeclaration",
												"scope": 3577,
												"src": "11735:13:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3492,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11735:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11734:15:19"
									},
									"returnParameters": {
										"id": 3497,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3496,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3577,
												"src": "11773:7:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3495,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11773:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11772:9:19"
									},
									"scope": 3617,
									"src": "11719:663:19",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3615,
										"nodeType": "Block",
										"src": "12619:174:19",
										"statements": [
											{
												"id": 3614,
												"nodeType": "UncheckedBlock",
												"src": "12629:158:19",
												"statements": [
													{
														"assignments": [
															3589
														],
														"declarations": [
															{
																"constant": false,
																"id": 3589,
																"mutability": "mutable",
																"name": "result",
																"nameLocation": "12661:6:19",
																"nodeType": "VariableDeclaration",
																"scope": 3614,
																"src": "12653:14:19",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 3588,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "12653:7:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 3593,
														"initialValue": {
															"arguments": [
																{
																	"id": 3591,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3580,
																	"src": "12677:5:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 3590,
																"name": "log256",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	3577,
																	3616
																],
																"referencedDeclaration": 3577,
																"src": "12670:6:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256) pure returns (uint256)"
																}
															},
															"id": 3592,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "12670:13:19",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "12653:30:19"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3612,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3594,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3589,
																"src": "12704:6:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"components": [
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 3607,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"commonType": {
																					"typeIdentifier": "t_enum$_Rounding_$2758",
																					"typeString": "enum MathUpgradeable.Rounding"
																				},
																				"id": 3598,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 3595,
																					"name": "rounding",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3583,
																					"src": "12714:8:19",
																					"typeDescriptions": {
																						"typeIdentifier": "t_enum$_Rounding_$2758",
																						"typeString": "enum MathUpgradeable.Rounding"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "==",
																				"rightExpression": {
																					"expression": {
																						"id": 3596,
																						"name": "Rounding",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2758,
																						"src": "12726:8:19",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_enum$_Rounding_$2758_$",
																							"typeString": "type(enum MathUpgradeable.Rounding)"
																						}
																					},
																					"id": 3597,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"memberName": "Up",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 2756,
																					"src": "12726:11:19",
																					"typeDescriptions": {
																						"typeIdentifier": "t_enum$_Rounding_$2758",
																						"typeString": "enum MathUpgradeable.Rounding"
																					}
																				},
																				"src": "12714:23:19",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "&&",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 3606,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 3604,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"hexValue": "31",
																						"id": 3599,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "12741:1:19",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_1_by_1",
																							"typeString": "int_const 1"
																						},
																						"value": "1"
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "<<",
																					"rightExpression": {
																						"components": [
																							{
																								"commonType": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								},
																								"id": 3602,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"lValueRequested": false,
																								"leftExpression": {
																									"id": 3600,
																									"name": "result",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 3589,
																									"src": "12747:6:19",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"nodeType": "BinaryOperation",
																								"operator": "<<",
																								"rightExpression": {
																									"hexValue": "33",
																									"id": 3601,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"kind": "number",
																									"lValueRequested": false,
																									"nodeType": "Literal",
																									"src": "12757:1:19",
																									"typeDescriptions": {
																										"typeIdentifier": "t_rational_3_by_1",
																										"typeString": "int_const 3"
																									},
																									"value": "3"
																								},
																								"src": "12747:11:19",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							}
																						],
																						"id": 3603,
																						"isConstant": false,
																						"isInlineArray": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"nodeType": "TupleExpression",
																						"src": "12746:13:19",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "12741:18:19",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 3605,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3580,
																					"src": "12762:5:19",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "12741:26:19",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "12714:53:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"hexValue": "30",
																			"id": 3609,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12774:1:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"id": 3610,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "12714:61:19",
																		"trueExpression": {
																			"hexValue": "31",
																			"id": 3608,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12770:1:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"id": 3611,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "12713:63:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"src": "12704:72:19",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 3587,
														"id": 3613,
														"nodeType": "Return",
														"src": "12697:79:19"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 3578,
										"nodeType": "StructuredDocumentation",
										"src": "12388:144:19",
										"text": " @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."
									},
									"id": 3616,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log256",
									"nameLocation": "12546:6:19",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3584,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3580,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "12561:5:19",
												"nodeType": "VariableDeclaration",
												"scope": 3616,
												"src": "12553:13:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3579,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12553:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3583,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "12577:8:19",
												"nodeType": "VariableDeclaration",
												"scope": 3616,
												"src": "12568:17:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$2758",
													"typeString": "enum MathUpgradeable.Rounding"
												},
												"typeName": {
													"id": 3582,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3581,
														"name": "Rounding",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2758,
														"src": "12568:8:19"
													},
													"referencedDeclaration": 2758,
													"src": "12568:8:19",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$2758",
														"typeString": "enum MathUpgradeable.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12552:34:19"
									},
									"returnParameters": {
										"id": 3587,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3586,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3616,
												"src": "12610:7:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3585,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12610:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12609:9:19"
									},
									"scope": 3617,
									"src": "12537:256:19",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 3618,
							"src": "202:12593:19",
							"usedErrors": []
						}
					],
					"src": "103:12693:19"
				},
				"id": 19
			},
			"@openzeppelin/contracts-upgradeable@4.9.2/utils/math/SignedMathUpgradeable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable@4.9.2/utils/math/SignedMathUpgradeable.sol",
					"exportedSymbols": {
						"SignedMathUpgradeable": [
							3722
						]
					},
					"id": 3723,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 3619,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "109:23:20"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "SignedMathUpgradeable",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 3620,
								"nodeType": "StructuredDocumentation",
								"src": "134:80:20",
								"text": " @dev Standard signed math utilities missing in the Solidity language."
							},
							"fullyImplemented": true,
							"id": 3722,
							"linearizedBaseContracts": [
								3722
							],
							"name": "SignedMathUpgradeable",
							"nameLocation": "223:21:20",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 3637,
										"nodeType": "Block",
										"src": "386:37:20",
										"statements": [
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														},
														"id": 3632,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 3630,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3623,
															"src": "403:1:20",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"id": 3631,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3625,
															"src": "407:1:20",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"src": "403:5:20",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"id": 3634,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3625,
														"src": "415:1:20",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"id": 3635,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "403:13:20",
													"trueExpression": {
														"id": 3633,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3623,
														"src": "411:1:20",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"functionReturnParameters": 3629,
												"id": 3636,
												"nodeType": "Return",
												"src": "396:20:20"
											}
										]
									},
									"documentation": {
										"id": 3621,
										"nodeType": "StructuredDocumentation",
										"src": "251:66:20",
										"text": " @dev Returns the largest of two signed numbers."
									},
									"id": 3638,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "max",
									"nameLocation": "331:3:20",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3626,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3623,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "342:1:20",
												"nodeType": "VariableDeclaration",
												"scope": 3638,
												"src": "335:8:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3622,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "335:6:20",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3625,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "352:1:20",
												"nodeType": "VariableDeclaration",
												"scope": 3638,
												"src": "345:8:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3624,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "345:6:20",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "334:20:20"
									},
									"returnParameters": {
										"id": 3629,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3628,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3638,
												"src": "378:6:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3627,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "378:6:20",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "377:8:20"
									},
									"scope": 3722,
									"src": "322:101:20",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3655,
										"nodeType": "Block",
										"src": "565:37:20",
										"statements": [
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														},
														"id": 3650,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 3648,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3641,
															"src": "582:1:20",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "<",
														"rightExpression": {
															"id": 3649,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3643,
															"src": "586:1:20",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"src": "582:5:20",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"id": 3652,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3643,
														"src": "594:1:20",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"id": 3653,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "582:13:20",
													"trueExpression": {
														"id": 3651,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3641,
														"src": "590:1:20",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"functionReturnParameters": 3647,
												"id": 3654,
												"nodeType": "Return",
												"src": "575:20:20"
											}
										]
									},
									"documentation": {
										"id": 3639,
										"nodeType": "StructuredDocumentation",
										"src": "429:67:20",
										"text": " @dev Returns the smallest of two signed numbers."
									},
									"id": 3656,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "min",
									"nameLocation": "510:3:20",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3644,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3641,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "521:1:20",
												"nodeType": "VariableDeclaration",
												"scope": 3656,
												"src": "514:8:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3640,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "514:6:20",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3643,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "531:1:20",
												"nodeType": "VariableDeclaration",
												"scope": 3656,
												"src": "524:8:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3642,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "524:6:20",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "513:20:20"
									},
									"returnParameters": {
										"id": 3647,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3646,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3656,
												"src": "557:6:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3645,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "557:6:20",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "556:8:20"
									},
									"scope": 3722,
									"src": "501:101:20",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3699,
										"nodeType": "Block",
										"src": "807:162:20",
										"statements": [
											{
												"assignments": [
													3667
												],
												"declarations": [
													{
														"constant": false,
														"id": 3667,
														"mutability": "mutable",
														"name": "x",
														"nameLocation": "876:1:20",
														"nodeType": "VariableDeclaration",
														"scope": 3699,
														"src": "869:8:20",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														},
														"typeName": {
															"id": 3666,
															"name": "int256",
															"nodeType": "ElementaryTypeName",
															"src": "869:6:20",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3680,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													},
													"id": 3679,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																},
																"id": 3670,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3668,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3659,
																	"src": "881:1:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "&",
																"rightExpression": {
																	"id": 3669,
																	"name": "b",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3661,
																	"src": "885:1:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"src": "881:5:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															}
														],
														"id": 3671,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "880:7:20",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																},
																"id": 3677,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			},
																			"id": 3674,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 3672,
																				"name": "a",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3659,
																				"src": "892:1:20",
																				"typeDescriptions": {
																					"typeIdentifier": "t_int256",
																					"typeString": "int256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "^",
																			"rightExpression": {
																				"id": 3673,
																				"name": "b",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3661,
																				"src": "896:1:20",
																				"typeDescriptions": {
																					"typeIdentifier": "t_int256",
																					"typeString": "int256"
																				}
																			},
																			"src": "892:5:20",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		}
																	],
																	"id": 3675,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "891:7:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 3676,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "902:1:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "891:12:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															}
														],
														"id": 3678,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "890:14:20",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"src": "880:24:20",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "869:35:20"
											},
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													},
													"id": 3697,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 3681,
														"name": "x",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3667,
														"src": "921:1:20",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																},
																"id": 3695,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"arguments": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 3689,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"arguments": [
																					{
																						"id": 3686,
																						"name": "x",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 3667,
																						"src": "941:1:20",
																						"typeDescriptions": {
																							"typeIdentifier": "t_int256",
																							"typeString": "int256"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_int256",
																							"typeString": "int256"
																						}
																					],
																					"id": 3685,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "ElementaryTypeNameExpression",
																					"src": "933:7:20",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_uint256_$",
																						"typeString": "type(uint256)"
																					},
																					"typeName": {
																						"id": 3684,
																						"name": "uint256",
																						"nodeType": "ElementaryTypeName",
																						"src": "933:7:20",
																						"typeDescriptions": {}
																					}
																				},
																				"id": 3687,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "typeConversion",
																				"lValueRequested": false,
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "933:10:20",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": ">>",
																			"rightExpression": {
																				"hexValue": "323535",
																				"id": 3688,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "947:3:20",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_255_by_1",
																					"typeString": "int_const 255"
																				},
																				"value": "255"
																			},
																			"src": "933:17:20",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"id": 3683,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "926:6:20",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_int256_$",
																			"typeString": "type(int256)"
																		},
																		"typeName": {
																			"id": 3682,
																			"name": "int256",
																			"nodeType": "ElementaryTypeName",
																			"src": "926:6:20",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 3690,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "926:25:20",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "&",
																"rightExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			},
																			"id": 3693,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 3691,
																				"name": "a",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3659,
																				"src": "955:1:20",
																				"typeDescriptions": {
																					"typeIdentifier": "t_int256",
																					"typeString": "int256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "^",
																			"rightExpression": {
																				"id": 3692,
																				"name": "b",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3661,
																				"src": "959:1:20",
																				"typeDescriptions": {
																					"typeIdentifier": "t_int256",
																					"typeString": "int256"
																				}
																			},
																			"src": "955:5:20",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		}
																	],
																	"id": 3694,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "954:7:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"src": "926:35:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															}
														],
														"id": 3696,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "925:37:20",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"src": "921:41:20",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"functionReturnParameters": 3665,
												"id": 3698,
												"nodeType": "Return",
												"src": "914:48:20"
											}
										]
									},
									"documentation": {
										"id": 3657,
										"nodeType": "StructuredDocumentation",
										"src": "608:126:20",
										"text": " @dev Returns the average of two signed numbers without overflow.\n The result is rounded towards zero."
									},
									"id": 3700,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "average",
									"nameLocation": "748:7:20",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3662,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3659,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "763:1:20",
												"nodeType": "VariableDeclaration",
												"scope": 3700,
												"src": "756:8:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3658,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "756:6:20",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3661,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "773:1:20",
												"nodeType": "VariableDeclaration",
												"scope": 3700,
												"src": "766:8:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3660,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "766:6:20",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "755:20:20"
									},
									"returnParameters": {
										"id": 3665,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3664,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3700,
												"src": "799:6:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3663,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "799:6:20",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "798:8:20"
									},
									"scope": 3722,
									"src": "739:230:20",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3720,
										"nodeType": "Block",
										"src": "1113:158:20",
										"statements": [
											{
												"id": 3719,
												"nodeType": "UncheckedBlock",
												"src": "1123:142:20",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"condition": {
																		"commonType": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		},
																		"id": 3712,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 3710,
																			"name": "n",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3703,
																			"src": "1238:1:20",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": ">=",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 3711,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1243:1:20",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "1238:6:20",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"falseExpression": {
																		"id": 3715,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "UnaryOperation",
																		"operator": "-",
																		"prefix": true,
																		"src": "1251:2:20",
																		"subExpression": {
																			"id": 3714,
																			"name": "n",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3703,
																			"src": "1252:1:20",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		}
																	},
																	"id": 3716,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "Conditional",
																	"src": "1238:15:20",
																	"trueExpression": {
																		"id": 3713,
																		"name": "n",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3703,
																		"src": "1247:1:20",
																		"typeDescriptions": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		}
																	},
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																],
																"id": 3709,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1230:7:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_uint256_$",
																	"typeString": "type(uint256)"
																},
																"typeName": {
																	"id": 3708,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "1230:7:20",
																	"typeDescriptions": {}
																}
															},
															"id": 3717,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1230:24:20",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 3707,
														"id": 3718,
														"nodeType": "Return",
														"src": "1223:31:20"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 3701,
										"nodeType": "StructuredDocumentation",
										"src": "975:78:20",
										"text": " @dev Returns the absolute unsigned value of a signed value."
									},
									"id": 3721,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "abs",
									"nameLocation": "1067:3:20",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3704,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3703,
												"mutability": "mutable",
												"name": "n",
												"nameLocation": "1078:1:20",
												"nodeType": "VariableDeclaration",
												"scope": 3721,
												"src": "1071:8:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3702,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "1071:6:20",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1070:10:20"
									},
									"returnParameters": {
										"id": 3707,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3706,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3721,
												"src": "1104:7:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3705,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1104:7:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1103:9:20"
									},
									"scope": 3722,
									"src": "1058:213:20",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 3723,
							"src": "215:1058:20",
							"usedErrors": []
						}
					],
					"src": "109:1165:20"
				},
				"id": 20
			},
			"PAXX.sol": {
				"ast": {
					"absolutePath": "PAXX.sol",
					"exportedSymbols": {
						"AccessControlUpgradeable": [
							335
						],
						"AddressUpgradeable": [
							2314
						],
						"ContextUpgradeable": [
							2356
						],
						"ERC165Upgradeable": [
							2739
						],
						"ERC1967UpgradeUpgradeable": [
							763
						],
						"ERC20BurnableUpgradeable": [
							1959
						],
						"ERC20Upgradeable": [
							1817
						],
						"IAccessControlUpgradeable": [
							408
						],
						"IBeaconUpgradeable": [
							773
						],
						"IERC165Upgradeable": [
							2751
						],
						"IERC1822ProxiableUpgradeable": [
							439
						],
						"IERC1967Upgradeable": [
							429
						],
						"IERC20MetadataUpgradeable": [
							1984
						],
						"IERC20Upgradeable": [
							1895
						],
						"Initializable": [
							942
						],
						"MathUpgradeable": [
							3617
						],
						"PRAXXIS": [
							3866
						],
						"PausableUpgradeable": [
							1205
						],
						"SignedMathUpgradeable": [
							3722
						],
						"StorageSlotUpgradeable": [
							2466
						],
						"StringsUpgradeable": [
							2695
						],
						"UUPSUpgradeable": [
							1078
						]
					},
					"id": 3867,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 3724,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".9"
							],
							"nodeType": "PragmaDirective",
							"src": "32:23:21"
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol",
							"file": "@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/ERC20Upgradeable.sol",
							"id": 3725,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 3867,
							"sourceUnit": 1818,
							"src": "57:84:21",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/extensions/ERC20BurnableUpgradeable.sol",
							"file": "@openzeppelin/contracts-upgradeable@4.9.2/token/ERC20/extensions/ERC20BurnableUpgradeable.sol",
							"id": 3726,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 3867,
							"sourceUnit": 1960,
							"src": "142:103:21",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable@4.9.2/security/PausableUpgradeable.sol",
							"file": "@openzeppelin/contracts-upgradeable@4.9.2/security/PausableUpgradeable.sol",
							"id": 3727,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 3867,
							"sourceUnit": 1206,
							"src": "246:84:21",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol",
							"file": "@openzeppelin/contracts-upgradeable@4.9.2/access/AccessControlUpgradeable.sol",
							"id": 3728,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 3867,
							"sourceUnit": 336,
							"src": "331:87:21",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/Initializable.sol",
							"file": "@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/Initializable.sol",
							"id": 3729,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 3867,
							"sourceUnit": 943,
							"src": "419:81:21",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/UUPSUpgradeable.sol",
							"file": "@openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/UUPSUpgradeable.sol",
							"id": 3730,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 3867,
							"sourceUnit": 1079,
							"src": "501:83:21",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 3732,
										"name": "Initializable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 942,
										"src": "654:13:21"
									},
									"id": 3733,
									"nodeType": "InheritanceSpecifier",
									"src": "654:13:21"
								},
								{
									"baseName": {
										"id": 3734,
										"name": "ERC20Upgradeable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1817,
										"src": "669:16:21"
									},
									"id": 3735,
									"nodeType": "InheritanceSpecifier",
									"src": "669:16:21"
								},
								{
									"baseName": {
										"id": 3736,
										"name": "ERC20BurnableUpgradeable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1959,
										"src": "687:24:21"
									},
									"id": 3737,
									"nodeType": "InheritanceSpecifier",
									"src": "687:24:21"
								},
								{
									"baseName": {
										"id": 3738,
										"name": "PausableUpgradeable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1205,
										"src": "713:19:21"
									},
									"id": 3739,
									"nodeType": "InheritanceSpecifier",
									"src": "713:19:21"
								},
								{
									"baseName": {
										"id": 3740,
										"name": "AccessControlUpgradeable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 335,
										"src": "734:24:21"
									},
									"id": 3741,
									"nodeType": "InheritanceSpecifier",
									"src": "734:24:21"
								},
								{
									"baseName": {
										"id": 3742,
										"name": "UUPSUpgradeable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1078,
										"src": "760:15:21"
									},
									"id": 3743,
									"nodeType": "InheritanceSpecifier",
									"src": "760:15:21"
								}
							],
							"canonicalName": "PRAXXIS",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 3731,
								"nodeType": "StructuredDocumentation",
								"src": "586:48:21",
								"text": "@custom:security-contact sec@arcadia.global"
							},
							"fullyImplemented": true,
							"id": 3866,
							"linearizedBaseContracts": [
								3866,
								1078,
								763,
								429,
								439,
								335,
								2739,
								2751,
								408,
								1205,
								1959,
								1817,
								1984,
								1895,
								2356,
								942
							],
							"name": "PRAXXIS",
							"nameLocation": "643:7:21",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"functionSelector": "e63ab1e9",
									"id": 3748,
									"mutability": "constant",
									"name": "PAUSER_ROLE",
									"nameLocation": "806:11:21",
									"nodeType": "VariableDeclaration",
									"scope": 3866,
									"src": "782:62:21",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 3744,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "782:7:21",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"value": {
										"arguments": [
											{
												"hexValue": "5041555345525f524f4c45",
												"id": 3746,
												"isConstant": false,
												"isLValue": false,
												"isPure": true,
												"kind": "string",
												"lValueRequested": false,
												"nodeType": "Literal",
												"src": "830:13:21",
												"typeDescriptions": {
													"typeIdentifier": "t_stringliteral_65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a",
													"typeString": "literal_string \"PAUSER_ROLE\""
												},
												"value": "PAUSER_ROLE"
											}
										],
										"expression": {
											"argumentTypes": [
												{
													"typeIdentifier": "t_stringliteral_65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a",
													"typeString": "literal_string \"PAUSER_ROLE\""
												}
											],
											"id": 3745,
											"name": "keccak256",
											"nodeType": "Identifier",
											"overloadedDeclarations": [],
											"referencedDeclaration": 4294967288,
											"src": "820:9:21",
											"typeDescriptions": {
												"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
												"typeString": "function (bytes memory) pure returns (bytes32)"
											}
										},
										"id": 3747,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "functionCall",
										"lValueRequested": false,
										"names": [],
										"nodeType": "FunctionCall",
										"src": "820:24:21",
										"tryCall": false,
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "public"
								},
								{
									"constant": true,
									"functionSelector": "f72c0d8b",
									"id": 3753,
									"mutability": "constant",
									"name": "UPGRADER_ROLE",
									"nameLocation": "874:13:21",
									"nodeType": "VariableDeclaration",
									"scope": 3866,
									"src": "850:66:21",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 3749,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "850:7:21",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"value": {
										"arguments": [
											{
												"hexValue": "55504752414445525f524f4c45",
												"id": 3751,
												"isConstant": false,
												"isLValue": false,
												"isPure": true,
												"kind": "string",
												"lValueRequested": false,
												"nodeType": "Literal",
												"src": "900:15:21",
												"typeDescriptions": {
													"typeIdentifier": "t_stringliteral_189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e3",
													"typeString": "literal_string \"UPGRADER_ROLE\""
												},
												"value": "UPGRADER_ROLE"
											}
										],
										"expression": {
											"argumentTypes": [
												{
													"typeIdentifier": "t_stringliteral_189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e3",
													"typeString": "literal_string \"UPGRADER_ROLE\""
												}
											],
											"id": 3750,
											"name": "keccak256",
											"nodeType": "Identifier",
											"overloadedDeclarations": [],
											"referencedDeclaration": 4294967288,
											"src": "890:9:21",
											"typeDescriptions": {
												"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
												"typeString": "function (bytes memory) pure returns (bytes32)"
											}
										},
										"id": 3752,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "functionCall",
										"lValueRequested": false,
										"names": [],
										"nodeType": "FunctionCall",
										"src": "890:26:21",
										"tryCall": false,
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "public"
								},
								{
									"body": {
										"id": 3760,
										"nodeType": "Block",
										"src": "989:39:21",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 3757,
														"name": "_disableInitializers",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 923,
														"src": "999:20:21",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 3758,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "999:22:21",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3759,
												"nodeType": "ExpressionStatement",
												"src": "999:22:21"
											}
										]
									},
									"documentation": {
										"id": 3754,
										"nodeType": "StructuredDocumentation",
										"src": "922:48:21",
										"text": "@custom:oz-upgrades-unsafe-allow constructor"
									},
									"id": 3761,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3755,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "986:2:21"
									},
									"returnParameters": {
										"id": 3756,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "989:0:21"
									},
									"scope": 3866,
									"src": "975:53:21",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 3813,
										"nodeType": "Block",
										"src": "1181:376:21",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"hexValue": "50524158584953",
															"id": 3768,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1204:9:21",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_04da9fe0239315a6f131fc48e305abcdaaaf9cf827fd3ca540e5d779180a41ff",
																"typeString": "literal_string \"PRAXXIS\""
															},
															"value": "PRAXXIS"
														},
														{
															"hexValue": "50415858",
															"id": 3769,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1215:6:21",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_8429447053e457e3737cf8f24b0a5f69a00f8a28e36934643a2ec602a789711b",
																"typeString": "literal_string \"PAXX\""
															},
															"value": "PAXX"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_stringliteral_04da9fe0239315a6f131fc48e305abcdaaaf9cf827fd3ca540e5d779180a41ff",
																"typeString": "literal_string \"PRAXXIS\""
															},
															{
																"typeIdentifier": "t_stringliteral_8429447053e457e3737cf8f24b0a5f69a00f8a28e36934643a2ec602a789711b",
																"typeString": "literal_string \"PAXX\""
															}
														],
														"id": 3767,
														"name": "__ERC20_init",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1252,
														"src": "1191:12:21",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (string memory,string memory)"
														}
													},
													"id": 3770,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1191:31:21",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3771,
												"nodeType": "ExpressionStatement",
												"src": "1191:31:21"
											},
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 3772,
														"name": "__ERC20Burnable_init",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1913,
														"src": "1232:20:21",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 3773,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1232:22:21",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3774,
												"nodeType": "ExpressionStatement",
												"src": "1232:22:21"
											},
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 3775,
														"name": "__Pausable_init",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1109,
														"src": "1264:15:21",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 3776,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1264:17:21",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3777,
												"nodeType": "ExpressionStatement",
												"src": "1264:17:21"
											},
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 3778,
														"name": "__AccessControl_init",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 21,
														"src": "1291:20:21",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 3779,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1291:22:21",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3780,
												"nodeType": "ExpressionStatement",
												"src": "1291:22:21"
											},
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 3781,
														"name": "__UUPSUpgradeable_init",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 960,
														"src": "1323:22:21",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 3782,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1323:24:21",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3783,
												"nodeType": "ExpressionStatement",
												"src": "1323:24:21"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 3785,
															"name": "DEFAULT_ADMIN_ROLE",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 42,
															"src": "1369:18:21",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"expression": {
																"id": 3786,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "1389:3:21",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 3787,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "1389:10:21",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 3784,
														"name": "_grantRole",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 298,
														"src": "1358:10:21",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$",
															"typeString": "function (bytes32,address)"
														}
													},
													"id": 3788,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1358:42:21",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3789,
												"nodeType": "ExpressionStatement",
												"src": "1358:42:21"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 3791,
															"name": "PAUSER_ROLE",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3748,
															"src": "1421:11:21",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"expression": {
																"id": 3792,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "1434:3:21",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 3793,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "1434:10:21",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 3790,
														"name": "_grantRole",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 298,
														"src": "1410:10:21",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$",
															"typeString": "function (bytes32,address)"
														}
													},
													"id": 3794,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1410:35:21",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3795,
												"nodeType": "ExpressionStatement",
												"src": "1410:35:21"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 3797,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "1461:3:21",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 3798,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "1461:10:21",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3804,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"hexValue": "31303030303030303030",
																"id": 3799,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1473:10:21",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1000000000_by_1",
																	"typeString": "int_const 1000000000"
																},
																"value": "1000000000"
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3803,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 3800,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1486:2:21",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"arguments": [],
																	"expression": {
																		"argumentTypes": [],
																		"id": 3801,
																		"name": "decimals",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1300,
																		"src": "1492:8:21",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$__$returns$_t_uint8_$",
																			"typeString": "function () view returns (uint8)"
																		}
																	},
																	"id": 3802,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "1492:10:21",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"src": "1486:16:21",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1473:29:21",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 3796,
														"name": "_mint",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1629,
														"src": "1455:5:21",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 3805,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1455:48:21",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3806,
												"nodeType": "ExpressionStatement",
												"src": "1455:48:21"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 3808,
															"name": "UPGRADER_ROLE",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3753,
															"src": "1524:13:21",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"expression": {
																"id": 3809,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "1539:3:21",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 3810,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "1539:10:21",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 3807,
														"name": "_grantRole",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 298,
														"src": "1513:10:21",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$",
															"typeString": "function (bytes32,address)"
														}
													},
													"id": 3811,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1513:37:21",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3812,
												"nodeType": "ExpressionStatement",
												"src": "1513:37:21"
											}
										]
									},
									"documentation": {
										"id": 3762,
										"nodeType": "StructuredDocumentation",
										"src": "1033:102:21",
										"text": "\"In Ancient Greek the word praxis (πρᾶξις) referred to activity engaged in by free people.\""
									},
									"functionSelector": "8129fc1c",
									"id": 3814,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 3765,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 3764,
												"name": "initializer",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 844,
												"src": "1162:11:21"
											},
											"nodeType": "ModifierInvocation",
											"src": "1162:11:21"
										}
									],
									"name": "initialize",
									"nameLocation": "1149:10:21",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3763,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1159:2:21"
									},
									"returnParameters": {
										"id": 3766,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1181:0:21"
									},
									"scope": 3866,
									"src": "1140:417:21",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 3823,
										"nodeType": "Block",
										"src": "1609:25:21",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 3820,
														"name": "_pause",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1183,
														"src": "1619:6:21",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 3821,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1619:8:21",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3822,
												"nodeType": "ExpressionStatement",
												"src": "1619:8:21"
											}
										]
									},
									"functionSelector": "8456cb59",
									"id": 3824,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"arguments": [
												{
													"id": 3817,
													"name": "PAUSER_ROLE",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 3748,
													"src": "1596:11:21",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												}
											],
											"id": 3818,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 3816,
												"name": "onlyRole",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 53,
												"src": "1587:8:21"
											},
											"nodeType": "ModifierInvocation",
											"src": "1587:21:21"
										}
									],
									"name": "pause",
									"nameLocation": "1572:5:21",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3815,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1577:2:21"
									},
									"returnParameters": {
										"id": 3819,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1609:0:21"
									},
									"scope": 3866,
									"src": "1563:71:21",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 3833,
										"nodeType": "Block",
										"src": "1688:27:21",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 3830,
														"name": "_unpause",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1199,
														"src": "1698:8:21",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 3831,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1698:10:21",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3832,
												"nodeType": "ExpressionStatement",
												"src": "1698:10:21"
											}
										]
									},
									"functionSelector": "3f4ba83a",
									"id": 3834,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"arguments": [
												{
													"id": 3827,
													"name": "PAUSER_ROLE",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 3748,
													"src": "1675:11:21",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												}
											],
											"id": 3828,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 3826,
												"name": "onlyRole",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 53,
												"src": "1666:8:21"
											},
											"nodeType": "ModifierInvocation",
											"src": "1666:21:21"
										}
									],
									"name": "unpause",
									"nameLocation": "1649:7:21",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3825,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1656:2:21"
									},
									"returnParameters": {
										"id": 3829,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1688:0:21"
									},
									"scope": 3866,
									"src": "1640:75:21",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1800
									],
									"body": {
										"id": 3854,
										"nodeType": "Block",
										"src": "1853:61:21",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 3849,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3836,
															"src": "1890:4:21",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 3850,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3838,
															"src": "1896:2:21",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 3851,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3840,
															"src": "1900:6:21",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 3846,
															"name": "super",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967271,
															"src": "1863:5:21",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_super$_PRAXXIS_$3866_$",
																"typeString": "type(contract super PRAXXIS)"
															}
														},
														"id": 3848,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "_beforeTokenTransfer",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1800,
														"src": "1863:26:21",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 3852,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1863:44:21",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3853,
												"nodeType": "ExpressionStatement",
												"src": "1863:44:21"
											}
										]
									},
									"id": 3855,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 3843,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 3842,
												"name": "whenNotPaused",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1127,
												"src": "1818:13:21"
											},
											"nodeType": "ModifierInvocation",
											"src": "1818:13:21"
										}
									],
									"name": "_beforeTokenTransfer",
									"nameLocation": "1730:20:21",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 3844,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "1840:8:21"
									},
									"parameters": {
										"id": 3841,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3836,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "1759:4:21",
												"nodeType": "VariableDeclaration",
												"scope": 3855,
												"src": "1751:12:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3835,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1751:7:21",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3838,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1773:2:21",
												"nodeType": "VariableDeclaration",
												"scope": 3855,
												"src": "1765:10:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3837,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1765:7:21",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3840,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "1785:6:21",
												"nodeType": "VariableDeclaration",
												"scope": 3855,
												"src": "1777:14:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3839,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1777:7:21",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1750:42:21"
									},
									"returnParameters": {
										"id": 3845,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1853:0:21"
									},
									"scope": 3866,
									"src": "1721:193:21",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										1072
									],
									"body": {
										"id": 3864,
										"nodeType": "Block",
										"src": "2044:2:21",
										"statements": []
									},
									"id": 3865,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"arguments": [
												{
													"id": 3860,
													"name": "UPGRADER_ROLE",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 3753,
													"src": "2008:13:21",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												}
											],
											"id": 3861,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 3859,
												"name": "onlyRole",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 53,
												"src": "1999:8:21"
											},
											"nodeType": "ModifierInvocation",
											"src": "1999:23:21"
										}
									],
									"name": "_authorizeUpgrade",
									"nameLocation": "1929:17:21",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 3862,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "2031:8:21"
									},
									"parameters": {
										"id": 3858,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3857,
												"mutability": "mutable",
												"name": "newImplementation",
												"nameLocation": "1955:17:21",
												"nodeType": "VariableDeclaration",
												"scope": 3865,
												"src": "1947:25:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3856,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1947:7:21",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1946:27:21"
									},
									"returnParameters": {
										"id": 3863,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2044:0:21"
									},
									"scope": 3866,
									"src": "1920:126:21",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 3867,
							"src": "634:1414:21",
							"usedErrors": []
						}
					],
					"src": "32:2016:21"
				},
				"id": 21
			}
		}
	}
}